package com.dw.bgp.sijbjpt.cxtj.sicp3.ad.ryxx;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Blob;
import java.util.Date;
import java.util.HashMap;
import java.util.regex.Pattern;

import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.alibaba.fastjson.JSONObject;
import com.dareway.apps.process.util.ProcessUtil;
import com.dareway.framework.common.GlobalNames;
import com.dareway.framework.enviromentUtil.EnvironmentParaUtil;
import com.dareway.framework.exception.ASOException;
import com.dareway.framework.exception.AppException;
import com.dareway.framework.exception.BusinessException;
import com.dareway.framework.smartPrinter.DataStoreLoader;
import com.dareway.framework.smartPrinter.SPrinter;
import com.dareway.framework.sms.SmsUtil;
import com.dareway.framework.taglib.lanePrompt.LanePromptUtil;
import com.dareway.framework.taglib.sprompt.SPrompt;
import com.dareway.framework.taglib.sprompt.SPromptUtil;
import com.dareway.framework.util.DataFormat;
import com.dareway.framework.util.DataObject;
import com.dareway.framework.util.DataStore;
import com.dareway.framework.util.DateUtil;
import com.dareway.framework.util.ExcelTool;
import com.dareway.framework.util.MathUtil;
import com.dareway.framework.util.SecUtil;
import com.dareway.framework.util.StringUtil;
import com.dareway.framework.util.database.Transaction;
import com.dareway.framework.util.database.TransactionManager;
import com.dareway.framework.workFlow.ACO;
import com.dareway.framework.workFlow.ASO;
import com.dareway.framework.workFlow.BPO;
import com.dareway.framework.workFlow.SACO;
import com.dareway.framework.workFlow.UTO;
import com.dareway.lesb.serviceclient.LocalServiceClient;
import com.dw.acc.bs3.sc.service.GetCardInfoStdSACO;
import com.dw.acc.sicp3.ad.per.exam.DoCalcDyMxInfoACO;
import com.dw.acc.sicp3.ad.per.exam.GetAvgSalary4JfACO;
import com.dw.acc.sicp3.ad.per.exam.GetNxInfo4ZzACO;
import com.dw.acc.sicp3.ad.per.natl.DoAdPutAdPerCmplASO;
import com.dw.acc.sicp3.md.onlinesettle.JsonUtil;
import com.dw.bgp.sijbjpt.cxtj.sicp3.bi.LCHJInvokService;
import com.dw.pub.HsuTools;
import com.dw.pub.auth3.Auth3Tools;
import com.dw.pub.jjcw.SM4Utils;
import com.dw.pub.sicp3.ad.AdTools;
import com.dw.pub.sicp3.si.SiTools;
import com.dw.service.cbs.sicp3.ad.rsjk.AdXbfjfyljRsjkSIO;
import com.dw.service.sicp3.ad.szjmrz.invoke.soft.service.impl.SghsMethodInvokBPO;
import com.dw.sys.model.ModelBPO;
import com.dw.vap.per.PerSgxxxBPO;
import com.dw.vap.per.sicp3.si.cap.PerDeclVAPBPO;
import com.dw.ws.sicp3.ad.per.adtxdyhd.AdQytxsqbscUTO;
import com.dw.ws.sicp3.ad.treatment.adtxswdyzf.AdTxswdyzfDyzzUTO;
import com.dw.ws.sicp3.si.per.sizzswhd.SiQyZzzgycxzfUTO;
import com.sep.areport.fquery.QueryLogTool;

import jxl.Sheet;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

/**
 * 类描述.人员信息查询BPO
 * 
 * @author changt 2014年12月29日
 */
public class RyxxCxtjBPO extends BPO{
	SACO iGetCardInfoStdSACO = this.newSACO(GetCardInfoStdSACO.class); // 查询社保卡信息
	private ASO iDoAdPutAdPerCmplASO = this.newASO(DoAdPutAdPerCmplASO.class);
	private BPO iModelBPO = this.newBPO(ModelBPO.class);
	private ACO iGetAvgSalary4JfACO = this.newACO(GetAvgSalary4JfACO.class); // 改为用这个ACO查询社平工资 sjx 2020-06-18
	private ACO iDoCalcDyMxInfoACO = this.newACO(DoCalcDyMxInfoACO.class); //计算待遇明细ACO
	private ACO iGetNxInfo4ZzACO = this.newACO(GetNxInfo4ZzACO.class);

	/**
	 * 方法简介.跳转到拨付人员明细查询的JSP之前查询相关信息
	 * 
	 * @author 韦超 2014-12-30
	 */
	public DataObject fwdBfryMxQuery(final DataObject para) throws Exception {
		String rq, ny;
		DataStore ds = new DataStore(), dsBtbh = new DataStore();
		DataObject rdo = new DataObject();
		DataStore dsBcxmbh = new DataStore();
		DataStore dsSwry = new DataStore();
		rq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM-dd");
		ny = rq.substring(0, 7);
		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		
		rdo.put("dsjbjg", ds);
		rdo.put("rq", rq);
		rdo.put("ny", ny);
		rdo.put("dsbtbh", dsBtbh);
		rdo.put("dsbcxmbh", dsBcxmbh);
		rdo.put("dsSwry", dsSwry);  //增加死亡人员ds  张凯杰  add  2017/12/14
		return rdo;
	}
   
	/**
	 * 方法简介.根据录入的信息查询拨付人员明细
	 * 
	 * @author 韦超 2014-12-30
	 */
	public DataObject queryBfryMxInfo(final DataObject para) throws Exception {
		String dfjglb, dfjgid, dwxz, zfrylb, zyjszwjb, gjzyzgdj, xzzw, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny;
		String dwdjid, dwbh, dwmc, dwxzTemp, ryid, jgsygzlx, sydwgrgw;
		String bcxmbh, bcxmz, dmlx;// 补充项目编号、名称、补充项目值
		DataStore ds, dsDw, dsBtbh, dsBtbhYear, dsBtje;
		DataStore dsMxInfo = new DataStore();
		DataStore dsBcxmbh, dsBcxx;// 机构内配置的补充项目,个人的补充项目
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String sqlMxInfo, sqlQtbt, sqlBcxm, sqlPjzs, sqlBtjeOld, sqlBtjeNew;
		int count;
		double btje, pjzs;
		String btbh, bhList, btmc, bcxmList;
		String btbhs, dyffzt, brcqshd, ffqsnd;
		DataStore dsTemp;
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);		

		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		dfjglb = para.getString("fdfjglb");
		dfjgid = para.getString("fdfjgid");
		dwxz = para.getString("dwxz");
		zfrylb = para.getString("zfrylb");
		zyjszwjb = para.getString("zyjszwjb");
		gjzyzgdj = para.getString("gjzyzgdj");
		sydwgrgw = para.getString("sydwgrgw", "");// 事业单位工人岗位 syq add 2018-3-23
		xzzw = para.getString("xzzw");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = para.getString("jbjgid");
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jgsygzlx = para.getString("jgsygzlx", "");// 机关事业工资类型
		dyffzt = HsuTools.replaceC2QCQ(para.getString("dyffzt", ""));// 待遇发放状态.泰安
		brcqshd = HsuTools.replaceC2QCQ(para.getString("brcqshd", ""));// 本人长期生活地.滨州
		ffqsnd = ffqsny.substring(0, 4); // 查询年待遇使用年度--ywj--20161215

		// 校验数据合法性
		// 限制经办机构ID不允许为空--ywj--20170106
		if (jbjgidStr == null || "".equals(jbjgidStr)) {
			this.bizException("传入的经办机构ID为空！");
		}
		String jbjgid = jbjgidStr.split(",")[0];// 取出一个jbjgid下方取参数
		// 根据经办机构ID获取参数值ad3u1021--ywj--20170105 // 取参数调整位置放至循环外
		String ad3u1021 = SiTools.getPara(jbjgid, "ad3u1021", "0");

		jbjgidStr = HsuTools.replaceC2QCQ(jbjgidStr);

		if (ffqsny == null || "".equals(ffqsny)) {
			this.bizException("传入的发放起始年月为空！");
		}
		if (ffzzny == null || "".equals(ffzzny)) {
			this.bizException("传入的发放终止年月为空！");
		}
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (cjgzQsrq.compareTo(cjgzZzrq) > 0) {
			this.bizException("传入的参加工作起始日期大于参加工作终止日期！");
		}
		if (ltxQsrq.compareTo(ltxZzrq) > 0) {
			this.bizException("传入的离退休起始日期大于离退休终止日期！");
		}
		if (ffqsny.compareTo(ffzzny) > 0) {
			this.bizException("传入的起始日期大于离退休终止日期！");
		}
		SPrompt prompt = SPromptUtil.getSPrompt();

		// 符合条件的单位
		sqlBF.setLength(0);
		sqlBF.append(" select distinct r.dwdjid, r.dwid, r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz ");
		sqlBF.append("   from si3u.orgn_reg r ");// 去除per_giv_month_std表关联
		sqlBF.append("  where exists (select '1' ");// 与ad3u.per_info表的关联改为exists的方式
		sqlBF.append("        from ad3u.per_info pi ");
		sqlBF.append("       where r.dwdjid = pi.dwdjid) ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsDw = this.sql.executeQuery();

		int row = dsDw.rowCount() + 1;
		prompt.setTotalSteps(row);// 设置步数
		boolean isComplete = true;
		prompt.prompt("正在查询单位人员信息，一共" + row + "个单位...");
		bcxmList = "";
		// 查询经办机构的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select distinct c.bcxmbh, p.bcxmmc, p.dmlx ");
		sqlBF.append("   from ad3u.cmpl_config c, ");
		sqlBF.append("        ad3u.per_cmpl_item p ");
		sqlBF.append("  where c.bcxmbh = p.bcxmbh ");
		sqlBF.append("    and c.bcxmbh  ");
		sqlBF.append("     in('TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH') ");//获取居住地行政区划  刘欣 modify 20170112
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and c.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBcxmbh = this.sql.executeQuery();

		// 查询经办机构查询年月的btbh
		//先从参数ad3u1048中取，取不到时再去查询  --zkj  modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools
					.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		}else{
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc, gi.btbh btbhs ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
		}

		// 烟台存在补贴编号相同大小写不一致，程序会报错，新增一列作为补贴别名（根据标准件）--ywj--20161215
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh").toUpperCase();
			for (int j = 0; j < i; j++) {
				String btbh2 = dsBtbh.getString(j, "btbh").toUpperCase();
				if (btbh.equals(btbh2)) {
					dsBtbh.put(j, "btbhs", btbh2 + j);
				}
			}
		}

		sqlBF.setLength(0);
		sqlBF.append(" select distinct gi.btbh, gi.btmc ");
		sqlBF.append("   from ad3u.giv_item gi, ");
		sqlBF.append("        ad3u.per_giv_year_std pg, ");
		sqlBF.append("        ad3u.per_info pi, ");
		sqlBF.append("        si3u.orgn_reg r ");
		sqlBF.append("  where gi.btbh = pg.btbh ");
		sqlBF.append("    and pg.ryid = pi.ryid ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBtbhYear = this.sql.executeQuery();
		prompt.prompt("正在查询，符合条件的单位中的人员...");
		bhList = "";
		// 单位中的人员
		sqlBF.setLength(0);
		// 职工
		sqlBF.append(" select ? dwbh, ? dwmc, ? dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, ei.ltxlb zfrylb, ei.cjgzrq, ");
		sqlBF.append("        ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid, ");
		sqlBF.append("		  round(round(nvl(ei.stjfnx + ei.sjjfnx, 0)*12, 0)/12, 2) jfnx, '' dfjgbh, '' dfjgmc,ei.dacsrq, p.lxrxm,");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,ei.stjfnx,ei.sjjfnx, p.brcqshd, ");// 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, '' swryid, '' bz, ");// 增加户口所在地，手机号码  // 增加死亡人员ID和备注查询  --zkj add 2017/12/16
		sqlBF.append("        ei.jzgbz, pi.dyffzt, pn.sydwgrgw ,pn.jgsydwgzrylb ");// 事业单位工人岗位 syq add 2018-3-23 //机关事业单位工作人员类别 nx add 20181016
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.emp_info ei, ");// 在此处不再限制月待遇，之后查询月待遇时若人员不存在符合条件的月待遇则删除人员--ywj--20170105
		sqlBF.append("        si3u.per_natl pn ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		// 待遇发放状态的限制，泰安使用--ywj--20161215
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and pi.dyffzt in ( ");
			sqlBF.append(dyffzt);
			sqlBF.append(" ) ");
		}
		sqlBF.append("    and pi.dwdjid = ? ");
		// 增加查询 本人长期生活地（根据标准件）--ywj--20161215
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}

		sqlBF.append("    and nvl(ei.cjgzrq,?) between ? and ? ");
		sqlBF.append("    and ei.ltxrq between ? and ? ");
		sqlBF.append(" union all ");
		// 遗属
		sqlBF.append(" select distinct ? dwbh, ? dwmc, ? dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, si.yslb zfrylb, '' cjgzrq, ");
		sqlBF.append("        '' ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid, ");
		sqlBF.append("		  0 jfnx, '' dfjgbh, '' dfjgmc, '' dacsrq, p.lxrxm, ");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,0 stjfnx,0 sjjfnx, p.brcqshd, ");// 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, si.swryid, si.bz, ");// 增加户口所在地，手机号码  //增加死亡人员ID bz 的查询 --zkj add 2017/12/16
		sqlBF.append("        '' jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb");// 事业单位工人岗位 syq add 2018-3-23//机关事业单位工作人员类别 nx add 20181016
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.supp_info si, ");// 在此处不再限制月待遇，之后查询月待遇时若人员不存在符合条件的月待遇则删除人员--ywj--20170105
		sqlBF.append("        si3u.per_natl pn ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid(+) ");
		// 待遇发放状态的限制，泰安使用--ywj--20161215
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and pi.dyffzt in ( ");
			sqlBF.append(dyffzt);
			sqlBF.append(" ) ");
		}
		sqlBF.append("    and pi.sszfrq = 'B' ");
		sqlBF.append("    and pi.dwdjid = ? ");
		// 增加查询 本人长期生活地（根据标准件）--ywj--20161215
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}
		sqlMxInfo = sqlBF.toString();
		count = dsDw.rowCount();

		// 取单位所有的个人补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.bcxmbh, a.bcxmz, pi.ryid ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        ad3u.per_info pi ");
		sqlBF.append("  where a.ryid = pi.ryid ");
		sqlBF.append("    and a.bcxmbh in ( ");
		sqlBF.append("        'TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH' ");//获取居住地行政区划  刘欣 modify 20170112
		sqlBF.append("        ) ");
		sqlBF.append("    and pi.dwdjid = ? ");
		sqlBcxm = sqlBF.toString();

		// 取单位所有的个人平均指数
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(a.dyxmbh, 'PJZS_38', a.dyxmz, 'pjzs_new', a.dyxmz, 0)), 0) pjzs, pi.ryid ");
		sqlBF.append("   from ad3u.per_cal_his a, ");
		sqlBF.append("        ad3u.per_info pi ");
		sqlBF.append("  where a.ryid = pi.ryid ");
		sqlBF.append("    and xh = (select max(xh) ");
		sqlBF.append("                from ad3u.per_cal_his c ");
		sqlBF.append("               where a.ryid = c.ryid) ");
		sqlBF.append("    and pi.dwdjid = ? ");
		sqlBF.append("    and a.dyxmbh in ('PJZS_38', 'pjzs_new') ");
		sqlBF.append("  group by pi.ryid ");
		sqlPjzs = sqlBF.toString();

		// 不同职工发放台账模式使用不同的sql查询月待遇，由参数控制选择使用哪个sql--ywj--20170105
		// 不使用职工发放台账新模式，只查询per_giv_detl一个表
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(pg.btje),0) hj, ");
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			bhList += btbhs + ":n,";
			sqlBF.append("        nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append(" " + btbhs + ", ");
		}
		sqlBF.append("        pg.ryid ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_giv_detl pg ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pg.fflb = 'A' ");
		sqlBF.append("    and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("    and pi.dwdjid = ? ");
		//增加待遇发放状态验证,使导出功能与页面展示的查询结果一致    mj  2018.9.20
		if (dyffzt == null || "".equals(dyffzt)) {
			sqlBF.append("    and (pg.zdlsh is not null or (pg.zdlsh is null and pi.dyffzt in('1','3'))) ");// 暂停人员未填单据的不予计算
		}
		sqlBF.append("  group by pg.ryid ");
		sqlBtjeOld = sqlBF.toString();

		// 使用职工发放台账新模式，查询ungiv、gived、gived_his三个表的union all
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje),0) hj, ");
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			bhList += btbhs + ":n,";
			sqlBF.append("        nvl(sum(decode(btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(btje, 0))), 0)");
			sqlBF.append(" " + btbhs + ", ");
		}
		sqlBF.append("        ryid ");
		sqlBF.append("   from ( ");
		sqlBF.append("         select pg.ryid, pg.btbh, pg.btje ");
		sqlBF.append("           from ad3u.per_info pi, ");
		sqlBF.append("                ad3u.per_giv_detl_ungiv pg ");
		sqlBF.append("          where pi.ryid = pg.ryid ");
		sqlBF.append("            and pg.fflb = 'A' ");
		sqlBF.append("            and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("            and pi.dwdjid = ? ");
		//增加待遇发放状态验证,使导出功能与页面展示的查询结果一致    mj  2018.9.20
		if (dyffzt == null || "".equals(dyffzt)) {
			sqlBF.append("            and (pg.zdlsh is not null or (pg.zdlsh is null and pi.dyffzt in('1','3'))) ");// 暂停人员未填单据的不予计算
		}
		sqlBF.append("         union all ");
		sqlBF.append("         select pg.ryid, pg.btbh, pg.btje ");
		sqlBF.append("           from ad3u.per_info pi, ");
		sqlBF.append("                ad3u.per_giv_detl_gived pg ");
		sqlBF.append("          where pi.ryid = pg.ryid ");
		sqlBF.append("            and pg.fflb = 'A' ");
		sqlBF.append("            and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("            and pi.dwdjid = ? ");
		sqlBF.append("         union all ");
		sqlBF.append("         select pg.ryid, pg.btbh, pg.btje ");
		sqlBF.append("           from ad3u.per_info pi, ");
		sqlBF.append("                ad3u.per_giv_detl_gived_his pg ");
		sqlBF.append("          where pi.ryid = pg.ryid ");
		sqlBF.append("            and pg.fflb = 'A' ");
		sqlBF.append("            and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("            and pi.dwdjid = ? ");
		sqlBF.append("        ) ");
		sqlBF.append("  group by ryid ");
		sqlBtjeNew = sqlBF.toString();

		for (int i = 0; i < count; i++) {
			dwdjid = dsDw.getString(i, "dwdjid");
			dwbh = dsDw.getString(i, "dwbh");
			dwmc = dsDw.getString(i, "dwmc");
			dwxzTemp = dsDw.getString(i, "dwxz");
			prompt.prompt("正在查询【" + dwmc + "】的人员...");
			this.sql.setSql(sqlMxInfo);
			this.sql.setString(1, dwbh);
			this.sql.setString(2, dwmc);
			this.sql.setString(3, dwxzTemp);
			this.sql.setString(4, dwdjid);
			this.sql.setString(5, cjgzQsrq);
			this.sql.setString(6, cjgzQsrq);
			this.sql.setString(7, cjgzZzrq);
			this.sql.setString(8, ltxQsrq);
			this.sql.setString(9, ltxZzrq);
			this.sql.setString(10, dwbh);
			this.sql.setString(11, dwmc);
			this.sql.setString(12, dwxzTemp);
			this.sql.setString(13, dwdjid);
			ds = this.sql.executeQuery();

			// 根据参数选择sql查询单位所有人的月待遇补贴金额，放入map--ywj--20170103
			if ("1".equals(ad3u1021)) {
				this.sql.setSql(sqlBtjeNew);
				this.sql.setString(1, ffzzny);
				this.sql.setString(2, ffqsny);
				this.sql.setString(3, dwdjid);
				this.sql.setString(4, ffzzny);
				this.sql.setString(5, ffqsny);
				this.sql.setString(6, dwdjid);
				this.sql.setString(7, ffzzny);
				this.sql.setString(8, ffqsny);
				this.sql.setString(9, dwdjid);
			} else {
				this.sql.setSql(sqlBtjeOld);
				this.sql.setString(1, ffzzny);
				this.sql.setString(2, ffqsny);
				this.sql.setString(3, dwdjid);
			}
			dsBtje = this.sql.executeQuery();
			HashMap<String, DataObject> mapBtje = new HashMap<String, DataObject>();
			mapBtje = SiTools.ds2HashMapWithOneKey(dsBtje, "ryid");

			// 查询单位所有的个人补充信息，放入map--ywj--20161216
			this.sql.setSql(sqlBcxm);
			this.sql.setString(1, dwdjid);
			dsBcxx = this.sql.executeQuery();
			HashMap<String, DataObject> mapBcxx = new HashMap<String, DataObject>();
			mapBcxx = SiTools.ds2HashMapWithTwoKey(dsBcxx, "ryid", "bcxmbh");

			// 查询单位所有的个人平均指数，放入map--ywj--20161216
			this.sql.setSql(sqlPjzs);
			this.sql.setString(1, dwdjid);
			dsTemp = this.sql.executeQuery();
			HashMap<String, DataObject> mapPjzs = new HashMap<String, DataObject>();
			mapPjzs = SiTools.ds2HashMapWithOneKey(dsTemp, "ryid");

			// 开始查询人员信息
			sqlBF.setLength(0);
			sqlBF.append(" select pg.btbh, gi.btmc, nvl(pg.btje, 0)btje ");
			sqlBF.append("   from ad3u.per_giv_year_std pg, ");
			sqlBF.append("        ad3u.giv_item gi ");
			sqlBF.append("  where pg.ryid = ? ");
			sqlBF.append("    and pg.btbh = gi.btbh ");
			sqlBF.append("    and ? between pg.qsnd and nvl(pg.zznd,'2050') ");// 修改查询条件（根据标准件）--ywj--20161215
			sqlQtbt = sqlBF.toString();

			row = ds.rowCount();
			for (int j = row-1; j >= 0; j--) {
				ryid = ds.getString(j, "ryid");
				pjzs = 0;

				// 从map中取出各月待遇的补贴金额，放到ds中--ywj--20170103
				if (mapBtje.containsKey(ryid)) {
					ds.get(j).putAll(mapBtje.get(ryid));
				} else {
					ds.delRow(j);// 不存在则直接删除此人
					continue;
				}

				// 将所有其他补贴（目前主要是年待遇）先放进去，防止该人没有这个待遇时，排序报错
				for (int k = 0, n = dsBtbhYear.rowCount(); k < n; k++) {
					ds.put(j, dsBtbhYear.getString(k, "btbh"), 0);
				}

				this.sql.setSql(sqlQtbt);
				this.sql.setString(1, ryid);
				this.sql.setString(2, ffqsnd);
				DataStore dsQtbt = this.sql.executeQuery();

				// 取每个人的其他补贴（目前主要是年待遇）
				for (int k = 0, n = dsQtbt.rowCount(); k < n; k++) {
					btbh = dsQtbt.getString(k, "btbh");
					btmc = dsQtbt.getString(k, "btmc");
					btje = dsQtbt.getDouble(k, "btje");

					ds.put(j, btbh, btje);

					if (dsBtbh.find(" btbh == " + btbh + " ") < 0) {
						dsBtbh.addRow();
						dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", btbh);
						dsBtbh.put(dsBtbh.rowCount() - 1, "btbhs", btbh);// 增加一列btbhs与其他行保持一致，防止取值时报错--ywj--20170103
						dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", btmc);

						bhList += btbh + ":n,";
					}
				}

				// 修改平均指数的方法，从map中取出--ywj--20161216
				if (mapPjzs.containsKey(ryid)) {
					pjzs = mapPjzs.get(ryid).getDouble("pjzs", 0);
				}
				ds.put(j, "pjzs", pjzs);

				// 修改个人的补充信息的方法，从map中取出--ywj--20161216
				for (int k = 0, len = dsBcxmbh.rowCount(); k < len; k++) {
					bcxmbh = dsBcxmbh.getString(k, "bcxmbh");
					dmlx = dsBcxmbh.getString(k, "dmlx");
					if (bcxmList.indexOf(bcxmbh) < 0) {
						if (dmlx.equals("char") || dmlx.equals("code")
								|| dmlx.indexOf("pubcode") >= 0) {
							bcxmList += bcxmbh + ":s,";
						} else if (dmlx.equals("date") || dmlx.equals("month")
								|| dmlx.equals("year")) {
							bcxmList += bcxmbh + ":d,";
						} else if (dmlx.equals("number")) {
							bcxmList += bcxmbh + ":n,";
						}
						// add.cjj.20180726增加行政区划代码
						if ("JZDXZQH".equals(bcxmbh)
								&& bcxmList.indexOf("JZDXZQHDM:s") < 0) {
							bcxmList += "JZDXZQHDM:s,";
						}
					}

					String key = ryid + "_" + bcxmbh;
					if (mapBcxx.containsKey(key)) {
						bcxmz = mapBcxx.get(key).getString("bcxmz", "");
						ds.put(j, bcxmbh, bcxmz);
						
						//获取行政区划代码的具体值  刘欣 modify 20170112
						if("JZDXZQH".equals(bcxmbh)){
							ds.put(j, bcxmbh, HsuTools.getXzqhmc(bcxmz));
							ds.put(j, "JZDXZQHDM", bcxmz);//add.cjj.20180726增加行政区划代码
						}
					} else {
						ds.put(j, bcxmbh, "");
						//add.cjj.20180726增加行政区划代码
						if("JZDXZQH".equals(bcxmbh)){
							ds.put(j, "JZDXZQHDM", "");
						}
					}
				}
			}
			// 一个单位人员查询完毕
			dsMxInfo.combineDatastore(ds);
			prompt.moveForword(1);
		}
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		// 查询代发机构 // 放至循环外--ywj--20170110
		dsMxInfo = AdTools.genDfjgxxDataStore(dsMxInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		dsMxInfo.setTypeList("dwbh:s,dwmc:s,dwxz:s,dfjglb:s,dfjgid:s,"
				+ "shbzhm:s,yxzjhm:s,a.xm:s,yhzh:s,xb:s,yzbm:s,"
				+ "csrq:s,dacsrq:s,cjgzrq:s,grsf:s,ygxs:s,zfrylb:s,"
				+ "ltxrq:s,dyxsksny:s,xzzw:s,zyjszwjb:s,gjzyzgdj:s,"
				+ "txdz:s,jtzz:s,hj:n,dylqlb:s,dydjid:s,lxrxm:s,lxdh:s,"
				+ "jfnx:n,dfjgbh:s,dfjgid:s," + bhList + "dfjgmc:s," + bcxmList
				+ ",jzgbz:s,stjfnx:n,sjjfnx:n,pjzs:n,sydwgrgw:s,jgsydwgzrylb:s");// add by nx 181016
		dsMxInfo.sort("shbzhm").sort("dwbh");//排序修改--20161216

		// 将查询条件返回前台
		int rowadd;
		DataStore dsQuery = new DataStore();
		dsQuery.addRow();
		rowadd = dsQuery.rowCount() - 1;
		dsQuery.put(rowadd, "fdfjglb", para.getString("fdfjglb"));
		dsQuery.put(rowadd, "fdfjgid", para.getString("fdfjgid"));
		dsQuery.put(rowadd, "fdfjgbh", para.getString("fdfjgbh"));
		dsQuery.put(rowadd, "fdfjgmc", para.getString("fdfjgmc"));
		dsQuery.put(rowadd, "dwxz", para.getString("dwxz"));
		dsQuery.put(rowadd, "zfrylb", para.getString("zfrylb"));
		dsQuery.put(rowadd, "zyjszwjb", para.getString("zyjszwjb"));
		dsQuery.put(rowadd, "gjzyzgdj", para.getString("gjzyzgdj"));
		dsQuery.put(rowadd, "xzzw", para.getString("xzzw"));
		dsQuery.put(rowadd, "cjgzQsrq", para.getString("cjgzQsrq"));
		dsQuery.put(rowadd, "cjgzZzrq", para.getString("cjgzZzrq"));
		dsQuery.put(rowadd, "ltxQsrq", para.getString("ltxQsrq"));
		dsQuery.put(rowadd, "ltxZzrq", para.getString("ltxZzrq"));
		dsQuery.put(rowadd, "jbjgid", para.getString("jbjgid"));
		dsQuery.put(rowadd, "jgsygzlx", para.getString("jgsygzlx", ""));
		dsQuery.put(rowadd, "sydwgrgw", para.getString("sydwgrgw", ""));//事业单位工人岗位 syq add 2018-3-23

		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end

		rdo.put("dsbcxmbh", dsBcxmbh);
		rdo.put("dsjbjg", ds);
		rdo.put("dsquery", dsQuery);
		rdo.put("mxinfo", dsMxInfo);
		rdo.put("dsbtbh", dsBtbh);
		rdo.put("cxbz", "1");
		rdo.put("jbjgid", this.getBizInstitution());
		rdo.put("ny", DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM"));
		rdo.put("ffqsny", para.getString("ffqsny"));
		rdo.put("ffzzny", para.getString("ffzzny"));
		
		QueryLogTool.updateQueryLog(querylogid, dsMxInfo.rowCount());

		return rdo;
	}
	
	/**
	 * 方法简介.根据录入的信息查询拨付人员明细（济南机关使用）
	 * 增加入参支付范围，增加统内合计和统外合计的查询
	 * @author zkj 2019-06-18
	 */
	public DataObject queryBfryMxInfoJNjg(final DataObject para) throws Exception {
		String dfjglb, dfjgid, dwxz, zfrylb, zyjszwjb, gjzyzgdj, xzzw, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny, zffw;
		String dwdjid, dwbh, dwmc, dwxzTemp, ryid, jgsygzlx, sydwgrgw;
		String bcxmbh, bcxmz, dmlx;// 补充项目编号、名称、补充项目值
		DataStore ds, dsDw, dsBtbh, dsBtbhYear, dsBtje;
		DataStore dsMxInfo = new DataStore();
		DataStore dsBcxmbh, dsBcxx;// 机构内配置的补充项目,个人的补充项目
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String sqlMxInfo, sqlQtbt, sqlBcxm, sqlPjzs, sqlBtjeOld, sqlBtjeNew;
		int count;
		double btje, pjzs;
		String btbh, bhList, btmc, bcxmList;
		String btbhs, dyffzt, brcqshd, ffqsnd;
		DataStore dsTemp;
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);		

		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		dfjglb = para.getString("fdfjglb");
		dfjgid = para.getString("fdfjgid");
		dwxz = para.getString("dwxz");
		zfrylb = para.getString("zfrylb");
		zyjszwjb = para.getString("zyjszwjb");
		gjzyzgdj = para.getString("gjzyzgdj");
		sydwgrgw = para.getString("sydwgrgw", "");// 事业单位工人岗位 syq add 2018-3-23
		xzzw = para.getString("xzzw");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = para.getString("jbjgid");
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jgsygzlx = para.getString("jgsygzlx", "");// 机关事业工资类型
		dyffzt = HsuTools.replaceC2QCQ(para.getString("dyffzt", ""));// 待遇发放状态.泰安
		brcqshd = HsuTools.replaceC2QCQ(para.getString("brcqshd", ""));// 本人长期生活地.滨州
		ffqsnd = ffqsny.substring(0, 4); // 查询年待遇使用年度--ywj--20161215
		zffw = para.getString("zffw", ""); //增加入参支付范围 -- 张凯杰 modify 2019/06/18
		// 校验数据合法性
		// 限制经办机构ID不允许为空--ywj--20170106
		if (jbjgidStr == null || "".equals(jbjgidStr)) {
			this.bizException("传入的经办机构ID为空！");
		}
		String jbjgid = jbjgidStr.split(",")[0];// 取出一个jbjgid下方取参数
		// 根据经办机构ID获取参数值ad3u1021--ywj--20170105 // 取参数调整位置放至循环外
		String ad3u1021 = SiTools.getPara(jbjgid, "ad3u1021", "0");

		jbjgidStr = HsuTools.replaceC2QCQ(jbjgidStr);

		if (ffqsny == null || "".equals(ffqsny)) {
			this.bizException("传入的发放起始年月为空！");
		}
		if (ffzzny == null || "".equals(ffzzny)) {
			this.bizException("传入的发放终止年月为空！");
		}
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (cjgzQsrq.compareTo(cjgzZzrq) > 0) {
			this.bizException("传入的参加工作起始日期大于参加工作终止日期！");
		}
		if (ltxQsrq.compareTo(ltxZzrq) > 0) {
			this.bizException("传入的离退休起始日期大于离退休终止日期！");
		}
		if (ffqsny.compareTo(ffzzny) > 0) {
			this.bizException("传入的起始日期大于离退休终止日期！");
		}
		if (zffw == null || "".equals(zffw)) {
			zffw = "1,2";
		}
		SPrompt prompt = SPromptUtil.getSPrompt();
		String sqlzffwstr = "";
		if ("1".equals(zffw)) {
			//统筹内
			sqlzffwstr = " where btlb <> '956' ";
		} else if ("2".equals(zffw)) {
			//统筹外
			sqlzffwstr = " where btlb = '956' ";
		}
		// 符合条件的单位
		sqlBF.setLength(0);
		sqlBF.append(" select distinct r.dwdjid, r.dwid, r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz ");
		sqlBF.append("   from si3u.orgn_reg r ");// 去除per_giv_month_std表关联
		sqlBF.append("  where exists (select '1' ");// 与ad3u.per_info表的关联改为exists的方式
		sqlBF.append("        from ad3u.per_info pi ");
		sqlBF.append("       where r.dwdjid = pi.dwdjid) ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsDw = this.sql.executeQuery();

		int row = dsDw.rowCount() + 1;
		prompt.setTotalSteps(row);// 设置步数
		boolean isComplete = true;
		prompt.prompt("正在查询单位人员信息，一共" + row + "个单位...");
		bcxmList = "";
		// 查询经办机构的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select distinct c.bcxmbh, p.bcxmmc, p.dmlx ");
		sqlBF.append("   from ad3u.cmpl_config c, ");
		sqlBF.append("        ad3u.per_cmpl_item p ");
		sqlBF.append("  where c.bcxmbh = p.bcxmbh ");
		sqlBF.append("    and c.bcxmbh  ");
		sqlBF.append("     in('TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH') ");//获取居住地行政区划  刘欣 modify 20170112
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and c.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBcxmbh = this.sql.executeQuery();

		// 查询经办机构查询年月的btbh
		//先从参数ad3u1048中取，取不到时再去查询  --zkj  modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools
					.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		}else{
			dsBtbh = new DataStore();
			//根据zffw确定dsbtbh
			if (zffw != null && zffw.indexOf("1") >= 0) {
				//统筹内
				sqlBF.setLength(0);
				sqlBF.append(" select distinct gi.btbh, gi.btmc, gi.btbh btbhs ");
				sqlBF.append("   from ad3u.giv_item gi, ");
				sqlBF.append("        ad3u.per_giv_month_std pg, ");
				sqlBF.append("        ad3u.per_info pi, ");
				sqlBF.append("        si3u.orgn_reg r ");
				sqlBF.append("  where gi.btbh = pg.btbh ");
				sqlBF.append("    and pg.ryid = pi.ryid ");
				sqlBF.append("    and pi.dwdjid = r.dwdjid ");
				sqlBF.append("    and gi.btlb <> '956' ");
				sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
				if (jbjgidStr != null && !"".equals(jbjgidStr)) {
					sqlBF.append(" and r.jbjgid in (");
					sqlBF.append(jbjgidStr);
					sqlBF.append(") ");
				}
				
				// TODO 当传入的经办机构不存在时取经办机构还没实现
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ffzzny);
				this.sql.setString(2, ffqsny);
				DataStore dsBtbhTemp = this.sql.executeQuery();
				dsBtbh.combineDatastore(dsBtbhTemp);
			}
			
			if (zffw != null && zffw.indexOf("2") >= 0) {
				//统筹外
				sqlBF.setLength(0);
				sqlBF.append(" select distinct gi.btbh, gi.btmc, gi.btbh btbhs ");
				sqlBF.append("   from ad3u.giv_item gi, ");
				sqlBF.append("        ad3u.per_giv_month_std pg, ");
				sqlBF.append("        ad3u.per_info pi, ");
				sqlBF.append("        si3u.orgn_reg r ");
				sqlBF.append("  where gi.btbh = pg.btbh ");
				sqlBF.append("    and pg.ryid = pi.ryid ");
				sqlBF.append("    and pi.dwdjid = r.dwdjid ");
				sqlBF.append("    and gi.btlb = '956' ");
				sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
				if (jbjgidStr != null && !"".equals(jbjgidStr)) {
					sqlBF.append(" and r.jbjgid in (");
					sqlBF.append(jbjgidStr);
					sqlBF.append(") ");
				}
				// TODO 当传入的经办机构不存在时取经办机构还没实现
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ffzzny);
				this.sql.setString(2, ffqsny);
				DataStore dsBtbhTemp = this.sql.executeQuery();
				dsBtbh.combineDatastore(dsBtbhTemp);
			}	
		}

		// 烟台存在补贴编号相同大小写不一致，程序会报错，新增一列作为补贴别名（根据标准件）--ywj--20161215
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh").toUpperCase();
			for (int j = 0; j < i; j++) {
				String btbh2 = dsBtbh.getString(j, "btbh").toUpperCase();
				if (btbh.equals(btbh2)) {
					dsBtbh.put(j, "btbhs", btbh2 + j);
				}
			}
		}

		sqlBF.setLength(0);
		sqlBF.append(" select distinct gi.btbh, gi.btmc ");
		sqlBF.append("   from ad3u.giv_item gi, ");
		sqlBF.append("        ad3u.per_giv_year_std pg, ");
		sqlBF.append("        ad3u.per_info pi, ");
		sqlBF.append("        si3u.orgn_reg r ");
		sqlBF.append("  where gi.btbh = pg.btbh ");
		sqlBF.append("    and pg.ryid = pi.ryid ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBtbhYear = this.sql.executeQuery();
		prompt.prompt("正在查询，符合条件的单位中的人员...");
		bhList = "";
		// 单位中的人员
		sqlBF.setLength(0);
		// 职工
		sqlBF.append(" select ? dwbh, ? dwmc, ? dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, ei.ltxlb zfrylb, ei.cjgzrq, ");
		sqlBF.append("        ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid, ");
		sqlBF.append("		  round(round(nvl(ei.stjfnx + ei.sjjfnx, 0)*12, 0)/12, 2) jfnx, '' dfjgbh, '' dfjgmc,ei.dacsrq, p.lxrxm,");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,ei.stjfnx,ei.sjjfnx, p.brcqshd, ");// 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, '' swryid, '' bz, ");// 增加户口所在地，手机号码  // 增加死亡人员ID和备注查询  --zkj add 2017/12/16
		sqlBF.append("        ei.jzgbz, pi.dyffzt, pn.sydwgrgw ,pn.jgsydwgzrylb, ");// 事业单位工人岗位 syq add 2018-3-23 //机关事业单位工作人员类别 nx add 20181016
		//add by cxq 2021/8/27 增加济南退休人员改革前和退休时人事项目信息
	    sqlBF.append("  pn.gwyzw,pn.gwyjb,pn.gwyjbdc,pn.jggqrygw,png.ggqsydwgrgw, ");
	    sqlBF.append("  pn.sydwzyjsrygw,pn.sydwzyjsryxj,pn.sydwglrygw,pn.sydwglryxj,png.ggqsydwgrxj, ");
	    sqlBF.append("  pn.sydwgrxj,png.ggqjgsydwgzrylb,png.ggqgwyzw,png.ggqgwyjb,png.ggqgwyjbdc, ");
	    sqlBF.append("  png.ggqjggqryjsdj,png.ggqjggqrygw,png.ggqsydwzyjsrygw,png.ggqsydwzyjsryxj,png.ggqsydwglrygw, ");
	    sqlBF.append("  png.ggqsydwglryxj,pn.gjzyzgdj jggqryjsdj ");
	    //end add by cxq 2021/8/27
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.emp_info ei, ");// 在此处不再限制月待遇，之后查询月待遇时若人员不存在符合条件的月待遇则删除人员--ywj--20170105
		sqlBF.append("        si3u.per_natl pn, ");
		sqlBF.append("        si3u.per_natl_gov png ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid ");
		sqlBF.append("    and pi.ryid = png.ryid(+) ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		// 待遇发放状态的限制，泰安使用--ywj--20161215
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and pi.dyffzt in ( ");
			sqlBF.append(dyffzt);
			sqlBF.append(" ) ");
		}
		sqlBF.append("    and pi.dwdjid = ? ");
		// 增加查询 本人长期生活地（根据标准件）--ywj--20161215
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}

		sqlBF.append("    and nvl(ei.cjgzrq,?) between ? and ? ");
		sqlBF.append("    and ei.ltxrq between ? and ? ");
		sqlBF.append(" union all ");
		// 遗属
		sqlBF.append(" select distinct ? dwbh, ? dwmc, ? dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, si.yslb zfrylb, '' cjgzrq, ");
		sqlBF.append("        '' ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid, ");
		sqlBF.append("		  0 jfnx, '' dfjgbh, '' dfjgmc, '' dacsrq, p.lxrxm, ");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,0 stjfnx,0 sjjfnx, p.brcqshd, ");// 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, si.swryid, si.bz, ");// 增加户口所在地，手机号码  //增加死亡人员ID bz 的查询 --zkj add 2017/12/16
		sqlBF.append("        '' jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb,");// 事业单位工人岗位 syq add 2018-3-23//机关事业单位工作人员类别 nx add 20181016
		//add by cxq 2021/8/27 增加济南退休人员改革前和退休时人事项目信息
	    sqlBF.append("  pn.gwyzw,pn.gwyjb,pn.gwyjbdc,pn.jggqrygw,png.ggqsydwgrgw, ");
	    sqlBF.append("  pn.sydwzyjsrygw,pn.sydwzyjsryxj,pn.sydwglrygw,pn.sydwglryxj,png.ggqsydwgrxj, ");
	    sqlBF.append("  pn.sydwgrxj,png.ggqjgsydwgzrylb,png.ggqgwyzw,png.ggqgwyjb,png.ggqgwyjbdc, ");
	    sqlBF.append("  png.ggqjggqryjsdj,png.ggqjggqrygw,png.ggqsydwzyjsrygw,png.ggqsydwzyjsryxj,png.ggqsydwglrygw, ");
	    sqlBF.append("  png.ggqsydwglryxj,pn.gjzyzgdj jggqryjsdj ");
	    //end add by cxq 2021/8/27
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.supp_info si, ");// 在此处不再限制月待遇，之后查询月待遇时若人员不存在符合条件的月待遇则删除人员--ywj--20170105
		sqlBF.append("        si3u.per_natl pn, ");
		sqlBF.append("        si3u.per_natl_gov png ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid(+) ");
		sqlBF.append("    and pi.ryid = png.ryid(+) ");
		// 待遇发放状态的限制，泰安使用--ywj--20161215
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and pi.dyffzt in ( ");
			sqlBF.append(dyffzt);
			sqlBF.append(" ) ");
		}
		sqlBF.append("    and pi.sszfrq = 'B' ");
		sqlBF.append("    and pi.dwdjid = ? ");
		// 增加查询 本人长期生活地（根据标准件）--ywj--20161215
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}
		sqlMxInfo = sqlBF.toString();
		count = dsDw.rowCount();

		// 取单位所有的个人补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.bcxmbh, a.bcxmz, pi.ryid ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        ad3u.per_info pi ");
		sqlBF.append("  where a.ryid = pi.ryid ");
		sqlBF.append("    and a.bcxmbh in ( ");
		sqlBF.append("        'TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH' ");//获取居住地行政区划  刘欣 modify 20170112
		sqlBF.append("        ) ");
		sqlBF.append("    and pi.dwdjid = ? ");
		sqlBcxm = sqlBF.toString();

		// 取单位所有的个人平均指数
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(a.dyxmbh, 'PJZS_38', a.dyxmz, 'pjzs_new', a.dyxmz, 0)), 0) pjzs, pi.ryid ");
		sqlBF.append("   from ad3u.per_cal_his a, ");
		sqlBF.append("        ad3u.per_info pi ");
		sqlBF.append("  where a.ryid = pi.ryid ");
		sqlBF.append("    and xh = (select max(xh) ");
		sqlBF.append("                from ad3u.per_cal_his c ");
		sqlBF.append("               where a.ryid = c.ryid) ");
		sqlBF.append("    and pi.dwdjid = ? ");
		sqlBF.append("    and a.dyxmbh in ('PJZS_38', 'pjzs_new') ");
		sqlBF.append("  group by pi.ryid ");
		sqlPjzs = sqlBF.toString();

		// 不同职工发放台账模式使用不同的sql查询月待遇，由参数控制选择使用哪个sql--ywj--20170105
		// 不使用职工发放台账新模式，只查询per_giv_detl一个表
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(pg.btje),0) hj, ");
		sqlBF.append("        nvl(sum(decode(gi.btlb, '956', nvl(pg.btje, 0), 0)), 0) twhj, ");
		sqlBF.append("        nvl(sum(decode(gi.btlb, '956', 0, nvl(pg.btje, 0))), 0) tnhj, "); //增加统内合计和统外合计的查询 -- zkj modify 2019/06/18
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			bhList += btbhs + ":n,";
			sqlBF.append("        nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append(" " + btbhs + ", ");
		}
		sqlBF.append("        pg.ryid ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_giv_detl pg, ");
		sqlBF.append("        ad3u.giv_item gi ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pg.fflb = 'A' ");
		sqlBF.append("    and pg.btbh = gi.btbh ");
		sqlBF.append("    and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("    and pi.dwdjid = ? ");
		//增加待遇发放状态验证,使导出功能与页面展示的查询结果一致    mj  2018.9.20
		if (dyffzt == null || "".equals(dyffzt)) {
			sqlBF.append("    and (pg.zdlsh is not null or (pg.zdlsh is null and pi.dyffzt in('1','3'))) ");// 暂停人员未填单据的不予计算
		}
		sqlBF.append("  group by pg.ryid ");
		sqlBtjeOld = sqlBF.toString();

		// 使用职工发放台账新模式，查询ungiv、gived、gived_his三个表的union all
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje),0) hj, ");
		sqlBF.append("        nvl(sum(decode(btlb, '956', nvl(btje, 0), 0)), 0) twhj, ");
		sqlBF.append("        nvl(sum(decode(btlb, '956', 0, nvl(btje, 0))), 0) tnhj, "); //增加统内合计和统外合计的查询 -- zkj modify 2019/06/18
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			bhList += btbhs + ":n,";
			sqlBF.append("        nvl(sum(decode(btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(btje, 0))), 0)");
			sqlBF.append(" " + btbhs + ", ");
		}
		sqlBF.append("        ryid ");
		sqlBF.append("   from ( ");
		sqlBF.append("         select pg.ryid, pg.btbh, pg.btje, gi.btlb ");
		sqlBF.append("           from ad3u.per_info pi, ");
		sqlBF.append("                ad3u.per_giv_detl_ungiv pg, ");
		sqlBF.append("                ad3u.giv_item gi ");
		sqlBF.append("          where pi.ryid = pg.ryid ");
		sqlBF.append("            and pg.btbh = gi.btbh ");
		sqlBF.append("            and pg.fflb = 'A' ");
		sqlBF.append("            and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("            and pi.dwdjid = ? ");
		//增加待遇发放状态验证,使导出功能与页面展示的查询结果一致    mj  2018.9.20
		if (dyffzt == null || "".equals(dyffzt)) {
			sqlBF.append("            and (pg.zdlsh is not null or (pg.zdlsh is null and pi.dyffzt in('1','3'))) ");// 暂停人员未填单据的不予计算
		}
		sqlBF.append("         union all ");
		sqlBF.append("         select pg.ryid, pg.btbh, pg.btje, gi.btlb ");
		sqlBF.append("           from ad3u.per_info pi, ");
		sqlBF.append("                ad3u.per_giv_detl_gived pg, ");
		sqlBF.append("                ad3u.giv_item gi ");
		sqlBF.append("          where pi.ryid = pg.ryid ");
		sqlBF.append("            and pg.btbh = gi.btbh ");
		sqlBF.append("            and pg.fflb = 'A' ");
		sqlBF.append("            and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("            and pi.dwdjid = ? ");
		sqlBF.append("         union all ");
		sqlBF.append("         select pg.ryid, pg.btbh, pg.btje, gi.btlb ");
		sqlBF.append("           from ad3u.per_info pi, ");
		sqlBF.append("                ad3u.per_giv_detl_gived_his pg, ");
		sqlBF.append("                ad3u.giv_item gi ");
		sqlBF.append("          where pi.ryid = pg.ryid ");
		sqlBF.append("            and pg.btbh = gi.btbh ");
		sqlBF.append("            and pg.fflb = 'A' ");
		sqlBF.append("            and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("            and pi.dwdjid = ? ");
		sqlBF.append("        ) ");
		sqlBF.append(sqlzffwstr);
		sqlBF.append("  group by ryid ");
		sqlBtjeNew = sqlBF.toString();

		for (int i = 0; i < count; i++) {
			dwdjid = dsDw.getString(i, "dwdjid");
			dwbh = dsDw.getString(i, "dwbh");
			dwmc = dsDw.getString(i, "dwmc");
			dwxzTemp = dsDw.getString(i, "dwxz");
			prompt.prompt("正在查询【" + dwmc + "】的人员...");
			this.sql.setSql(sqlMxInfo);
			this.sql.setString(1, dwbh);
			this.sql.setString(2, dwmc);
			this.sql.setString(3, dwxzTemp);
			this.sql.setString(4, dwdjid);
			this.sql.setString(5, cjgzQsrq);
			this.sql.setString(6, cjgzQsrq);
			this.sql.setString(7, cjgzZzrq);
			this.sql.setString(8, ltxQsrq);
			this.sql.setString(9, ltxZzrq);
			this.sql.setString(10, dwbh);
			this.sql.setString(11, dwmc);
			this.sql.setString(12, dwxzTemp);
			this.sql.setString(13, dwdjid);
			ds = this.sql.executeQuery();

			// 根据参数选择sql查询单位所有人的月待遇补贴金额，放入map--ywj--20170103
			if ("1".equals(ad3u1021)) {
				this.sql.setSql(sqlBtjeNew);
				this.sql.setString(1, ffzzny);
				this.sql.setString(2, ffqsny);
				this.sql.setString(3, dwdjid);
				this.sql.setString(4, ffzzny);
				this.sql.setString(5, ffqsny);
				this.sql.setString(6, dwdjid);
				this.sql.setString(7, ffzzny);
				this.sql.setString(8, ffqsny);
				this.sql.setString(9, dwdjid);
			} else {
				this.sql.setSql(sqlBtjeOld);
				this.sql.setString(1, ffzzny);
				this.sql.setString(2, ffqsny);
				this.sql.setString(3, dwdjid);
			}
			dsBtje = this.sql.executeQuery();
			HashMap<String, DataObject> mapBtje = new HashMap<String, DataObject>();
			mapBtje = SiTools.ds2HashMapWithOneKey(dsBtje, "ryid");

			// 查询单位所有的个人补充信息，放入map--ywj--20161216
			this.sql.setSql(sqlBcxm);
			this.sql.setString(1, dwdjid);
			dsBcxx = this.sql.executeQuery();
			HashMap<String, DataObject> mapBcxx = new HashMap<String, DataObject>();
			mapBcxx = SiTools.ds2HashMapWithTwoKey(dsBcxx, "ryid", "bcxmbh");

			// 查询单位所有的个人平均指数，放入map--ywj--20161216
			this.sql.setSql(sqlPjzs);
			this.sql.setString(1, dwdjid);
			dsTemp = this.sql.executeQuery();
			HashMap<String, DataObject> mapPjzs = new HashMap<String, DataObject>();
			mapPjzs = SiTools.ds2HashMapWithOneKey(dsTemp, "ryid");

			// 开始查询人员信息
			sqlBF.setLength(0);
			sqlBF.append(" select pg.btbh, gi.btmc, nvl(pg.btje, 0)btje, gi.btlb ");
			sqlBF.append("   from ad3u.per_giv_year_std pg, ");
			sqlBF.append("        ad3u.giv_item gi ");
			sqlBF.append("  where pg.ryid = ? ");
			sqlBF.append("    and pg.btbh = gi.btbh ");
			sqlBF.append("    and ? between pg.qsnd and nvl(pg.zznd,'2050') ");// 修改查询条件（根据标准件）--ywj--20161215
			sqlQtbt = sqlBF.toString();

			row = ds.rowCount();
			for (int j = row-1; j >= 0; j--) {
				ryid = ds.getString(j, "ryid");
				pjzs = 0;

				// 从map中取出各月待遇的补贴金额，放到ds中--ywj--20170103
				if (mapBtje.containsKey(ryid)) {
					ds.get(j).putAll(mapBtje.get(ryid));
				} else {
					ds.delRow(j);// 不存在则直接删除此人
					continue;
				}

				// 将所有其他补贴（目前主要是年待遇）先放进去，防止该人没有这个待遇时，排序报错
				for (int k = 0, n = dsBtbhYear.rowCount(); k < n; k++) {
					ds.put(j, dsBtbhYear.getString(k, "btbh"), 0);
				}

				this.sql.setSql(sqlQtbt);
				this.sql.setString(1, ryid);
				this.sql.setString(2, ffqsnd);
				DataStore dsQtbt = this.sql.executeQuery();

				// 取每个人的其他补贴（目前主要是年待遇）
				for (int k = 0, n = dsQtbt.rowCount(); k < n; k++) {
					btbh = dsQtbt.getString(k, "btbh");
					btmc = dsQtbt.getString(k, "btmc");
					btje = dsQtbt.getDouble(k, "btje");

					ds.put(j, btbh, btje);
					//增加统内合计和统外合计的计算 -- zkj modify 2019/06/18
					double tnhj = ds.getDouble(j, "tnhj");
					double twhj = ds.getDouble(j, "twhj");
					double hj = ds.getDouble(j, "hj");
					String btlb = dsQtbt.getString(k, "btlb");
					//支付范围选择了才统计合计
					if ("956".equals(btlb) && zffw != null && zffw.indexOf("2") >= 0) {
						//统筹外
						twhj = twhj + btje;
						hj = hj + btje;
					} else if (!"956".equals(btlb)) {
						if (zffw != null && zffw.indexOf("1") >= 0) {
							//统筹内
							tnhj = tnhj + btje;
							hj = hj + btje;
						}
					}
					ds.put(j, "tnhj", tnhj);
					ds.put(j, "twhj", twhj);
					ds.put(j, "hj", hj);
					if (dsBtbh.find(" btbh == " + btbh + " ") < 0) {
						dsBtbh.addRow();
						dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", btbh);
						dsBtbh.put(dsBtbh.rowCount() - 1, "btbhs", btbh);// 增加一列btbhs与其他行保持一致，防止取值时报错--ywj--20170103
						dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", btmc);

						bhList += btbh + ":n,";
					}
				}

				// 修改平均指数的方法，从map中取出--ywj--20161216
				if (mapPjzs.containsKey(ryid)) {
					pjzs = mapPjzs.get(ryid).getDouble("pjzs", 0);
				}
				ds.put(j, "pjzs", pjzs);

				// 修改个人的补充信息的方法，从map中取出--ywj--20161216
				for (int k = 0, len = dsBcxmbh.rowCount(); k < len; k++) {
					bcxmbh = dsBcxmbh.getString(k, "bcxmbh");
					dmlx = dsBcxmbh.getString(k, "dmlx");
					if (bcxmList.indexOf(bcxmbh) < 0) {
						if (dmlx.equals("char") || dmlx.equals("code")
								|| dmlx.indexOf("pubcode") >= 0) {
							bcxmList += bcxmbh + ":s,";
						} else if (dmlx.equals("date") || dmlx.equals("month")
								|| dmlx.equals("year")) {
							bcxmList += bcxmbh + ":d,";
						} else if (dmlx.equals("number")) {
							bcxmList += bcxmbh + ":n,";
						}
						// add.cjj.20180726增加行政区划代码
						if ("JZDXZQH".equals(bcxmbh)
								&& bcxmList.indexOf("JZDXZQHDM:s") < 0) {
							bcxmList += "JZDXZQHDM:s,";
						}
					}

					String key = ryid + "_" + bcxmbh;
					if (mapBcxx.containsKey(key)) {
						bcxmz = mapBcxx.get(key).getString("bcxmz", "");
						ds.put(j, bcxmbh, bcxmz);
						
						//获取行政区划代码的具体值  刘欣 modify 20170112
						if("JZDXZQH".equals(bcxmbh)){
							ds.put(j, bcxmbh, HsuTools.getXzqhmc(bcxmz));
							ds.put(j, "JZDXZQHDM", bcxmz);//add.cjj.20180726增加行政区划代码
						}
					} else {
						ds.put(j, bcxmbh, "");
						//add.cjj.20180726增加行政区划代码
						if("JZDXZQH".equals(bcxmbh)){
							ds.put(j, "JZDXZQHDM", "");
						}
					}
				}
			}
			// 一个单位人员查询完毕
			dsMxInfo.combineDatastore(ds);
			prompt.moveForword(1);
		}
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		// 查询代发机构 // 放至循环外--ywj--20170110
		dsMxInfo = AdTools.genDfjgxxDataStore(dsMxInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		dsMxInfo.setTypeList("dwbh:s,dwmc:s,dwxz:s,dfjglb:s,dfjgid:s,"
				+ "shbzhm:s,yxzjhm:s,a.xm:s,yhzh:s,xb:s,yzbm:s,"
				+ "csrq:s,dacsrq:s,cjgzrq:s,grsf:s,ygxs:s,zfrylb:s,"
				+ "ltxrq:s,dyxsksny:s,xzzw:s,zyjszwjb:s,gjzyzgdj:s,"
				+ "txdz:s,jtzz:s,hj:n,dylqlb:s,dydjid:s,lxrxm:s,lxdh:s,"
				+ "jfnx:n,dfjgbh:s,dfjgid:s," + bhList + "dfjgmc:s," + bcxmList
				+ ",jzgbz:s,stjfnx:n,sjjfnx:n,pjzs:n,sydwgrgw:s,jgsydwgzrylb:s");// add by nx 181016
		dsMxInfo.sort("shbzhm").sort("dwbh");//排序修改--20161216

		// 将查询条件返回前台
		int rowadd;
		DataStore dsQuery = new DataStore();
		dsQuery.addRow();
		rowadd = dsQuery.rowCount() - 1;
		dsQuery.put(rowadd, "fdfjglb", para.getString("fdfjglb"));
		dsQuery.put(rowadd, "fdfjgid", para.getString("fdfjgid"));
		dsQuery.put(rowadd, "fdfjgbh", para.getString("fdfjgbh"));
		dsQuery.put(rowadd, "fdfjgmc", para.getString("fdfjgmc"));
		dsQuery.put(rowadd, "dwxz", para.getString("dwxz"));
		dsQuery.put(rowadd, "zfrylb", para.getString("zfrylb"));
		dsQuery.put(rowadd, "zyjszwjb", para.getString("zyjszwjb"));
		dsQuery.put(rowadd, "gjzyzgdj", para.getString("gjzyzgdj"));
		dsQuery.put(rowadd, "xzzw", para.getString("xzzw"));
		dsQuery.put(rowadd, "cjgzQsrq", para.getString("cjgzQsrq"));
		dsQuery.put(rowadd, "cjgzZzrq", para.getString("cjgzZzrq"));
		dsQuery.put(rowadd, "ltxQsrq", para.getString("ltxQsrq"));
		dsQuery.put(rowadd, "ltxZzrq", para.getString("ltxZzrq"));
		dsQuery.put(rowadd, "jbjgid", para.getString("jbjgid"));
		dsQuery.put(rowadd, "jgsygzlx", para.getString("jgsygzlx", ""));
		dsQuery.put(rowadd, "sydwgrgw", para.getString("sydwgrgw", ""));//事业单位工人岗位 syq add 2018-3-23

		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end

		//dsBtbh 补贴编号列重新组装一下,和页面展示列保持一致
		//根据支付范围查询补贴编号
		dsBtbh = new DataStore();
		if (zffw != null && zffw.indexOf("1") >= 0) {
			//统筹内
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and gi.btlb <> '956'");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			DataStore dsBtbhMonth = this.sql.executeQuery();
			dsBtbh.combineDatastore(dsBtbhMonth);
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_year_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and gi.btlb <> '956'");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			DataStore dsBtbhYearTemp = this.sql.executeQuery();
			
			dsBtbh.combineDatastore(dsBtbhYearTemp);
			//增加统内合计列
			dsBtbh.addRow();
			dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", "tnhj");
			dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", "统内合计");
			
		}
		
		if (zffw != null && zffw.indexOf("2") >= 0) {
			// 统筹外
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and gi.btlb = '956'");
			sqlBF
				.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			DataStore dsBtbhMonth = this.sql.executeQuery();
			dsBtbh.combineDatastore(dsBtbhMonth);
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_year_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and gi.btlb = '956'");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			DataStore dsBtbhYearTemp = this.sql.executeQuery();

			dsBtbh.combineDatastore(dsBtbhYearTemp);

			dsBtbh.addRow();
			dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", "twhj");
			dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", "统外合计");
		}
		rdo.put("dsbcxmbh", dsBcxmbh);
		rdo.put("dsjbjg", ds);
		rdo.put("dsquery", dsQuery);
		rdo.put("mxinfo", dsMxInfo);
		rdo.put("dsbtbh", dsBtbh);
		rdo.put("cxbz", "1");
		rdo.put("jbjgid", this.getBizInstitution());
		rdo.put("ny", DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM"));
		rdo.put("ffqsny", para.getString("ffqsny"));
		rdo.put("ffzzny", para.getString("ffzzny"));
		
		QueryLogTool.updateQueryLog(querylogid, dsMxInfo.rowCount());

		return rdo;
	}

	/**
	 * 方法简介.拨付人员明细查询分页查询数据
	 * 
	 * @author 韦超 2015-11-28
	 */
	public DataObject queryBfryMxInfoRetrieve(final DataObject para) throws Exception {
		String dfjglb, dfjgid, dwxz, zfrylb, zyjszwjb, gjzyzgdj, xzzw, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny, dwdjid;
		String jgsygzlx, dyffzt, brcqshd, sydwgrgw;
		String qrdjQsrq = "", qrdjZzrq = "";
		DataStore dsBtbh;
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String btbh,btbhs;
		
		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		dfjglb = para.getString("fdfjglb");
		dfjgid = para.getString("fdfjgid");
		dwxz = para.getString("dwxz");
		zfrylb = para.getString("zfrylb");
		zyjszwjb = para.getString("zyjszwjb");
		gjzyzgdj = para.getString("gjzyzgdj");
		sydwgrgw = para.getString("sydwgrgw", "");// 事业单位工人岗位 syq add 2018-3-23
		dwdjid=para.getString("dwdjid", ""); //增加单位登记id   hbl add 20190618
		
		xzzw = para.getString("xzzw");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jgsygzlx = para.getString("jgsygzlx", "");// 机关事业工资类型
		dyffzt = para.getString("dyffzt", "");// 待遇发放状态   泰安增加 weichao 20160930
		dyffzt = HsuTools.replaceC2QCQ(dyffzt);
		brcqshd =HsuTools.replaceC2QCQ(para.getString("brcqshd",""));//本人长期生活地  滨州增加 gzh 20161108
		if (para.containsKey("qrdjQsrq") && para.containsKey("qrdjZzrq")) {
			qrdjQsrq = para.getDateToString("qrdjQsrq", "yyyyMMdd");
			qrdjZzrq = para.getDateToString("qrdjZzrq", "yyyyMMdd");
			if (qrdjQsrq != null && !"".equals(qrdjQsrq) && qrdjZzrq != null
					&& !"".equals(qrdjZzrq)) {
				if (DateUtil.getMonthDifferenceBetweenTwoStringDate(qrdjQsrq,
						qrdjZzrq) > 12) {
					this.bizException("单据确认日期起始日期与终止日期超过一年!");
				}
			}
		}
		
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
	
		// 查询经办机构查询年月的btbh
		//先从参数ad3u1048中取，取不到时在取查询  --zkj  modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		} else {
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc, gi.btbh btbhs ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
		}
		// end
		
		//烟台存在补贴编号相同大小写不一致，程序会报错，新增一列作为补贴别名 rxb 20160830
		for(int i=0;i<dsBtbh.rowCount();i++){
			 btbh = dsBtbh.getString(i, "btbh").toUpperCase();
			 for(int j =0;j<i;j++){
				 String  btbh2 = dsBtbh.getString(j, "btbh").toUpperCase();
				 if(btbh.equals(btbh2)){
					 dsBtbh.put(j, "btbhs", btbh2+j);
				 }
			 }
		}

		// 单位中的人员
		sqlBF.setLength(0);
		// 职工
		sqlBF.append(" select r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz, pi.dfjglb, pi.dfjgid, o.jjlx, ");//增加jjlx   add bywangxin  20210531
		sqlBF.append("        pi.shbzhm, pg.zdlsh, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, ei.ltxlb zfrylb, ei.cjgzrq, ");
		sqlBF.append("        ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid,  nvl(sum(pg.btje),0) hj, ");
		sqlBF.append("		  round(round(nvl(ei.stjfnx + ei.sjjfnx, 0)*12, 0)/12, 2) jfnx, '' dfjgbh, '' dfjgmc,ei.dacsrq, p.lxrxm,");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,ei.stjfnx,ei.sjjfnx,p.brcqshd,");//gzh 20161108 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, ei.jfbl, ");//增加户口所在地，手机号码 add by blp 20161207// add gll 2017.05.09 增加查询jfbl
		sqlBF.append("        '' swryid,'' bz, ei.jgsyzj, ");//增加死亡人员ID查询  zkj modify 2017/12/14 --add by gll 增加查询jgsyzj
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			sqlBF.append(" 	  nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append(" " + btbhs + ",");
		}
		sqlBF.append(" ei.jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb, sum(decode(pg.fsyy, '2', pg.btje)) dybfse ");//增加当月补发数额  rzs 20200304// 事业单位工人岗位 syq add 2018-3-23// 机关事业单位工作人员类别 nx add 20181015
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_giv_detl pg, ");
		sqlBF.append("        si3u.orgn_reg r, ");
		sqlBF.append("        si3u.per_natl pn ");
		sqlBF.append("        ,biuv.orgn o ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and  r.dwid = o.dwid   ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		sqlBF.append("    and pg.fflb = 'A' ");
		// 增加查询条件 按单位编号查询（传入dwdjid) add by hbl 20190618
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append(" and r.dwdjid= '");
			sqlBF.append(dwdjid);
			sqlBF.append("'");
		}
		//add by gzh 20161108 增加查询 本人长期生活地
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		// add end
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// 增加待遇ffzt 的限制，泰安使用 weichao 20160930
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append(" and pi.dyffzt in (");
			sqlBF.append(dyffzt);
			sqlBF.append(") ");
		} else {
			sqlBF.append("    and (pg.zdlsh is not null or (pg.zdlsh is null and pi.dyffzt in('1','3')))");
		}
		// 增加单据确认起始日期和终止日期的查询条件 add.zxz.20170801
		if (qrdjQsrq != null && !"".equals(qrdjQsrq) && qrdjZzrq != null
				&& !"".equals(qrdjZzrq)) {
			sqlBF.append("    and exists");
			sqlBF.append("   (select 1");
			sqlBF.append("    		  from ad3u.bill_genl bg");
			sqlBF.append("    		 where bg.zdlsh = pg.zdlsh");
			sqlBF.append("    		   and to_char(bg.qrjbsj, 'yyyyMMdd') between");
			sqlBF.append("    			'" + qrdjQsrq + "' and '" + qrdjZzrq + "') ");
		}
		// add.zxz.20170801.end
		
		// end weichao 20160930
		sqlBF.append("    and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("    and nvl(ei.cjgzrq,?) between ? and ? ");
		sqlBF.append("    and ei.ltxrq between ? and ? ");
		sqlBF.append(" group by pi.dfjglb, pi.dfjgid, pi.shbzhm, pg.zdlsh,  pi.yhzh,  ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("          pi.xb, pi.csrq, ei.cjgzrq, p.grsf, pi.ygxs, ei.ltxlb, ");
		sqlBF.append("          ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("          p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid, pi.xm, p.lxrxm, p.lxrdh, p.yzbm,");
		sqlBF.append("          ei.stjfnx,ei.sjjfnx,ei.dacsrq, ei.jzgbz,pi.ryid,p.yxzjhm,r.dwbh, r.cbdwmc, o.jjlx,");
		sqlBF.append("          r.cbdwxz, pi.dyffzt,p.brcqshd, p.hkszd, p.sjhm, ei.jfbl, pn.sydwgrgw, ei.jgsyzj, pn.jgsydwgzrylb");// add by nx	181016
		sqlBF.append(" union all ");
		// 遗属
		sqlBF.append(" select distinct r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz, pi.dfjglb, pi.dfjgid, o.jjlx, ");//增加jjlx   add bywangxin  20210531
		sqlBF.append("        pi.shbzhm, pg.zdlsh, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, si.yslb zfrylb, '' cjgzrq, ");
		sqlBF.append("        '' ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid,  nvl(sum(pg.btje),0) hj, ");
		sqlBF.append("		  0 jfnx, '' dfjgbh, '' dfjgmc, '' dacsrq, p.lxrxm, ");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,0 stjfnx,0 sjjfnx, p.brcqshd,");//gzh 20161108 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, 0 jfbl, ");//增加户口所在地，手机号码 add by blp 20161207
		sqlBF.append("        si.swryid, si.bz, '' jgsyzj,  ");//增加死亡人员信息查询  zkj modify 2017/12/14
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			sqlBF.append(" 	  nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append("  " + btbhs + ",");
		}
		sqlBF.append(" '' jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb , sum(decode(pg.fsyy, '2', pg.btje)) dybfse");//增加当月补发数额  rzs 20200304//事业单位工人岗位 syq add 2018-3-23//机关事业单位工作人员类别 add by nx											
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_giv_detl pg, ");
		sqlBF.append("        si3u.orgn_reg r, ");
		sqlBF.append("        si3u.per_natl pn ");
		sqlBF.append("        ,biuv.orgn   o ");		
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid(+) ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		sqlBF.append("    and o.dwid = r.dwid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		sqlBF.append("    and pg.fflb = 'A' ");
		sqlBF.append("    and pg.yfny <= ? and pg.yfny >= ? ");
		// 增加查询条件 按单位编号查询（传入dwdjid) add by hbl 20190618
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append(" and r.dwdjid= '");
			sqlBF.append(dwdjid);
			sqlBF.append("' ");
		}
		//add by gzh 20161108 增加查询 本人长期生活地
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		// add end
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}

		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// 增加待遇ffzt 的限制，泰安使用 weichao 20160930
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append(" and pi.dyffzt in (");
			sqlBF.append(dyffzt);
			sqlBF.append(") ");
		} else {
			sqlBF.append("    and (pg.zdlsh is not null or (pg.zdlsh is null and pi.dyffzt in('1','3')))");
		}
		// 增加单据确认起始日期和终止日期的查询条件 add.zxz.20170801
		if (qrdjQsrq != null && !"".equals(qrdjQsrq) && qrdjZzrq != null
				&& !"".equals(qrdjZzrq)) {
			sqlBF.append("    and exists");
			sqlBF.append("   (select 1");
			sqlBF.append("    		  from ad3u.bill_genl bg");
			sqlBF.append("    		 where bg.zdlsh = pg.zdlsh");
			sqlBF.append("    		   and to_char(bg.qrjbsj, 'yyyyMMdd') between");
			sqlBF.append("    			'" + qrdjQsrq + "' and '" + qrdjZzrq + "') ");
		}
		// add.zxz.20170801.end
		// end weichao 20160930
		sqlBF.append(" group by pi.dfjglb, pi.dfjgid, pi.shbzhm, pg.zdlsh, pi.yhzh,  ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("          pi.xb, pi.csrq,  p.grsf, pi.ygxs, si.yslb, pi.dyxsksny,  ");
		sqlBF.append("          pi.xzzw, p.zyjszwjb, p.gjzyzgdj, p.txdz, p.jtzz,  ");
		sqlBF.append("          pi.dylqlb, pi.dqdydjid, pi.xm, p.lxrxm, p.lxrdh,  ");
		sqlBF.append("          p.yzbm, pi.ryid,p.yxzjhm,r.dwbh, r.cbdwmc,");
		sqlBF.append("          r.cbdwxz, pi.dyffzt,brcqshd, p.hkszd, p.sjhm, o.jjlx, ");
		sqlBF.append("          si.swryid, si.bz, pn.sydwgrgw, pn.jgsydwgzrylb ");//增加死亡人员ID查询  zkj modify 2017/12/14//jgsydwgzrylb add by nx 181016
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ffzzny);
		this.sql.setString(2, ffqsny);
		this.sql.setString(3, cjgzQsrq);
		this.sql.setString(4, cjgzQsrq);
		this.sql.setString(5, cjgzZzrq);
		this.sql.setString(6, ltxQsrq);
		this.sql.setString(7, ltxZzrq);
		this.sql.setString(8, ffzzny);
		this.sql.setString(9, ffqsny);
		
		rdo.put("sqlStr", this.sql.getSqlString());
		return rdo;
	}

	
	/**
	 * 方法简介.拨付人员明细查询分页查询数据(济南机关使用)
	 * 查询条件增加支付范围（统筹内、统筹外）
	 * @author 张凯杰  2019-06-17
	 */
	public DataObject queryBfryMxInfoRetrieveJNjg(final DataObject para) throws Exception {
		String dfjglb, dfjgid, dwxz, zfrylb, zyjszwjb, gjzyzgdj, xzzw, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny, zffw;
		String jgsygzlx, dyffzt, brcqshd, sydwgrgw;
		String qrdjQsrq = "", qrdjZzrq = "";
		DataStore dsBtbh;
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String btbh,btbhs;
		
		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		dfjglb = para.getString("fdfjglb");
		dfjgid = para.getString("fdfjgid");
		dwxz = para.getString("dwxz");
		zfrylb = para.getString("zfrylb");
		zyjszwjb = para.getString("zyjszwjb");
		gjzyzgdj = para.getString("gjzyzgdj");
		sydwgrgw = para.getString("sydwgrgw", "");// 事业单位工人岗位 syq add 2018-3-23
		
		xzzw = para.getString("xzzw");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jgsygzlx = para.getString("jgsygzlx", "");// 机关事业工资类型
		dyffzt = para.getString("dyffzt", "");// 待遇发放状态   泰安增加 weichao 20160930
		dyffzt = HsuTools.replaceC2QCQ(dyffzt);
		brcqshd =HsuTools.replaceC2QCQ(para.getString("brcqshd",""));//本人长期生活地  滨州增加 gzh 20161108
		zffw = para.getString("zffw", ""); // 入参增加支付范围
		if (para.containsKey("qrdjQsrq") && para.containsKey("qrdjZzrq")) {
			qrdjQsrq = para.getDateToString("qrdjQsrq", "yyyyMMdd");
			qrdjZzrq = para.getDateToString("qrdjZzrq", "yyyyMMdd");
			if (qrdjQsrq != null && !"".equals(qrdjQsrq) && qrdjZzrq != null
					&& !"".equals(qrdjZzrq)) {
				if (DateUtil.getMonthDifferenceBetweenTwoStringDate(qrdjQsrq,
						qrdjZzrq) > 12) {
					this.bizException("单据确认日期起始日期与终止日期超过一年!");
				}
			}
		}
		
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (zffw == null || "".equals(zffw)) {
			zffw = "1,2";
		}
		//构造限制补贴类别的sql
		String sqlstrtemp = "";
		if ("1".equals(zffw)) {
			//统筹内
			sqlstrtemp = " and gi.btlb <> '956' ";
		}else if ("2".equals(zffw)) {
			//统筹外
			sqlstrtemp = " and gi.btlb = '956' ";
		}
	
		// 查询经办机构查询年月的btbh
		//先从参数ad3u1048中取，取不到时在取查询  --zkj  modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		} else {
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc, gi.btbh btbhs ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
		}
		// end
		
		//烟台存在补贴编号相同大小写不一致，程序会报错，新增一列作为补贴别名 rxb 20160830
		for(int i=0;i<dsBtbh.rowCount();i++){
			 btbh = dsBtbh.getString(i, "btbh").toUpperCase();
			 for(int j =0;j<i;j++){
				 String  btbh2 = dsBtbh.getString(j, "btbh").toUpperCase();
				 if(btbh.equals(btbh2)){
					 dsBtbh.put(j, "btbhs", btbh2+j);
				 }
			 }
		}

		// 单位中的人员
		sqlBF.setLength(0);
		// 职工
		sqlBF.append(" select r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pg.zdlsh, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, ei.ltxlb zfrylb, ei.cjgzrq, ");
		sqlBF.append("        ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid,  nvl(sum(pg.btje),0) hj, ");
		sqlBF.append("		  round(round(nvl(ei.stjfnx + ei.sjjfnx, 0)*12, 0)/12, 2) jfnx, '' dfjgbh, '' dfjgmc,ei.dacsrq, p.lxrxm,");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,ei.stjfnx,ei.sjjfnx,p.brcqshd,");//gzh 20161108 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, ei.jfbl, ");//增加户口所在地，手机号码 add by blp 20161207// add gll 2017.05.09 增加查询jfbl
		sqlBF.append("        '' swryid,'' bz, ei.jgsyzj, ");//增加死亡人员ID查询  zkj modify 2017/12/14 --add by gll 增加查询jgsyzj
		sqlBF.append("        nvl(sum(decode(gi.btlb, '956', nvl(pg.btje, 0), 0)), 0) twhj, ");
		sqlBF.append("        nvl(sum(decode(gi.btlb, '956', 0, nvl(pg.btje, 0))), 0) tnhj, "); //增加统内合计和统外合计的查询 -- zkj modify 2019/06/18
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			sqlBF.append(" 	  nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append(" " + btbhs + ",");
		}
		sqlBF.append(" ei.jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb, ");// 事业单位工人岗位 syq add 2018-3-23// 机关事业单位工作人员类别 nx add 20181015
		//add by cxq 2021/8/27 增加济南退休人员改革前和退休时人事项目信息
		sqlBF.append("	pn.gwyzw,pn.gwyjb,pn.gwyjbdc,pn.jggqrygw,png.ggqsydwgrgw, ");
		sqlBF.append("	pn.sydwzyjsrygw,pn.sydwzyjsryxj,pn.sydwglrygw,pn.sydwglryxj,png.ggqsydwgrxj, ");
		sqlBF.append("	pn.sydwgrxj,png.ggqjgsydwgzrylb,png.ggqgwyzw,png.ggqgwyjb,png.ggqgwyjbdc, ");
		sqlBF.append("	png.ggqjggqryjsdj,png.ggqjggqrygw,png.ggqsydwzyjsrygw,png.ggqsydwzyjsryxj,png.ggqsydwglrygw, ");
		sqlBF.append("	png.ggqsydwglryxj,pn.gjzyzgdj jggqryjsdj ");//add by cxq 2021/9/1 增加查询机关工勤人员技术等级
		//end add by cxq 2021/8/27
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_giv_detl pg, ");
		sqlBF.append("        si3u.orgn_reg r, ");
		sqlBF.append("        si3u.per_natl pn, ");
		sqlBF.append("        ad3u.giv_item gi, ");
		sqlBF.append("        si3u.per_natl_gov png ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pg.btbh = gi.btbh ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid ");
		sqlBF.append("    and pi.ryid = png.ryid(+) ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		sqlBF.append("    and pg.fflb = 'A' ");
		sqlBF.append(sqlstrtemp);
		//add by gzh 20161108 增加查询 本人长期生活地
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		// add end
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// 增加待遇ffzt 的限制，泰安使用 weichao 20160930
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append(" and pi.dyffzt in (");
			sqlBF.append(dyffzt);
			sqlBF.append(") ");
		} else {
			sqlBF.append("    and (pg.zdlsh is not null or (pg.zdlsh is null and pi.dyffzt in('1','3')))");
		}
		// 增加单据确认起始日期和终止日期的查询条件 add.zxz.20170801
		if (qrdjQsrq != null && !"".equals(qrdjQsrq) && qrdjZzrq != null
				&& !"".equals(qrdjZzrq)) {
			sqlBF.append("    and exists");
			sqlBF.append("   (select 1");
			sqlBF.append("    		  from ad3u.bill_genl bg");
			sqlBF.append("    		 where bg.zdlsh = pg.zdlsh");
			sqlBF.append("    		   and to_char(bg.qrjbsj, 'yyyyMMdd') between");
			sqlBF.append("    			'" + qrdjQsrq + "' and '" + qrdjZzrq + "') ");
		}
		// add.zxz.20170801.end
		
		// end weichao 20160930
		sqlBF.append("    and pg.yfny <= ? and pg.yfny >= ? ");
		sqlBF.append("    and nvl(ei.cjgzrq,?) between ? and ? ");
		sqlBF.append("    and ei.ltxrq between ? and ? ");
		sqlBF.append(" group by pi.dfjglb, pi.dfjgid, pi.shbzhm, pg.zdlsh,  pi.yhzh,  ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("          pi.xb, pi.csrq, ei.cjgzrq, p.grsf, pi.ygxs, ei.ltxlb, ");
		sqlBF.append("          ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("          p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid, pi.xm, p.lxrxm, p.lxrdh, p.yzbm,");
		sqlBF.append("          ei.stjfnx,ei.sjjfnx,ei.dacsrq, ei.jzgbz,pi.ryid,p.yxzjhm,r.dwbh, r.cbdwmc, ");
		sqlBF.append("          r.cbdwxz, pi.dyffzt,p.brcqshd, p.hkszd, p.sjhm, ei.jfbl, pn.sydwgrgw, ei.jgsyzj, pn.jgsydwgzrylb,");// add by nx	181016
		// add by cxq 2021/8/27 增加济南退休人员改革前和退休时人事项目信息
		sqlBF.append("			pn.gwyzw,pn.gwyjb,pn.gwyjbdc,pn.jggqrygw,png.ggqsydwgrgw, ");
		sqlBF.append("			pn.sydwzyjsrygw,pn.sydwzyjsryxj,pn.sydwglrygw,pn.sydwglryxj,png.ggqsydwgrxj, ");
		sqlBF.append("			pn.sydwgrxj,png.ggqjgsydwgzrylb,png.ggqgwyzw,png.ggqgwyjb,png.ggqgwyjbdc, ");
		sqlBF.append("			png.ggqjggqryjsdj,png.ggqjggqrygw,png.ggqsydwzyjsrygw,png.ggqsydwzyjsryxj,png.ggqsydwglrygw, ");
		sqlBF.append("			png.ggqsydwglryxj,pn.gjzyzgdj");//add by cxq 2021/9/1 增加查询机关工勤人员技术等级
		//end add by cxq
		sqlBF.append(" union all ");
		// 遗属
		sqlBF.append(" select distinct r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pg.zdlsh, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, si.yslb zfrylb, '' cjgzrq, ");
		sqlBF.append("        '' ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid,  nvl(sum(pg.btje),0) hj, ");
		sqlBF.append("		  0 jfnx, '' dfjgbh, '' dfjgmc, '' dacsrq, p.lxrxm, ");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,0 stjfnx,0 sjjfnx, p.brcqshd,");//gzh 20161108 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, 0 jfbl, ");//增加户口所在地，手机号码 add by blp 20161207
		sqlBF.append("        si.swryid, si.bz, '' jgsyzj,  ");//增加死亡人员信息查询  zkj modify 2017/12/14
		sqlBF.append("        nvl(sum(decode(gi.btlb, '956', nvl(pg.btje, 0), 0)), 0) twhj, ");
		sqlBF.append("        nvl(sum(decode(gi.btlb, '956', 0, nvl(pg.btje, 0))), 0) tnhj, "); //增加统内合计和统外合计的查询 -- zkj modify 2019/06/18
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			sqlBF.append(" 	  nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append("  " + btbhs + ",");
		}
		sqlBF.append(" '' jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb, 	");//事业单位工人岗位 syq add 2018-3-23//机关事业单位工作人员类别 add by nx		
		//add by cxq 2021/8/27 增加济南退休人员改革前和退休时人事项目信息
		sqlBF.append("	pn.gwyzw,pn.gwyjb,pn.gwyjbdc,pn.jggqrygw,png.ggqsydwgrgw, ");
		sqlBF.append("	pn.sydwzyjsrygw,pn.sydwzyjsryxj,pn.sydwglrygw,pn.sydwglryxj,png.ggqsydwgrxj, ");
		sqlBF.append("	pn.sydwgrxj,png.ggqjgsydwgzrylb,png.ggqgwyzw,png.ggqgwyjb,png.ggqgwyjbdc, ");
		sqlBF.append("	png.ggqjggqryjsdj,png.ggqjggqrygw,png.ggqsydwzyjsrygw,png.ggqsydwzyjsryxj,png.ggqsydwglrygw, ");
		sqlBF.append("	png.ggqsydwglryxj,pn.gjzyzgdj jggqryjsdj");//add by cxq 2021/9/1 增加查询机关工勤人员技术等级
		//end add by cxq 2021/8/27
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_giv_detl pg, ");
		sqlBF.append("        si3u.orgn_reg r, ");
		sqlBF.append("        si3u.per_natl pn, ");
		sqlBF.append("        ad3u.giv_item gi, ");
		sqlBF.append("        si3u.per_natl_gov png ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pg.btbh = gi.btbh ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid(+) ");
		sqlBF.append("    and pi.ryid = png.ryid(+) ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		sqlBF.append("    and pg.fflb = 'A' ");
		sqlBF.append("    and pg.yfny <= ? and pg.yfny >= ? "); 
		sqlBF.append(sqlstrtemp);
		//add by gzh 20161108 增加查询 本人长期生活地
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		// add end
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}

		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// 增加待遇ffzt 的限制，泰安使用 weichao 20160930
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append(" and pi.dyffzt in (");
			sqlBF.append(dyffzt);
			sqlBF.append(") ");
		} else {
			sqlBF.append("    and (pg.zdlsh is not null or (pg.zdlsh is null and pi.dyffzt in('1','3')))");
		}
		// 增加单据确认起始日期和终止日期的查询条件 add.zxz.20170801
		if (qrdjQsrq != null && !"".equals(qrdjQsrq) && qrdjZzrq != null
				&& !"".equals(qrdjZzrq)) {
			sqlBF.append("    and exists");
			sqlBF.append("   (select 1");
			sqlBF.append("    		  from ad3u.bill_genl bg");
			sqlBF.append("    		 where bg.zdlsh = pg.zdlsh");
			sqlBF.append("    		   and to_char(bg.qrjbsj, 'yyyyMMdd') between");
			sqlBF.append("    			'" + qrdjQsrq + "' and '" + qrdjZzrq + "') ");
		}
		// add.zxz.20170801.end
		// end weichao 20160930
		sqlBF.append(" group by pi.dfjglb, pi.dfjgid, pi.shbzhm, pg.zdlsh, pi.yhzh,  ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("          pi.xb, pi.csrq,  p.grsf, pi.ygxs, si.yslb, pi.dyxsksny,  ");
		sqlBF.append("          pi.xzzw, p.zyjszwjb, p.gjzyzgdj, p.txdz, p.jtzz,  ");
		sqlBF.append("          pi.dylqlb, pi.dqdydjid, pi.xm, p.lxrxm, p.lxrdh,  ");
		sqlBF.append("          p.yzbm, pi.ryid,p.yxzjhm,r.dwbh, r.cbdwmc,");
		sqlBF.append("          r.cbdwxz, pi.dyffzt,brcqshd, p.hkszd, p.sjhm, ");
		sqlBF.append("          si.swryid, si.bz, pn.sydwgrgw, pn.jgsydwgzrylb, ");//增加死亡人员ID查询  zkj modify 2017/12/14//jgsydwgzrylb add by nx 181016
		// add by cxq 2021/8/27 增加济南退休人员改革前和退休时人事项目信息
		sqlBF.append("			pn.gwyzw,pn.gwyjb,pn.gwyjbdc,pn.jggqrygw,png.ggqsydwgrgw, ");
		sqlBF.append("			pn.sydwzyjsrygw,pn.sydwzyjsryxj,pn.sydwglrygw,pn.sydwglryxj,png.ggqsydwgrxj, ");
		sqlBF.append("			pn.sydwgrxj,png.ggqjgsydwgzrylb,png.ggqgwyzw,png.ggqgwyjb,png.ggqgwyjbdc, ");
		sqlBF.append("			png.ggqjggqryjsdj,png.ggqjggqrygw,png.ggqsydwzyjsrygw,png.ggqsydwzyjsryxj,png.ggqsydwglrygw, ");
		sqlBF.append("			png.ggqsydwglryxj,pn.gjzyzgdj");
		//end add by cxq
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ffzzny);
		this.sql.setString(2, ffqsny);
		this.sql.setString(3, cjgzQsrq);
		this.sql.setString(4, cjgzQsrq);
		this.sql.setString(5, cjgzZzrq);
		this.sql.setString(6, ltxQsrq);
		this.sql.setString(7, ltxZzrq);
		this.sql.setString(8, ffzzny);
		this.sql.setString(9, ffqsny);
		
		rdo.put("sqlStr", this.sql.getSqlString());
		return rdo;
	}
	
	
	/**
	 * 方法简介.拨付人员明细查询分页查询数据（德州客户化）
	 * 
	 * @author 张天刚 2018年12月8日
	 */
	public DataObject queryBfryMxInfoRetrieve_3714(final DataObject para) throws Exception {
		String dfjglb, dfjgid, dwxz, zfrylb, zyjszwjb, gjzyzgdj, xzzw, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny;
		String jgsygzlx, dyffzt, brcqshd, sydwgrgw;
		String qrdjQsrq = "", qrdjZzrq = "";
		DataStore dsBtbh;
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String btbh,btbhs;
		
		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		dfjglb = para.getString("fdfjglb");
		dfjgid = para.getString("fdfjgid");
		dwxz = para.getString("dwxz");
		zfrylb = para.getString("zfrylb");
		zyjszwjb = para.getString("zyjszwjb");
		gjzyzgdj = para.getString("gjzyzgdj");
		sydwgrgw = para.getString("sydwgrgw", "");// 事业单位工人岗位 syq add 2018-3-23
		
		xzzw = para.getString("xzzw");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jgsygzlx = para.getString("jgsygzlx", "");// 机关事业工资类型
		dyffzt = para.getString("dyffzt", "");// 待遇发放状态   泰安增加 weichao 20160930
		dyffzt = HsuTools.replaceC2QCQ(dyffzt);
		brcqshd =HsuTools.replaceC2QCQ(para.getString("brcqshd",""));//本人长期生活地  滨州增加 gzh 20161108
		if (para.containsKey("qrdjQsrq") && para.containsKey("qrdjZzrq")) {
			qrdjQsrq = para.getDateToString("qrdjQsrq", "yyyyMMdd");
			qrdjZzrq = para.getDateToString("qrdjZzrq", "yyyyMMdd");
			if (qrdjQsrq != null && !"".equals(qrdjQsrq) && qrdjZzrq != null
					&& !"".equals(qrdjZzrq)) {
				if (DateUtil.getMonthDifferenceBetweenTwoStringDate(qrdjQsrq,
						qrdjZzrq) > 12) {
					this.bizException("单据确认日期起始日期与终止日期超过一年!");
				}
			}
		}
		
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
	
		// 查询经办机构查询年月的btbh
		//先从参数ad3u1048中取，取不到时在取查询  --zkj  modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		} else {
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc, gi.btbh btbhs ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
		}
		// end
		
		//烟台存在补贴编号相同大小写不一致，程序会报错，新增一列作为补贴别名 rxb 20160830
		for(int i=0;i<dsBtbh.rowCount();i++){
			 btbh = dsBtbh.getString(i, "btbh").toUpperCase();
			 for(int j =0;j<i;j++){
				 String  btbh2 = dsBtbh.getString(j, "btbh").toUpperCase();
				 if(btbh.equals(btbh2)){
					 dsBtbh.put(j, "btbhs", btbh2+j);
				 }
			 }
		}

		// 单位中的人员
		sqlBF.setLength(0);
		// 职工
		sqlBF.append(" select r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, ei.ltxlb zfrylb, ei.cjgzrq, ");
		sqlBF.append("        ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid,  nvl(sum(pg.btje),0) hj, ");
		sqlBF.append("		  round(round(nvl(ei.stjfnx + ei.sjjfnx, 0)*12, 0)/12, 2) jfnx, '' dfjgbh, '' dfjgmc,ei.dacsrq, p.lxrxm,");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,ei.stjfnx,ei.sjjfnx,p.brcqshd,");//gzh 20161108 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, ei.jfbl, ");//增加户口所在地，手机号码 add by blp 20161207// add gll 2017.05.09 增加查询jfbl
		sqlBF.append("        '' swryid,'' bz, ei.jgsyzj, ");//增加死亡人员ID查询  zkj modify 2017/12/14 --add by gll 增加查询jgsyzj
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			sqlBF.append(" 	  nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append(" " + btbhs + ",");
		}
		sqlBF.append(" ei.jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb ");// 事业单位工人岗位 syq add 2018-3-23// 机关事业单位工作人员类别 nx add 20181015
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_giv_month_std pg, ");
		sqlBF.append("        si3u.orgn_reg r, ");
		sqlBF.append("        si3u.per_natl pn ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		//add by gzh 20161108 增加查询 本人长期生活地
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		// add end
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// 增加待遇ffzt 的限制，泰安使用 weichao 20160930
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append(" and pi.dyffzt in (");
			sqlBF.append(dyffzt);
			sqlBF.append(") ");
		}
		
		// end weichao 20160930
		sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny, '205012') >= ? ");
		sqlBF.append("    and nvl(ei.cjgzrq,?) between ? and ? ");
		sqlBF.append("    and ei.ltxrq between ? and ? ");
		sqlBF.append(" group by pi.dfjglb, pi.dfjgid, pi.shbzhm, pi.yhzh,  ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("          pi.xb, pi.csrq, ei.cjgzrq, p.grsf, pi.ygxs, ei.ltxlb, ");
		sqlBF.append("          ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("          p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid, pi.xm, p.lxrxm, p.lxrdh, p.yzbm,");
		sqlBF.append("          ei.stjfnx,ei.sjjfnx,ei.dacsrq, ei.jzgbz,pi.ryid,p.yxzjhm,r.dwbh, r.cbdwmc, ");
		sqlBF.append("          r.cbdwxz, pi.dyffzt,p.brcqshd, p.hkszd, p.sjhm, ei.jfbl, pn.sydwgrgw, ei.jgsyzj, pn.jgsydwgzrylb");// add by nx	181016
		sqlBF.append(" union all ");
		// 遗属
		sqlBF.append(" select distinct r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pi.xm, pi.yhzh, pi.xb, p.yxzjhm, ");// 增加zdlsh add.zxz.20170801
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, si.yslb zfrylb, '' cjgzrq, ");
		sqlBF.append("        '' ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid,  nvl(sum(pg.btje),0) hj, ");
		sqlBF.append("		  0 jfnx, '' dfjgbh, '' dfjgmc, '' dacsrq, p.lxrxm, ");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,0 stjfnx,0 sjjfnx, p.brcqshd,");//gzh 20161108 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, 0 jfbl, ");//增加户口所在地，手机号码 add by blp 20161207
		sqlBF.append("        si.swryid, si.bz, '' jgsyzj,  ");//增加死亡人员信息查询  zkj modify 2017/12/14
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			sqlBF.append(" 	  nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append("  " + btbhs + ",");
		}
		sqlBF.append(" '' jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb");//事业单位工人岗位 syq add 2018-3-23//机关事业单位工作人员类别 add by nx											
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_giv_month_std pg, ");
		sqlBF.append("        si3u.orgn_reg r, ");
		sqlBF.append("        si3u.per_natl pn ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid(+) ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny, '205012') >= ? ");
		//add by gzh 20161108 增加查询 本人长期生活地
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		// add end
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}

		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// 增加待遇ffzt 的限制，泰安使用 weichao 20160930
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append(" and pi.dyffzt in (");
			sqlBF.append(dyffzt);
			sqlBF.append(") ");
		}
		// end weichao 20160930
		sqlBF.append(" group by pi.dfjglb, pi.dfjgid, pi.shbzhm, pi.yhzh,  ");// 增加zdlshadd.zxz.20170801
		sqlBF.append("          pi.xb, pi.csrq,  p.grsf, pi.ygxs, si.yslb, pi.dyxsksny,  ");
		sqlBF.append("          pi.xzzw, p.zyjszwjb, p.gjzyzgdj, p.txdz, p.jtzz,  ");
		sqlBF.append("          pi.dylqlb, pi.dqdydjid, pi.xm, p.lxrxm, p.lxrdh,  ");
		sqlBF.append("          p.yzbm, pi.ryid,p.yxzjhm,r.dwbh, r.cbdwmc,");
		sqlBF.append("          r.cbdwxz, pi.dyffzt,brcqshd, p.hkszd, p.sjhm, ");
		sqlBF.append("          si.swryid, si.bz, pn.sydwgrgw, pn.jgsydwgzrylb ");//增加死亡人员ID查询  zkj modify 2017/12/14//jgsydwgzrylb add by nx 181016
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ffzzny);
		this.sql.setString(2, ffqsny);
		this.sql.setString(3, cjgzQsrq);
		this.sql.setString(4, cjgzQsrq);
		this.sql.setString(5, cjgzZzrq);
		this.sql.setString(6, ltxQsrq);
		this.sql.setString(7, ltxZzrq);
		this.sql.setString(8, ffzzny);
		this.sql.setString(9, ffqsny);
		
		rdo.put("sqlStr", this.sql.getSqlString());
		return rdo;
	}
	/**
	 * 方法简介.分页查询刷新页面
	 * 
	 * @author 韦超 2015-11-28
	 */
	public DataObject queryBfryMxPage(final DataObject para) throws Exception {
		String zfrylb, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny;
		DataStore ds, dsBtbh;
		DataStore dsBcxmbh;// 机构内配置的补充项目,个人的补充项目
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		zfrylb = para.getString("zfrylb");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		// 校验数据合法性
		if (ffqsny == null || "".equals(ffqsny)) {
			this.bizException("传入的发放起始年月为空！");
		}
		if (ffzzny == null || "".equals(ffzzny)) {
			this.bizException("传入的发放终止年月为空！");
		}
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (cjgzQsrq.compareTo(cjgzZzrq) > 0) {
			this.bizException("传入的参加工作起始日期大于参加工作终止日期！");
		}
		if (ltxQsrq.compareTo(ltxZzrq) > 0) {
			this.bizException("传入的离退休起始日期大于离退休终止日期！");
		}
		if (ffqsny.compareTo(ffzzny) > 0) {
			this.bizException("传入的起始日期大于离退休终止日期！");
		}
		
		// 查询经办机构的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select distinct c.bcxmbh, p.bcxmmc, p.dmlx ");
		sqlBF.append("   from ad3u.cmpl_config c, ");
		sqlBF.append("        ad3u.per_cmpl_item p ");
		sqlBF.append("  where c.bcxmbh = p.bcxmbh ");
		sqlBF.append("    and c.bcxmbh  ");
		sqlBF.append("     in('TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH') ");//增加居住地行政区划  刘欣 modify 20170112
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and c.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		dsBcxmbh = this.sql.executeQuery();

		// 查询经办机构查询年月的btbh
		
		// 先从参数ad3u1048中取，取不到时在取查询 --zkj modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		} else {
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
			
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_year_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			DataStore dsBtbhYear = this.sql.executeQuery();
			
			dsBtbh.combineDatastore(dsBtbhYear);
		}
		
		// 将查询条件返回前台
		int rowadd;
		DataStore dsQuery = new DataStore();
		dsQuery.addRow();
		rowadd = dsQuery.rowCount() - 1;
		dsQuery.put(rowadd, "fdfjglb", para.getString("fdfjglb"));
		dsQuery.put(rowadd, "fdfjgid", para.getString("fdfjgid"));
		dsQuery.put(rowadd, "fdfjgbh", para.getString("fdfjgbh"));
		dsQuery.put(rowadd, "fdfjgmc", para.getString("fdfjgmc"));
		dsQuery.put(rowadd, "dwxz", para.getString("dwxz"));
		dsQuery.put(rowadd, "zfrylb", para.getString("zfrylb"));
		dsQuery.put(rowadd, "zyjszwjb", para.getString("zyjszwjb"));
		dsQuery.put(rowadd, "gjzyzgdj", para.getString("gjzyzgdj"));
		dsQuery.put(rowadd, "sydwgrgw", para.getString("sydwgrgw", ""));// 事业单位工人岗位 syq mod 2018-3-23
		dsQuery.put(rowadd, "xzzw", para.getString("xzzw"));
		dsQuery.put(rowadd, "cjgzQsrq", para.getString("cjgzQsrq"));
		dsQuery.put(rowadd, "cjgzZzrq", para.getString("cjgzZzrq"));
		dsQuery.put(rowadd, "ltxQsrq", para.getString("ltxQsrq"));
		dsQuery.put(rowadd, "ltxZzrq", para.getString("ltxZzrq"));
		dsQuery.put(rowadd, "jbjgid", para.getString("jbjgid"));
		dsQuery.put(rowadd, "jgsygzlx", para.getString("jgsygzlx", ""));
		dsQuery.put(rowadd, "dyffzt", para.getString("dyffzt", ""));// 泰安增加查询条件 dyffzt wichao 20160930
		dsQuery.put(rowadd, "brcqshd", para.getString("brcqshd", ""));// 滨州增加查询条件 brcqshd gzh 20161108
		dsQuery.put(rowadd, "qrdjQsrq", para.getString("qrdjQsrq", ""));
		dsQuery.put(rowadd, "qrdjZzrq", para.getString("qrdjZzrq", ""));
		dsQuery.put(rowadd, "dwbh_form", para.getString("dwbh_form", ""));//滨州增加按单位编号查询 hbl 20180622
		dsQuery.put(rowadd, "dwmc_form", para.getString("dwmc_form", ""));
		dsQuery.put(rowadd, "dwdjid", para.getString("dwdjid", ""));
		
		
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end

		rdo.put("dsbcxmbh", dsBcxmbh);
		rdo.put("dsjbjg", ds);
		rdo.put("dsquery", dsQuery);
		rdo.put("dsbtbh", dsBtbh);
		rdo.put("cxbz", "1");
		rdo.put("jbjgid", this.getBizInstitution());
		rdo.put("ny", DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM"));
		rdo.put("ffqsny", para.getString("ffqsny"));
		rdo.put("ffzzny", para.getString("ffzzny"));
        rdo.put("dsSwry", new DataStore());
		QueryLogTool.updateQueryLog(querylogid, dsBcxmbh.rowCount());

		return rdo;
	}
	
	/**
	 * 方法简介.分页查询刷新页面(济南机关使用)
	 * 与标准件的区别：
	 * 组装dsBtbh的方式不同,增加zffw（支付范围）查询条件
	 * @author 韦超 2019-06-17
	 */
	public DataObject queryBfryMxPageJNjg(final DataObject para) throws Exception {
		String zfrylb, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny, zffw;
		DataStore ds, dsBtbh;
		DataStore dsBcxmbh;// 机构内配置的补充项目,个人的补充项目
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		zfrylb = para.getString("zfrylb");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		zffw = para.getString("zffw");
		// 校验数据合法性
		if (ffqsny == null || "".equals(ffqsny)) {
			this.bizException("传入的发放起始年月为空！");
		}
		if (ffzzny == null || "".equals(ffzzny)) {
			this.bizException("传入的发放终止年月为空！");
		}
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (cjgzQsrq.compareTo(cjgzZzrq) > 0) {
			this.bizException("传入的参加工作起始日期大于参加工作终止日期！");
		}
		if (ltxQsrq.compareTo(ltxZzrq) > 0) {
			this.bizException("传入的离退休起始日期大于离退休终止日期！");
		}
		if (ffqsny.compareTo(ffzzny) > 0) {
			this.bizException("传入的起始日期大于离退休终止日期！");
		}
		if (zffw == null || "".equals(zffw)) {
			zffw = "1,2";
		}
		
		// 查询经办机构的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select distinct c.bcxmbh, p.bcxmmc, p.dmlx ");
		sqlBF.append("   from ad3u.cmpl_config c, ");
		sqlBF.append("        ad3u.per_cmpl_item p ");
		sqlBF.append("  where c.bcxmbh = p.bcxmbh ");
		sqlBF.append("    and c.bcxmbh  ");
		sqlBF.append("     in('TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH') ");//增加居住地行政区划  刘欣 modify 20170112
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and c.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		dsBcxmbh = this.sql.executeQuery();

		// 查询经办机构查询年月的btbh
		
		// 先从参数ad3u1048中取，取不到时在取查询 --zkj modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		} else {
			//根据支付范围查询补贴编号
			dsBtbh = new DataStore();
			if (zffw != null && zffw.indexOf("1") >= 0) {
				//统筹内
				sqlBF.setLength(0);
				sqlBF.append(" select distinct gi.btbh, gi.btmc ");
				sqlBF.append("   from ad3u.giv_item gi, ");
				sqlBF.append("        ad3u.per_giv_month_std pg, ");
				sqlBF.append("        ad3u.per_info pi, ");
				sqlBF.append("        si3u.orgn_reg r ");
				sqlBF.append("  where gi.btbh = pg.btbh ");
				sqlBF.append("    and pg.ryid = pi.ryid ");
				sqlBF.append("    and pi.dwdjid = r.dwdjid ");
				sqlBF.append("    and gi.btlb <> '956'");
				sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
				if (jbjgidStr != null && !"".equals(jbjgidStr)) {
					sqlBF.append(" and r.jbjgid in (");
					sqlBF.append(jbjgidStr);
					sqlBF.append(") ");
				}
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ffzzny);
				this.sql.setString(2, ffqsny);
				DataStore dsBtbhMonth = this.sql.executeQuery();
				dsBtbh.combineDatastore(dsBtbhMonth);
				sqlBF.setLength(0);
				sqlBF.append(" select distinct gi.btbh, gi.btmc ");
				sqlBF.append("   from ad3u.giv_item gi, ");
				sqlBF.append("        ad3u.per_giv_year_std pg, ");
				sqlBF.append("        ad3u.per_info pi, ");
				sqlBF.append("        si3u.orgn_reg r ");
				sqlBF.append("  where gi.btbh = pg.btbh ");
				sqlBF.append("    and pg.ryid = pi.ryid ");
				sqlBF.append("    and pi.dwdjid = r.dwdjid ");
				sqlBF.append("    and gi.btlb <> '956'");
				if (jbjgidStr != null && !"".equals(jbjgidStr)) {
					sqlBF.append(" and r.jbjgid in (");
					sqlBF.append(jbjgidStr);
					sqlBF.append(") ");
				}
				// TODO 当传入的经办机构不存在时取经办机构还没实现
				this.sql.setSql(sqlBF.toString());
				DataStore dsBtbhYear = this.sql.executeQuery();
				
				dsBtbh.combineDatastore(dsBtbhYear);
				//增加统内合计列
				dsBtbh.addRow();
				dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", "tnhj");
				dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", "统内合计");
				
			}
			
			if (zffw != null && zffw.indexOf("2") >= 0) {
				// 统筹外
				sqlBF.setLength(0);
				sqlBF.append(" select distinct gi.btbh, gi.btmc ");
				sqlBF.append("   from ad3u.giv_item gi, ");
				sqlBF.append("        ad3u.per_giv_month_std pg, ");
				sqlBF.append("        ad3u.per_info pi, ");
				sqlBF.append("        si3u.orgn_reg r ");
				sqlBF.append("  where gi.btbh = pg.btbh ");
				sqlBF.append("    and pg.ryid = pi.ryid ");
				sqlBF.append("    and pi.dwdjid = r.dwdjid ");
				sqlBF.append("    and gi.btlb = '956'");
				sqlBF
					.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
				if (jbjgidStr != null && !"".equals(jbjgidStr)) {
					sqlBF.append(" and r.jbjgid in (");
					sqlBF.append(jbjgidStr);
					sqlBF.append(") ");
				}
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ffzzny);
				this.sql.setString(2, ffqsny);
				DataStore dsBtbhMonth = this.sql.executeQuery();
				dsBtbh.combineDatastore(dsBtbhMonth);
				sqlBF.setLength(0);
				sqlBF.append(" select distinct gi.btbh, gi.btmc ");
				sqlBF.append("   from ad3u.giv_item gi, ");
				sqlBF.append("        ad3u.per_giv_year_std pg, ");
				sqlBF.append("        ad3u.per_info pi, ");
				sqlBF.append("        si3u.orgn_reg r ");
				sqlBF.append("  where gi.btbh = pg.btbh ");
				sqlBF.append("    and pg.ryid = pi.ryid ");
				sqlBF.append("    and pi.dwdjid = r.dwdjid ");
				sqlBF.append("    and gi.btlb = '956'");
				if (jbjgidStr != null && !"".equals(jbjgidStr)) {
					sqlBF.append(" and r.jbjgid in (");
					sqlBF.append(jbjgidStr);
					sqlBF.append(") ");
				}
				// TODO 当传入的经办机构不存在时取经办机构还没实现
				this.sql.setSql(sqlBF.toString());
				DataStore dsBtbhYear = this.sql.executeQuery();

				dsBtbh.combineDatastore(dsBtbhYear);

				dsBtbh.addRow();
				dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", "twhj");
				dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", "统外合计");
			}
		}
		
		// 将查询条件返回前台
		int rowadd;
		DataStore dsQuery = new DataStore();
		dsQuery.addRow();
		rowadd = dsQuery.rowCount() - 1;
		dsQuery.put(rowadd, "fdfjglb", para.getString("fdfjglb"));
		dsQuery.put(rowadd, "fdfjgid", para.getString("fdfjgid"));
		dsQuery.put(rowadd, "fdfjgbh", para.getString("fdfjgbh"));
		dsQuery.put(rowadd, "fdfjgmc", para.getString("fdfjgmc"));
		dsQuery.put(rowadd, "dwxz", para.getString("dwxz"));
		dsQuery.put(rowadd, "zfrylb", para.getString("zfrylb"));
		dsQuery.put(rowadd, "zyjszwjb", para.getString("zyjszwjb"));
		dsQuery.put(rowadd, "gjzyzgdj", para.getString("gjzyzgdj"));
		dsQuery.put(rowadd, "sydwgrgw", para.getString("sydwgrgw", ""));// 事业单位工人岗位 syq mod 2018-3-23
		dsQuery.put(rowadd, "xzzw", para.getString("xzzw"));
		dsQuery.put(rowadd, "cjgzQsrq", para.getString("cjgzQsrq"));
		dsQuery.put(rowadd, "cjgzZzrq", para.getString("cjgzZzrq"));
		dsQuery.put(rowadd, "ltxQsrq", para.getString("ltxQsrq"));
		dsQuery.put(rowadd, "ltxZzrq", para.getString("ltxZzrq"));
		dsQuery.put(rowadd, "jbjgid", para.getString("jbjgid"));
		dsQuery.put(rowadd, "jgsygzlx", para.getString("jgsygzlx", ""));
		dsQuery.put(rowadd, "dyffzt", para.getString("dyffzt", ""));// 泰安增加查询条件 dyffzt wichao 20160930
		dsQuery.put(rowadd, "brcqshd", para.getString("brcqshd", ""));// 滨州增加查询条件 brcqshd gzh 20161108
		dsQuery.put(rowadd, "qrdjQsrq", para.getString("qrdjQsrq", ""));
		dsQuery.put(rowadd, "qrdjZzrq", para.getString("qrdjZzrq", ""));
		dsQuery.put(rowadd, "zffw", para.getString("zffw", ""));
		
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end

		rdo.put("dsbcxmbh", dsBcxmbh);
		rdo.put("dsjbjg", ds);
		rdo.put("dsquery", dsQuery);
		rdo.put("dsbtbh", dsBtbh);
		rdo.put("cxbz", "1");
		rdo.put("jbjgid", this.getBizInstitution());
		rdo.put("ny", DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM"));
		rdo.put("ffqsny", para.getString("ffqsny"));
		rdo.put("ffzzny", para.getString("ffzzny"));
        rdo.put("dsSwry", new DataStore());
		QueryLogTool.updateQueryLog(querylogid, dsBcxmbh.rowCount());

		return rdo;
	}

	/**
	 * 方法简介.退休人员统外发放刷新局部界面
	 * 
	 * @author rzs
	 * @date 创建时间 2019年3月20日
	 * @since V1.0
	 */
	public DataObject queryTxrytwffRefresh(final DataObject para) throws Exception {

		DataObject rdo = new DataObject();
		String  btbh = "", btmc = "";
		int find;
		DataStore  ysds=new DataStore(),  btds = new DataStore(), fxds = new DataStore(), dd = new DataStore(), dsjbjg= new DataStore(), ycxds = new DataStore();
		SPrompt prompt = SPromptUtil.getSPrompt();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid = para.getString("jbjgid");
		
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                         ");
		sqlBF.append("  from ad3u.giv_item a                                    ");
		sqlBF.append(" where btlb = '956'                                       ");
		sqlBF.append("   and a.btbh in ('B1M1', 'B1M2', 'B1M3', 'B1M5', 'B1M6') ");
		sqlBF.append("   and exists (select 'x'                                 ");
		sqlBF.append("          from ad3u.giv_item_config                       ");
		sqlBF.append("         where btbh = a.btbh                              ");
		sqlBF.append("          and jbjgid = ?      )                           ");
		sqlBF.append("   and nvl(ffzq, '*') = '1'                               ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		
		fxds = this.sql.executeQuery();
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                    ");
		sqlBF.append("  from ad3u.giv_item a               ");
		sqlBF.append(" where btlb = '956'                  ");
		sqlBF.append("   and a.btbh in ('B1M4')            ");
		sqlBF.append("   and exists (select 'x'            ");
		sqlBF.append("          from ad3u.giv_item_config  ");
		sqlBF.append("         where btbh = a.btbh         ");
		sqlBF.append("          and jbjgid = ?  )          ");
		sqlBF.append("   and nvl(ffzq, '*') = '4'          ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		ysds = this.sql.executeQuery();
		fxds.combineDatastore(ysds);

		//将一次性退休补贴、丧葬费、一次性支付抚恤金三项一次性待遇项目放在统筹外补助口径统计.mod.wjq.20200527
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                         ");
		sqlBF.append("  from ad3u.giv_item a                                    ");
		sqlBF.append(" where btlb = '956'                                       ");
		sqlBF.append("   and a.btbh in ('B1D1', 'B1D2', 'H791')                 ");
		sqlBF.append("   and exists (select 'x'                                 ");
		sqlBF.append("          from ad3u.giv_item_config                       ");
		sqlBF.append("         where btbh = a.btbh                              ");
		sqlBF.append("          and jbjgid = ?      )                           ");
		sqlBF.append("   and nvl(ffzq, '*') = '5'                               ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		ycxds = this.sql.executeQuery();
		fxds.combineDatastore(ycxds);
		if (fxds.rowCount() < 1) {
			prompt.complete();
			prompt.close();
			this.bizException("没有需要查询的发放标准补贴项目");
		}

		for (int i = 0; i < fxds.rowCount(); i++) {
			btbh = fxds.getString(i, "btbh");
			btmc = fxds.getString(i, "btmc");
			find = btds.find(" btbh == " + btbh);

			if (find < 0) {
				btds.addRow();
				btds.put(btds.rowCount() - 1, "btbh", btbh);
				btds.put(btds.rowCount() - 1, "btmc", btmc);
			}
		}

		dsjbjg = AdTools.getQueryJbjgidByUser(this.getUser());
		
		dd = new DataStore();
		dd.put(0, "dwxz", para.getString("dwxz"));
		dd.put(0, "jbjgid", jbjgid);
		dd.put(0, "bfqsny", para.getDateToString("bfqsny", "yyyy-MM"));
		dd.put(0, "bfzzny", para.getDateToString("bfzzny", "yyyy-MM"));

		rdo.put("btds", btds);
		rdo.put("dsjbjg",dsjbjg);
		rdo.put("dsquery", dd);
		
		prompt.close();
		btds=null;
		sqlBF = null;
		dsjbjg=null;
		dd=null;
		return rdo;
	}

	/**
	 * 方法简介.退休人员统外发放情况表查询
	 * 
	 * @author rzs
	 * @date 创建时间 2019年3月26日
	 * @since V1.0
	 */
	public DataObject queryTxrytwff(final DataObject para) throws Exception {

		DataObject rdo = new DataObject();
		String dwxz = "", bfqsny = "", bfzzny = "",  btbh = "", dwbh = "";
		int find;
		double  btje = 0, cmpl = 0;
		DataStore ds = new DataStore(), ffds=new DataStore(), perds = new DataStore(), nfds = new DataStore(), bfds = new DataStore(), ysds = new DataStore(), fxds = new DataStore(), ycxds = new DataStore();
		SPrompt prompt = SPromptUtil.getSPrompt();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid = para.getString("jbjgid");
		dwxz = para.getString("dwxz");
		bfqsny = para.getDateToString("bfqsny", "yyyyMM");
		bfzzny = para.getDateToString("bfzzny", "yyyyMM");

		if (dwxz == null || "".equals(dwxz)) {
			sqlBF.setLength(0);
			sqlBF.append("select code, content    ");
			sqlBF.append("  from be3u.code_config ");
			sqlBF.append(" where dmbh = 'DWXZ'    ");
			sqlBF.append("   and dbid = ?         ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, HsuTools.getSystemDBCode());
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				dwxz = dwxz + "'" + ds.getString(i, "code") + "'" + ",";
			}
			dwxz = dwxz.substring(0, dwxz.length() - 1);
		}
		if (bfqsny == null || "".equals(bfqsny)) {
			prompt.complete();
			prompt.close();
			this.bizException("请输入拨付起始年月！");
		}
		if (bfzzny == null || "".equals(bfzzny)) {
			prompt.complete();
			prompt.close();
			this.bizException("请输入拨付终止年月！");
		}
		if (bfqsny.compareTo(bfzzny) > 0) {
			prompt.complete();
			prompt.close();
			this.bizException("起始年月不能大于终止年月！");
		}
		
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                         ");
		sqlBF.append("  from ad3u.giv_item a                                    ");
		sqlBF.append(" where btlb = '956'                                       ");
		sqlBF.append("   and a.btbh in ('B1M1', 'B1M2', 'B1M3', 'B1M5', 'B1M6') ");
		sqlBF.append("   and exists (select 'x'                                 ");
		sqlBF.append("          from ad3u.giv_item_config                       ");
		sqlBF.append("         where btbh = a.btbh                              ");
		sqlBF.append("          and jbjgid = ?      )                           ");
		sqlBF.append("   and nvl(ffzq, '*') = '1'                               ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		fxds = this.sql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                    ");
		sqlBF.append("  from ad3u.giv_item a               ");
		sqlBF.append(" where btlb = '956'                  ");
		sqlBF.append("   and a.btbh in ('B1M4')            ");
		sqlBF.append("   and exists (select 'x'            ");
		sqlBF.append("          from ad3u.giv_item_config  ");
		sqlBF.append("         where btbh = a.btbh         ");
		sqlBF.append("          and jbjgid = ?  )          ");
		sqlBF.append("   and nvl(ffzq, '*') = '4'          ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		ysds = this.sql.executeQuery();
		fxds.combineDatastore(ysds);
		
		//将一次性退休补贴、丧葬费、一次性支付抚恤金三项一次性待遇项目放在统筹外补助口径统计.mod.wjq.20200527
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                         ");
		sqlBF.append("  from ad3u.giv_item a                                    ");
		sqlBF.append(" where btlb = '956'                                       ");
		sqlBF.append("   and a.btbh in ('B1D1', 'B1D2', 'H791')                 ");
		sqlBF.append("   and exists (select 'x'                                 ");
		sqlBF.append("          from ad3u.giv_item_config                       ");
		sqlBF.append("         where btbh = a.btbh                              ");
		sqlBF.append("          and jbjgid = ?      )                           ");
		sqlBF.append("   and nvl(ffzq, '*') = '5'                               ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		ycxds = this.sql.executeQuery();
		fxds.combineDatastore(ycxds);
		
		sqlBF.setLength(0);
		sqlBF.append("select /*+parallel(8)*/b.dwbh, b.cbdwmc dwmc, count(a.ryid) rs   ");
		sqlBF.append(" from ad3u.per_info a, si3u.orgn_reg b                           ");
		sqlBF.append("where a.dwdjid = b.dwdjid                                        ");
		sqlBF.append("  and a.zfrylb <> 'A11'                                          ");
		sqlBF.append("  and a.sszfrq = 'A'                                             ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("   and b.cbdwxz in (");
			sqlBF.append(dwxz);
			sqlBF.append(") ");
		}
		sqlBF.append("  and b.jbjgid=?                                                 ");
		sqlBF.append("  and exists                                                     ");
		sqlBF.append("(select 1                                                        ");
		sqlBF.append("         from ad3u.per_giv_detl c                                ");
		sqlBF.append("        where a.ryid = c.ryid and c.fflb ='A' and c.fsyy = '1'   ");
		sqlBF.append("          and c.btbh in ('B1M1', 'B1M2', 'B1M3', 'B1M5', 'B1M6', 'B1D1', 'B1D2', 'H791') ");
		sqlBF.append("          and c.yfny between ? and ?  )                          ");
		sqlBF.append("group by b.dwbh, b.cbdwmc                                        ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, bfqsny);
		this.sql.setString(3, bfzzny);
		perds = this.sql.executeQuery();
		if (perds.rowCount() < 1) {
			prompt.prompt("没有需要查询的单位信息");
		}

		sqlBF.setLength(0);
		sqlBF.append("select /*+parallel(8)*/                                      ");
		sqlBF.append(" b.dwbh, c.btbh, nvl(sum(c.btje), 0) btje                    ");
		sqlBF.append("  from ad3u.per_info a, si3u.orgn_reg b, ad3u.per_giv_detl c ");
		sqlBF.append(" where a.dwdjid = b.dwdjid                                   ");
		sqlBF.append("   and a.zfrylb <> 'A11'                                     ");
		sqlBF.append("   and a.sszfrq = 'A'                                        ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("   and b.cbdwxz in (");
			sqlBF.append(dwxz);
			sqlBF.append(") ");
		}
		sqlBF.append("   and b.jbjgid=?                                            ");
		sqlBF.append("   and a.ryid = c.ryid                                       ");
		sqlBF.append("   and c.fflb = 'A'                                          ");
		sqlBF.append("   and c.fsyy = '1'                                          ");
		sqlBF.append("   and c.btbh in ('B1M1', 'B1M2', 'B1M3', 'B1M5', 'B1M6')    ");
		sqlBF.append("   and c.yfny between ? and ?                                ");
		sqlBF.append(" group by b.dwbh, c.btbh                                     ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, bfqsny);
		this.sql.setString(3, bfzzny);
		ffds = this.sql.executeQuery();

		if (ffds.rowCount() < 1) {
			prompt.prompt("没有需要查询的月发放标准数据");
		}

		for (int vj = 0; vj < ffds.rowCount(); vj++) {
			dwbh = ffds.getString(vj, "dwbh");
			btbh = ffds.getString(vj, "btbh");
			btje = ffds.getDouble(vj, "btje");
			find = perds.find(" dwbh == " + dwbh);
			if (find >= 0) {
				perds.put(find, btbh, btje);
			} 
		}

		sqlBF.setLength(0);
		sqlBF.append("select /*+parallel(8)*/                                     ");
		sqlBF.append(" b.dwbh, c.btbh, nvl(sum(c.btje), 0) btje                   ");
		sqlBF.append("  from ad3u.per_info a, si3u.orgn_reg b, ad3u.per_giv_detl c");
		sqlBF.append(" where a.dwdjid = b.dwdjid                                  ");
		sqlBF.append("   and a.zfrylb <> 'A11'                                    ");
		sqlBF.append("   and a.sszfrq = 'A'                                       ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("   and b.cbdwxz in (");
			sqlBF.append(dwxz);
			sqlBF.append(") ");
		}
		sqlBF.append("   and b.jbjgid=?                                           ");
		sqlBF.append("   and a.ryid = c.ryid                                      ");
		sqlBF.append("   and c.fflb = 'C'                                         ");
		sqlBF.append("   and c.btbh in ('B1M4', 'B1D1', 'B1D2', 'H791')           ");
		sqlBF.append("   and c.yfny between ? and ?                               ");
		sqlBF.append(" group by b.dwbh, c.btbh                                    ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, bfqsny);
		this.sql.setString(3, bfzzny);
		nfds = this.sql.executeQuery();
		
		if (nfds.rowCount() < 1) {
			prompt.prompt("没有需要查询的年发放标准数据");
		}

		for (int vj = 0; vj < nfds.rowCount(); vj++) {
			dwbh = nfds.getString(vj, "dwbh");
			btbh = nfds.getString(vj, "btbh");
			btje = nfds.getDouble(vj, "btje");
			find = perds.find(" dwbh == " + dwbh);
			if (find >= 0) {
				perds.put(find, btbh, btje);
			} 
		}
		sqlBF.setLength(0);
		sqlBF.append("select /*+parallel(8)*/                                      ");
		sqlBF.append(" b.dwbh, nvl(sum(c.btje), 0) btje                            ");
		sqlBF.append("  from ad3u.per_info a, si3u.orgn_reg b, ad3u.per_giv_detl c ");
		sqlBF.append(" where a.dwdjid = b.dwdjid                                   ");
		sqlBF.append("   and a.zfrylb <> 'A11'                                     ");
		sqlBF.append("   and a.sszfrq = 'A'                                        ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("   and b.cbdwxz in (");
			sqlBF.append(dwxz);
			sqlBF.append(") ");
		}
		sqlBF.append("   and b.jbjgid=?                                            ");
		sqlBF.append("   and a.ryid = c.ryid                                       ");
		sqlBF.append("   and c.fsyy = '2'                                          ");
		sqlBF.append("   and c.btbh in ('B1M1', 'B1M2', 'B1M3', 'B1M5', 'B1M6')    ");
		sqlBF.append("   and c.ffny between ? and ?                                ");
		sqlBF.append(" group by b.dwbh                                             ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, bfqsny);
		this.sql.setString(3, bfzzny);
		bfds = this.sql.executeQuery();

		for (int vj = 0; vj < bfds.rowCount(); vj++) {
			dwbh = bfds.getString(vj, "dwbh");
			cmpl = bfds.getDouble(vj, "btje");
			find = perds.find(" dwbh == " + dwbh);
			if (find >= 0) {
				perds.put(find, "cmpl", cmpl);
			} 
		}
		for (int i = 0; i < perds.rowCount(); i++) {
			double hj = 0;
			for (int j = 0; j < fxds.rowCount(); j++) {
				double je = 0;
				if (perds.containsItem(i, fxds.getString(j, "btbh"))) {
					je = perds.getDouble(i, fxds.getString(j, "btbh"));
					hj = MathUtil.round(hj + je, 2);
				}
			}
			if (perds.containsItem(i, "cmpl")) {
				hj = MathUtil.round(hj + perds.getDouble(i, "cmpl"), 2);
			}
			perds.put(i, "hj", hj);
		}
		
		
		rdo.put("perds", perds);
		prompt.close();
		sqlBF = null;
		perds = null;

		return rdo;
	}
	/**
	 * 方法简介.离休人员统外发放刷新局部界面
	 * 
	 * @author rzs
	 * @date 创建时间 2019年3月29日
	 * @since V1.0
	 */
	public DataObject queryLxrytwffRefresh(final DataObject para) throws Exception {

		DataObject rdo = new DataObject();
		String  btbh = "", btmc = "";
		int find;
		DataStore  ysds=new DataStore(),  btds = new DataStore(), fxds = new DataStore(), dd = new DataStore(), dsjbjg= new DataStore(), ycxds = new DataStore();
		SPrompt prompt = SPromptUtil.getSPrompt();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid = para.getString("jbjgid");
		
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                     ");
		sqlBF.append("  from ad3u.giv_item a                                ");
		sqlBF.append(" where btlb = '956'                                   ");
		sqlBF.append("   and a.btbh in ('B1M1','B1M2','B1M3','B1M5','B1M6', ");
		sqlBF.append("                  'B1M7','B1M8','B1M9','B1MD','B1ME', ");
		sqlBF.append("                  'B1MF','B1MG','B1MH','B1MI','B1MJ', ");
		sqlBF.append("                  'B1MK','B1ML')                      ");
		sqlBF.append("   and exists (select 'x'                             ");
		sqlBF.append("          from ad3u.giv_item_config                   ");
		sqlBF.append("         where btbh = a.btbh                          ");
		sqlBF.append("           and jbjgid = ?)                            ");
		sqlBF.append("   and nvl(ffzq, '*') = '1'                           ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		fxds = this.sql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                  ");
		sqlBF.append(" from ad3u.giv_item a                              ");
		sqlBF.append("where btlb = '956'                                 ");
		sqlBF.append("  and a.btbh in ('B1M4', 'B1MA', 'B1MB', 'B1MC')   ");
		sqlBF.append("  and exists (select 'x'                           ");
		sqlBF.append("         from ad3u.giv_item_config                 ");
		sqlBF.append("        where btbh = a.btbh                        ");
		sqlBF.append("          and jbjgid =? )                          ");
		sqlBF.append("  and nvl(ffzq, '*') = '4'                         ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		ysds = this.sql.executeQuery();
		fxds.combineDatastore(ysds);

		//将一次性退休补贴、丧葬费、一次性支付抚恤金三项一次性待遇项目放在统筹外补助口径统计.mod.wjq.20200527
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                         ");
		sqlBF.append("  from ad3u.giv_item a                                    ");
		sqlBF.append(" where btlb = '956'                                       ");
		sqlBF.append("   and a.btbh in ('B1D1', 'B1D2', 'H791')                 ");
		sqlBF.append("   and exists (select 'x'                                 ");
		sqlBF.append("          from ad3u.giv_item_config                       ");
		sqlBF.append("         where btbh = a.btbh                              ");
		sqlBF.append("          and jbjgid = ?      )                           ");
		sqlBF.append("   and nvl(ffzq, '*') = '5'                               ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		ycxds = this.sql.executeQuery();
		fxds.combineDatastore(ycxds);
		
		if (fxds.rowCount() < 1) {
			prompt.complete();
			prompt.close();
			this.bizException("没有需要查询的发放标准补贴项目");
		}

		for (int i = 0; i < fxds.rowCount(); i++) {
			btbh = fxds.getString(i, "btbh");
			btmc = fxds.getString(i, "btmc");
			find = btds.find(" btbh == " + btbh);

			if (find < 0) {
				btds.addRow();
				btds.put(btds.rowCount() - 1, "btbh", btbh);
				btds.put(btds.rowCount() - 1, "btmc", btmc);
			}
		}

		dsjbjg = AdTools.getQueryJbjgidByUser(this.getUser());
		
		dd = new DataStore();
		dd.put(0, "dwxz", para.getString("dwxz"));
		dd.put(0, "jbjgid", jbjgid);
		dd.put(0, "bfqsny", para.getDateToString("bfqsny", "yyyy-MM"));
		dd.put(0, "bfzzny", para.getDateToString("bfzzny", "yyyy-MM"));

		rdo.put("btds", btds);
		rdo.put("dsjbjg",dsjbjg);
		rdo.put("dsquery", dd);
		
		prompt.close();
		btds=null;
		sqlBF = null;
		dsjbjg=null;
		dd=null;
		return rdo;
	}

	/**
	 * 方法简介.离休人员统外发放情况表查询
	 * 
	 * @author rzs
	 * @date 创建时间 2019年3月29日
	 * @since V1.0
	 */
	public DataObject queryLxrytwff(final DataObject para) throws Exception {

		DataObject rdo = new DataObject();
		String dwxz = "", bfqsny = "", bfzzny = "",  btbh = "", dwbh = "";
		int find;
		double  btje = 0, cmpl = 0;
		DataStore ds = new DataStore(), ffds=new DataStore(), perds = new DataStore(), nfds = new DataStore(), bfds = new DataStore(), ysds = new DataStore(), fxds = new DataStore(), ycxds = new DataStore();
		SPrompt prompt = SPromptUtil.getSPrompt();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid = para.getString("jbjgid");
		dwxz = para.getString("dwxz");
		bfqsny = para.getDateToString("bfqsny", "yyyyMM");
		bfzzny = para.getDateToString("bfzzny", "yyyyMM");

		if (dwxz == null || "".equals(dwxz)) {
			sqlBF.setLength(0);
			sqlBF.append("select code, content    ");
			sqlBF.append("  from be3u.code_config ");
			sqlBF.append(" where dmbh = 'DWXZ'    ");
			sqlBF.append("   and dbid = ?         ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, HsuTools.getSystemDBCode());
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				dwxz = dwxz + "'" + ds.getString(i, "code") + "'" + ",";
			}
			dwxz = dwxz.substring(0, dwxz.length() - 1);
		}
		if (bfqsny == null || "".equals(bfqsny)) {
			prompt.complete();
			prompt.close();
			this.bizException("请输入拨付起始年月！");
		}
		if (bfzzny == null || "".equals(bfzzny)) {
			prompt.complete();
			prompt.close();
			this.bizException("请输入拨付终止年月！");
		}
		if (bfqsny.compareTo(bfzzny) > 0) {
			prompt.complete();
			prompt.close();
			this.bizException("起始年月不能大于终止年月！");
		}
		
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                     ");
		sqlBF.append("  from ad3u.giv_item a                                ");
		sqlBF.append(" where btlb = '956'                                   ");
		sqlBF.append("   and a.btbh in ('B1M1','B1M2','B1M3','B1M5','B1M6', ");
		sqlBF.append("                  'B1M7','B1M8','B1M9','B1MD','B1ME', ");
		sqlBF.append("                  'B1MF','B1MG','B1MH','B1MI','B1MJ', ");
		sqlBF.append("                  'B1MK','B1ML')                      ");
		sqlBF.append("   and exists (select 'x'                             ");
		sqlBF.append("          from ad3u.giv_item_config                   ");
		sqlBF.append("         where btbh = a.btbh                          ");
		sqlBF.append("           and jbjgid = ?)                            ");
		sqlBF.append("   and nvl(ffzq, '*') = '1'                           ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		fxds = this.sql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                  ");
		sqlBF.append(" from ad3u.giv_item a                              ");
		sqlBF.append("where btlb = '956'                                 ");
		sqlBF.append("  and a.btbh in ('B1M4', 'B1MA', 'B1MB', 'B1MC')   ");
		sqlBF.append("  and exists (select 'x'                           ");
		sqlBF.append("         from ad3u.giv_item_config                 ");
		sqlBF.append("        where btbh = a.btbh                        ");
		sqlBF.append("          and jbjgid =? )                          ");
		sqlBF.append("  and nvl(ffzq, '*') = '4'                         ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		ysds = this.sql.executeQuery();
		fxds.combineDatastore(ysds);
		
		//将一次性退休补贴、丧葬费、一次性支付抚恤金三项一次性待遇项目放在统筹外补助口径统计.mod.wjq.20200527
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btmc                                         ");
		sqlBF.append("  from ad3u.giv_item a                                    ");
		sqlBF.append(" where btlb = '956'                                       ");
		sqlBF.append("   and a.btbh in ('B1D1', 'B1D2', 'H791')                 ");
		sqlBF.append("   and exists (select 'x'                                 ");
		sqlBF.append("          from ad3u.giv_item_config                       ");
		sqlBF.append("         where btbh = a.btbh                              ");
		sqlBF.append("          and jbjgid = ?      )                           ");
		sqlBF.append("   and nvl(ffzq, '*') = '5'                               ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		ycxds = this.sql.executeQuery();
		fxds.combineDatastore(ycxds);
		
		sqlBF.setLength(0);
		sqlBF.append("select /*+parallel(4)*/                                       ");
		sqlBF.append("b.dwbh, b.cbdwmc dwmc, count(a.ryid) rs                       ");
		sqlBF.append(" from ad3u.per_info a, si3u.orgn_reg b                        ");
		sqlBF.append("where a.dwdjid = b.dwdjid                                     ");
		sqlBF.append("  and a.zfrylb = 'A11'                                        ");
		sqlBF.append("  and a.sszfrq = 'A'                                          ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("   and b.cbdwxz in (");
			sqlBF.append(dwxz);
			sqlBF.append(") ");
		}
		sqlBF.append("  and b.jbjgid=?                                              ");
		sqlBF.append("  and exists (select 1                                        ");
		sqlBF.append("         from ad3u.per_giv_detl c                             ");
		sqlBF.append("        where a.ryid = c.ryid                                 ");
		sqlBF.append("          and c.fflb = 'A'                                    ");
		sqlBF.append("          and c.fsyy = '1'                                    ");
		sqlBF.append("          and c.btbh in ('B1M1','B1M2','B1M3','B1M5','B1M6',  ");
		sqlBF.append("                         'B1M7','B1M8','B1M9','B1MD','B1ME',  ");
		sqlBF.append("                         'B1MF','B1MG','B1MH','B1MI','B1MJ',  ");
		sqlBF.append("                         'B1MK','B1ML','B1D1','B1D2','H791')  ");
		sqlBF.append("          and c.yfny between ? and ?)                         ");
		sqlBF.append("group by b.dwbh, b.cbdwmc                                     ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, bfqsny);
		this.sql.setString(3, bfzzny);
		perds = this.sql.executeQuery();
		if (perds.rowCount() < 1) {
			prompt.prompt("没有需要查询的单位信息");
		}

		sqlBF.setLength(0);
		sqlBF.append("select /*+parallel(8)*/                                       ");
		sqlBF.append("  b.dwbh, c.btbh, nvl(sum(c.btje), 0) btje                    ");
		sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg b, ad3u.per_giv_detl c ");
		sqlBF.append("  where a.dwdjid = b.dwdjid                                   ");
		sqlBF.append("    and a.zfrylb = 'A11'                                      ");
		sqlBF.append("    and a.sszfrq = 'A'                                        ");
		if (dwxz != null && !"".equals(dwxz)) {
		sqlBF.append("   and b.cbdwxz in (");
		sqlBF.append(dwxz);
		sqlBF.append(") ");
	    }
		sqlBF.append("    and b.jbjgid=?                                            ");
		sqlBF.append("    and a.ryid = c.ryid                                       ");
		sqlBF.append("    and c.fflb = 'A'                                          ");
		sqlBF.append("    and c.fsyy = '1'                                          ");
		sqlBF.append("    and c.btbh in ('B1M1','B1M2','B1M3','B1M5','B1M6',        ");
		sqlBF.append("                   'B1M7','B1M8','B1M9','B1MD','B1ME',        ");
		sqlBF.append("                   'B1MF','B1MG','B1MH','B1MI','B1MJ',        ");
		sqlBF.append("                   'B1MK','B1ML')                             ");
		sqlBF.append("    and c.yfny between ? and ?                                ");
		sqlBF.append("  group by b.dwbh, c.btbh                                     ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, bfqsny);
		this.sql.setString(3, bfzzny);
		ffds = this.sql.executeQuery();

		if (ffds.rowCount() < 1) {
			prompt.prompt("没有需要查询的月发放标准数据");
		}

		for (int vj = 0; vj < ffds.rowCount(); vj++) {
			dwbh = ffds.getString(vj, "dwbh");
			btbh = ffds.getString(vj, "btbh");
			btje = ffds.getDouble(vj, "btje");
			find = perds.find(" dwbh == " + dwbh);
			if (find >= 0) {
				perds.put(find, btbh, btje);
			} 
		}

		sqlBF.setLength(0);
		sqlBF.append("select /*+parallel(8)*/                                       ");
		sqlBF.append(" b.dwbh, c.btbh, nvl(sum(c.btje), 0) btje                     ");
		sqlBF.append("  from ad3u.per_info a, si3u.orgn_reg b, ad3u.per_giv_detl c  ");
		sqlBF.append(" where a.dwdjid = b.dwdjid                                    ");
		sqlBF.append("   and a.zfrylb = 'A11'                                       ");
		sqlBF.append("   and a.sszfrq = 'A'                                         ");
		if (dwxz != null && !"".equals(dwxz)) {
		sqlBF.append("   and b.cbdwxz in (");
		sqlBF.append(dwxz);
		sqlBF.append(") ");
		}
		sqlBF.append("   and b.jbjgid=?                                             ");
		sqlBF.append("   and a.ryid = c.ryid                                        ");
		sqlBF.append("   and c.fflb = 'C'                                           ");
		sqlBF.append("   and c.btbh in ('B1M4', 'B1MA', 'B1MB', 'B1MC', 'B1D1', 'B1D2', 'H791')  ");
		sqlBF.append("   and c.yfny between ? and ?                                 ");
		sqlBF.append(" group by b.dwbh, c.btbh                                      ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, bfqsny);
		this.sql.setString(3, bfzzny);
		nfds = this.sql.executeQuery();

		if (nfds.rowCount() < 1) {
			prompt.prompt("没有需要查询的月发放标准数据");
		}
		for (int vj = 0; vj < nfds.rowCount(); vj++) {
			dwbh = nfds.getString(vj, "dwbh");
			btbh = nfds.getString(vj, "btbh");
			btje = nfds.getDouble(vj, "btje");
			find = perds.find(" dwbh == " + dwbh);
			if (find >= 0) {
				perds.put(find, btbh, btje);
			} 
		}

		sqlBF.setLength(0);
		sqlBF.append("select /*+parallel(8)*/                                        ");
		sqlBF.append("  b.dwbh, nvl(sum(c.btje), 0) btje                             ");
		sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg b, ad3u.per_giv_detl c  ");
		sqlBF.append("  where a.dwdjid = b.dwdjid                                    ");
		sqlBF.append("    and a.zfrylb = 'A11'                                       ");
		sqlBF.append("    and a.sszfrq = 'A'                                         ");
		if (dwxz != null && !"".equals(dwxz)) {
		sqlBF.append("   and b.cbdwxz in (");
		sqlBF.append(dwxz);
		sqlBF.append(") ");
	    }
		sqlBF.append("    and b.jbjgid = ?                                           ");
		sqlBF.append("    and a.ryid = c.ryid                                        ");
		sqlBF.append("    and c.fsyy = '2'                                           ");
		sqlBF.append("    and c.btbh in ('B1M1','B1M2','B1M3','B1M5','B1M6',         ");
		sqlBF.append("                   'B1M7','B1M8','B1M9','B1MD','B1ME',         ");
		sqlBF.append("                   'B1MF','B1MG','B1MH','B1MI','B1MJ',         ");
		sqlBF.append("                   'B1MK','B1ML')                              ");
		sqlBF.append("    and c.ffny between ? and ?                                 ");
		sqlBF.append("  group by b.dwbh                                              ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, bfqsny);
		this.sql.setString(3, bfzzny);
		bfds = this.sql.executeQuery();

		for (int vj = 0; vj < bfds.rowCount(); vj++) {
			dwbh = bfds.getString(vj, "dwbh");
			cmpl = bfds.getDouble(vj, "btje");
			find = perds.find(" dwbh == " + dwbh);
			if (find >= 0) {
				perds.put(find, "cmpl", cmpl);
			} 
		}
		for (int i = 0; i < perds.rowCount(); i++) {
			double hj = 0;
			for (int j = 0; j < fxds.rowCount(); j++) {
				double je = 0;
				if (perds.containsItem(i, fxds.getString(j, "btbh"))) {
					je = perds.getDouble(i, fxds.getString(j, "btbh"));
					hj = MathUtil.round(hj + je, 2);
				}
			}
			if (perds.containsItem(i, "cmpl")) {
				hj = MathUtil.round(hj + perds.getDouble(i, "cmpl"), 2);
			}
			perds.put(i, "hj", hj);
		}

		rdo.put("perds", perds);
		prompt.close();
		sqlBF = null;
		perds = null;

		return rdo;
	}
	

	/**
	 * 方法简介.分页查询刷新页面
	 * 与标准件的区别是 增加死亡人员信息的查询
	 * 
	 * @author zkj 2017-12-14
	 */
	public DataObject queryBfryMxPage_3706(final DataObject para) throws Exception {
		String zfrylb, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny;
		DataStore ds, dsBtbh;
		DataStore dsBcxmbh;// 机构内配置的补充项目,个人的补充项目
		DataStore dsSwry = new DataStore();// 死亡人员展示字段
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		zfrylb = para.getString("zfrylb");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		// 校验数据合法性
		if (ffqsny == null || "".equals(ffqsny)) {
			this.bizException("传入的发放起始年月为空！");
		}
		if (ffzzny == null || "".equals(ffzzny)) {
			this.bizException("传入的发放终止年月为空！");
		}
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (cjgzQsrq.compareTo(cjgzZzrq) > 0) {
			this.bizException("传入的参加工作起始日期大于参加工作终止日期！");
		}
		if (ltxQsrq.compareTo(ltxZzrq) > 0) {
			this.bizException("传入的离退休起始日期大于离退休终止日期！");
		}
		if (ffqsny.compareTo(ffzzny) > 0) {
			this.bizException("传入的起始日期大于离退休终止日期！");
		}
		
		// 查询经办机构的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select distinct c.bcxmbh, p.bcxmmc, p.dmlx ");
		sqlBF.append("   from ad3u.cmpl_config c, ");
		sqlBF.append("        ad3u.per_cmpl_item p ");
		sqlBF.append("  where c.bcxmbh = p.bcxmbh ");
		sqlBF.append("    and c.bcxmbh  ");
		sqlBF.append("     in('TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH') ");//增加居住地行政区划  刘欣 modify 20170112
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and c.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		dsBcxmbh = this.sql.executeQuery();
		
		//add.cjj.20180726增加行政区划代码
		int find = dsBcxmbh.find(" bcxmbh == JZDXZQH");
		if(find>=0){
			dsBcxmbh.addRow();
			dsBcxmbh.put(dsBcxmbh.rowCount()-1, "bcxmbh", "JZDXZQHDM");
			dsBcxmbh.put(dsBcxmbh.rowCount()-1, "bcxmmc", "居住地行政区划代码");
			dsBcxmbh.put(dsBcxmbh.rowCount()-1, "dmlx", "char");
		}
		//end.cjj.20180726
		
		// 查询经办机构查询年月的btbh
		
		// 先从参数ad3u1048中取，取不到时在取查询 --zkj modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		} else {
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
			
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_year_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			DataStore dsBtbhYear = this.sql.executeQuery();
			
			dsBtbh.combineDatastore(dsBtbhYear);
		}
		
		// 将查询条件返回前台
		int rowadd;
		DataStore dsQuery = new DataStore();
		dsQuery.addRow();
		rowadd = dsQuery.rowCount() - 1;
		dsQuery.put(rowadd, "fdfjglb", para.getString("fdfjglb"));
		dsQuery.put(rowadd, "fdfjgid", para.getString("fdfjgid"));
		dsQuery.put(rowadd, "fdfjgbh", para.getString("fdfjgbh"));
		dsQuery.put(rowadd, "fdfjgmc", para.getString("fdfjgmc"));
		dsQuery.put(rowadd, "dwxz", para.getString("dwxz"));
		dsQuery.put(rowadd, "zfrylb", para.getString("zfrylb"));
		dsQuery.put(rowadd, "zyjszwjb", para.getString("zyjszwjb"));
		dsQuery.put(rowadd, "gjzyzgdj", para.getString("gjzyzgdj"));
		dsQuery.put(rowadd, "xzzw", para.getString("xzzw"));
		dsQuery.put(rowadd, "cjgzQsrq", para.getString("cjgzQsrq"));
		dsQuery.put(rowadd, "cjgzZzrq", para.getString("cjgzZzrq"));
		dsQuery.put(rowadd, "ltxQsrq", para.getString("ltxQsrq"));
		dsQuery.put(rowadd, "ltxZzrq", para.getString("ltxZzrq"));
		dsQuery.put(rowadd, "jbjgid", para.getString("jbjgid"));
		dsQuery.put(rowadd, "jgsygzlx", para.getString("jgsygzlx", ""));
		dsQuery.put(rowadd, "dyffzt", para.getString("dyffzt", ""));// 泰安增加查询条件 dyffzt wichao 20160930
		dsQuery.put(rowadd, "brcqshd", para.getString("brcqshd", ""));// 滨州增加查询条件 brcqshd gzh 20161108
		dsQuery.put(rowadd, "qrdjQsrq", para.getString("qrdjQsrq", ""));
		dsQuery.put(rowadd, "qrdjZzrq", para.getString("qrdjZzrq", ""));
		
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end

		//如果选择了离退休类别含有遗属，这增加死亡人员展示列
		if (zfrylb.indexOf("B01") >= 0 || zfrylb.indexOf("B02") >= 0
				|| zfrylb.indexOf("B03") >= 0 || zfrylb.indexOf("B04") >= 0) {
			dsSwry.addRow();
			dsSwry.put(dsSwry.rowCount()-1, "ysName", "swshbzhm");
			dsSwry.put(dsSwry.rowCount()-1, "ysHead", "死者社会保障号码");
			dsSwry.put(dsSwry.rowCount()-1, "dmlx", "char");
			dsSwry.addRow();
			dsSwry.put(dsSwry.rowCount()-1, "ysName", "swxm");
			dsSwry.put(dsSwry.rowCount()-1, "ysHead", "死者姓名");
			dsSwry.put(dsSwry.rowCount()-1, "dmlx", "char");
			dsSwry.addRow();
			dsSwry.put(dsSwry.rowCount()-1, "ysName", "swcjgzrq");
			dsSwry.put(dsSwry.rowCount()-1, "ysHead", "死者参加工作日期");
			dsSwry.put(dsSwry.rowCount()-1, "dmlx", "date");
			dsSwry.addRow();
			dsSwry.put(dsSwry.rowCount()-1, "ysName", "swltxrq");
			dsSwry.put(dsSwry.rowCount()-1, "ysHead", "死者离退休日期");
			dsSwry.put(dsSwry.rowCount()-1, "dmlx", "date");
			dsSwry.addRow();
			dsSwry.put(dsSwry.rowCount()-1, "ysName", "swltxlb");
			dsSwry.put(dsSwry.rowCount()-1, "ysHead", "死者离退休类别");
			dsSwry.put(dsSwry.rowCount()-1, "dmlx", "code");
			dsSwry.put(dsSwry.rowCount()-1, "code", "ZFRYLB");
			dsSwry.addRow();
			dsSwry.put(dsSwry.rowCount()-1, "ysName", "swrq");
			dsSwry.put(dsSwry.rowCount()-1, "ysHead", "死者死亡日期");
			dsSwry.put(dsSwry.rowCount()-1, "dmlx", "date");
			dsSwry.addRow();
			dsSwry.put(dsSwry.rowCount()-1, "ysName", "bz");
			dsSwry.put(dsSwry.rowCount()-1, "ysHead", "备注");
			dsSwry.put(dsSwry.rowCount()-1, "dmlx", "char");
		}
		rdo.put("dsbcxmbh", dsBcxmbh);
		rdo.put("dsjbjg", ds);
		rdo.put("dsquery", dsQuery);
		rdo.put("dsbtbh", dsBtbh);
		rdo.put("cxbz", "1");
		rdo.put("jbjgid", this.getBizInstitution());
		rdo.put("ny", DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM"));
		rdo.put("ffqsny", para.getString("ffqsny"));
		rdo.put("ffzzny", para.getString("ffzzny"));
        rdo.put("dsSwry", dsSwry);
		QueryLogTool.updateQueryLog(querylogid, dsBcxmbh.rowCount());

		return rdo;
	}
	/**
	 * 
	 * 方法简介.分页主SQl循环完之后循环结果填充剩余信息
	 * 
	 * @author 韦超 2015-11-28
	 */
	public DataObject queryBfryMxAllinfo(DataObject para) throws Exception {
		String zfrylb, ffqsny, ffzzny,ffqsnd;
		String ryid;
		String bcxmbh, bcxmz, dmlx;// 补充项目编号、名称、补充项目值
		DataStore dsBtbh, dsBtbhYear;
		DataStore dsMxInfo = new DataStore();
		DataStore dsBcxmbh, dsBcxx;// 机构内配置的补充项目,个人的补充项目
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String sqlQtbt, sqlBcxm, sqlPjzs;
		int find;
		double btje, pjzs;
		String btbh, bhList = "", btmc, bcxmList = "";
		DataStore dsTemp;

		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		zfrylb = para.getString("zfrylb");
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		ffqsnd = ffqsny.substring(0, 4); //2015-12-11 changt add 为查询年待遇
		
		dsMxInfo = para.getDataStore("dsMxInfo");
		
		// 查询经办机构查询年月的btbh
		//先从参数ad3u1048中取，取不到时在取查询  --zkj  modify 2017/12/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools
					.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		}else{
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
		}
		sqlBF.setLength(0);
		sqlBF.append(" select distinct gi.btbh, gi.btmc ");
		sqlBF.append("   from ad3u.giv_item gi, ");
		sqlBF.append("        ad3u.per_giv_year_std pg, ");
		sqlBF.append("        ad3u.per_info pi, ");
		sqlBF.append("        si3u.orgn_reg r ");
		sqlBF.append("  where gi.btbh = pg.btbh ");
		sqlBF.append("    and pg.ryid = pi.ryid ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBtbhYear = this.sql.executeQuery();
		
		// 查询经办机构的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select distinct c.bcxmbh, p.bcxmmc, p.dmlx ");
		sqlBF.append("   from ad3u.cmpl_config c, ");
		sqlBF.append("        ad3u.per_cmpl_item p ");
		sqlBF.append("  where c.bcxmbh = p.bcxmbh ");
		sqlBF.append("    and c.bcxmbh  ");
		sqlBF.append("     in('TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH') ");//增加居住地行政区划的获取 刘欣 modify 20170112
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and c.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBcxmbh = this.sql.executeQuery();
		// 开始查询人员信息
		sqlBF.setLength(0);
		sqlBF.append(" select pg.btbh, gi.btmc, nvl(pg.btje, 0)btje ");
		sqlBF.append("   from ad3u.per_giv_year_std pg, ");
		sqlBF.append("        ad3u.giv_item gi ");
		sqlBF.append("  where pg.ryid = ? ");
		sqlBF.append("    and pg.btbh = gi.btbh ");
		sqlBF.append("    and ? between pg.qsnd and nvl(pg.zznd,'2050') ");
		sqlQtbt = sqlBF.toString();

		// 取个人的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.bcxmbh, a.bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        ad3u.per_cmpl_item b ");
		sqlBF.append("  where a.bcxmbh = b.bcxmbh  ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and a.bcxmbh in ( ");
		sqlBF.append("        'TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH' "); //增加居住地行政区划的获取  刘欣 modify 20170112
		sqlBF.append("        ) ");
		sqlBcxm = sqlBF.toString();

		// 增加平均指数
		sqlBF.setLength(0);
		sqlBF.append("   select nvl(sum(decode(a.dyxmbh, 'PJZS_38', a.dyxmz, 'pjzs_new', a.dyxmz, 0)), 0) pjzs   ");
		sqlBF.append("     from ad3u.per_cal_his a   ");
		sqlBF.append("    where a.ryid = ?   ");
		sqlBF.append("      and xh = (select max(xh)   ");
		sqlBF.append("                  from ad3u.per_cal_his c  ");
		sqlBF.append("                 where a.ryid = c.ryid)   ");
		sqlPjzs = sqlBF.toString();

		int row = dsMxInfo.rowCount();
		for (int j = 0; j < row; j++) {
			ryid = dsMxInfo.getString(j, "ryid");
			pjzs = 0;

			// 将所有其他补贴（目前主要是年待遇）先放进去，防止该人没有这个待遇时，排序报错
			for (int k = 0, n = dsBtbhYear.rowCount(); k < n; k++) {
				dsMxInfo.put(j, dsBtbhYear.getString(k, "btbh"), 0);
			}

			this.sql.setSql(sqlQtbt);
			this.sql.setString(1, ryid);
			this.sql.setString(2, ffqsnd);
			DataStore dsQtbt = this.sql.executeQuery();

			// 取每个人的其他补贴（目前主要是年待遇）
			for (int k = 0, n = dsQtbt.rowCount(); k < n; k++) {
				btbh = dsQtbt.getString(k, "btbh");
				btmc = dsQtbt.getString(k, "btmc");
				btje = dsQtbt.getDouble(k, "btje");

				dsMxInfo.put(j, btbh, btje);

				if (dsBtbh.find(" btbh == " + btbh + " ") < 0) {
					dsBtbh.addRow();
					dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", btbh);
					dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", btmc);

					bhList += btbh + ":n,";
				}
			}

			// 查询平均指数
			this.sql.setSql(sqlPjzs);
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() > 0) {
				pjzs = dsTemp.getDouble(0, "pjzs");
			}
			dsMxInfo.put(j, "pjzs", pjzs);

			// 查询个人的补充信息
			this.sql.setSql(sqlBcxm);
			this.sql.setString(1, ryid);
			dsBcxx = this.sql.executeQuery();
			for (int k = 0, len = dsBcxmbh.rowCount(); k < len; k++) {
				bcxmbh = dsBcxmbh.getString(k, "bcxmbh");
				dmlx = dsBcxmbh.getString(k, "dmlx");
				if (bcxmList.indexOf(bcxmbh) < 0) {
					if (dmlx.equals("char") || dmlx.equals("code")
							|| dmlx.indexOf("pubcode") >= 0) {
						bcxmList += bcxmbh + ":s,";
					} else if (dmlx.equals("date") || dmlx.equals("month")
							|| dmlx.equals("year")) {
						bcxmList += bcxmbh + ":d,";
					} else if (dmlx.equals("number")) {
						bcxmList += bcxmbh + ":n,";
					}
				}
				find = dsBcxx.find(" bcxmbh == " + bcxmbh + "");
				if (find < 0) {
					dsMxInfo.put(j, bcxmbh, "");
				} else {
					bcxmz = dsBcxx.getString(find, "bcxmz");
					dsMxInfo.put(j, bcxmbh, bcxmz);
					
					//将行政区划代码转换为汉字  刘欣 modify 20170112
					if("JZDXZQH".equals(bcxmbh)){
						dsMxInfo.put(j, bcxmbh, HsuTools.getXzqhmc(bcxmz));
						dsMxInfo.put(j, "JZDXZQHDM", bcxmz);//add.cjj.20180726增加行政区划代码
					}
				}
			}
		}
		// 查询代发机构
		dsMxInfo = AdTools.genDfjgxxDataStore(dsMxInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsMxInfo.setTypeList("dwbh:s,dwmc:s,dwxz:s,dfjglb:s,dfjgid:s,"
				+ "shbzhm:s,yxzjhm:s,a.xm:s,yhzh:s,xb:s,yzbm:s,"
				+ "csrq:s,dacsrq:s,cjgzrq:s,grsf:s,ygxs:s,zfrylb:s,"
				+ "ltxrq:s,dyxsksny:s,xzzw:s,zyjszwjb:s,gjzyzgdj:s,"
				+ "txdz:s,jtzz:s,hj:n,dylqlb:s,dydjid:s,lxrxm:s,lxdh:s,"
				+ "jfnx:n,dfjgbh:s,dfjgid:s," + bhList + "dfjgmc:s," + bcxmList
				+ ",jzgbz:s,stjfnx:n,sjjfnx:n,pjzs:n");

		rdo.put("dsmxinfo", dsMxInfo);
		rdo.put("dsbtbh", dsBtbh);//2015-12-11 changt add 生成文件使用
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.分页主SQl循环完之后循环结果填充剩余信息(济南机关使用)
	 * 与标准件的区别，将年待遇合计到统内合计和统筹外合计中
	 * @author zkj 2019-06-18
	 */
	public DataObject queryBfryMxAllinfoJNjg(DataObject para) throws Exception {
		String zfrylb, ffqsny, ffzzny, ffqsnd, zffw;
		String ryid;
		String bcxmbh, bcxmz, dmlx;// 补充项目编号、名称、补充项目值
		DataStore dsBtbh, dsBtbhYear;
		DataStore dsMxInfo = new DataStore();
		DataStore dsBcxmbh, dsBcxx;// 机构内配置的补充项目,个人的补充项目
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String sqlQtbt, sqlBcxm, sqlPjzs;
		int find;
		double btje, pjzs;
		String btbh, bhList = "", btmc, bcxmList = "";
		DataStore dsTemp;

		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		zfrylb = para.getString("zfrylb");
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		ffqsnd = ffqsny.substring(0, 4); //2015-12-11 changt add 为查询年待遇
		zffw = para.getString("zffw"); //入参增加支付范围 -- zkj modify 2019/06/18
		dsMxInfo = para.getDataStore("dsMxInfo");
		if (zffw == null || "".equals(zffw)) {
			zffw = "1,2";
		}
		
		// 查询经办机构查询年月的btbh
		//先从参数ad3u1048中取，取不到时在取查询  --zkj  modify 2017/12/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools
					.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		}else{
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
		}
		sqlBF.setLength(0);
		sqlBF.append(" select distinct gi.btbh, gi.btmc ");
		sqlBF.append("   from ad3u.giv_item gi, ");
		sqlBF.append("        ad3u.per_giv_year_std pg, ");
		sqlBF.append("        ad3u.per_info pi, ");
		sqlBF.append("        si3u.orgn_reg r ");
		sqlBF.append("  where gi.btbh = pg.btbh ");
		sqlBF.append("    and pg.ryid = pi.ryid ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBtbhYear = this.sql.executeQuery();
		
		// 查询经办机构的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select distinct c.bcxmbh, p.bcxmmc, p.dmlx ");
		sqlBF.append("   from ad3u.cmpl_config c, ");
		sqlBF.append("        ad3u.per_cmpl_item p ");
		sqlBF.append("  where c.bcxmbh = p.bcxmbh ");
		sqlBF.append("    and c.bcxmbh  ");
		sqlBF.append("     in('TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH') ");//增加居住地行政区划的获取 刘欣 modify 20170112
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and c.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBcxmbh = this.sql.executeQuery();
		// 开始查询人员信息
		sqlBF.setLength(0);
		sqlBF.append(" select pg.btbh, gi.btmc, nvl(pg.btje, 0)btje, gi.btlb ");
		sqlBF.append("   from ad3u.per_giv_year_std pg, ");
		sqlBF.append("        ad3u.giv_item gi ");
		sqlBF.append("  where pg.ryid = ? ");
		sqlBF.append("    and pg.btbh = gi.btbh ");
		sqlBF.append("    and ? between pg.qsnd and nvl(pg.zznd,'2050') ");
		sqlQtbt = sqlBF.toString();

		// 取个人的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.bcxmbh, a.bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        ad3u.per_cmpl_item b ");
		sqlBF.append("  where a.bcxmbh = b.bcxmbh  ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and a.bcxmbh in ( ");
		sqlBF.append("        'TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH' "); //增加居住地行政区划的获取  刘欣 modify 20170112
		sqlBF.append("        ) ");
		sqlBcxm = sqlBF.toString();

		// 增加平均指数
		sqlBF.setLength(0);
		sqlBF.append("   select nvl(sum(decode(a.dyxmbh, 'PJZS_38', a.dyxmz, 'pjzs_new', a.dyxmz, 0)), 0) pjzs   ");
		sqlBF.append("     from ad3u.per_cal_his a   ");
		sqlBF.append("    where a.ryid = ?   ");
		sqlBF.append("      and xh = (select max(xh)   ");
		sqlBF.append("                  from ad3u.per_cal_his c  ");
		sqlBF.append("                 where a.ryid = c.ryid)   ");
		sqlPjzs = sqlBF.toString();

		int row = dsMxInfo.rowCount();
		for (int j = 0; j < row; j++) {
			ryid = dsMxInfo.getString(j, "ryid");
			pjzs = 0;

			// 将所有其他补贴（目前主要是年待遇）先放进去，防止该人没有这个待遇时，排序报错
			for (int k = 0, n = dsBtbhYear.rowCount(); k < n; k++) {
				dsMxInfo.put(j, dsBtbhYear.getString(k, "btbh"), 0);
			}

			this.sql.setSql(sqlQtbt);
			this.sql.setString(1, ryid);
			this.sql.setString(2, ffqsnd);
			DataStore dsQtbt = this.sql.executeQuery();

			// 取每个人的其他补贴（目前主要是年待遇）
			for (int k = 0, n = dsQtbt.rowCount(); k < n; k++) {
				btbh = dsQtbt.getString(k, "btbh");
				btmc = dsQtbt.getString(k, "btmc");
				btje = dsQtbt.getDouble(k, "btje");

				dsMxInfo.put(j, btbh, btje);
				//增加统内合计和统外合计的计算 -- zkj modify 2019/06/18
				double tnhj = dsMxInfo.getDouble(j, "tnhj");
				double twhj = dsMxInfo.getDouble(j, "twhj");
				double hj = dsMxInfo.getDouble(j, "hj");
				String btlb = dsQtbt.getString(k, "btlb");
				if ("956".equals(btlb) && zffw != null && zffw.indexOf("2") >= 0) {
					//统筹外
					twhj = twhj + btje;
					hj = hj + btje;
				} else if (!"956".equals(btlb)) {
					//统筹内
					if (zffw != null && zffw.indexOf("1") >= 0) {
						tnhj = tnhj + btje;
						hj = hj + btje;
					}
				}
				
				dsMxInfo.put(j, "tnhj", tnhj);
				dsMxInfo.put(j, "twhj", twhj);
				dsMxInfo.put(j, "hj", hj);
				//-- end

				if (dsBtbh.find(" btbh == " + btbh + " ") < 0) {
					dsBtbh.addRow();
					dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", btbh);
					dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", btmc);

					bhList += btbh + ":n,";
				}
			}

			// 查询平均指数
			this.sql.setSql(sqlPjzs);
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() > 0) {
				pjzs = dsTemp.getDouble(0, "pjzs");
			}
			dsMxInfo.put(j, "pjzs", pjzs);

			// 查询个人的补充信息
			this.sql.setSql(sqlBcxm);
			this.sql.setString(1, ryid);
			dsBcxx = this.sql.executeQuery();
			for (int k = 0, len = dsBcxmbh.rowCount(); k < len; k++) {
				bcxmbh = dsBcxmbh.getString(k, "bcxmbh");
				dmlx = dsBcxmbh.getString(k, "dmlx");
				if (bcxmList.indexOf(bcxmbh) < 0) {
					if (dmlx.equals("char") || dmlx.equals("code")
							|| dmlx.indexOf("pubcode") >= 0) {
						bcxmList += bcxmbh + ":s,";
					} else if (dmlx.equals("date") || dmlx.equals("month")
							|| dmlx.equals("year")) {
						bcxmList += bcxmbh + ":d,";
					} else if (dmlx.equals("number")) {
						bcxmList += bcxmbh + ":n,";
					}
				}
				find = dsBcxx.find(" bcxmbh == " + bcxmbh + "");
				if (find < 0) {
					dsMxInfo.put(j, bcxmbh, "");
				} else {
					bcxmz = dsBcxx.getString(find, "bcxmz");
					dsMxInfo.put(j, bcxmbh, bcxmz);
					
					//将行政区划代码转换为汉字  刘欣 modify 20170112
					if("JZDXZQH".equals(bcxmbh)){
						dsMxInfo.put(j, bcxmbh, HsuTools.getXzqhmc(bcxmz));
						dsMxInfo.put(j, "JZDXZQHDM", bcxmz);//add.cjj.20180726增加行政区划代码
					}
				}
			}
		}
		// 查询代发机构
		dsMxInfo = AdTools.genDfjgxxDataStore(dsMxInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsMxInfo.setTypeList("dwbh:s,dwmc:s,dwxz:s,dfjglb:s,dfjgid:s,"
				+ "shbzhm:s,yxzjhm:s,a.xm:s,yhzh:s,xb:s,yzbm:s,"
				+ "csrq:s,dacsrq:s,cjgzrq:s,grsf:s,ygxs:s,zfrylb:s,"
				+ "ltxrq:s,dyxsksny:s,xzzw:s,zyjszwjb:s,gjzyzgdj:s,"
				+ "txdz:s,jtzz:s,hj:n,dylqlb:s,dydjid:s,lxrxm:s,lxdh:s,"
				+ "jfnx:n,dfjgbh:s,dfjgid:s," + bhList + "dfjgmc:s," + bcxmList
				+ ",jzgbz:s,stjfnx:n,sjjfnx:n,pjzs:n");

		rdo.put("dsmxinfo", dsMxInfo);
		rdo.put("dsbtbh", dsBtbh);//2015-12-11 changt add 生成文件使用
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.查询询拨付人员明细_全部信息
	 * 
	 * @author 韦超 2015-11-28
	 */
	public final DataObject queryBfryMx_AllRows(final DataObject para) throws Exception {
		DataObject vdo = new DataObject();
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieve",para,this.getUser()).getString("sqlStr");
		this.sql.setSql(sqlStr);

		DataStore dsMxinfo = this.sql.executeQuery();
		para.put("dsMxinfo", dsMxinfo);
		// 添加死亡人员信息查询并拼到ds中去 --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq = dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		vdo = this.queryBfryMxAllinfo(para);

		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");
		dsMxinfo.sort("shbzhm").sort("dwbh");
		vdo.put("dsmxinfo", dsMxinfo);

		return vdo;
	}
	
	/**
	 * 
	 * 方法简介.查询询拨付人员明细_全部信息(济南机关使用)
	 * 获取查询sql的方法和原来不同调用的是queryBfryMxInfoRetrieveJNjg
	 * @author zkj 2019-06-18
	 */
	public final DataObject queryBfryMxJNjg_AllRows(final DataObject para) throws Exception {
		DataObject vdo = new DataObject();
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieveJNjg",para,this.getUser()).getString("sqlStr");
		this.sql.setSql(sqlStr);

		DataStore dsMxinfo = this.sql.executeQuery();
		para.put("dsMxinfo", dsMxinfo);
		// 添加死亡人员信息查询并拼到ds中去 --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq = dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		vdo = this.queryBfryMxAllinfoJNjg(para);

		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");
		dsMxinfo.sort("shbzhm").sort("dwbh");
		vdo.put("dsmxinfo", dsMxinfo);

		return vdo;
	}
	/**
	 * 莱芜增加机关职称
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2018-12-10
	 * @since V1.0
	 */
	public final DataObject queryBfryMx_AllRows_3712(final DataObject para) throws Exception {
		DataObject vdo = new DataObject();
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(), "queryBfryMxInfoRetrieve", para, this.getUser()).getString("sqlStr");
		this.sql.setSql(sqlStr);

		DataStore dsMxinfo = this.sql.executeQuery();
		para.put("dsMxinfo", dsMxinfo);
		// 添加死亡人员信息查询并拼到ds中去 --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq = dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		vdo = this.queryBfryMxAllinfo(para);

		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");
		// add by gds 莱芜机关新增 2018.11.5
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			String ryid = dsMxinfo.getString(i, "ryid");
			String dwbh = dsMxinfo.getString(i, "dwbh");
			vdo = SiTools.getPerNatlByRyid(ryid);
			dsMxinfo.put(i, "jgsydwgzrylb", vdo.getString("jgsydwgzrylb"));
			dsMxinfo.put(i, "gwyzw", vdo.getString("gwyzw"));
			dsMxinfo.put(i, "gwyjb", vdo.getString("gwyjb"));
			dsMxinfo.put(i, "gwyjbdc", vdo.getString("gwyjbdc"));
			dsMxinfo.put(i, "gjzyzgdj", vdo.getString("gjzyzgdj"));
			dsMxinfo.put(i, "jggqrygw", vdo.getString("jggqrygw"));
			dsMxinfo.put(i, "sydwzyjsrygw", vdo.getString("sydwzyjsrygw"));
			dsMxinfo.put(i, "sydwzyjsryxj", vdo.getString("sydwzyjsryxj"));
			dsMxinfo.put(i, "sydwglrygw", vdo.getString("sydwglrygw"));
			dsMxinfo.put(i, "sydwglryxj", vdo.getString("sydwglryxj"));
			dsMxinfo.put(i, "sydwgrgw", vdo.getString("sydwgrgw"));
			dsMxinfo.put(i, "sydwgrxj", vdo.getString("sydwgrxj"));

			// 根据dwbh获取dwdjid
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(i);
			sqlBF.append(" select dwdjid ");
			sqlBF.append("   from si3u.orgn_reg ");
			sqlBF.append("  where dwbh = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwbh);
			DataStore tmpds = this.sql.executeQuery();
			if (tmpds.rowCount() <= 0) {
				this.bizException("根据单位编号【" + dwbh + "】无法获取单位基本信息，请检查！");
			}
			String dwdjid = tmpds.getString(0, "dwdjid");
			dsMxinfo.put(i, "lwgnq", SiTools.getOrgnCmpl(dwdjid, "LWGNQ"));
		}
		// add end

		dsMxinfo.sort("shbzhm").sort("dwbh");
		vdo.put("dsmxinfo", dsMxinfo);

		return vdo;
	}
	/**
	 * 
	 * 方法简介.导出拨付人员明细查询信息  
	 * 
	 * 增加dyffzt的导出
	 * @author 韦超 2016-9-30
	 */
	public DataObject genBfrymxExportFile_3709(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryBfryMxInfo(para);// 修改调用的查询方法，支持先查询单位，再循环查询个人，支持进度条提示--ywj--20161215
		DataStore dsBtbh = pdo.getDataStore("dsbtbh");
		fileDs = pdo.getDataStore("mxinfo");// 修改为对应的DataStore--ywj--20161215
		// modify 将code更改为汉字 weichao 20160112
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ygxs", HsuTools.discode("YGXS", fileDs.getString(i, "ygxs"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));

			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));// 增加单位性质--ywj--20161216
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
		}
		// end
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "shbzhm", "社会保障号码", "String", "", 20);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "yxzjhm", "身份证号码", "String", "", 18);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ygxs", "用工形式", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 10);
		addTableInfo4Write(tableInfo, "jfnx", "连续工龄", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "pjzs", "平均指数", "number", "#######0.000", 9);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 10);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "国家职业资格等级", "String", "", 10);
		addTableInfo4Write(tableInfo, "lxrxm", "联系人", "String", "", 50);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "yzbm", "邮政编码", "String", "", 6);
		addTableInfo4Write(tableInfo, "txdz", "通讯地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "jtzz", "家庭住址", "String", "", 200);
		addTableInfo4Write(tableInfo, "hj", "合计", "number", "#######0.00", 9);
		
		String btmc,btbh;
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh");
			btmc = dsBtbh.getString(i, "btmc");
			addTableInfo4Write(tableInfo, btbh, btmc, "number", "#######0.00", 9);
		}
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "string", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		// 数据大于60000条时，分为多个sheet页展示数据--add.yxt.20160317
		int count = fileDs.rowCount();// 获取数据行数
		int num = count / 60000;
		int remainder = count % 60000;
		if (remainder > 0) {
			num++;
		}
		for (int i = 0; i < num; i++) {
			int hhmax = (i + 1) * 60000;
			int hhmin = i * 60000;
			if (hhmax > count) {
				hhmax = count;
			}
			DataStore dsTemp = fileDs.subDataStore(hhmin, hhmax);

			sheet = ExcelTool.createSheet(workbook, "拨付人员明细", i);
			ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
			ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, dsTemp);
		}
		//--add.yxt.20160317。end

		// 生成excel文件
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		return rdo;
	}
	/**
	 * 
	 * 方法简介.导出拨付人员明细查询信息  
	 * 
	 * @author 韦超 2016-9-30
	 */
	public DataObject genBfrymxExportFile(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryBfryMxInfo(para);// 修改调用的查询方法，支持先查询单位，再循环查询个人，支持进度条提示--ywj--20161215
		DataStore dsBtbh = pdo.getDataStore("dsbtbh");
		fileDs = pdo.getDataStore("mxinfo");// 修改为对应的DataStore--ywj--20161215
		// modify 将code更改为汉字 weichao 20160112
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ygxs", HsuTools.discode("YGXS", fileDs.getString(i, "ygxs"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));// 增加单位性质--ywj--20161216
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
		}
		// end
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "shbzhm", "社会保障号码", "String", "", 20);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "yxzjhm", "身份证号码", "String", "", 18);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ygxs", "用工形式", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 10);
		addTableInfo4Write(tableInfo, "jfnx", "连续工龄", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "pjzs", "平均指数", "number", "#######0.000", 9);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 10);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "国家职业资格等级", "String", "", 10);
		addTableInfo4Write(tableInfo, "lxrxm", "联系人", "String", "", 50);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "sjhm", "手机号码", "String", "", 50);//gzh mod 20180413 增加导出手机号码
		addTableInfo4Write(tableInfo, "yzbm", "邮政编码", "String", "", 6);
		addTableInfo4Write(tableInfo, "txdz", "通讯地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "jtzz", "家庭住址", "String", "", 200);
		addTableInfo4Write(tableInfo, "hj", "合计", "number", "#######0.00", 9);
		
		//增加居住地行政区划的导出  刘欣 modify 20170112
		if (fileDs != null && fileDs.rowCount() > 0) {
			if (fileDs.getRow(0).containsKey("JZDXZQH")) {
				addTableInfo4Write(tableInfo, "JZDXZQH", "居住地行政区划", "String", "", 200);
			}
		}	
		
		String btmc,btbh;
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh");
			btmc = dsBtbh.getString(i, "btmc");
			addTableInfo4Write(tableInfo, btbh, btmc, "number", "#######0.00", 9);
		}
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "string", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		// 数据大于60000条时，分为多个sheet页展示数据--add.yxt.20160317
		int count = fileDs.rowCount();// 获取数据行数
		int num = count / 60000;
		int remainder = count % 60000;
		if (remainder > 0) {
			num++;
		}
		for (int i = 0; i < num; i++) {
			int hhmax = (i + 1) * 60000;
			int hhmin = i * 60000;
			if (hhmax > count) {
				hhmax = count;
			}
			DataStore dsTemp = fileDs.subDataStore(hhmin, hhmax);

			sheet = ExcelTool.createSheet(workbook, "报盘文件" + (i + 1), i);
			ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
			ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, dsTemp);
		}
		//--add.yxt.20160317。end

		// 生成excel文件
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.导出拨付人员明细查询信息  (济南机关使用)
	 * 获取职工拨付明细信息方法 调用queryBfryMxInfoJNjg
	 * @author 韦超 2016-9-30
	 */
	public DataObject genBfrymxExportFileJNjg(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryBfryMxInfoJNjg(para);// 修改调用的查询方法，支持先查询单位，再循环查询个人，支持进度条提示--ywj--20161215
		DataStore dsBtbh = pdo.getDataStore("dsbtbh");
		fileDs = pdo.getDataStore("mxinfo");// 修改为对应的DataStore--ywj--20161215
		// modify 将code更改为汉字 weichao 20160112
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ygxs", HsuTools.discode("YGXS", fileDs.getString(i, "ygxs"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));// 增加单位性质--ywj--20161216
			//add by cxq 2021/8/27 机关拨付明细查询结果增加退休人员的改革前和退休时人事信息项目
			fileDs.put(i, "ggqjgsydwgzrylb", HsuTools.discode("JGSYDWGZRYLB", fileDs.getString(i, "ggqjgsydwgzrylb"), ""));
			fileDs.put(i, "ggqgwyzw", HsuTools.discode("GWYZW", fileDs.getString(i, "ggqgwyzw"), ""));
			fileDs.put(i, "ggqgwyjb", HsuTools.discode("GWYJB", fileDs.getString(i, "ggqgwyjb"), ""));
			fileDs.put(i, "ggqgwyjbdc", HsuTools.discode("GWYJBDC", fileDs.getString(i, "ggqgwyjbdc"), ""));
			fileDs.put(i, "ggqjggqryjsdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "ggqjggqryjsdj"), ""));
			fileDs.put(i, "ggqjggqrygw", HsuTools.discode("JGGQRYGW", fileDs.getString(i, "ggqjggqrygw"), ""));
			fileDs.put(i, "ggqsydwzyjsrygw", HsuTools.discode("SYDWZYJSRYGW", fileDs.getString(i, "ggqsydwzyjsrygw"), ""));
			fileDs.put(i, "ggqsydwzyjsryxj", HsuTools.discode("SYDWZYJSRYXJ", fileDs.getString(i, "ggqsydwzyjsryxj"), ""));
			fileDs.put(i, "ggqsydwglrygw", HsuTools.discode("SYDWGLRYGW", fileDs.getString(i, "ggqsydwglrygw"), ""));
			fileDs.put(i, "ggqsydwglryxj", HsuTools.discode("SYDWGLRYXJ", fileDs.getString(i, "ggqsydwglryxj"), ""));
			fileDs.put(i, "ggqsydwgrgw", HsuTools.discode("SYDWGRGW", fileDs.getString(i, "ggqsydwgrgw"), ""));
			fileDs.put(i, "ggqsydwgrxj", HsuTools.discode("SYDWGRXJ", fileDs.getString(i, "ggqsydwgrxj"), ""));
			fileDs.put(i, "jgsydwgzrylb", HsuTools.discode("JGSYDWGZRYLB", fileDs.getString(i, "jgsydwgzrylb"), ""));
			fileDs.put(i, "gwyzw", HsuTools.discode("GWYZW", fileDs.getString(i, "gwyzw"), ""));
			fileDs.put(i, "gwyjb", HsuTools.discode("GWYJB", fileDs.getString(i, "gwyjb"), ""));
			fileDs.put(i, "gwyjbdc", HsuTools.discode("GWYJBDC", fileDs.getString(i, "gwyjbdc"), ""));
			fileDs.put(i, "jggqryjsdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "jggqryjsdj"), ""));
			fileDs.put(i, "jggqrygw", HsuTools.discode("JGGQRYGW", fileDs.getString(i, "jggqrygw"), ""));
			fileDs.put(i, "sydwzyjsrygw", HsuTools.discode("SYDWZYJSRYGW", fileDs.getString(i, "sydwzyjsrygw"), ""));
			fileDs.put(i, "sydwzyjsryxj", HsuTools.discode("SYDWZYJSRYXJ", fileDs.getString(i, "sydwzyjsryxj"), ""));
			fileDs.put(i, "sydwglrygw", HsuTools.discode("SYDWGLRYGW", fileDs.getString(i, "sydwglrygw"), ""));
			fileDs.put(i, "sydwglryxj", HsuTools.discode("SYDWGLRYXJ", fileDs.getString(i, "sydwglryxj"), ""));
			fileDs.put(i, "sydwgrgw", HsuTools.discode("SYDWGRGW", fileDs.getString(i, "sydwgrgw"), ""));
			fileDs.put(i, "sydwgrxj", HsuTools.discode("SYDWGRXJ", fileDs.getString(i, "sydwgrxj"), ""));
			//add by cxq end
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
		}
		// end
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "shbzhm", "社会保障号码", "String", "", 20);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "yxzjhm", "身份证号码", "String", "", 18);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ygxs", "用工形式", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 10);
		addTableInfo4Write(tableInfo, "jfnx", "连续工龄", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "pjzs", "平均指数", "number", "#######0.000", 9);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 10);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "国家职业资格等级", "String", "", 10);
		addTableInfo4Write(tableInfo, "lxrxm", "联系人", "String", "", 50);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "sjhm", "手机号码", "String", "", 50);//gzh mod 20180413 增加导出手机号码
		addTableInfo4Write(tableInfo, "yzbm", "邮政编码", "String", "", 6);
		addTableInfo4Write(tableInfo, "txdz", "通讯地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "jtzz", "家庭住址", "String", "", 200);
		//add by cxq 2021/8/27 机关拨付明细查询结果增加退休人员的改革前和退休时人事信息项目
		addTableInfo4Write(tableInfo, "ggqjgsydwgzrylb", "机关事业单位工作人员类别(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqgwyzw", "公务员职务(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqgwyjb", "公务员级别(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqgwyjbdc", "公务员级别对应档次(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqjggqryjsdj", "机关工勤人员技术等级(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqjggqrygw", "机关工勤人员岗位(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqsydwzyjsrygw", "事业单位专业技术人员岗位(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqsydwzyjsryxj", "事业单位专业技术人员薪级(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqsydwglrygw", "事业单位管理人员岗位(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqsydwglryxj", "事业单位管理人员薪级(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqsydwgrgw", "事业单位工人岗位(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "ggqsydwgrxj", "事业单位工人薪级(改革前)", "String", "", 50);
		addTableInfo4Write(tableInfo, "jgsydwgzrylb", "机关事业单位工作人员类别(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "gwyzw", "公务员职务(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "gwyjb", "公务员级别(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "gwyjbdc", "公务员级别对应档次(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "jggqryjsdj", "机关工勤人员技术等级(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "jggqrygw", "机关工勤人员岗位(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "sydwzyjsrygw", "事业单位专业技术人员岗位(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "sydwzyjsryxj", "事业单位专业技术人员薪级(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "sydwglrygw", "事业单位管理人员岗位(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "sydwglryxj", "事业单位管理人员薪级(退休时)", "String", "", 50);
		addTableInfo4Write(tableInfo, "sydwgrgw", "事业单位工人岗位(退休时)", "String", "",50);
		addTableInfo4Write(tableInfo, "sydwgrxj", "事业单位工人薪级(退休时)", "String", "", 50);
		//add by cxq 2021/8/27 end
		//增加居住地行政区划的导出  刘欣 modify 20170112
		if (fileDs != null && fileDs.rowCount() > 0) {
			if (fileDs.getRow(0).containsKey("JZDXZQH")) {
				addTableInfo4Write(tableInfo, "JZDXZQH", "居住地行政区划", "String", "", 200);
			}
		}	
		
		String btmc,btbh;
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh");
			btmc = dsBtbh.getString(i, "btmc");
			addTableInfo4Write(tableInfo, btbh, btmc, "number", "#######0.00", 9);
		}
		addTableInfo4Write(tableInfo, "hj", "合计", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "string", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		// 数据大于60000条时，分为多个sheet页展示数据--add.yxt.20160317
		int count = fileDs.rowCount();// 获取数据行数
		int num = count / 60000;
		int remainder = count % 60000;
		if (remainder > 0) {
			num++;
		}
		for (int i = 0; i < num; i++) {
			int hhmax = (i + 1) * 60000;
			int hhmin = i * 60000;
			if (hhmax > count) {
				hhmax = count;
			}
			DataStore dsTemp = fileDs.subDataStore(hhmin, hhmax);

			sheet = ExcelTool.createSheet(workbook, "报盘文件" + (i + 1), i);
			ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
			ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, dsTemp);
		}
		//--add.yxt.20160317。end

		// 生成excel文件
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.导出拨付人员明细查询信息  (烟台客户化)
	 * 与标准件的区别：增加死亡人员信息查询
	 * 
	 * @author zkj 2017-12-16
	 */
	public DataObject genBfrymxExportFile_3706(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryBfryMxInfo(para);// 修改调用的查询方法，支持先查询单位，再循环查询个人，支持进度条提示--ywj--20161215
		DataStore dsBtbh = pdo.getDataStore("dsbtbh");
		fileDs = pdo.getDataStore("mxinfo");// 修改为对应的DataStore--ywj--20161215
		// 添加死亡人员信息查询并拼到ds中去 --zkj add 2017/12/14
		for (int i = 0; i < fileDs.rowCount(); i++) {
			String swryid = fileDs.getString(i, "swryid");
			String bz = fileDs.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				fileDs.put(i, "swshbzhm", shbzhm);
				fileDs.put(i, "swxm", xm);
				fileDs.put(i, "swcjgzrq", cjgzrq);
				fileDs.put(i, "swltxrq", ltxrq);
				fileDs.put(i, "swltxlb", ltxlb);
				fileDs.put(i, "swrq", swrq);
				fileDs.put(i, "bz", bz);
				continue;
			}
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq = dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			fileDs.put(i, "swshbzhm", shbzhm);
			fileDs.put(i, "swxm", xm);
			fileDs.put(i, "swcjgzrq", cjgzrq);
			fileDs.put(i, "swltxrq", ltxrq);
			fileDs.put(i, "swltxlb", ltxlb);
			fileDs.put(i, "swrq", swrq);
			fileDs.put(i, "bz", bz);
		}
		// end
		// modify 将code更改为汉字 weichao 20160112
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ygxs", HsuTools.discode("YGXS", fileDs.getString(i, "ygxs"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));// 增加单位性质--ywj--20161216
			fileDs.put(i, "swltxlb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "swltxlb"), ""));// 增加死亡人员离退休类别--zkj--20171216
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
		}
		// end
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "shbzhm", "社会保障号码", "String", "", 20);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "yxzjhm", "身份证号码", "String", "", 18);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ygxs", "用工形式", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 10);
		addTableInfo4Write(tableInfo, "jfnx", "连续工龄", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "pjzs", "平均指数", "number", "#######0.000", 9);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 10);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "国家职业资格等级", "String", "", 10);
		addTableInfo4Write(tableInfo, "lxrxm", "联系人", "String", "", 50);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "yzbm", "邮政编码", "String", "", 6);
		addTableInfo4Write(tableInfo, "txdz", "通讯地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "jtzz", "家庭住址", "String", "", 200);
		addTableInfo4Write(tableInfo, "hj", "合计", "number", "#######0.00", 9);
		//如果选取了遗属则增加死者信息列
		String zfrylb = pdo.getDataStore("dsquery").getString(0, "zfrylb");
		if (zfrylb.indexOf("B01") >= 0 || zfrylb.indexOf("B02") >= 0
				|| zfrylb.indexOf("B03") >= 0 || zfrylb.indexOf("B04") >= 0) {
			addTableInfo4Write(tableInfo, "swshbzhm", "死者社会保障号码", "String", "", 20);
			addTableInfo4Write(tableInfo, "swxm", "死者姓名", "String", "", 50);
			addTableInfo4Write(tableInfo, "swcjgzrq", "死者参加工作日期", "String", "", 10);
			addTableInfo4Write(tableInfo, "swltxrq", "死者离退休日期", "String", "", 10);
			addTableInfo4Write(tableInfo, "swltxlb", "死者离退休类别", "String", "", 10);
			addTableInfo4Write(tableInfo, "swrq", "死者死亡日期", "String", "", 10);
			addTableInfo4Write(tableInfo, "bz", "备注", "String", "", 50);
		}
		
		//增加居住地行政区划的导出  刘欣 modify 20170112
		if(fileDs.getRow(0).containsKey("JZDXZQH")){
			addTableInfo4Write(tableInfo, "JZDXZQH", "居住地行政区划", "String", "", 200);
		}
		//add.cjj.20180726增加居住地行政区划代码
		if(fileDs.getRow(0).containsKey("JZDXZQHDM")){
			addTableInfo4Write(tableInfo, "JZDXZQHDM", "居住地行政区划代码", "String", "", 20);
		}
		
		String btmc,btbh;
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh");
			btmc = dsBtbh.getString(i, "btmc");
			addTableInfo4Write(tableInfo, btbh, btmc, "number", "#######0.00", 9);
		}
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "string", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		// 数据大于60000条时，分为多个sheet页展示数据--add.yxt.20160317
		int count = fileDs.rowCount();// 获取数据行数
		int num = count / 60000;
		int remainder = count % 60000;
		if (remainder > 0) {
			num++;
		}
		for (int i = 0; i < num; i++) {
			int hhmax = (i + 1) * 60000;
			int hhmin = i * 60000;
			if (hhmax > count) {
				hhmax = count;
			}
			DataStore dsTemp = fileDs.subDataStore(hhmin, hhmax);

			sheet = ExcelTool.createSheet(workbook, "报盘文件" + (i + 1), i);
			ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
			ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, dsTemp);
		}
		//--add.yxt.20160317。end

		// 生成excel文件
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		return rdo;
	}
	/**
	 * 建立datastore中key和excel列名之间的对应关系
	 * 
	 * @author 常丹丹
	 * @date 创建时间 2015-4-9
	 * @since V1.0
	 */
	private final void addTableInfo4Write(final DataStore tableInfo,
			final String dsColName, final String excelColName,
			final String type, final String mask, final int length) throws Exception {
		DataObject row = new DataObject();
		row.put("name", dsColName);
		row.put("columnName", excelColName);
		row.put("type", type);
		row.put("mask", mask);
		row.put("length", length);
		tableInfo.addRow(row);
	}


	/**
	 * 
	 * 方法简介.查询询拨付人员明细_总行号
	 * 
	 * @author 韦超 2015-11-28
	 */
	public DataObject queryBfryMx_RowCount(DataObject para) throws Exception {
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieve",para,this.getUser()).getString("sqlStr");
		this.sql.setSql(sqlStr);

		DataStore dsMxinfo = this.sql.executeQuery();
		
		// 增加拨付金额总合计 add by blp 20161229
		double sumje = 0;
		double hj;
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			hj = dsMxinfo.getDouble(i, "hj");
			sumje = sumje + hj;
		}

		DataObject vdo = new DataObject();
		
		vdo.put("row_count", dsMxinfo.rowCount());
		vdo.put("sumje", DataFormat.formatDouble(sumje,2));
		return vdo;
	}
	
	/**
	 * 方法简介.查询询拨付人员明细_总行号（济南机关使用） 
	 * 获取查询sql的方法用的是queryBfryMxInfoRetrieveJNjg
	 * 
	 * @author zkj 2019-06-18
	 */
	public DataObject queryBfryMxJNjg_RowCount(DataObject para) throws Exception {
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieveJNjg",para,this.getUser()).getString("sqlStr");
		this.sql.setSql(sqlStr);

		DataStore dsMxinfo = this.sql.executeQuery();
		//计算总金额前先将年待遇信息补充完 -- zkj modify 2019/06/18
		para.put("dsMxinfo", dsMxinfo);
		DataObject rdo = this.queryBfryMxAllinfoJNjg(para);
		
		// 排序--ywj--20161216
		dsMxinfo = rdo.getDataStore("dsmxinfo");
		// 增加拨付金额总合计 add by blp 20161229
		double sumje = 0;
		double hj;
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			hj = dsMxinfo.getDouble(i, "hj");
			sumje = sumje + hj;
		}

		DataObject vdo = new DataObject();
		
		vdo.put("row_count", dsMxinfo.rowCount());
		vdo.put("sumje", DataFormat.formatDouble(sumje,2));
		return vdo;
	}

	/**
	 * 
	 * 方法简介.查询询拨付人员明细_某页数据
	 * 
	 * @author 韦超 2015-11-28
	 */
	public DataObject queryBfryMx_PageRows(DataObject para) throws Exception {
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieve",para,this.getUser()).getString("sqlStr");

		int g_startRowNumber = para.getInt("g_startRowNumber");
		int g_endRowNumber = para.getInt("g_endRowNumber");
		String g_order = para.getString("g_order");

		this.sql.setSql(sqlStr);
		DataStore dsMxinfo = this.sql.selectPageRows(g_startRowNumber, g_endRowNumber, g_order);
		//添加死亡人员信息查询并拼到ds中去  --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");


			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq  =dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		para.put("dsMxinfo", dsMxinfo);
		DataObject vdo = this.queryBfryMxAllinfo(para);
		
		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");
		if (g_order == null || "".equals(g_order)) {
			dsMxinfo.sort("shbzhm").sort("dwbh");
		}
		vdo.put("dsmxinfo", dsMxinfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsMxinfo.rowCount());

		return vdo;
	}
	/**
	 * 
	 * 方法简介.查询询拨付人员明细_某页数据（济南机关使用）
	 * 获取sql方法调用的queryBfryMxInfoRetrieveJNjg
	 * @author 韦超 2015-11-28
	 */
	public DataObject queryBfryMxJNjg_PageRows(DataObject para) throws Exception {
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieveJNjg",para,this.getUser()).getString("sqlStr");

		int g_startRowNumber = para.getInt("g_startRowNumber");
		int g_endRowNumber = para.getInt("g_endRowNumber");
		String g_order = para.getString("g_order");

		this.sql.setSql(sqlStr);
		DataStore dsMxinfo = this.sql.selectPageRows(g_startRowNumber, g_endRowNumber, g_order);
		//添加死亡人员信息查询并拼到ds中去  --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");


			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq  =dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		para.put("dsMxinfo", dsMxinfo);
		DataObject vdo = this.queryBfryMxAllinfoJNjg(para);
		
		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");
		if (g_order == null || "".equals(g_order)) {
			dsMxinfo.sort("shbzhm").sort("dwbh");
		}
		vdo.put("dsmxinfo", dsMxinfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsMxinfo.rowCount());

		return vdo;
	}
	/**
	 * 莱芜增加机关单位职称
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2018-12-10
	 * @since V1.0
	 */
	public DataObject queryBfryMx_PageRows_3712(DataObject para) throws Exception {

		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser()
			.getUserid(), para);

		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(), "queryBfryMxInfoRetrieve", para, this.getUser())
			.getString("sqlStr");

		int g_startRowNumber = para.getInt("g_startRowNumber");
		int g_endRowNumber = para.getInt("g_endRowNumber");
		String g_order = para.getString("g_order");

		this.sql.setSql(sqlStr);
		DataStore dsMxinfo = this.sql.selectPageRows(g_startRowNumber, g_endRowNumber, g_order);
		// 添加死亡人员信息查询并拼到ds中去 --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq = dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		para.put("dsMxinfo", dsMxinfo);
		DataObject vdo = this.queryBfryMxAllinfo(para);

		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");

		// add by gds 莱芜机关新增 2018.11.5
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			String ryid = dsMxinfo.getString(i, "ryid");
			String dwbh = dsMxinfo.getString(i, "dwbh");
			vdo = SiTools.getPerNatlByRyid(ryid);
			dsMxinfo.put(i, "jgsydwgzrylb", vdo.getString("jgsydwgzrylb"));
			dsMxinfo.put(i, "gwyzw", vdo.getString("gwyzw"));
			dsMxinfo.put(i, "gwyjb", vdo.getString("gwyjb"));
			dsMxinfo.put(i, "gwyjbdc", vdo.getString("gwyjbdc"));
			dsMxinfo.put(i, "gjzyzgdj", vdo.getString("gjzyzgdj"));
			dsMxinfo.put(i, "jggqrygw", vdo.getString("jggqrygw"));
			dsMxinfo.put(i, "sydwzyjsrygw", vdo.getString("sydwzyjsrygw"));
			dsMxinfo.put(i, "sydwzyjsryxj", vdo.getString("sydwzyjsryxj"));
			dsMxinfo.put(i, "sydwglrygw", vdo.getString("sydwglrygw"));
			dsMxinfo.put(i, "sydwglryxj", vdo.getString("sydwglryxj"));
			dsMxinfo.put(i, "sydwgrgw", vdo.getString("sydwgrgw"));
			dsMxinfo.put(i, "sydwgrxj", vdo.getString("sydwgrxj"));
			// 根据dwbh获取dwdjid
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(i);
			sqlBF.append(" select dwdjid ");
			sqlBF.append("   from si3u.orgn_reg ");
			sqlBF.append("  where dwbh = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwbh);
			DataStore tmpds = this.sql.executeQuery();
			if (tmpds.rowCount() <= 0) {
				this.bizException("根据单位编号【" + dwbh + "】无法获取单位基本信息，请检查！");
			}
			String dwdjid = tmpds.getString(0, "dwdjid");
			dsMxinfo.put(i, "lwgnq", SiTools.getOrgnCmpl(dwdjid, "LWGNQ"));
		}
		if (g_order == null || "".equals(g_order)) {
			dsMxinfo.sort("shbzhm").sort("dwbh");
		}
		vdo.put("dsmxinfo", dsMxinfo);

		QueryLogTool.updateQueryLog(querylogid, dsMxinfo.rowCount());

		return vdo;
	}
	/**
	 * 方法简介.跳转到拨付人员查询的JSP之前查询相关信息
	 * 
	 * @author 韦超 2014-12-30
	 */
	public DataObject fwdBfryQuery(final DataObject para) throws Exception {
		String rq, ny;
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		rq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM-dd");
		ny = rq.substring(0, 7);
		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);
		rdo.put("rq", rq);
		rdo.put("ny", ny);
		return rdo;
	}

	/**
	 * 方法简介.拨付人员查询的JSP之前查询相关信息
	 * 
	 * @author 韦超 2015-1-4
	 */
	public DataObject queryBfryInfoByJbjg(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String zfrylb, ffny, xb,btlb;
		DataStore dsBfryInfo;
		String jbjgidStr;
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		zfrylb = para.getString("zfrylb");
		ffny = para.getDateToString("ffny", "yyyyMM");
		xb = para.getString("xb", "");
		btlb = para.getString("btlb","");//淄博添加区分基本养老金和40元补贴查询 ysf,2018-7-20

		// TODO 对单位的限制应转换为相应的收缴经办机构;现在为限制，应该使用类似597行的方法
		// HsuTools.replaceC2QCQ(AdTools.getSjjbjgByZfjbjg(para.getString("jbjgid"),"101,102"));
		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));// 对单位的限制应转换为相应的收缴经办机构
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		// 取经办机构下当前月份有定期待遇的单位, 并查询拨付人数和拨付金额
		sqlBF.setLength(0);
		sqlBF.setLength(0);
		sqlBF.append(" select bo.dwid, bo.jjlx, so.dwdjid, so.dwbh, so.cbdwmc, ");
		sqlBF.append("        so.cbdwxz, count(distinct pi.dqdydjid)bfrs, nvl(sum(pg.btje), 0)txjze ");
		sqlBF.append("   from biuv.orgn bo, ");
		sqlBF.append("        si3u.orgn_reg so, ");
		sqlBF.append("        ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where bo.dwid = so.dwid ");
		sqlBF.append("    and so.dwdjid = pi.dwdjid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and exists ( ");
			sqlBF.append("           select 1  ");
			sqlBF.append("             from ad3u.emp_info ei ");
			sqlBF.append("            where ei.ryid = pi.ryid ");
			sqlBF.append("              and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
			sqlBF.append("            union all  ");
			sqlBF.append("           select 1  ");
			sqlBF.append("             from ad3u.supp_info si ");
			sqlBF.append("            where si.ryid = pi.ryid ");
			sqlBF.append("              and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
			sqlBF.append("    ) ");
		}
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and so.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(")");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh = 'A187' ");
			}
		}
		sqlBF.append(" group by bo.dwid, so.dwdjid, so.dwbh, so.cbdwmc, so.cbdwxz, bo.jjlx ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ffny);
		dsBfryInfo = this.sql.executeQuery();

		dsBfryInfo = dsBfryInfo.sort("dwbh");
		rdo.put("bfryInfo", dsBfryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsBfryInfo.rowCount());

		return rdo;
	}

	/**
	 * 方法简介.查询选定单位的拨付人员信息
	 * 
	 * @author 韦超 2015-1-4
	 */
	public DataObject queryBfryInfoByOrgn(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String zfrylb, dwdjid, ffny, dfjglb, dfjgid, dwbh, dwmc, xb,btlb;
		DataStore ds, dsBfryInfo;
		int count;

		// 接参数
 		dwdjid = para.getString("dwdjid");
		zfrylb = para.getString("zfrylb");
		ffny = para.getDateToString("ffny", "yyyyMM");
		xb = para.getString("xb", "");// 增加性别的查询条件
		btlb = para.getString("btlb","");//淄博添加区分基本养老金和40元补贴查询 ysf,2018-7-20
		
		if (dwdjid == null || "".equals(dwdjid)) {
			this.bizException("传入单位登记ID为空！");
		}

		// 取单位编号 单位名称
		sqlBF.setLength(0);
		sqlBF.append(" select dwbh, cbdwmc ");
		sqlBF.append("   from si3u.orgn_reg ");
		sqlBF.append("  where dwdjid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		ds = this.sql.executeQuery();

		if (ds.rowCount() == 0) {
			this.bizException("单位信息不存在！");
		}
		dwbh = ds.getString(0, "dwbh");
		dwmc = ds.getString(0, "cbdwmc");

		sqlBF.setLength(0);
		// 取职工
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, ");
		sqlBF.append("        ei.ltxrq, ei.ltxlb zfrylb, pi.dfjglb, pi.dfjgid, ''dfjgmc, ");
		sqlBF.append("        pi.yhzh, nvl(sum(pg.btje), 0) txj,? dwbh, ? dwmc,pi.ryid");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and ei.ltxlb in (");
			sqlBF.append(HsuTools.replaceC2QCQ(zfrylb));
			sqlBF.append(") ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("  and pi.xb = '" + xb + "'");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh = 'A187' ");
			}
		}
		sqlBF.append(" 	and pi.dwdjid = ? ");
		sqlBF.append(" 	and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append(" group by pi.ryid, pi.shbzhm,pi.xm,ei.ltxlb, ei.ltxrq,");
		sqlBF.append("          pi.csrq,pi.xb,pi.dfjglb,pi.dfjgid,pi.yhzh ");
		sqlBF.append(" union all  ");
		// 取遗属
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, ");
		sqlBF.append("        '' ltxrq, si.yslb zfrylb, pi.dfjglb, pi.dfjgid, ''dfjgmc, ");
		sqlBF.append("        pi.yhzh, nvl(sum(pg.btje), 0) txj, ? dwbh, ? dwmc, pi.ryid ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_giv_month_std pg");
		sqlBF.append("  where pi.ryid = si.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and si.yslb in (");
			sqlBF.append(HsuTools.replaceC2QCQ(zfrylb));
			sqlBF.append(") ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("  and pi.xb = '" + xb + "'");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh = 'A187' ");
			}
		}
		sqlBF.append(" 	and pi.dwdjid = ? ");
		sqlBF.append(" 	and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append(" group by pi.ryid, pi.shbzhm,pi.xm,si.yslb,");
		sqlBF.append("          pi.csrq,pi.xb,pi.dfjglb,pi.dfjgid,pi.yhzh");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwbh);
		this.sql.setString(2, dwmc);
		this.sql.setString(3, dwdjid);
		this.sql.setString(4, ffny);
		this.sql.setString(5, dwbh);
		this.sql.setString(6, dwmc);
		this.sql.setString(7, dwdjid);
		this.sql.setString(8, ffny);
		dsBfryInfo = this.sql.executeQuery();

		count = dsBfryInfo.rowCount();
		for (int i = 0; i < count; i++) {
			dfjgid = dsBfryInfo.getString(i, "dfjgid");
			dfjglb = dsBfryInfo.getString(i, "dfjglb");

			if ("B".equals(dfjglb)) {
				sqlBF.setLength(0);
				sqlBF.append(" select cbdwmc dfjgmc ");
				sqlBF.append("   from si3u.orgn_reg ");
				sqlBF.append("  where dwdjid = ? ");
			} else {
				sqlBF.setLength(0);
				sqlBF.append(" select dfjgmc ");
				sqlBF.append("   from be3u.provide_natl ");
				sqlBF.append("  where dfjgid = ? ");
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dfjgid);
			ds = this.sql.executeQuery();
			dsBfryInfo.put(i, "dfjgmc", "");
			if (ds.rowCount() > 0) {
				dsBfryInfo.put(i, "dfjgmc", ds.getString(0, "dfjgmc"));
			}
		}

		dsBfryInfo = dsBfryInfo.sort("shbzhm");

		ds = new DataStore();
		ds.addRow();
		ds.put(0, "dwbh", dwbh);
		ds.put(0, "dwmc", dwmc);
		ds.put(0, "dwdjid", dwdjid);
		ds.put(0, "ffny", ffny);
		ds.put(0, "zfrylb", zfrylb);

		rdo.put("bfryinfo", dsBfryInfo);
		rdo.put("orgninfo", ds);
		return rdo;
	}

	/**
	 * 方法简介.跳转到暂停拨付人员查询的JSP之前查询相关信息
	 * 
	 * @author 韦超 2015-1-5
	 */
	public DataObject fwdZtbfryQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		
		rdo.put("dsjbjg", ds);
		return rdo;
	}

	/**
	 * 方法简介.根据录入的信息查询暂停拨付人员
	 * 
	 * @author 韦超 2015-1-5
	 */
	public DataObject queryZtbfryInfoByJbjg(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, zfrylb, currentNy, xb, btlb, qsny = "",zzny = "";//add.gxl.20190225 增加起始年月、终止年月
		DataStore dsZtbfryInfo;
		
		String querylogid = QueryLogTool.saveQueryLog("暂停拨付人员", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		jbjgid = para.getString("jbjgid");
		zfrylb = para.getString("zfrylb");
		xb = para.getString("xb", "");
		btlb = para.getString("btlb","");//淄博添加区分基本养老金和40元补贴查询 ysf,2018-7-20
		
		if (para.containsKey("qsny")) {
			qsny = para.getDateToString("qsny", "yyyyMM");
		}
		if (para.containsKey("zzny")) {
			zzny = para.getDateToString("zzny", "yyyyMM");
		}
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构ID为空！");
		}
		
		if (qsny == null){
			qsny = "";
		}
		if (zzny == null){
			zzny = "";
		}
		
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");

		// 查询当月暂停发放待遇的人数和月停拨金额、停拨总金额
		sqlBF.setLength(0);
		sqlBF.append(" select pi.gljglb, pi.gljgid, pi.dfjglb,pi.dfjgid, count(distinct pi.ryid) ztbfrs, ");
		sqlBF.append("        nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        nvl(sum(pg.btje*(months_between(to_date(least(?,nvl(pg.zzny, '205012')) , 'yyyyMM'),to_date(pp.qsny, 'yyyyMM')) + 1)) ,0) tbzje  ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg, ");
		sqlBF.append("        ad3u.per_reg pr ");
		sqlBF.append("  where pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.dqdydjid = pr.dydjid ");
		// 查询增加限制起止年月、终止年月
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append("    and pi.dfjgid is not null ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and pi.zfrylb in  (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		sqlBF.append(" and pr.jbjgid in (");
		sqlBF.append(jbjgid);
		sqlBF.append(")");
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh = 'A187' ");
			}
		}
		sqlBF.append("  group by pi.gljglb, pi.gljgid, pi.dfjglb, pi.dfjgid ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, currentNy);
		// 查询增加限制起止年月、终止年月
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			this.sql.setString(2, currentNy);
		} else {
			this.sql.setString(2, currentNy);
			this.sql.setString(3, currentNy);
		}
	
		dsZtbfryInfo = this.sql.executeQuery();
		// 查询代发机构和管理机构信息
		dsZtbfryInfo = AdTools.genDfjgxxDataStore(dsZtbfryInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsZtbfryInfo = AdTools.genGljgxxDataStore(dsZtbfryInfo, "gljglb", "gljgid", "gljgbh", "gljgmc");

		dsZtbfryInfo.setTypeList("gljgbh:s,gljgmc:s,dfjgbh:s,dfjgmc:s");

		dsZtbfryInfo = dsZtbfryInfo.sort("dfjgbh,dfjglb");
		rdo.put("ztbfryInfo", dsZtbfryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsZtbfryInfo.rowCount());
		
		return rdo;
	}
	
	/**
	 * 方法简介.根据录入的信息查询暂停拨付人员
	 * 
	 * @author 高智慧 2019-4-23
	 */
	public DataObject queryZtbfryInfoByJbjg_3701(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, zfrylb, currentNy, xb, btlb, qsny = "",zzny = "";//add.gxl.20190225 增加起始年月、终止年月
		DataStore dsZtbfryInfo;
		
		String querylogid = QueryLogTool.saveQueryLog("暂停拨付人员", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		jbjgid = para.getString("jbjgid");
		zfrylb = para.getString("zfrylb");
		xb = para.getString("xb", "");
		btlb = para.getString("btlb","");//淄博添加区分基本养老金和40元补贴查询 ysf,2018-7-20
		
		if (para.containsKey("qsny")) {
			qsny = para.getDateToString("qsny", "yyyyMM");
		}
		if (para.containsKey("zzny")) {
			zzny = para.getDateToString("zzny", "yyyyMM");
		}
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构ID为空！");
		}
		
		if (qsny == null){
			qsny = "";
		}
		if (zzny == null){
			zzny = "";
		}
		
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");

		// 查询当月暂停发放待遇的人数和月停拨金额、停拨总金额
		sqlBF.setLength(0);
		sqlBF.append(" select pi.gljglb, pi.gljgid, pi.dfjglb,pi.dfjgid, count(distinct pi.ryid) ztbfrs, ");
		sqlBF.append("        nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        nvl(sum(pg.btje*(months_between(to_date(least(?,nvl(pg.zzny, '205012')) , 'yyyyMM'),to_date(pp.qsny, 'yyyyMM')) + 1)) ,0) tbzje  ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_std_pause pg, ");
		sqlBF.append("        ad3u.per_reg pr ");
		sqlBF.append("  where pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid(+) ");
		sqlBF.append("    and pi.dqdydjid = pr.dydjid ");
		// 查询增加限制起止年月、终止年月
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and ? between pg.qsny(+) and nvl(pg.zzny(+), '205012') ");
		sqlBF.append("    and pi.dfjgid is not null ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and pi.zfrylb in  (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		sqlBF.append(" and pr.jbjgid in (");
		sqlBF.append(jbjgid);
		sqlBF.append(")");
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh(+) <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh(+) = 'A187' ");
			}
		}
		sqlBF.append("  group by pi.gljglb, pi.gljgid, pi.dfjglb, pi.dfjgid ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, currentNy);
		// 查询增加限制起止年月、终止年月
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			this.sql.setString(2, currentNy);
		} else {
			this.sql.setString(2, currentNy);
			this.sql.setString(3, currentNy);
		}
	
		dsZtbfryInfo = this.sql.executeQuery();
		// 查询代发机构和管理机构信息
		dsZtbfryInfo = AdTools.genDfjgxxDataStore(dsZtbfryInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsZtbfryInfo = AdTools.genGljgxxDataStore(dsZtbfryInfo, "gljglb", "gljgid", "gljgbh", "gljgmc");

		dsZtbfryInfo.setTypeList("gljgbh:s,gljgmc:s,dfjgbh:s,dfjgmc:s");

		dsZtbfryInfo = dsZtbfryInfo.sort("dfjgbh,dfjglb");
		rdo.put("ztbfryInfo", dsZtbfryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsZtbfryInfo.rowCount());
		
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.根据录入的信息查询暂停拨付人员
	 * 
	 * 省直客户化，去掉死亡人员
	 * 
	 * @author 路国 2017-7-20
	 */
	public DataObject queryZtbfryInfoByJbjg_3799(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, zfrylb, currentNy, xb;
		DataStore dsZtbfryInfo;
		
		String querylogid = QueryLogTool.saveQueryLog("暂停拨付人员", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		jbjgid = para.getString("jbjgid");
		zfrylb = para.getString("zfrylb");
		xb = para.getString("xb", "");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构ID为空！");
		}
		
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");

		// 查询当月暂停发放待遇的人数和月停拨金额、停拨总金额
		sqlBF.setLength(0);
		sqlBF.append(" select pi.gljglb, pi.gljgid, pi.dfjglb,pi.dfjgid, count(distinct pi.ryid) ztbfrs, ");
		sqlBF.append("        nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        nvl(sum(pg.btje*(months_between(to_date(least(?,nvl(pg.zzny, '205012')) , 'yyyyMM'),to_date(pp.qsny, 'yyyyMM')) + 1)) ,0) tbzje  ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg, ");
		sqlBF.append("        ad3u.per_reg pr ");
		sqlBF.append("  where pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.dqdydjid = pr.dydjid ");
		sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append("    and pi.dyffzt <> '3' ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and pi.zfrylb in  (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		sqlBF.append(" and pr.jbjgid in (");
		sqlBF.append(jbjgid);
		sqlBF.append(")");
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		sqlBF.append("  group by pi.gljglb, pi.gljgid, pi.dfjglb, pi.dfjgid ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, currentNy);
		this.sql.setString(2, currentNy);
		this.sql.setString(3, currentNy);
		dsZtbfryInfo = this.sql.executeQuery();
		// 查询代发机构和管理机构信息
		dsZtbfryInfo = AdTools.genDfjgxxDataStore(dsZtbfryInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsZtbfryInfo = AdTools.genGljgxxDataStore(dsZtbfryInfo, "gljglb", "gljgid", "gljgbh", "gljgmc");

		dsZtbfryInfo.setTypeList("gljgbh:s,gljgmc:s,dfjgbh:s,dfjgmc:s");

		dsZtbfryInfo = dsZtbfryInfo.sort("dfjgbh,dfjglb");
		rdo.put("ztbfryInfo", dsZtbfryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsZtbfryInfo.rowCount());
		
		return rdo;
	}
	/**
	 * 
	 * 根据录入的信息查询暂停拨付人员
	 * <p>威海文登</p>
	 *
	 * @author cjj
	 * @date 创建时间 2017-5-16
	 * @since V1.0
	 */
	public DataObject queryZtbfryInfoByJbjg_371081(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, zfrylb, currentNy, xb;
		DataStore dsZtbfryInfo;

		String querylogid = QueryLogTool.saveQueryLog("暂停拨付人员", "职工养老支付-离退休人员及遗属情况", this.getUser()
			.getUserid(), para);

		jbjgid = para.getString("jbjgid");
		zfrylb = para.getString("zfrylb");
		xb = para.getString("xb", "");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构ID为空！");
		}

		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");

		// 查询当月暂停发放待遇的人数和月停拨金额、停拨总金额
		sqlBF.setLength(0);
		sqlBF.append(" select pi.gljglb, pi.gljgid, pi.dfjglb,pi.dfjgid, count(distinct pi.ryid) ztbfrs, ");
		sqlBF.append("        nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        nvl(sum(pg.btje*(months_between(to_date(least(?,nvl(pg.zzny, '205012')) , 'yyyyMM'),to_date(pp.qsny, 'yyyyMM')) + 1)) ,0) tbzje  ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg, ");
		sqlBF.append("        ad3u.per_reg pr ");
		sqlBF.append("  where pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = pg.ryid(+) ");
		sqlBF.append("    and pi.dqdydjid = pr.dydjid ");
		sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		sqlBF.append("    and ? between pg.qsny(+) and nvl(pg.zzny(+), '205012') ");
		sqlBF.append("    and pi.dfjgid is not null ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and pi.zfrylb in  (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		sqlBF.append(" and pr.jbjgid in (");
		sqlBF.append(jbjgid);
		sqlBF.append(")");
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		sqlBF.append("  group by pi.gljglb, pi.gljgid, pi.dfjglb, pi.dfjgid ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, currentNy);
		this.sql.setString(2, currentNy);
		this.sql.setString(3, currentNy);
		dsZtbfryInfo = this.sql.executeQuery();
		// 查询代发机构和管理机构信息
		dsZtbfryInfo = AdTools.genDfjgxxDataStore(dsZtbfryInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsZtbfryInfo = AdTools.genGljgxxDataStore(dsZtbfryInfo, "gljglb", "gljgid", "gljgbh", "gljgmc");

		dsZtbfryInfo.setTypeList("gljgbh:s,gljgmc:s,dfjgbh:s,dfjgmc:s");

		dsZtbfryInfo = dsZtbfryInfo.sort("dfjgbh,dfjglb");
		rdo.put("ztbfryInfo", dsZtbfryInfo);

		QueryLogTool.updateQueryLog(querylogid, dsZtbfryInfo.rowCount());

		return rdo;
	}

	/**
	 * 方法简介.跳转到暂停拨付人员详细信息的JSP
	 * 
	 * @author 韦超 2015-1-6
	 */
	public DataObject queryZtbfryInfoByOrgn(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String zfrylb, currentNy, ryid, dfjglb, dfjgid, dfjgbh, dfjgmc, qsny, zzny, ztyy; // 增加查询条件“暂停原因” lan 2017-11-21
		String btlb = "";//淄博查询区分基本养老金和40元补贴  ysf.2018-7-20
		DataStore ds = new DataStore(), dsZtbfryInfo = new DataStore();
		String gljglb, gljgid, dwdjid, xb,jbjgid ;
		DataObject pdo = new DataObject(),vdo = new DataObject();
		
		// 接参数
		dfjglb = para.getString("dfjglb");
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		gljglb = para.getString("gljglb", "");
		gljgid = para.getString("gljgid", "");
		qsny = para.getString("qsny", "");
		zzny = para.getString("zzny", "");
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		xb = para.getString("xb", "");
		ztyy = para.getString("ztyy", "");
		btlb = para.getString("btlb", "");

		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("传入代发机构ID为空！");
		}
		if (dfjglb == null || "".equals(dfjglb)) {
			this.bizException("传入代发机构类别为空！");
		}
		
		if (qsny == null){
			qsny = "";
		}
		if (zzny == null){
			zzny = "";
		}

		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		sqlBF.setLength(0);
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("        ei.ltxlb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		// 增加查询条件“暂停原因” lan 2017-11-21
		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("    and pp.ztyy in (" + HsuTools.replaceC2QCQ(ztyy)
					+ ")   ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh = 'A187' ");
			}
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("          pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, ");
		sqlBF.append("          pi.dfjglb,pi.dfjgid,ei.ltxlb,pp.qsny");
		sqlBF.append(" union all ");
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, '' ltxrq,");
		sqlBF.append("        si.yslb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		// 增加查询条件“暂停原因” lan 2017-11-21
		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("    and pp.ztyy in (" + HsuTools.replaceC2QCQ(ztyy)
					+ ")   ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh = 'A187' ");
			}
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, pi.yhzh, ");
		sqlBF.append("          pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, pi.dfjglb,");
		sqlBF.append("          pi.dfjgid, si.yslb,pp.qsny ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjglb);
		this.sql.setString(2, dfjgbh);
		this.sql.setString(3, dfjgmc);
		this.sql.setString(4, dfjglb);
		this.sql.setString(5, dfjgid);
		//不输入起始终止日期时，用setsql方式为起始赋值 ysf.2018-8-4
		if((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)){
			this.sql.setString(6, currentNy);
			this.sql.setString(7, dfjglb);
			this.sql.setString(8, dfjgbh);
			this.sql.setString(9, dfjgmc);
			this.sql.setString(10, dfjglb);
			this.sql.setString(11, dfjgid);
			this.sql.setString(12, currentNy);
		}else{
			this.sql.setString(6, currentNy);
			this.sql.setString(7, currentNy);
			this.sql.setString(8, dfjglb);
			this.sql.setString(9, dfjgbh);
			this.sql.setString(10, dfjgmc);
			this.sql.setString(11, dfjglb);
			this.sql.setString(12, dfjgid);
			this.sql.setString(13, currentNy);
			this.sql.setString(14, currentNy);
		}
		
		dsZtbfryInfo = this.sql.executeQuery();
		String currDate = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		for (int i = 0; i < dsZtbfryInfo.rowCount(); i++) {
			ryid = dsZtbfryInfo.getString(i, "ryid");
			dwdjid = dsZtbfryInfo.getString(i, "dwdjid");

			sqlBF.setLength(0);
			sqlBF.append(" select a.lxrdh, a.jtzz, a.grsf, a.yxzjhm,a.txdz, a.grbh ");
			sqlBF.append("   from biuv.person a ");
			sqlBF.append("	where a.ryid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "yxzjhm", ds.getString(0, "yxzjhm"));
			dsZtbfryInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsZtbfryInfo.put(i, "lxdh", ds.getString(0, "lxrdh"));
			dsZtbfryInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsZtbfryInfo.put(i, "txdz", ds.getString(0, "txdz"));
			dsZtbfryInfo.put(i, "grbh", ds.getString(0, "grbh"));

			sqlBF.setLength(0);
			sqlBF.append(" select a.jbjgid, a.dwbh, a.cbdwmc, o.jjlx   ");
			sqlBF.append("   from si3u.orgn_reg a, ");
			sqlBF.append("        biuv.orgn o ");
			sqlBF.append("	where a.dwdjid = ? ");
			sqlBF.append("	  and a.dwid = o.dwid ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询单位信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "dwbh", ds.getString(0, "dwbh"));
			dsZtbfryInfo.put(i, "dwmc", ds.getString(0, "cbdwmc"));
			dsZtbfryInfo.put(i, "jjlx", ds.getString(0, "jjlx"));
			jbjgid = ds.getString(0, "jbjgid");
		    //判断是否开启新模式  zlj 2017-1-16
			String ad3u1021 = SiTools.getPara(jbjgid, "ad3u1021", "0");
			String tableName;
			if("1".equals(ad3u1021)){
				tableName = "ad3u.per_giv_detl_ungiv";
			}else{
				tableName = "ad3u.per_giv_detl";
			}
			// 取停拨总金额
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(a.btje),0) tbzje  ");
			sqlBF.append("   from "+tableName+" a ");
			sqlBF.append("	where a.zdlsh is null ");
			sqlBF.append("	  and a.fflb = 'A' ");
			sqlBF.append("	  and a.yfny <= ? ");
			sqlBF.append("	  and a.ryid = ? ");
			if (btlb != null && !"".equals(btlb)) {
				if(btlb.equals("0")){
					sqlBF.append("    and a.btbh <> 'A187' ");
				}
				if(btlb.equals("1")){
					sqlBF.append("    and a.btbh = 'A187' ");
				}
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, currDate);
			this.sql.setString(2, ryid);
			ds = this.sql.executeQuery();
			dsZtbfryInfo.put(i, "tbzje", ds.getDouble(0, "tbzje"));
			
			
			//添加指纹认证情况， 比对类别、比对时间、比对结果、复采年月、经办人
			pdo.clear();
			pdo.put("ryid", ryid);
			vdo = this.doMethod(jbjgid,"getRzxx",pdo,this.getUser());
			
			ds.clear();
			ds = vdo.getDataStore("hisvds",ds);
			
		    if(ds.rowCount() > 0 ){
		    	ds.sortdesc("bdsj");
		    	String jbr = ds.getRow(0).getString("jbr", "");// wbj 20161201 修改获取操作员姓名的方式
		    	
		    	dsZtbfryInfo.put(i, "bdlb", ds.getString(0, "bdlb"));
		    	dsZtbfryInfo.put(i, "bdsj", ds.getDate(0, "bdsj"));
		    	dsZtbfryInfo.put(i, "bdjg", ds.getString(0, "bdjg"));
		    	dsZtbfryInfo.put(i, "fcny", ds.getString(0, "fcny"));
		    	dsZtbfryInfo.put(i, "jbr",  jbr);
		    	dsZtbfryInfo.put(i, "jbrxm",  HsuTools.getCzyxmByUserId(jbr));// wbj 20161201 修改获取操作员姓名的方式
		    	
		    }
		}

		dsZtbfryInfo = dsZtbfryInfo.sort("qsny");

		ds = new DataStore();
		ds.put(0, "dfjglb", para.getString("dfjglb"));
		ds.put(0, "dfjgbh", para.getString("dfjgbh"));
		ds.put(0, "dfjgmc", para.getString("dfjgmc"));
		ds.put(0, "zfrylb", para.getString("zfrylb"));

		rdo.put("ztbfryinfo", dsZtbfryInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}
	/**
	 * 方法简介.跳转到暂停拨付人员详细信息的JSP
	 * 
	 * @author 高智慧 2019-4-23
	 */
	public DataObject queryZtbfryInfoByOrgn_3701(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String zfrylb, currentNy, ryid, dfjglb, dfjgid, dfjgbh, dfjgmc, qsny, zzny, ztyy; // 增加查询条件“暂停原因” lan 2017-11-21
		String btlb = "";//淄博查询区分基本养老金和40元补贴  ysf.2018-7-20
		DataStore ds = new DataStore(), dsZtbfryInfo = new DataStore();
		String gljglb, gljgid, dwdjid, xb,jbjgid ;
		DataObject pdo = new DataObject(),vdo = new DataObject();
		
		// 接参数
		dfjglb = para.getString("dfjglb");
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		gljglb = para.getString("gljglb", "");
		gljgid = para.getString("gljgid", "");
		qsny = para.getString("qsny", "");
		zzny = para.getString("zzny", "");
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		xb = para.getString("xb", "");
		ztyy = para.getString("ztyy", "");
		btlb = para.getString("btlb", "");

		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("传入代发机构ID为空！");
		}
		if (dfjglb == null || "".equals(dfjglb)) {
			this.bizException("传入代发机构类别为空！");
		}
		
		if (qsny == null){
			qsny = "";
		}
		if (zzny == null){
			zzny = "";
		}

		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		sqlBF.setLength(0);
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("        ei.ltxlb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_std_pause pg ");
		sqlBF.append("  where pi.ryid = pg.ryid(+) ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		// 增加查询条件“暂停原因” lan 2017-11-21
		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("    and pp.ztyy in (" + HsuTools.replaceC2QCQ(ztyy)
					+ ")   ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh(+) <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh(+) = 'A187' ");
			}
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("          pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, ");
		sqlBF.append("          pi.dfjglb,pi.dfjgid,ei.ltxlb,pp.qsny");
		sqlBF.append(" union all ");
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, '' ltxrq,");
		sqlBF.append("        si.yslb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_std_pause pg ");
		sqlBF.append("  where pi.ryid = pg.ryid(+) ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		// 增加查询条件“暂停原因” lan 2017-11-21
		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("    and pp.ztyy in (" + HsuTools.replaceC2QCQ(ztyy)
					+ ")   ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh(+) <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh(+) = 'A187' ");
			}
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and ? between pg.qsny(+) and nvl(pg.zzny(+), '205012') ");
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, pi.yhzh, ");
		sqlBF.append("          pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, pi.dfjglb,");
		sqlBF.append("          pi.dfjgid, si.yslb,pp.qsny ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjglb);
		this.sql.setString(2, dfjgbh);
		this.sql.setString(3, dfjgmc);
		this.sql.setString(4, dfjglb);
		this.sql.setString(5, dfjgid);
		//不输入起始终止日期时，用setsql方式为起始赋值 ysf.2018-8-4
		if((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)){
			this.sql.setString(6, currentNy);
			this.sql.setString(7, dfjglb);
			this.sql.setString(8, dfjgbh);
			this.sql.setString(9, dfjgmc);
			this.sql.setString(10, dfjglb);
			this.sql.setString(11, dfjgid);
			this.sql.setString(12, currentNy);
		}else{
			this.sql.setString(6, currentNy);
			this.sql.setString(7, currentNy);
			this.sql.setString(8, dfjglb);
			this.sql.setString(9, dfjgbh);
			this.sql.setString(10, dfjgmc);
			this.sql.setString(11, dfjglb);
			this.sql.setString(12, dfjgid);
			this.sql.setString(13, currentNy);
			this.sql.setString(14, currentNy);
		}
		
		dsZtbfryInfo = this.sql.executeQuery();
		String currDate = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		for (int i = 0; i < dsZtbfryInfo.rowCount(); i++) {
			ryid = dsZtbfryInfo.getString(i, "ryid");
			dwdjid = dsZtbfryInfo.getString(i, "dwdjid");

			sqlBF.setLength(0);
			sqlBF.append(" select a.lxrdh, a.jtzz, a.grsf, a.yxzjhm,a.txdz ");
			sqlBF.append("   from biuv.person a ");
			sqlBF.append("	where a.ryid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "yxzjhm", ds.getString(0, "yxzjhm"));
			dsZtbfryInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsZtbfryInfo.put(i, "lxdh", ds.getString(0, "lxrdh"));
			dsZtbfryInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsZtbfryInfo.put(i, "txdz", ds.getString(0, "txdz"));

			sqlBF.setLength(0);
			sqlBF.append(" select a.jbjgid, a.dwbh, a.cbdwmc, o.jjlx   ");
			sqlBF.append("   from si3u.orgn_reg a, ");
			sqlBF.append("        biuv.orgn o ");
			sqlBF.append("	where a.dwdjid = ? ");
			sqlBF.append("	  and a.dwid = o.dwid ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询单位信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "dwbh", ds.getString(0, "dwbh"));
			dsZtbfryInfo.put(i, "dwmc", ds.getString(0, "cbdwmc"));
			dsZtbfryInfo.put(i, "jjlx", ds.getString(0, "jjlx"));
			jbjgid = ds.getString(0, "jbjgid");
		    //判断是否开启新模式  zlj 2017-1-16
			String ad3u1021 = SiTools.getPara(jbjgid, "ad3u1021", "0");
			String tableName;
			if("1".equals(ad3u1021)){
				tableName = "ad3u.per_giv_detl_ungiv";
			}else{
				tableName = "ad3u.per_giv_detl";
			}
			// 取停拨总金额
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(a.btje),0) tbzje  ");
			sqlBF.append("   from "+tableName+" a ");
			sqlBF.append("	where a.zdlsh is null ");
			sqlBF.append("	  and a.fflb = 'A' ");
			sqlBF.append("	  and a.yfny <= ? ");
			sqlBF.append("	  and a.ryid = ? ");
			if (btlb != null && !"".equals(btlb)) {
				if(btlb.equals("0")){
					sqlBF.append("    and a.btbh <> 'A187' ");
				}
				if(btlb.equals("1")){
					sqlBF.append("    and a.btbh = 'A187' ");
				}
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, currDate);
			this.sql.setString(2, ryid);
			ds = this.sql.executeQuery();
			dsZtbfryInfo.put(i, "tbzje", ds.getDouble(0, "tbzje"));
			
			
			//添加指纹认证情况， 比对类别、比对时间、比对结果、复采年月、经办人
			pdo.clear();
			pdo.put("ryid", ryid);
			vdo = this.doMethod(jbjgid,"getRzxx",pdo,this.getUser());
			
			ds.clear();
			ds = vdo.getDataStore("hisvds",ds);
			
		    if(ds.rowCount() > 0 ){
		    	ds.sortdesc("bdsj");
		    	String jbr = ds.getRow(0).getString("jbr", "");// wbj 20161201 修改获取操作员姓名的方式
		    	
		    	dsZtbfryInfo.put(i, "bdlb", ds.getString(0, "bdlb"));
		    	dsZtbfryInfo.put(i, "bdsj", ds.getDate(0, "bdsj"));
		    	dsZtbfryInfo.put(i, "bdjg", ds.getString(0, "bdjg"));
		    	dsZtbfryInfo.put(i, "fcny", ds.getString(0, "fcny"));
		    	dsZtbfryInfo.put(i, "jbr",  jbr);
		    	dsZtbfryInfo.put(i, "jbrxm",  HsuTools.getCzyxmByUserId(jbr));// wbj 20161201 修改获取操作员姓名的方式
		    	
		    }
		}

		dsZtbfryInfo = dsZtbfryInfo.sort("qsny");

		ds = new DataStore();
		ds.put(0, "dfjglb", para.getString("dfjglb"));
		ds.put(0, "dfjgbh", para.getString("dfjgbh"));
		ds.put(0, "dfjgmc", para.getString("dfjgmc"));
		ds.put(0, "zfrylb", para.getString("zfrylb"));

		rdo.put("ztbfryinfo", dsZtbfryInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}
	/**
	 * 
	 * 方法简介.跳转到暂停拨付人员详细信息 省直客户化
	 * 
	 * 不查询死亡人员
	 * 
	 * @author 路国 2017-7-19
	 */
	public DataObject queryZtbfryInfoByOrgn_3799(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String zfrylb, currentNy, ryid, dfjglb, dfjgid, dfjgbh, dfjgmc, qsny, zzny;
		DataStore ds = new DataStore(), dsZtbfryInfo = new DataStore();
		String gljglb, gljgid, dwdjid, xb,jbjgid, ztcsybz;
		DataObject pdo = new DataObject(),vdo = new DataObject();
		
		// 接参数
		dfjglb = para.getString("dfjglb");
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		gljglb = para.getString("gljglb", "");
		gljgid = para.getString("gljgid", "");
		qsny = para.getString("qsny", "");
		zzny = para.getString("zzny", "");
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		xb = para.getString("xb", "");
		ztcsybz = para.getString("ztcsybz","0");
		
		if (qsny == null){
			qsny = "";
		}
		if (zzny == null){
			zzny = "";
		}

		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		sqlBF.setLength(0);
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("        ei.ltxlb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		sqlBF.append("    and pi.dyffzt <> '3' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and '" + currentNy + "' between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and '" + currentNy + "' between pg.qsny and nvl(pg.zzny, '205012') ");
		if("1".equals(ztcsybz)) {
			sqlBF.append("and months_between(to_date(to_char(sysdate, 'yyyymm'), 'yyyymm'), to_date(pp.qsny, 'yyyymm')) + 1 >= 3");
		}
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("          pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, ");
		sqlBF.append("          pi.dfjglb,pi.dfjgid,ei.ltxlb,pp.qsny");
		sqlBF.append(" union all ");
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, '' ltxrq,");
		sqlBF.append("        si.yslb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		sqlBF.append("    and pi.dyffzt <> '3' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '" + dfjglb + "' ");
		}else {
			sqlBF.append("    and pi.dfjglb is null ");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '" + dfjgid + "' ");
		}else {
			sqlBF.append("    and pi.dfjgid is null ");
		}
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and '" + currentNy + "' between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and '" + currentNy + "' between pg.qsny and nvl(pg.zzny, '205012') ");
		if("1".equals(ztcsybz)) {
			sqlBF.append("and months_between(to_date(to_char(sysdate, 'yyyymm'), 'yyyymm'), to_date(pp.qsny, 'yyyymm')) + 1 >= 3");
		}
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, pi.yhzh, ");
		sqlBF.append("          pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, pi.dfjglb,");
		sqlBF.append("          pi.dfjgid, si.yslb,pp.qsny ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjglb);
		this.sql.setString(2, dfjgbh);
		this.sql.setString(3, dfjgmc);
		this.sql.setString(4, dfjglb);
		this.sql.setString(5, dfjgid);
		this.sql.setString(6, dfjglb);
		this.sql.setString(7, dfjgbh);
		this.sql.setString(8, dfjgmc);
		dsZtbfryInfo = this.sql.executeQuery();
		String currDate = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		for (int i = 0; i < dsZtbfryInfo.rowCount(); i++) {
			ryid = dsZtbfryInfo.getString(i, "ryid");
			dwdjid = dsZtbfryInfo.getString(i, "dwdjid");

			sqlBF.setLength(0);
			sqlBF.append(" select a.lxrdh, a.jtzz, a.grsf, a.yxzjhm,a.txdz ");
			sqlBF.append("   from biuv.person a ");
			sqlBF.append("	where a.ryid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "yxzjhm", ds.getString(0, "yxzjhm"));
			dsZtbfryInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsZtbfryInfo.put(i, "lxdh", ds.getString(0, "lxrdh"));
			dsZtbfryInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsZtbfryInfo.put(i, "txdz", ds.getString(0, "txdz"));

			sqlBF.setLength(0);
			sqlBF.append(" select a.jbjgid, a.dwbh, a.cbdwmc, o.jjlx   ");
			sqlBF.append("   from si3u.orgn_reg a, ");
			sqlBF.append("        biuv.orgn o ");
			sqlBF.append("	where a.dwdjid = ? ");
			sqlBF.append("	  and a.dwid = o.dwid ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询单位信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "dwbh", ds.getString(0, "dwbh"));
			dsZtbfryInfo.put(i, "dwmc", ds.getString(0, "cbdwmc"));
			dsZtbfryInfo.put(i, "jjlx", ds.getString(0, "jjlx"));
			jbjgid = ds.getString(0, "jbjgid");
		    //判断是否开启新模式  zlj 2017-1-16
			String ad3u1021 = SiTools.getPara(jbjgid, "ad3u1021", "0");
			String tableName;
			if("1".equals(ad3u1021)){
				tableName = "ad3u.per_giv_detl_ungiv";
			}else{
				tableName = "ad3u.per_giv_detl";
			}
			// 取停拨总金额
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(a.btje),0) tbzje  ");
			sqlBF.append("   from "+tableName+" a ");
			sqlBF.append("	where a.zdlsh is null ");
			sqlBF.append("	  and a.fflb = 'A' ");
			sqlBF.append("	  and a.yfny <= ? ");
			sqlBF.append("	  and a.ryid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, currDate);
			this.sql.setString(2, ryid);
			ds = this.sql.executeQuery();
			dsZtbfryInfo.put(i, "tbzje", ds.getDouble(0, "tbzje"));
			
			
			//添加指纹认证情况， 比对类别、比对时间、比对结果、复采年月、经办人
			pdo.clear();
			pdo.put("ryid", ryid);
			vdo = this.doMethod(jbjgid,"getRzxx",pdo,this.getUser());
			
			ds.clear();
			ds = vdo.getDataStore("hisvds",ds);
			
		    if(ds.rowCount() > 0 ){
		    	ds.sortdesc("bdsj");
		    	String jbr = ds.getRow(0).getString("jbr", "");// wbj 20161201 修改获取操作员姓名的方式
		    	
		    	dsZtbfryInfo.put(i, "bdlb", ds.getString(0, "bdlb"));
		    	dsZtbfryInfo.put(i, "bdsj", ds.getDate(0, "bdsj"));
		    	dsZtbfryInfo.put(i, "bdjg", ds.getString(0, "bdjg"));
		    	dsZtbfryInfo.put(i, "fcny", ds.getString(0, "fcny"));
		    	dsZtbfryInfo.put(i, "jbr",  jbr);
		    	dsZtbfryInfo.put(i, "jbrxm",  HsuTools.getCzyxmByUserId(jbr));// wbj 20161201 修改获取操作员姓名的方式
		    	
		    }
		}

		dsZtbfryInfo = dsZtbfryInfo.sort("qsny");

		ds = new DataStore();
		ds.put(0, "dfjglb", para.getString("dfjglb"));
		ds.put(0, "dfjgbh", para.getString("dfjgbh"));
		ds.put(0, "dfjgmc", para.getString("dfjgmc"));
		ds.put(0, "zfrylb", para.getString("zfrylb"));

		rdo.put("ztbfryinfo", dsZtbfryInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}
	/**
	 * 
	 * 暂停拨付人员详细信息
	 * <p>威海文登客户化，定期待遇使用外链接</p>
	 *
	 * @author cjj
	 * @date 创建时间 2017-5-16
	 * @since V1.0
	 */
	public DataObject queryZtbfryInfoByOrgn_371081(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String zfrylb, currentNy, ryid, dfjglb, dfjgid, dfjgbh, dfjgmc, qsny, zzny;
		DataStore ds = new DataStore(), dsZtbfryInfo = new DataStore();
		String gljglb, gljgid, dwdjid, xb, jbjgid;
		DataObject pdo = new DataObject(), vdo = new DataObject();

		// 接参数
		dfjglb = para.getString("dfjglb");
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		gljglb = para.getString("gljglb", "");
		gljgid = para.getString("gljgid", "");
		qsny = para.getString("qsny", "");
		zzny = para.getString("zzny", "");
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		xb = para.getString("xb", "");
		
		if (qsny == null){
			qsny = "";
		}
		if (zzny == null){
			zzny = "";
		}

		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("传入代发机构ID为空！");
		}
		if (dfjglb == null || "".equals(dfjglb)) {
			this.bizException("传入代发机构类别为空！");
		}

		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		sqlBF.setLength(0);
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("        ei.ltxlb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid(+) ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		
		if ((!"".equals(qsny) && qsny != null)
				|| (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny
					+ "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and '" + currentNy
					+ "' between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and '" + currentNy
				+ "' between pg.qsny(+) and nvl(pg.zzny(+), '205012') ");
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("          pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, ");
		sqlBF.append("          pi.dfjglb,pi.dfjgid,ei.ltxlb,pp.qsny");
		sqlBF.append(" union all ");
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, '' ltxrq,");
		sqlBF.append("        si.yslb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid(+) ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		if ((!"".equals(qsny) && qsny != null)
				|| (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny
					+ "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and '" + currentNy
					+ "' between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and '" + currentNy
				+ "' between pg.qsny(+) and nvl(pg.zzny(+), '205012') ");
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, pi.yhzh, ");
		sqlBF.append("          pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, pi.dfjglb,");
		sqlBF.append("          pi.dfjgid, si.yslb,pp.qsny ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjglb);
		this.sql.setString(2, dfjgbh);
		this.sql.setString(3, dfjgmc);
		this.sql.setString(4, dfjglb);
		this.sql.setString(5, dfjgid);
		this.sql.setString(6, dfjglb);
		this.sql.setString(7, dfjgbh);
		this.sql.setString(8, dfjgmc);
		this.sql.setString(9, dfjglb);
		this.sql.setString(10, dfjgid);
		dsZtbfryInfo = this.sql.executeQuery();
		String currDate = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		for (int i = 0; i < dsZtbfryInfo.rowCount(); i++) {
			ryid = dsZtbfryInfo.getString(i, "ryid");
			dwdjid = dsZtbfryInfo.getString(i, "dwdjid");

			sqlBF.setLength(0);
			sqlBF.append(" select a.lxrdh, a.jtzz, a.grsf, a.yxzjhm,a.txdz ");
			sqlBF.append("   from biuv.person a ");
			sqlBF.append("	where a.ryid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "yxzjhm", ds.getString(0, "yxzjhm"));
			dsZtbfryInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsZtbfryInfo.put(i, "lxdh", ds.getString(0, "lxrdh"));
			dsZtbfryInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsZtbfryInfo.put(i, "txdz", ds.getString(0, "txdz"));

			sqlBF.setLength(0);
			sqlBF.append(" select a.jbjgid, a.dwbh, a.cbdwmc, o.jjlx   ");
			sqlBF.append("   from si3u.orgn_reg a, ");
			sqlBF.append("        biuv.orgn o ");
			sqlBF.append("	where a.dwdjid = ? ");
			sqlBF.append("	  and a.dwid = o.dwid ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询单位信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "dwbh", ds.getString(0, "dwbh"));
			dsZtbfryInfo.put(i, "dwmc", ds.getString(0, "cbdwmc"));
			dsZtbfryInfo.put(i, "jjlx", ds.getString(0, "jjlx"));
			jbjgid = ds.getString(0, "jbjgid");
			// 判断是否开启新模式 zlj 2017-1-16
			String ad3u1021 = SiTools.getPara(jbjgid, "ad3u1021", "0");
			String tableName;
			if ("1".equals(ad3u1021)) {
				tableName = "ad3u.per_giv_detl_ungiv";
			} else {
				tableName = "ad3u.per_giv_detl";
			}
			// 取停拨总金额
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(a.btje),0) tbzje  ");
			sqlBF.append("   from " + tableName + " a ");
			sqlBF.append("	where a.zdlsh is null ");
			sqlBF.append("	  and a.fflb = 'A' ");
			sqlBF.append("	  and a.yfny <= ? ");
			sqlBF.append("	  and a.ryid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, currDate);
			this.sql.setString(2, ryid);
			ds = this.sql.executeQuery();
			dsZtbfryInfo.put(i, "tbzje", ds.getDouble(0, "tbzje"));

			// 添加指纹认证情况， 比对类别、比对时间、比对结果、复采年月、经办人
			pdo.clear();
			pdo.put("ryid", ryid);
			vdo = this.doMethod(jbjgid, "getRzxx", pdo, this.getUser());

			ds.clear();
			ds = vdo.getDataStore("hisvds", ds);

			if (ds.rowCount() > 0) {
				ds.sortdesc("bdsj");
				String jbr = ds.getRow(0).getString("jbr", "");
				dsZtbfryInfo.put(i, "bdlb", ds.getString(0, "bdlb"));
				dsZtbfryInfo.put(i, "bdsj", ds.getDate(0, "bdsj"));
				dsZtbfryInfo.put(i, "bdjg", ds.getString(0, "bdjg"));
				dsZtbfryInfo.put(i, "fcny", ds.getString(0, "fcny"));
				dsZtbfryInfo.put(i, "jbr", jbr);
				dsZtbfryInfo.put(i, "jbrxm", HsuTools.getCzyxmByUserId(jbr));

			}
		}

		dsZtbfryInfo = dsZtbfryInfo.sort("qsny");

		ds = new DataStore();
		ds.put(0, "dfjglb", para.getString("dfjglb"));
		ds.put(0, "dfjgbh", para.getString("dfjgbh"));
		ds.put(0, "dfjgmc", para.getString("dfjgmc"));
		ds.put(0, "zfrylb", para.getString("zfrylb"));

		rdo.put("ztbfryinfo", dsZtbfryInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}
    /*
     * 获取认证信息  lgb 2016-11-21
     */
	public DataObject getRzxx(final DataObject para) throws Exception {
		DataObject vdo = new DataObject();

		return vdo;
	}
	
	public DataObject getRzxx_3716(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
	    String ryid = null;
	    DataObject vdo = new DataObject();
		DataObject pdo = new DataObject();
		
	    ryid = para.getString("ryid");
	    
	    pdo.clear();
		pdo.put("ryid", ryid);
		try {
			vdo = LocalServiceClient.invokeService("Auth3Service","queryCompareInfoHis", pdo);
		} catch (Exception e) {
			this.bizException("调用服务查询人员信息失败："+e.getMessage());
		}
	
		return vdo;
	}   
	/**
	 * 方法简介.查询暂停拨付历史
	 * 
	 * @author 韦超 2015-10-30
	 */
	public DataObject queryZtbflsInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, zfrylb, ztqsny, ztzzny, ztjbqsrq, ztjbzzrq, ztyy;
		
		String querylogid = QueryLogTool.saveQueryLog("暂停拨付历史查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		jbjgid = para.getString("jbjgid");
		zfrylb = para.getString("zfrylb");
		ztqsny = para.getDateToString("ztqsny", "yyyyMM");
		ztzzny = para.getDateToString("ztzzny", "yyyyMM");
		ztjbqsrq = para.getDateToString("ztjbqsrq", "yyyyMMdd");
		ztjbzzrq = para.getDateToString("ztjbzzrq", "yyyyMMdd");
		ztyy = para.getString("ztyy");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构ID为空！");
		}
		if ((ztqsny == null || "".equals(ztqsny) || ztzzny == null || "".equals(ztzzny))
				&& (ztjbqsrq == null || "".equals(ztjbqsrq) || ztjbzzrq == null || "".equals(ztjbzzrq))) {
			this.bizException("请至少传入暂停起止年月或暂停经办起止日期！");
		}

		if (ztqsny != null && !"".equals(ztqsny) && ztzzny != null
				&& !"".equals(ztzzny)) {
			SiTools.checkQsZZny(ztqsny, ztzzny);
		}
		if (ztjbqsrq != null && !"".equals(ztjbqsrq) && ztjbzzrq != null
				&& !"".equals(ztjbzzrq)) {
			SiTools.checkQsZzrq(ztjbqsrq, ztjbzzrq, 12);
		}

		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		ztyy = HsuTools.replaceC2QCQ(ztyy);

		sqlBF.setLength(0);
		sqlBF.append("   select c.dwdjid, c.dwbh, c.cbdwmc dwmc, b.ryid, b.shbzhm, ");
		sqlBF.append("          b.xm, b.dyffzt, b.zfrylb, a.qsny, a.zzny,   ");
		sqlBF.append("          a.ztr, a.ztyy, to_char(a.ztsj,'yyyyMMdd') ztjbrq,   ");
		sqlBF.append("          a.hfr, a.hfyy, to_char(a.hfsj,'yyyyMMdd') hfjbrq,   ");
		sqlBF.append("          a.bz, a.hfny, b.dfjglb, b.dfjgid   ");
		sqlBF.append("     from ad3u.per_pause a,   ");
		sqlBF.append("          ad3u.per_info b,   ");
		sqlBF.append("          si3u.orgn_reg c   ");
		sqlBF.append("    where a.ryid = b.ryid   ");
		sqlBF.append("      and b.dwdjid = c.dwdjid   ");
		sqlBF.append("      and a.qsny <> nvl(a.hfny, '204912')   ");
		sqlBF.append("      and c.jbjgid in (" + jbjgid + ")   ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("      and b.zfrylb in (" + zfrylb + ")   ");
		}
		if (ztzzny != null && !"".equals(ztzzny)) {
			sqlBF.append("      and a.qsny <= '" + ztzzny + "'   ");
		}
		if (ztqsny != null && !"".equals(ztqsny)) {
			sqlBF.append("      and nvl(a.zzny,'204912') >= '" + ztqsny
					+ "'   ");
		}
		if (ztjbqsrq != null && !"".equals(ztjbqsrq)) {
			sqlBF.append("      and to_char(a.ztsj,'yyyyMMdd') >= '" + ztjbqsrq
					+ "'   ");
		}
		if (ztjbzzrq != null && !"".equals(ztjbzzrq)) {
			sqlBF.append("      and to_char(a.ztsj,'yyyyMMdd') <= '" + ztjbzzrq
					+ "'   ");
		}

		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("      and a.ztyy in (" + ztyy + ")   ");
		}
		sqlBF.append("    union all   ");
		sqlBF.append("   select c.dwdjid, c.dwbh, c.cbdwmc dwmc, b.ryid, b.shbzhm, ");
		sqlBF.append("          b.xm, b.dyffzt, b.zfrylb, a.qsny, a.zzny,   ");
		sqlBF.append("          a.ztr, a.ztyy, to_char(a.ztsj,'yyyyMMdd') ztjbrq,   ");
		sqlBF.append("          a.hfr, a.hfyy, to_char(a.hfsj,'yyyyMMdd') hfjbrq,   ");
		sqlBF.append("          a.bz, a.hfny, b.dfjglb, b.dfjgid   ");
		sqlBF.append("     from ad3u.per_pause a,   ");
		sqlBF.append("          ad3u.per_info b,   ");
		sqlBF.append("          si3u.orgn_reg c   ");
		sqlBF.append("    where a.ryid = b.ryid   ");
		sqlBF.append("      and b.dwdjid = c.dwdjid   ");
		sqlBF.append("      and a.qsny = a.hfny   ");
		sqlBF.append("      and c.jbjgid in (" + jbjgid + ")   ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("      and b.zfrylb in (" + zfrylb + ")   ");
		}
		if (ztzzny != null && !"".equals(ztzzny)) {
			sqlBF.append("      and a.qsny <= '" + ztzzny + "'   ");
		}
		if (ztqsny != null && !"".equals(ztqsny)) {
			sqlBF.append("      and a.qsny >= '" + ztqsny + "'   ");
		}
		if (ztjbqsrq != null && !"".equals(ztjbqsrq)) {
			sqlBF.append("      and to_char(a.ztsj,'yyyyMMdd') >= '" + ztjbqsrq
					+ "'   ");
		}
		if (ztjbzzrq != null && !"".equals(ztjbzzrq)) {
			sqlBF.append("      and to_char(a.ztsj,'yyyyMMdd') <= '" + ztjbzzrq
					+ "'   ");
		}

		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("      and a.ztyy in (" + ztyy + ")   ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsztbfry = this.sql.executeQuery();

		// 循环取月停拨金额.
		String ryid, qsny, ztrname, hfrname, dfjgid, dfjglb;
		double ytbje;
		HashMap<String, String> dfjgMap = new HashMap<String, String>();
		for (int i = 0; i < dsztbfry.rowCount(); i++) {
			ryid = dsztbfry.getString(i, "ryid");
			qsny = dsztbfry.getString(i, "qsny");
			dfjgid = dsztbfry.getString(i, "dfjgid");
			dfjglb = dsztbfry.getString(i, "dfjglb");
			ztrname = HsuTools.getCzyxmByUserId(dsztbfry.getString(i, "ztr"));
			hfrname = HsuTools.getCzyxmByUserId(dsztbfry.getString(i, "hfr"));
			// 先取起始年月与暂停起始年月相同的月停拨金额
			sqlBF.setLength(0);
			sqlBF.append("select nvl(sum(nvl(a.btje, 0)), 0) ytbje ");
			sqlBF.append("  from ad3u.per_giv_month_std a ");
			sqlBF.append(" where a.ryid = ? ");
			sqlBF.append("   and ? between a.qsny and nvl(a.zzny, '204912') ");
			sqlBF.append(" group by a.ryid ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, qsny);

			DataStore dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() < 1) {
				// 如果取不到暂停的月停拨金额则取暂停发放之前正常发放待遇的月发放金额
				sqlBF.setLength(0);
				sqlBF.append("select nvl(sum(nvl(a.btje, 0)), 0) ytbje ");
				sqlBF.append("  from ad3u.per_giv_month_std a ");
				sqlBF.append(" where a.ryid = ? ");
				sqlBF.append("   and ? between a.qsny and nvl(a.zzny, '204912') ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				this.sql.setString(2, DateUtil.addMonthToString(qsny, "yyyyMM", -1));// 暂停起始年月的前一个月是发放年月

				dsTemp = this.sql.executeQuery();
			}

			ytbje = dsTemp.getDouble(0, "ytbje");
			
			String dfjgmc = "";
			if(dfjgMap.containsKey(dfjgid + dfjglb)){
				dfjgmc = dfjgMap.get(dfjgid + dfjglb);
			} else {
				if("B".equals(dfjglb)){// 单位
					dfjgmc = SiTools.getOrgnRegByDwdjid(dfjgid).getString("cbdwmc", "");
				} else if("G".equals(dfjglb)){// 代发机构
					dfjgmc = HsuTools.getDfjgmc(dfjgid);
				}
				
				dfjgMap.put(dfjgid + dfjglb, dfjgmc);
			}
			

			dsztbfry.put(i, "ytbje", ytbje);
			dsztbfry.put(i, "ztrname", ztrname);
			dsztbfry.put(i, "hfrname", hfrname);
			dsztbfry.put(i, "dfjgmc", dfjgmc);
		}
		dsztbfry = dsztbfry.sort("dwbh");
		rdo.put("dsztbfry", dsztbfry);
		
		QueryLogTool.updateQueryLog(querylogid, dsztbfry.rowCount());
		
		return rdo;
	}
	
	/**
	 * 方法简介.查询暂停拨付历史
	 * 
	 * 济南的待遇查询表：ad3u.per_std_pause
	 * 
	 * @author 高智慧 2019-04-23
	 */
	public DataObject queryZtbflsInfo_3701(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, zfrylb, ztqsny, ztzzny, ztjbqsrq, ztjbzzrq, ztyy;
		
		String querylogid = QueryLogTool.saveQueryLog("暂停拨付历史查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		jbjgid = para.getString("jbjgid");
		zfrylb = para.getString("zfrylb");
		ztqsny = para.getDateToString("ztqsny", "yyyyMM");
		ztzzny = para.getDateToString("ztzzny", "yyyyMM");
		ztjbqsrq = para.getDateToString("ztjbqsrq", "yyyyMMdd");
		ztjbzzrq = para.getDateToString("ztjbzzrq", "yyyyMMdd");
		ztyy = para.getString("ztyy");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构ID为空！");
		}
		if ((ztqsny == null || "".equals(ztqsny) || ztzzny == null || "".equals(ztzzny))
				&& (ztjbqsrq == null || "".equals(ztjbqsrq) || ztjbzzrq == null || "".equals(ztjbzzrq))) {
			this.bizException("请至少传入暂停起止年月或暂停经办起止日期！");
		}

		if (ztqsny != null && !"".equals(ztqsny) && ztzzny != null
				&& !"".equals(ztzzny)) {
			SiTools.checkQsZZny(ztqsny, ztzzny);
		}
		if (ztjbqsrq != null && !"".equals(ztjbqsrq) && ztjbzzrq != null
				&& !"".equals(ztjbzzrq)) {
			SiTools.checkQsZzrq(ztjbqsrq, ztjbzzrq, 12);
		}

		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		ztyy = HsuTools.replaceC2QCQ(ztyy);

		sqlBF.setLength(0);
		sqlBF.append("   select c.dwdjid, c.dwbh, c.cbdwmc dwmc, b.ryid, b.shbzhm, ");
		sqlBF.append("          b.xm, b.dyffzt, b.zfrylb, a.qsny, a.zzny,   ");
		sqlBF.append("          a.ztr, a.ztyy, to_char(a.ztsj,'yyyyMMdd') ztjbrq,   ");
		sqlBF.append("          a.hfr, a.hfyy, to_char(a.hfsj,'yyyyMMdd') hfjbrq,   ");
		sqlBF.append("          a.bz, a.hfny, b.dfjglb, b.dfjgid   ");
		sqlBF.append("     from ad3u.per_pause a,   ");
		sqlBF.append("          ad3u.per_info b,   ");
		sqlBF.append("          si3u.orgn_reg c   ");
		sqlBF.append("    where a.ryid = b.ryid   ");
		sqlBF.append("      and b.dwdjid = c.dwdjid   ");
		sqlBF.append("      and a.qsny <> nvl(a.hfny, '204912')   ");
		sqlBF.append("      and c.jbjgid in (" + jbjgid + ")   ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("      and b.zfrylb in (" + zfrylb + ")   ");
		}
		if (ztzzny != null && !"".equals(ztzzny)) {
			sqlBF.append("      and a.qsny <= '" + ztzzny + "'   ");
		}
		if (ztqsny != null && !"".equals(ztqsny)) {
			sqlBF.append("      and nvl(a.zzny,'204912') >= '" + ztqsny
					+ "'   ");
		}
		if (ztjbqsrq != null && !"".equals(ztjbqsrq)) {
			sqlBF.append("      and to_char(a.ztsj,'yyyyMMdd') >= '" + ztjbqsrq
					+ "'   ");
		}
		if (ztjbzzrq != null && !"".equals(ztjbzzrq)) {
			sqlBF.append("      and to_char(a.ztsj,'yyyyMMdd') <= '" + ztjbzzrq
					+ "'   ");
		}

		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("      and a.ztyy in (" + ztyy + ")   ");
		}
		sqlBF.append("    union all   ");
		sqlBF.append("   select c.dwdjid, c.dwbh, c.cbdwmc dwmc, b.ryid, b.shbzhm, ");
		sqlBF.append("          b.xm, b.dyffzt, b.zfrylb, a.qsny, a.zzny,   ");
		sqlBF.append("          a.ztr, a.ztyy, to_char(a.ztsj,'yyyyMMdd') ztjbrq,   ");
		sqlBF.append("          a.hfr, a.hfyy, to_char(a.hfsj,'yyyyMMdd') hfjbrq,   ");
		sqlBF.append("          a.bz, a.hfny, b.dfjglb, b.dfjgid   ");
		sqlBF.append("     from ad3u.per_pause a,   ");
		sqlBF.append("          ad3u.per_info b,   ");
		sqlBF.append("          si3u.orgn_reg c   ");
		sqlBF.append("    where a.ryid = b.ryid   ");
		sqlBF.append("      and b.dwdjid = c.dwdjid   ");
		sqlBF.append("      and a.qsny = a.hfny   ");
		sqlBF.append("      and c.jbjgid in (" + jbjgid + ")   ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("      and b.zfrylb in (" + zfrylb + ")   ");
		}
		if (ztzzny != null && !"".equals(ztzzny)) {
			sqlBF.append("      and a.qsny <= '" + ztzzny + "'   ");
		}
		if (ztqsny != null && !"".equals(ztqsny)) {
			sqlBF.append("      and a.qsny >= '" + ztqsny + "'   ");
		}
		if (ztjbqsrq != null && !"".equals(ztjbqsrq)) {
			sqlBF.append("      and to_char(a.ztsj,'yyyyMMdd') >= '" + ztjbqsrq
					+ "'   ");
		}
		if (ztjbzzrq != null && !"".equals(ztjbzzrq)) {
			sqlBF.append("      and to_char(a.ztsj,'yyyyMMdd') <= '" + ztjbzzrq
					+ "'   ");
		}

		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("      and a.ztyy in (" + ztyy + ")   ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsztbfry = this.sql.executeQuery();

		// 循环取月停拨金额.
		String ryid, qsny, ztrname, hfrname, dfjgid, dfjglb;
		double ytbje;
		HashMap<String, String> dfjgMap = new HashMap<String, String>();
		for (int i = 0; i < dsztbfry.rowCount(); i++) {
			ryid = dsztbfry.getString(i, "ryid");
			qsny = dsztbfry.getString(i, "qsny");
			dfjgid = dsztbfry.getString(i, "dfjgid");
			dfjglb = dsztbfry.getString(i, "dfjglb");
			ztrname = HsuTools.getCzyxmByUserId(dsztbfry.getString(i, "ztr"));
			hfrname = HsuTools.getCzyxmByUserId(dsztbfry.getString(i, "hfr"));
			// 先取起始年月与暂停起始年月相同的月停拨金额
			sqlBF.setLength(0);
			sqlBF.append("select nvl(sum(nvl(a.btje, 0)), 0) ytbje ");
			sqlBF.append("  from ad3u.per_std_pause a ");
			sqlBF.append(" where a.ryid = ? ");
			sqlBF.append("   and ? between a.qsny and nvl(a.zzny, '204912') ");
			sqlBF.append(" group by a.ryid ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, qsny);

			DataStore dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() < 1) {
				// 如果取不到暂停的月停拨金额则取暂停发放之前正常发放待遇的月发放金额
				sqlBF.setLength(0);
				sqlBF.append("select nvl(sum(nvl(a.btje, 0)), 0) ytbje ");
				sqlBF.append("  from ad3u.per_std_pause a ");
				sqlBF.append(" where a.ryid = ? ");
				sqlBF.append("   and ? between a.qsny and nvl(a.zzny, '204912') ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				this.sql.setString(2, DateUtil.addMonthToString(qsny, "yyyyMM", -1));// 暂停起始年月的前一个月是发放年月

				dsTemp = this.sql.executeQuery();
			}

			ytbje = dsTemp.getDouble(0, "ytbje");
			
			String dfjgmc = "";
			if(dfjgMap.containsKey(dfjgid + dfjglb)){
				dfjgmc = dfjgMap.get(dfjgid + dfjglb);
			} else {
				if("B".equals(dfjglb)){// 单位
					dfjgmc = SiTools.getOrgnRegByDwdjid(dfjgid).getString("cbdwmc", "");
				} else if("G".equals(dfjglb)){// 代发机构
					dfjgmc = HsuTools.getDfjgmc(dfjgid);
				}
				
				dfjgMap.put(dfjgid + dfjglb, dfjgmc);
			}
			

			dsztbfry.put(i, "ytbje", ytbje);
			dsztbfry.put(i, "ztrname", ztrname);
			dsztbfry.put(i, "hfrname", hfrname);
			dsztbfry.put(i, "dfjgmc", dfjgmc);
		}
		dsztbfry = dsztbfry.sort("dwbh");
		rdo.put("dsztbfry", dsztbfry);
		
		QueryLogTool.updateQueryLog(querylogid, dsztbfry.rowCount());
		
		return rdo;
	}

	/**
	 * 转到拨付金额变动人员查询界面
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-1-8
	 * @param para
	 * @return
	 * @throws Exception
	 */

	public final DataObject fwdBfjebdQuery(final DataObject para) throws Exception {
		String rq, ny1, ny2;
		DataStore ds;
		DataObject rdo = new DataObject();

		rq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM-dd");
		ny1 = rq.substring(0, 7);
		ny2 = DateUtil.addMonthToString(rq, "yyyy-MM", -1);

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
				
		rdo.put("dsjbjg", ds);
		rdo.put("rq", rq);
		rdo.put("ny1", ny1);
		rdo.put("ny2", ny2);

		ds = null;
		return rdo;
	}

	/**
	 * 查询拨付金额变动情况
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-1-7
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public final DataObject queryBfjebdInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		String dfjglb, dfjgid, ny1, ny2, jebz, ysbz, queryJe, jbjgid;
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsPer, dsny;
		String ryid;
		double ny1je, ny2je;
		
		String querylogid = QueryLogTool.saveQueryLog("拨付金额变动人员", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		jbjgid = para.getString("jbjgid");
		dfjglb = para.getString("dfjglb");
		dfjgid = para.getString("dfjgid");
		ny1 = para.getDateToString("ny1", "yyyyMM");
		ny2 = para.getDateToString("ny2", "yyyyMM");
		jebz = para.getString("jebz");// 显示金额为零人员标志 true显示，false不显示
		ysbz = para.getString("ysbz");// 显示遗属标志 true显示，false不显示

		// 判空
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入经办机构为空!");
		}
		if (ny1 == null || "".equals(ny1)) {
			this.bizException("传入拨付年月一为空!");
		}
		if (ny2 == null || "".equals(ny2)) {
			this.bizException("传入拨付年月二为空!");
		}
		if (ny1.equals(ny2)) {
			this.bizException("拨付年月一跟拨付年月二相同，无需比较!");
		}
		if (jebz == null || "".equals(jebz)) {
			jebz = "false";
		}
		if (ysbz == null || "".equals(ysbz)) {
			ysbz = "false";
		}

		// 查询人员信息
		sqlBF.append("select c.dwbh, c.cbdwmc dwmc, p.shbzhm, p.xm, p.dfjglb, ");
		sqlBF.append("       p.dfjgid, p.ryid, p.sszfrq ");
		sqlBF.append("  from ad3u.per_info p,  ");
		sqlBF.append("       ad3u.per_reg a,   ");
		sqlBF.append("       si3u.orgn_reg c   ");
		sqlBF.append(" where p.dqdydjid = a.dydjid ");
		sqlBF.append("   and p.dwdjid = c.dwdjid ");
		sqlBF.append("   and a.jbjgid = ? ");
		// 代发机构类别
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and p.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		// 代发机构id
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and p.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		// 遗属标志
		if ("false".equals(ysbz)) {
			sqlBF.append("    and p.sszfrq <> 'B' ");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		dsPer = this.sql.executeQuery();
		dsPer.sort("dwbh");

		// 查询ny金额
		sqlBF.setLength(0);
		sqlBF.append("select nvl(sum(btje), 0) nyje ");
		sqlBF.append("  from ad3u.per_giv_month_std ");
		sqlBF.append(" where ryid = ? ");
		sqlBF.append("   and ? between qsny and nvl(zzny, '205012') ");
		queryJe = sqlBF.toString();

		int rowcount = dsPer.rowCount();
		SPrompt prompt = SPromptUtil.getSPrompt();
		prompt.setTotalSteps(rowcount);// 设置步数
		boolean isComplete = true;
		String dwbh = "", dwmc = "";

		for (int i = dsPer.rowCount() - 1; i >= 0; i--) {
			String sszfrq = dsPer.getString(i, "sszfrq");
			ryid = dsPer.getString(i, "ryid");
			dwmc = dsPer.getString(i, "dwmc");
			if (!dwbh.equals(dsPer.getString(i, "dwbh"))) {
				prompt.prompt("正在查询，单位名称为【" + dwmc + "】的拨付金额变动情况...");// 进度条刷新的内容
				dwbh = dsPer.getString(i, "dwbh");
			}
			if (prompt.isTerminating()) { // 这里负责判定是否点击了【终止】按钮
				isComplete = false;
				prompt.terminate("查询任务已终止!");
				break;
			}
			prompt.moveForword(1);
			// 查询ny1金额
			this.sql.setSql(queryJe);
			this.sql.setString(1, ryid);
			this.sql.setString(2, ny1);
			dsny = this.sql.executeQuery();
			ny1je = MathUtil.round(dsny.getDouble(0, "nyje"), 2);

			// 根据是否显示金额为空标志判断
			if (ny1je == 0 && "false".equals(jebz)) {
				dsPer.delRow(i);
				continue;
			}

			// 查询ny2发放金额
			this.sql.setSql(queryJe);
			this.sql.setString(1, ryid);
			this.sql.setString(2, ny2);
			dsny = this.sql.executeQuery();

			ny2je = MathUtil.round(dsny.getDouble(0, "nyje"), 2);
			// 根据是否显示金额为空标志判断
			if (ny2je == 0 && "false".equals(jebz)) {
				dsPer.delRow(i);
				continue;
			}
			if (ny1je == ny2je) {
				dsPer.delRow(i);
				continue;
			}

			dsPer.put(i, "ny1je", ny1je);
			dsPer.put(i, "ny2je", ny2je);
			dsPer.put(i, "ce", MathUtil.round(ny1je - ny2je, 2));

			// 查询：离退休日期、离退休类别
			String ltxrq = "";
			String zfrylb = "";
			if ("A".equals(sszfrq)) {
				DataObject empInfoDO = AdTools.getEmpInfoByRyid(ryid);
				ltxrq = empInfoDO.getString("ltxrq");
				zfrylb = empInfoDO.getString("ltxlb");
			} else {
				DataObject empInfoDO = AdTools.getSuppInfoByRyid(ryid);
				// TODO 遗属的离退休日期不知道怎么取
				ltxrq = "";
				zfrylb = empInfoDO.getString("yslb");
			}

			dsPer.put(i, "ltxrq", ltxrq);
			dsPer.put(i, "zfrylb", zfrylb);
		}

		// 查询代发机构编号名称
		AdTools.genDfjgxxDataStore(dsPer, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		dsPer = dsPer.sort("dwbh");
		rdo.put("dsbdinfo", dsPer);
		
		QueryLogTool.updateQueryLog(querylogid, dsPer.rowCount());

		sqlBF = null;
		dsPer = null;
		dsny = null;
		
		return rdo;
	}

	/**
	 * 方法简介.查询暂停拨付人员详细信息
	 * 
	 * @author 韦超 2015-1-6
	 */
	public final DataObject queryZtbfryMxInfo(final DataObject para) throws Exception {
		String zfrylb, dfjglb, dfjgid, dfjgmc, dfjgbh, gljglb, gljgid, qsny = "", zzny = "", ztyy = ""; // 增加查询条件“暂停原因” lan 2017-11-21
		String btlb = "";//淄博查询区分基本养老金和40元补贴  ysf.2018-7-20
		String ztcsybz = null;
	    DataStore ds, dsDfjgGljg;
		DataStore dsZtbfryInfo = new DataStore();
		DataObject pdo = new DataObject();
		DataObject rdo = new DataObject();
		int count;
		
		String querylogid = QueryLogTool.saveQueryLog("暂停拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 接参数
		zfrylb = para.getString("zfrylb");
		if (para.containsKey("qsny")) {
			qsny = para.getDateToString("qsny", "yyyyMM");
		}
		if (para.containsKey("zzny")) {
			zzny = para.getDateToString("zzny", "yyyyMM");
		}
		// 增加查询条件“暂停原因” lan 2017-11-21
		if (para.containsKey("ztyy")) {
			ztyy = para.getString("ztyy");
		}
		// 增加查询条件“补贴类别” ysf.2018-7-20
		if (para.containsKey("btlb")) {
			btlb = para.getString("btlb");
		}
		if (para.containsKey("ztcsybz")) {
			ztcsybz = para.getString("ztcsybz");
		}
		
		// 查询代发机构汇总信息
		//mod.cjj.20170516
		pdo = this.doMethod(this.getBizInstitution(), "queryZtbfryInfoByJbjg", para, this.getUser());
		dsDfjgGljg = pdo.getDataStore("ztbfryInfo");
		//end.cjj.20170516

		count = dsDfjgGljg.rowCount();
		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		prompt.setTotalSteps(count + 1); // 设置步数
		for (int i = 0; i < count; i++) {
			dfjglb = dsDfjgGljg.getString(i, "dfjglb");
			dfjgbh = dsDfjgGljg.getString(i, "dfjgbh");
			dfjgmc = dsDfjgGljg.getString(i, "dfjgmc");
			dfjgid = dsDfjgGljg.getString(i, "dfjgid");
			gljglb = dsDfjgGljg.getString(i, "gljglb");// add by hyp 2012-11-20
			// 管理机构类别
			gljgid = dsDfjgGljg.getString(i, "gljgid");// 管理机构ID

			pdo.clear();
			pdo.put("dfjglb", dfjglb);
			pdo.put("dfjgbh", dfjgbh);
			pdo.put("dfjgmc", dfjgmc);
			pdo.put("dfjgid", dfjgid);
			pdo.put("zfrylb", zfrylb);
			pdo.put("gljglb", gljglb);
			pdo.put("gljgid", gljgid);
			pdo.put("qsny", qsny);
			pdo.put("zzny", zzny);
			pdo.put("ztyy", ztyy); // 增加查询条件“暂停原因” lan 2017-11-21
			pdo.put("btlb", btlb);
			pdo.put("ztcsybz", ztcsybz);

			//mod.cjj.20170516
			pdo = this.doMethod(this.getBizInstitution(), "queryZtbfryInfoByOrgn", pdo, this.getUser());
			ds = pdo.getDataStore("ztbfryinfo");
			//end.cjj.20170516
			dsZtbfryInfo = dsZtbfryInfo.combineDatastore(ds);
			prompt.moveForword(1);
		}
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}
		dsZtbfryInfo = dsZtbfryInfo.sort("qsny");
		dsZtbfryInfo.setTypeList("dydjid:s,ryid:s,zfrylb:s,ltxrq:s,dfjglb:s,"
				+ "dfjgid:s,yhzh:s,qsny:s,ytbje:n,tbzje:n,"
				+ "dwbh:s,dwmc:s,dfjglb:s,dfjgbh:s,dfjgmc:s,"
				+ "xm:s,sfzhm:s,xb:s,grsf:s,csrq:s,jjlx:s");

		rdo.put("ztbfryinfo", dsZtbfryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsZtbfryInfo.rowCount());

		return rdo;
	}

	/**
	 * 方法简介.初始化退休增员查询界面
	 * 
	 * @author 杨绍智 2015-1-5
	 */
	public DataObject fwdTxzyQuery(DataObject para) throws Exception {
		DataStore xzbzDs = new DataStore();
		DataStore ds = new DataStore();
		
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		
		// 获取街道所在经办机构
		DataObject pdo = AdTools.getZyjgSectionDs(this.getBizInstitution().substring(0,4));
		DataStore dsjdjg = pdo.getDataStore("jgds");
		
		xzbzDs = this.getBillXzbzDs().getDataStore("xzbzds");
		DataObject vdo = new DataObject();
		vdo.put("xzbzds", xzbzDs);
		vdo.put("dsjg", ds);
		vdo.put("dsjdjg", dsjdjg);

		return vdo;
	}

	/**
	 * 方法简介.查询退休增员信息
	 * 
	 * @author 杨绍智 2015-1-5
	 */
	public DataObject queryTxzyInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, blzyyy, zfrylb, fhqsrq, fhzzrq, fhr, fhrSql, cxyfhbz;
		DataStore dsTxzyInfo = new DataStore();
		int i = 0;
		boolean flag, flag_ys;
		String jbjgid;
		
		String querylogid = QueryLogTool.saveQueryLog("退休增员情况", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		blzyyy = para.getString("blzyyy");
		zfrylb = para.getString("zfrylb");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		fhr = para.getString("yhid", "");
		cxyfhbz = para.getString("cxyfhbz", "");
		jbjgid = para.getString("jbjgid", "");

		jbjgid = HsuTools.replaceC2QCQ(jbjgid);

		// TODO 还没有实现
		// rightSql = Si3Tools.getDataRightSql(this.userid, "r",
		// Cp3Tools.replaceC2QCQ(Si3Tools.getSjjbjgByZfjbjg(this.jbjgqxfw,
		// "101,102")));
		flag = true;
		flag_ys = true;
		blzyyy = HsuTools.replaceC2QCQ(blzyyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		fhrSql = "";
		if (fhr != null && !"".equals(fhr)) {
			fhrSql = " and a.dyspr = '" + fhr + "' ";
		}

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "20491231";
		}

		// 如果复核日期为空，就不加复核日期的限制，这样可以查出未复核的人员
		if ((fhqsrq == null || "".equals(fhqsrq))
				&& (fhzzrq == null || "".equals(fhzzrq))) {
			flag = false;
			flag_ys = false;
		}

		if (fhqsrq == null || "".equals(fhqsrq)) {
			fhqsrq = "19500101";
		}
		if (fhzzrq == null || "".equals(fhzzrq)) {
			fhzzrq = "20491231";
		}

		// 取经办机构下起始终止日期之间有新增人员的单位，查询增员人数(职工)
		sqlBF.setLength(0);
		sqlBF.append("	( ");
		sqlBF.append(" select r.dwdjid dfjgid, r.dwbh dfjgbh, r.cbdwmc dfjgmc, 'B' dfjglb, ");
		sqlBF.append("   	  count(distinct a.ryid) zyrs ");
		sqlBF.append("   from si3u.orgn_reg r, ");
		sqlBF.append("        ad3u.per_info a ,");
		sqlBF.append("        ad3u.per_reg x, ");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("	  where a.sszfrq = 'A' ");
		sqlBF.append("	  and a.dfjglb = 'B' ");
		sqlBF.append("	  and a.dqdydjid = x.dydjid ");
		sqlBF.append("	  and a.ryid = e.ryid ");
		sqlBF.append("	  and a.dfjgid = r.dwdjid ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  r.jbjgid in (" + jbjgid + ") ");
		}
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and x.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}

		if ("true".equals(cxyfhbz)) {
			sqlBF.append("	  and a.dyspbz = '1' ");
		}

		sqlBF.append("	  and to_char(x.blzysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ?  ");
		if (flag) {
			sqlBF.append("    and to_char(a.dyspsj,'yyyyMMdd') ");
			sqlBF.append("          between ? and ? ");
		}
		sqlBF.append(fhrSql);
		sqlBF.append("	group by r.dwdjid, r.dwbh, r.cbdwmc, dfjglb ");

		sqlBF.append("	union all ");

		// 取经办机构下当前月份有新增人员的代发机构，查询增员人数

		// TODO 还没有实现
		// rightSql = Si3Tools.getDataRightSql(this.userid, "i",
		// this.jbjgqxfwForSql);

		sqlBF.append(" select n.dfjgid, n.dfjgbh, n.dfjgmc, 'G' dfjglb, ");
		sqlBF.append("   	  count(distinct a.ryid) zyrs ");
		sqlBF.append("   from be3u.provide_natl n, ");
		sqlBF.append("        be3u.inst_config i, ");
		sqlBF.append("        ad3u.per_info a ,");
		sqlBF.append("        ad3u.per_reg x ,");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("    where i.jgid = n.dfjgid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and i.jglx = 'G' ");
		sqlBF.append("	  and a.dfjglb = 'G' ");
		sqlBF.append("	  and a.dfjgid = n.dfjgid ");
		sqlBF.append("    and a.dqdydjid = x.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   i.jbjgid in (" + jbjgid + ") ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append("	  and a.dyspbz = '1' ");
		}

		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and x.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and to_char(x.blzysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ?  ");
		if (flag) {
			sqlBF.append("    and to_char(a.dyspsj,'yyyyMMdd') ");
			sqlBF.append("          between ? and ? ");
		}
		sqlBF.append(fhrSql);
		sqlBF.append("	group by n.dfjgid, n.dfjgbh, n.dfjgmc, dfjglb ");
		sqlBF.append("	) ");

		sqlBF.append("	union  all ");

		// 取经办机构下起始终止日期之间有新增人员的单位，查询增员人数(遗属)
		sqlBF.append("	( ");
		sqlBF.append(" select r.dwdjid dfjgid, r.dwbh dfjgbh, r.cbdwmc dfjgmc, 'B' dfjglb, ");
		sqlBF.append("   	  count(distinct a.ryid) zyrs ");
		sqlBF.append("   from si3u.orgn_reg r, ");
		sqlBF.append("        ad3u.per_info a ,");
		sqlBF.append("        ad3u.per_reg x, ");
		sqlBF.append("        ad3u.supp_info s  ");
		sqlBF.append("	  where a.sszfrq = 'B' ");
		sqlBF.append("	  and a.dfjglb = 'B' ");
		sqlBF.append("	  and a.dqdydjid = x.dydjid ");
		sqlBF.append("	  and a.ryid = s.ryid ");
		sqlBF.append("	  and a.dfjgid = r.dwdjid ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   r.jbjgid in (" + jbjgid + ") ");
		}
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and x.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and s.yslb in (").append(zfrylb).append(") ");
		}

		if ("true".equals(cxyfhbz)) {
			sqlBF.append("	  and a.dyspbz = '1' ");
		}

		sqlBF.append("	  and to_char(x.blzysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ?  ");
		if (flag_ys) {
			sqlBF.append("    and to_char(a.dyspsj,'yyyyMMdd') ");
			sqlBF.append("          between ? and ? ");
		}
		sqlBF.append(fhrSql);
		sqlBF.append("	group by r.dwdjid, r.dwbh, r.cbdwmc, dfjglb ");

		sqlBF.append("	union all ");

		// 取经办机构下当前月份有新增人员的代发机构，查询增员人数

		// TODO 还没有实现

		// rightSql = Si3Tools.getDataRightSql(this.userid, "i",
		// this.jbjgqxfwForSql);

		sqlBF.append(" select n.dfjgid, n.dfjgbh, n.dfjgmc, 'G' dfjglb, ");
		sqlBF.append("   	  count(distinct a.ryid) zyrs ");
		sqlBF.append("   from be3u.provide_natl n, ");
		sqlBF.append("        be3u.inst_config i, ");
		sqlBF.append("        ad3u.per_info a ,");
		sqlBF.append("        ad3u.per_reg x ,");
		sqlBF.append("        ad3u.supp_info s ");
		sqlBF.append("    where i.jgid = n.dfjgid ");
		sqlBF.append("    and a.sszfrq = 'B' ");
		sqlBF.append("    and i.jglx = 'G' ");
		sqlBF.append("	  and a.dfjglb = 'G' ");
		sqlBF.append("	  and a.dfjgid = n.dfjgid ");
		sqlBF.append("    and a.dqdydjid = x.dydjid ");
		sqlBF.append("    and a.ryid = s.ryid ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   i.jbjgid in (" + jbjgid + ") ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append("	  and a.dyspbz = '1' ");
		}

		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and x.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and s.yslb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and to_char(x.blzysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ?  ");
		if (flag_ys) {
			sqlBF.append("    and to_char(a.dyspsj,'yyyyMMdd') ");
			sqlBF.append("          between ? and ? ");
		}
		sqlBF.append(fhrSql);
		sqlBF.append("	group by n.dfjgid, n.dfjgbh, n.dfjgmc, dfjglb ");
		sqlBF.append("	) ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(++i, qsrq);
		this.sql.setString(++i, zzrq);
		if (flag) {
			this.sql.setString(++i, fhqsrq);
			this.sql.setString(++i, fhzzrq);
		}
		this.sql.setString(++i, qsrq);
		this.sql.setString(++i, zzrq);
		if (flag) {
			this.sql.setString(++i, fhqsrq);
			this.sql.setString(++i, fhzzrq);
		}
		this.sql.setString(++i, qsrq);
		this.sql.setString(++i, zzrq);
		if (flag_ys) {
			this.sql.setString(++i, fhqsrq);
			this.sql.setString(++i, fhzzrq);
		}
		this.sql.setString(++i, qsrq);
		this.sql.setString(++i, zzrq);
		if (flag_ys) {
			this.sql.setString(++i, fhqsrq);
			this.sql.setString(++i, fhzzrq);
		}

		dsTxzyInfo = this.sql.executeQuery();
		// 去重复
		String dfjgid, dfjgid_s;
		for (int j = dsTxzyInfo.rowCount() - 1; j >= 0; j--) {
			dfjgid = dsTxzyInfo.getString(j, "dfjgid");
			for (int s = j - 1; s >= 0; s--) {
				dfjgid_s = dsTxzyInfo.getString(s, "dfjgid");
				if (dfjgid_s.equals(dfjgid)) {
					dsTxzyInfo.put(s, "zyrs", dsTxzyInfo.getDouble(s, "zyrs")
							+ dsTxzyInfo.getDouble(j, "zyrs"));
					dsTxzyInfo.delRow(j);
					break;
				}

			}
		}
		int num = dsTxzyInfo.rowCount();
		DataStore dsnum = new DataStore();
		String strnum = "共【" + num + "】行";
		dsnum.put(0, "num", strnum);
		rdo.put("txzyinfo", dsTxzyInfo);
		rdo.put("dsnum", dsnum);
		
		QueryLogTool.updateQueryLog(querylogid, dsTxzyInfo.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.退休新增人员明细
	 * 
	 * @author 杨绍智 2015-1-6
	 */
	public DataObject queryTxzyInfoByDfjg(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, blzyyy, zfrylb, ryid, dfjglb, dfjgid, cjgzrq, fhqsrq, fhzzrq;
		String fhr, fhrSql;
		DataStore ds, xzbzDs, dsTxzyInfo_zg, dsTxzyInfo_ys, ds_bf, dsTxzyInfo = new DataStore();
		DataStore dsStd;
		double sjjfnx, stjfnx, zjfnx;
		String cxyfhbz;
		DataStore dsBase = new DataStore();
		String dfjgbh, dfjgmc, xzbz;
		boolean flag, flag_ys;
		String qsny;
		double txj, zfbt;
		String jbjgid;

		// 接参数
		dfjglb = para.getString("dfjglb");
		dfjgid = para.getString("dfjgid");
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		zfrylb = para.getString("zfrylb");
		blzyyy = para.getString("blzyyy");
		cxyfhbz = para.getString("cxyfhbz", "false");// 查询已复核发放信息标志
		fhr = para.getString("yhid", "");
		// 为“1”时表示只查询已复核的发放信息
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		xzbzDs = getBillXzbzDs().getDataStore("xzbzds");
		blzyyy = HsuTools.replaceC2QCQ(blzyyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		sjjfnx = 0;
		stjfnx = 0;
		zjfnx = 0;
		cjgzrq = null;
		flag = true;
		flag_ys = true;

		jbjgid = para.getString("jbjgid", "");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);

		// TODO 还没有实现
		// rightSql = Si3Tools.getDataRightSql(this.userid, "b",
		// this.jbjgqxfwForSql);
		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("传入代发机构ID为空！");
		}
		if (dfjglb == null || "".equals(dfjglb)) {
			this.bizException("传入代发机构类别为空！");
		}
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		// 如果复核日期为空，就不加复核日期的限制，这样可以查出未复核的人员
		if ((fhqsrq == null || "".equals(fhqsrq))
				&& (fhzzrq == null || "".equals(fhzzrq))) {
			flag = false;
			flag_ys = false;
		}

		if (fhqsrq == null || "".equals(fhqsrq)) {
			fhqsrq = "19500101";
		}
		if (fhzzrq == null || "".equals(fhzzrq)) {
			fhzzrq = "25001231";
		}

		fhrSql = "";
		if (fhr != null && !"".equals(fhr)) {
			fhrSql = " and a.dyspr = '" + fhr + "' ";
		}

		// 查询符合条件的新增养老人员登记信息(职工)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, a.dyffzt, ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz, ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq, ");
		sqlBF.append("        o.dwbh, o.cbdwmc, o.cbdwxz, a.dyxsksny, a.yhzh, ");
		sqlBF.append("        e.sjjfnx, e.stjfnx, 0 zjfnx, '' cjgzrq, a.dylqlb, ");
		sqlBF.append("        b.rydjid, a.dfjglb, ? dfjgbh, ? dfjgmc, a.shbzhm, ");
		sqlBF.append("        0 bfje, dyspr, dyspsj, c.jjlx,e.dacsrq,e.jfbl,e.tgyy,a.dyfhr ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   b.jbjgid in (" + jbjgid + ") ");
		}

		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append(" and a.dyspbz = '1' ");
		}

		sqlBF.append("    and a.dfjglb = ? ");
		sqlBF.append("    and a.dfjgid = ? ");
		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (flag) {
			sqlBF.append("and to_char(a.dyspsj, 'yyyyMMdd') between ? and ? ");
		}
		sqlBF.append(fhrSql);

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjgbh);
		this.sql.setString(2, dfjgmc);
		this.sql.setString(3, dfjglb);
		this.sql.setString(4, dfjgid);
		this.sql.setString(5, qsrq);
		this.sql.setString(6, zzrq);
		if (flag) {
			this.sql.setString(7, fhqsrq);
			this.sql.setString(8, fhzzrq);
		}

		dsTxzyInfo_zg = this.sql.executeQuery();

		// 查询符合条件的新增养老人员登记信息(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.yslb zfrylb, a.dyffzt, ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz, ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq, ");
		sqlBF.append("        o.dwbh, o.cbdwmc, o.cbdwxz, a.dyxsksny, a.yhzh, ");
		sqlBF.append("        0 sjjfnx, 0 stjfnx, 0 zjfnx, '' cjgzrq, a.dylqlb, ");
		sqlBF.append("        b.rydjid, a.dfjglb, ? dfjgbh, ? dfjgmc, a.shbzhm, ");
		sqlBF.append("        0 bfje, dyspr, dyspsj, c.jjlx, '' dacsrq, '' jfbl, '' tgyy, a.dyfhr  ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info e, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'B' ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   b.jbjgid in (" + jbjgid + ") ");
		}

		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.yslb in (").append(zfrylb).append(") ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append(" and a.dyspbz = '1' ");
		}

		sqlBF.append("    and a.dfjglb = ? ");
		sqlBF.append("    and a.dfjgid = ? ");
		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (flag) {
			sqlBF.append("and to_char(a.dyspsj, 'yyyyMMdd') between ? and ? ");
		}
		sqlBF.append(fhrSql);

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjgbh);
		this.sql.setString(2, dfjgmc);
		this.sql.setString(3, dfjglb);
		this.sql.setString(4, dfjgid);
		this.sql.setString(5, qsrq);
		this.sql.setString(6, zzrq);
		if (flag_ys) {
			this.sql.setString(7, fhqsrq);
			this.sql.setString(8, fhzzrq);
		}

		dsTxzyInfo_ys = this.sql.executeQuery();

		dsTxzyInfo = dsTxzyInfo_zg.combineDatastore(dsTxzyInfo_ys);

		for (int i = 0; i < dsTxzyInfo.rowCount(); i++) {
			ryid = dsTxzyInfo.getString(i, "ryid");
			txj = 0;

			// 查询待遇最小年月
			sqlBF.setLength(0);
			sqlBF.append(" select min(a.qsny) qsny ");
			sqlBF.append("           from ad3u.per_giv_month_std a ");
			sqlBF.append("          where a.ryid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			qsny = ds.getString(0, "qsny");

			// 正常发放的已复核人员
			sqlBF.setLength(0);
			sqlBF.append(" select   ");
			for (int m = 0, len = xzbzDs.rowCount(); m < len; m++) {
				xzbz = xzbzDs.getString(m, "code");
				sqlBF.append("    nvl(sum(decode(xzbz,'" + xzbz
						+ "', btje, 0)), 0)  txj" + xzbz + ",");
			}
			sqlBF.append("        nvl(sum(btje), 0) txj, ");
			sqlBF.append("        nvl(sum(decode(btbh, 'B1F3', btje, 'A1F3', btje, 0)),0) zfbt ");// add.yxt.20140620.增加查询住房补贴。威海需求【WHXM-606】

			sqlBF.append("   from ad3u.per_giv_month_std ");
			sqlBF.append("	where ryid = ? ");
			sqlBF.append("	  and ? between qsny and nvl(zzny, '205012') ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, qsny);

			dsStd = this.sql.executeQuery();
			txj = dsStd.getDouble(0, "txj");
			zfbt = dsStd.getDouble(0, "zfbt");

			dsTxzyInfo.put(i, "txj", txj);
			dsTxzyInfo.put(i, "zfbt", zfbt);
			dsTxzyInfo.put(i, "txjsbff", txj - zfbt);

			// 查询人员基本信息
			sqlBF.setLength(0);
			sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
			sqlBF.append("		  a.zyjszwjb, b.xzzw, a.gjzyzgdj, b.ygxs, a.lxrdh, ");
			sqlBF.append("        a.txdz ");
			sqlBF.append("   from biuv.person a ,");
			sqlBF.append("        ad3u.per_info b ");
			sqlBF.append("	where a.ryid = ? ");
			sqlBF.append("	  and a.ryid = b.ryid ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBase = this.sql.executeQuery();
			if (dsBase.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}

			dsTxzyInfo.put(i, "xm", dsBase.getString(0, "xm"));
			dsTxzyInfo.put(i, "shbzhm", dsBase.getString(0, "shbzhm"));
			dsTxzyInfo.put(i, "xb", dsBase.getString(0, "xb"));
			dsTxzyInfo.put(i, "grsf", dsBase.getString(0, "grsf"));
			dsTxzyInfo.put(i, "csrq", dsBase.getString(0, "csrq"));
			dsTxzyInfo.put(i, "zyjszwjb", dsBase.getString(0, "zyjszwjb"));
			dsTxzyInfo.put(i, "xzzw", dsBase.getString(0, "xzzw"));
			dsTxzyInfo.put(i, "gjzyzgdj", dsBase.getString(0, "gjzyzgdj"));
			dsTxzyInfo.put(i, "ygxs", dsBase.getString(0, "ygxs"));
			dsTxzyInfo.put(i, "lxdh", dsBase.getString(0, "lxrdh"));
			dsTxzyInfo.put(i, "txdz", dsBase.getString(0, "txdz"));

			if (ryid != null && !"".equals(ryid)) {
				this.sql.setSql(" select cjgzrq from ad3u.emp_info where ryid = ? ");
				this.sql.setString(1, ryid);
				ds = this.sql.executeQuery();
				if (ds.rowCount() > 0) {
					cjgzrq = ds.getString(0, "cjgzrq");
				}
			}
			dsTxzyInfo.put(i, "cjgzrq", cjgzrq);

			stjfnx = dsTxzyInfo.getDouble(i, "stjfnx");
			sjjfnx = dsTxzyInfo.getDouble(i, "sjjfnx");
			// 由于存在四舍五入的问题，故总的年限如果等于视同实际缴费年限保留两位小数之后的和，那么和实际上的总年限就会有误差。所有对这个地方进行了更改
			zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);

			// 补发
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(p.btje), 0) bfje ");
			sqlBF.append("   from ad3u.per_giv_detl p  ");
			// modify 修改获取补发的条件 韦超 20151103
			sqlBF.append("  where p.fsyy = '2' ");
			sqlBF.append("    and p.fflb = 'A'  ");
			sqlBF.append("    and p.ryid = ?");
			// modify 修改获取补发的条件 end
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds_bf = this.sql.executeQuery();

			dsTxzyInfo.put(i, "bfje", ds_bf.getDouble(0, "bfje"));
			dsTxzyInfo.put(i, "zjfnx", zjfnx);

			String dyspr = dsTxzyInfo.getString(i, "dyspr");
			String dyfhr = dsTxzyInfo.getString(i, "dyfhr");
			dsTxzyInfo.put(i, "dyspr", HsuTools.getCzyxmByUserId(dyspr));
			dsTxzyInfo.put(i, "dyfhr", HsuTools.getCzyxmByUserId(dyfhr));

			// 重算标志
			sqlBF.setLength(0);
			sqlBF.append("   select 1  ");
			sqlBF.append("     from ad3u.per_cal_his h  ");
			sqlBF.append("    where ryid = ?  ");
			sqlBF.append("      and h.xh > 1  ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dsTxzyInfo.put(i, "csbz", "1");
			} else {
				dsTxzyInfo.put(i, "csbz", "0");
			}
		}

		DataObject vdo = new DataObject();
		ds = new DataStore();
		ds.addRow(para);
		vdo.put("restxzyinfo", dsTxzyInfo);
		vdo.put("resforminfo", ds);
		return vdo;
	}

	/**
	 * 获取拨付单据查询时单一地区的险种标志
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-1-5
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject getBillXzbzDs() throws Exception {
		DataObject rdo = new DataObject();
		DataStore xzbzDs = new DataStore();
		String[] strXzbz;
		String ad302042, xzbz;

		String jbjgid = this.getUser().getAppRuntimeInstitution();
		if (null != jbjgid && jbjgid.length() == 6) {
			jbjgid = jbjgid + "01";
		}
		// 获取操作员经办机构范围
		ad302042 = SiTools.getPara(jbjgid, "ad302042", "");

		if (ad302042 != null && !"".equals(ad302042)) {
			strXzbz = ad302042.split(",");
			for (int i = 0; i < strXzbz.length; i++) {
				xzbz = strXzbz[i];
				xzbzDs.addRow();
				xzbzDs.put(xzbzDs.rowCount() - 1, "code", xzbz);
				xzbzDs.put(xzbzDs.rowCount() - 1, "content", HsuTools.discode("XZBZ", xzbz, ""));
			}
		}

		rdo.put("xzbzds", xzbzDs);

		xzbzDs = null;
		return rdo;
	}

	/**
	 * 方法简介.根据录入的信息查询恢复拨付人员
	 * 
	 * @author 韦超 2015-1-7
	 */
	public DataObject queryHfbfryInfoByJbjg(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, zfrylb;
		String qsrq, zzrq;
		DataStore dsHfbfryInfo;
		
		String querylogid = QueryLogTool.saveQueryLog("恢复拨付人员", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		jbjgid = para.getString("jbjgid");
		zfrylb = para.getString("zfrylb");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构ID为空！");
		}
		
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		SiTools.checkQsZzrq(qsrq, zzrq, 12);
		sqlBF.setLength(0);
		sqlBF.append(" select pi.gljglb, pi.gljgid, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        count(distinct pi.ryid) hfbfrs ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_reg pr ");
		sqlBF.append("  where pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.dqdydjid = pr.dydjid ");
		sqlBF.append("    and pp.zzny is not null ");
		sqlBF.append("    and to_char(pp.hfsj, 'yyyymmdd') between ? and ? ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and exists ( ");
			sqlBF.append("           select 1  ");
			sqlBF.append("             from ad3u.emp_info ei, ");
			sqlBF.append("                  ad3u.per_info p ");
			sqlBF.append("            where ei.ryid = pi.ryid ");
			sqlBF.append("              and p.ryid = pi.ryid  ");
			sqlBF.append("              and p.sszfrq = 'A'  ");
			sqlBF.append("              and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
			sqlBF.append("            union all  ");
			sqlBF.append("           select 1  ");
			sqlBF.append("             from ad3u.supp_info si, ");
			sqlBF.append("                  ad3u.per_info p ");
			sqlBF.append("            where si.ryid = pi.ryid ");
			sqlBF.append("              and p.ryid = pi.ryid  ");
			sqlBF.append("              and p.sszfrq = 'B'  ");
			sqlBF.append("              and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
			sqlBF.append("    ) ");
		}
		sqlBF.append("    and pr.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("  group by pi.gljglb, pi.gljgid, pi.dfjglb, pi.dfjgid ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		dsHfbfryInfo = this.sql.executeQuery();

		dsHfbfryInfo = AdTools.genDfjgxxDataStore(dsHfbfryInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsHfbfryInfo = AdTools.genGljgxxDataStore(dsHfbfryInfo, "gljglb", "gljgid", "gljgbh", "gljgmc");

		dsHfbfryInfo.setTypeList("gljgbh:s,gljgmc:s,dfjgbh:s,dfjgmc:s");

		dsHfbfryInfo = dsHfbfryInfo.sort("dfjgbh").sort("dfjglb");
		rdo.put("hfbfryInfo", dsHfbfryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsHfbfryInfo.rowCount());

		return rdo;
	}

	/**
	 * 进入一次性退职人员明细查询
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-1-9
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public final DataObject fwdYcxtzryMxQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 查询一次性退职人员明细
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-1-9
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryYcxtzryMx(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String dwdjid, txqsrq, txzzrq, txr;
		DataStore dsTzryInfo;
		String jbjgid;
		
		String querylogid = QueryLogTool.saveQueryLog("一次性退职人员明细信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		dwdjid = para.getString("dwdjid");
		txqsrq = para.getDateToString("txqsrq", "yyyyMMdd");
		txzzrq = para.getDateToString("txzzrq", "yyyyMMdd");
		jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));
		txr = para.getString("yhid");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空!");
		}

		if (txqsrq != null && !"".equals(txqsrq) && txzzrq != null
				&& !"".equals(txzzrq)) {
			if (txqsrq.compareTo(txzzrq) > 0) {
				this.bizException("填写起始日期应该小于等于终止日期!");
			}
			if (DateUtil.getMonthDifferenceBetweenTwoStringDate(StringUtil.chnSubstring(txqsrq, 0, 6), StringUtil.chnSubstring(txzzrq, 0, 6)) >= 12) {
				this.bizException("填写日期查询时间跨度过长，不能超过12个月!");
			}
		}

		// 查询不同发放主体发放的选定补贴的总人数和总金额
		sqlBF.setLength(0);
		sqlBF.append(" select c.dwbh, c.cbdwmc dwmc, p.shbzhm, p.xm, ");
		sqlBF.append("		  p.xb, p.csrq, e.cjgzrq, e.ltxrq, p.dyxsksny, ");
		sqlBF.append("        nvl(sum(decode(a.btbh, 'A107', a.btje, 0)), 0) jcxylj, ");
		sqlBF.append("        nvl(sum(decode(a.btbh, 'A130', a.btje, 0)), 0) grzhj, ");
		sqlBF.append("        a.zdlsh, b.ryid ");
		sqlBF.append("	 from ad3u.per_giv_detl a, ");
		sqlBF.append("		  ad3u.per_info p,  ");
		sqlBF.append("		  ad3u.emp_info e,  ");
		sqlBF.append("		  ad3u.per_reg b,  ");
		sqlBF.append("        si3u.orgn_reg c ");
		sqlBF.append("	where a.ryid = p.ryid ");
		sqlBF.append("    and p.ryid = e.ryid ");
		sqlBF.append("    and p.dqdydjid = b.dydjid ");
		sqlBF.append("    and p.dwdjid = c.dwdjid ");
		sqlBF.append("    and a.btbh in ('A107', 'A130') ");
		sqlBF.append("    and a.fflb = 'C' ");
		sqlBF.append("	  and e.ltxlb = 'A41' ");
		sqlBF.append("    and b.jbjgid in (" + jbjgid + ") ");
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("and p.dwdjid = '").append(dwdjid).append("' ");
		}

		if ((txr != null && !"".equals(txr))
				|| (txqsrq != null && !"".equals(txqsrq))
				|| (txzzrq != null && !"".equals(txzzrq))) {
			sqlBF.append("and exists ");
			sqlBF.append("   (select d.zdlsh ");
			sqlBF.append("	    from ad3u.bill_genl d ");
			sqlBF.append("	   where a.zdlsh = d.zdlsh ");
			if (txr != null && !"".equals(txr)) {
				sqlBF.append("   and d.txr = '" + txr + "' ");
			}
			if (txqsrq != null && !"".equals(txqsrq)) {
				sqlBF.append("   and to_char(txsj, 'yyyymmdd') >= '")
					.append(txqsrq)
					.append("'");
			}
			if (txzzrq != null && !"".equals(txzzrq)) {
				sqlBF.append("   and to_char(txsj, 'yyyymmdd') <= '")
					.append(txzzrq)
					.append("'");
			}
			sqlBF.append(") ");
		}
		sqlBF.append(" group by c.dwbh, c.cbdwmc, p.shbzhm, p.xm, ");
		sqlBF.append("       p.xb, p.csrq, e.cjgzrq, e.ltxrq, p.dyxsksny, a.zdlsh, ");
		sqlBF.append("       b.ryid ");

		this.sql.setSql(sqlBF.toString());
		dsTzryInfo = this.sql.executeQuery();

		dsTzryInfo = dsTzryInfo.sort("shbzhm").sort("dwbh");
		rdo.put("ds", dsTzryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsTzryInfo.rowCount());

		sqlBF = null;
		dsTzryInfo = null;
		return rdo;
	}

	/**
	 * 方法简介.查询恢复拨付人员明细
	 * 
	 * @author 韦超 2015-1-14
	 */
	public final DataObject queryHfbfryMxInfo(final DataObject para) throws Exception {
		String zfrylb, dfjglb, dfjgid, dfjgmc, dfjgbh, gljglb, gljgid;
		DataStore ds, dsDfjgGljg;
		DataStore dsHfbfryInfo = new DataStore();
		DataObject pdo = new DataObject();
		DataObject rdo = new DataObject();
		String qsrq, zzrq, hfyy;
		int count;
		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");
		
		String querylogid = QueryLogTool.saveQueryLog("恢复拨付人员明细", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 接参数
		zfrylb = para.getString("zfrylb");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		hfyy = para.getString("hfyy", "");
		
		SiTools.checkQsZzrq(qsrq, zzrq, 12);

		// 查询代发机构汇总信息
		dsDfjgGljg = this.queryHfbfryInfoByJbjg(para)
			.getDataStore("hfbfryInfo");

		count = dsDfjgGljg.rowCount();
		prompt.setTotalSteps(count); // 设置步数
		for (int i = 0; i < count; i++) {
			dfjglb = dsDfjgGljg.getString(i, "dfjglb");
			dfjgbh = dsDfjgGljg.getString(i, "dfjgbh");
			dfjgmc = dsDfjgGljg.getString(i, "dfjgmc");
			dfjgid = dsDfjgGljg.getString(i, "dfjgid");
			gljglb = dsDfjgGljg.getString(i, "gljglb");
			gljgid = dsDfjgGljg.getString(i, "gljgid");

			pdo.clear();
			pdo.put("dfjglb", dfjglb);
			pdo.put("dfjgbh", dfjgbh);
			pdo.put("dfjgmc", dfjgmc);
			pdo.put("dfjgid", dfjgid);
			pdo.put("zfrylb", zfrylb);
			pdo.put("gljglb", gljglb);
			pdo.put("gljgid", gljgid);
			pdo.put("qsrq", qsrq);
			pdo.put("zzrq", zzrq);
			pdo.put("hfyy", hfyy);
			// 查询每个代发机构下的人员明细信息
			ds = this.queryHfbfryInfoByOrgn(pdo).getDataStore("hfbfryinfo");
			dsHfbfryInfo = dsHfbfryInfo.combineDatastore(ds);
			prompt.moveForword(1);
		}
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}
		dsHfbfryInfo = dsHfbfryInfo.sort("dfjglb,dfjgbh,shbzhm");
		rdo.put("hfbfryinfo", dsHfbfryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsHfbfryInfo.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.查询每个代发机构下的人员明细信息
	 * 
	 * @author 韦超 2015-1-14
	 */
	public DataObject queryHfbfryInfoByOrgn(final DataObject para) throws Exception {
		DataObject rdo = new DataObject(), pdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		StringBuffer sqlStr = new StringBuffer();
		String zfrylb, ryid, dfjglb, dfjgid, dfjgbh, dfjgmc;
		DataStore ds = new DataStore(), dsHfbfryInfo = new DataStore(), ds_temp = new DataStore();
		String gljglb, gljgid, qsrq, zzrq, hfny, qsny, hfyy, hfjbny;
		double bfje;

		qsrq = para.getString("qsrq");
		zzrq = para.getString("zzrq");
		dfjglb = para.getString("dfjglb");
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		gljglb = para.getString("gljglb", "");
		gljgid = para.getString("gljgid", "");
		hfyy = para.getString("hfyy", "");

		if (hfyy != null && !"".equals(hfyy)) {
			hfyy = HsuTools.replaceC2QCQ(hfyy);
		}

		if (zfrylb != null && !"".equals(zfrylb)) {
			zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		}

		sqlBF.setLength(0);
		sqlBF.append(" select pi.dqdydjid dydjid, pi.ryid, pi.shbzhm, pi.xm, pi.xb,  ");
		sqlBF.append("        pi.csrq, pi.yhzh, ei.ltxrq, ei.ltxlb zfrylb, pp.qsny,  ");
		sqlBF.append("        pp.zzny, pp.hfny, pp.hfyy, pp.hfsj, '' ytbje,  ");
		sqlBF.append("        '' bfje, '' grsf , ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        r.cbdwmc dwmc, r.dwbh ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        si3u.orgn_reg r ");
		sqlBF.append("  where pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pp.zzny is not null  ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid  ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append(" and ei.ltxlb in (" + zfrylb + ")");
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		sqlBF.append("    and to_char(pp.hfsj, 'yyyymmdd') between ? and ?  ");
		if (hfyy != null && !"".equals(hfyy)) {
			sqlBF.append("    and pp.hfyy in (" + hfyy + ")");
		}
		sqlBF.append(" union all  ");
		sqlBF.append(" select pi.dqdydjid dydjid, pi.ryid, pi.shbzhm, pi.xm, pi.xb,  ");
		sqlBF.append("        pi.csrq, pi.yhzh, '' ltxrq, si.yslb zfrylb, pp.qsny,  ");
		sqlBF.append("        pp.zzny, pp.hfny, pp.hfyy, pp.hfsj, '' ytbje,  ");
		sqlBF.append("        '' bfje, '' grsf , ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        r.cbdwmc dwmc, r.dwbh ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        si3u.orgn_reg r ");
		sqlBF.append("  where pi.ryid = si.ryid ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pp.zzny is not null  ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid  ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append(" and si.yslb in (" + zfrylb + ")");
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		sqlBF.append("    and to_char(pp.hfsj, 'yyyymmdd') between ? and ?  ");
		if (hfyy != null && !"".equals(hfyy)) {
			sqlBF.append("    and pp.hfyy in (" + hfyy + ")");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjglb);
		this.sql.setString(2, dfjgbh);
		this.sql.setString(3, dfjgmc);
		this.sql.setString(4, dfjglb);
		this.sql.setString(5, dfjgid);
		this.sql.setString(6, qsrq);
		this.sql.setString(7, zzrq);
		this.sql.setString(8, dfjglb);
		this.sql.setString(9, dfjgbh);
		this.sql.setString(10, dfjgmc);
		this.sql.setString(11, dfjglb);
		this.sql.setString(12, dfjgid);
		this.sql.setString(13, qsrq);
		this.sql.setString(14, zzrq);

		dsHfbfryInfo = this.sql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(pg.btje),0) ybtje  ");
		sqlBF.append("   from ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pg.ryid = ? ");
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");

		this.sql.setSql(sqlBF.toString());
		for (int i = 0; i < dsHfbfryInfo.rowCount(); i++) {
			ryid = dsHfbfryInfo.getString(i, "ryid");
			hfny = dsHfbfryInfo.getString(i, "hfny");
			qsny = dsHfbfryInfo.getString(i, "qsny");
			hfjbny = dsHfbfryInfo.getDateToString(i, "hfsj", "yyyyMM");

			sqlStr.setLength(0);
			sqlStr.append(" select a.grsf ");
			sqlStr.append("   from biuv.person a ");
			sqlStr.append("	where a.ryid = ? ");

			this.sql.setSql(sqlStr.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}
			dsHfbfryInfo.put(i, "grsf", ds.getString(0, "grsf"));
			// 取月停拨金额
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, hfny);
			ds_temp = this.sql.executeQuery();

			dsHfbfryInfo.put(i, "ytbje", ds_temp.getDouble(0, "ybtje"));

			// 取补发金额
			// add by guanll 2018.07.12 增加客户化处理
			pdo.clear();
			pdo.put("ryid", ryid);
			pdo.put("qsny", qsny);
			pdo.put("hfny", hfny);
			pdo.put("hfjbny", hfjbny);
			pdo = this.doMethod(this.getBizInstitution(), "getHfbfje", pdo, this.getUser());
			bfje = pdo.getDouble("bfje");
			

			dsHfbfryInfo.put(i, "bfje", bfje);
		}

		rdo.put("hfbfryinfo", dsHfbfryInfo);

		return rdo;
	}
	
	/**
	 * 获取暂停恢复补发金额
	 * 
	 * @author guanll
	 * @date 2018.07.12
	 * @param para
	 * @return bfje
	 * @throws Exception
	 */
	public final DataObject getHfbfje(final DataObject para) throws Exception {	
		DataObject rdo = new DataObject();
		DataStore ds_temp;
		StringBuffer sqlBff = new StringBuffer();
		String ryid, qsny, hfny;
		double bfje;
		
		ryid = para.getString("ryid");
		qsny = para.getString("qsny");
		hfny = para.getString("hfny");
		
		sqlBff.setLength(0);
		sqlBff.append(" select nvl(sum(btje),0) bfje ");
		sqlBff.append("   from ad3u.per_giv_detl  ");
		sqlBff.append("  where ryid = ? ");
		sqlBff.append("    and yfny between ? and ? ");
		sqlBff.append("    and fsyy = '2' ");
		sqlBff.append("    and fflb = 'A' ");
		
		this.sql.setSql(sqlBff.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, qsny);
		this.sql.setString(3, hfny);
		ds_temp = this.sql.executeQuery();
		bfje = ds_temp.getDouble(0, "bfje");
		
		rdo.put("bfje", bfje);
		return rdo;
	}
	
	/**
	 * 获取暂停恢复补发金额
	 * 
	 * 泰安客户化 补发金额为暂停起始年月到暂停恢复经办年月之前的补发
	 * 
	 * @author guanll
	 * @date 2018.07.12
	 * @param para
	 * @return bfje
	 * @throws Exception
	 */
	public final DataObject getHfbfje_3709(final DataObject para) throws Exception {	
		DataObject rdo = new DataObject();
		DataStore ds_temp;
		StringBuffer sqlBff = new StringBuffer();
		String ryid, qsny, hfjbny;
		double bfje;
		
		ryid = para.getString("ryid");
		qsny = para.getString("qsny");
		hfjbny = para.getString("hfjbny");
		
		sqlBff.setLength(0);
		sqlBff.append(" select nvl(sum(btje),0) bfje ");
		sqlBff.append("   from ad3u.per_giv_detl  ");
		sqlBff.append("  where ryid = ? ");
		sqlBff.append("    and yfny between ? and ? ");
		sqlBff.append("    and fsyy = '2' ");
		sqlBff.append("    and fflb = 'A' ");
		
		this.sql.setSql(sqlBff.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, qsny);
		this.sql.setString(3, hfjbny);
		ds_temp = this.sql.executeQuery();
		bfje = ds_temp.getDouble(0, "bfje");
		
		rdo.put("bfje", bfje);
		return rdo;
	}
	
	/**
	 * 进入遗属新增情况查询页面
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-1-9
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public final DataObject fwdSuppAddQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		
		
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 查询遗属新增情况
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-1-13
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public final DataObject querySuppAddInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dsSuppInfo, ds, dsSZInfo, dsStd;
		StringBuffer sqlBF = new StringBuffer();
		String qsny, zzny, szryid, szsfzhm, szxm, dqffny, jbjgid;
		String ryid, dwdjid, dwmc, dwbh, sqlSzxx, yslb;
		double bfje, dqje;
		String szzfrylb, dfjgid, dfjgmc, dfjgbh;
		HashMap<String, String[]> dfjgMap = new HashMap<String, String[]>();// 代发机构Map
		String[] dfjgInfo;
		String dacfd; 
		
		String querylogid = QueryLogTool.saveQueryLog("新增遗属信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		qsny = para.getDateToString("qsny", "yyyyMM");
		zzny = para.getDateToString("zzny", "yyyyMM");
		jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));
        //淮南新增遗属类别查询条件 ysf 2018-10-27
		yslb = para.getString("yslb","");	

		String jbr = para.getString("yhid", ""); // 济南增加经办人  add gds 2019.4.29
        
		// 修改传入起始、终止年月判断（包括为空判断和起始年月大于终止年月判断）mp
		SiTools.checkQsZZny(qsny, zzny);

		// 取经办机构下在传入年月办理增员的遗属信息
		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.xm, p.shbzhm, p.yhzh, c.yslb zfrylb,   ");
		sqlBF.append("        p.dyxsksny, b.jtzz, b.hkxz, b.lxrxm, b.lxrdh,  ");
		sqlBF.append("        p.dwdjid, p.yhzh, c.swryid, c.gygx, p.xb,  ");
		sqlBF.append("        to_char(a.blzysj, 'yyyyMMdd') blzyrq, p.csrq,  ");
		sqlBF.append("        to_char(a.blzysj, 'yyyyMM') ffny, p.dfjgid,  ");
		sqlBF.append("        to_char(p.dyspsj, 'yyyyMMdd') fhrq, c.dqzfje, p.dyffzt, p.dyspr  ");
		sqlBF.append("   from ad3u.per_info p, ");
		sqlBF.append("        ad3u.supp_info c, ");
		sqlBF.append("        ad3u.per_reg a,  ");
		sqlBF.append("        biuv.person b   ");
		sqlBF.append("  where p.ryid = c.ryid  ");
		sqlBF.append("    and p.dqdydjid = a.dydjid ");
		sqlBF.append("    and p.ryid = b.ryid  ");
		sqlBF.append(" 	  and to_char(a.blzysj, 'yyyyMM') between ? and ?  ");
		sqlBF.append(" 	  and p.sszfrq = 'B'  ");
		sqlBF.append("    and a.jbjgid in (" + jbjgid + ") ");
        if(yslb != null && !"".equals(yslb)){
        	sqlBF.append("    and c.yslb in ("+HsuTools.replaceC2QCQ(yslb)+") ");
        }
		if (jbr != null && !"".equals(jbr)) {
			sqlBF.append("    and p.dyspr = '" + jbr + "' ");
		}
		this.sql.setSql(sqlBF.toString());

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsny);
		this.sql.setString(2, zzny);
		dsSuppInfo = this.sql.executeQuery();

		// 查询死者信息
		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.shbzhm, p.xm, e.ltxlb zfrylb ");
		sqlBF.append("   from ad3u.per_reg r, ");
		sqlBF.append("        ad3u.per_info p, ");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("  where p.dqdydjid = r.dydjid ");
		sqlBF.append("    and p.ryid = e.ryid ");
		sqlBF.append("    and p.ryid = ? ");
		sqlBF.append("    and r.bljyyy = '401' ");
		sqlSzxx = sqlBF.toString();

		for (int i = 0; i < dsSuppInfo.rowCount(); i++) {
			// 初始化定期金额
			dqje = 0;

			ryid = dsSuppInfo.getString(i, "ryid");
			dwdjid = dsSuppInfo.getString(i, "dwdjid");
			szryid = dsSuppInfo.getString(i, "swryid");
			dfjgid = dsSuppInfo.getString(i, "dfjgid");
			String dyxsksny = dsSuppInfo.getString(i, "dyxsksny");

			// 查询待遇最小年月
			sqlBF.setLength(0);
			sqlBF.append(" select min(qsny) qsny ");
			sqlBF.append("   from (select a.qsny ");
			sqlBF.append("           from ad3u.per_giv_month_std a ");
			sqlBF.append("          where a.ryid = ? ");
			sqlBF.append("            and ? between qsny and nvl(zzny, '205012')) ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, dyxsksny);
			ds = this.sql.executeQuery();
			dqffny = ds.getString(0, "qsny");

			// 若不存在定期待遇和暂停，则定期待遇为0
			if (dqffny != null && !"".equals(dqffny)) {
				// 查询定期待遇
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(btje), 0) dqje ");
				sqlBF.append("   from ad3u.per_giv_month_std ");
				sqlBF.append("  where ryid = ? ");
				sqlBF.append("    and ? between qsny and nvl(zzny, '205012') ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				this.sql.setString(2, dyxsksny);

				dsStd = this.sql.executeQuery();
				dqje = dsStd.getDouble(0, "dqje");
			}

			// 将定期发放起始年月放入数据集合
			dsSuppInfo.put(i, "dqffny", dqffny);

			// 查询补发(定期待遇最小年月之前的补发，若已待遇终止，则取所有补发)
			if (dqffny == null || "".equals(dqffny)) {
				dqffny = "204912";
			}

			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(p.btje), 0) bfje ");
			sqlBF.append("   from ad3u.per_giv_detl p  ");
			sqlBF.append("  where p.fflb = 'A' ");
			sqlBF.append("    and p.fsyy = '2' ");
			sqlBF.append("    and p.ryid = ?  ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();

			bfje = ds.getDouble(0, "bfje");

			// 淮南 新增档案存放地列 -QK 20190710
			dsSuppInfo.put(i, "dacfd", AdTools.getPerCmpl(ryid, "DACFD", ""));
			// end -QK 20190710

			
			// 查询单位
			this.sql.setSql(" select dwbh, cbdwmc dwmc from si3u.orgn_reg where dwdjid = ? ");
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();
			dwbh = "";
			dwmc = "";
			if (ds.rowCount() > 0) {
				dwbh = ds.getString(0, "dwbh");
				dwmc = ds.getString(0, "dwmc");
			}

			// 查询死者信息
			this.sql.setSql(sqlSzxx);
			this.sql.setString(1, szryid);
			dsSZInfo = sql.executeQuery();

			szsfzhm = "";
			szxm = "";
			szzfrylb = "";
			if (dsSZInfo.rowCount() == 1) {
				szsfzhm = dsSZInfo.getString(0, "shbzhm");
				szxm = dsSZInfo.getString(0, "xm");
				szzfrylb = dsSZInfo.getString(0, "zfrylb");

				szsfzhm = (szsfzhm == null) ? "" : szsfzhm;
				szxm = (szxm == null) ? "" : szxm;
				szzfrylb = (szzfrylb == null) ? "" : szzfrylb;
			}

			dfjgmc = "";
			dfjgbh = "";
			dfjgInfo = new String[2];
			if (!dfjgMap.containsKey(dfjgid)) {
				this.sql.setSql(" select a.dfjgmc, dfjgbh from be3u.provide_natl a where a.dfjgid = ? ");
				this.sql.setString(1, dfjgid);
				ds = this.sql.executeQuery();
				if (ds.rowCount() > 0) {
					dfjgmc = ds.getString(0, "dfjgmc");
					dfjgbh = ds.getString(0, "dfjgbh");
				}
				dfjgInfo[0] = dfjgbh;
				dfjgInfo[1] = dfjgmc;
				dfjgMap.put(dfjgid, dfjgInfo);
			} else {
				dfjgInfo = (String[]) dfjgMap.get(dfjgid);
			}
			dfjgbh = dfjgInfo[0];
			dfjgmc = dfjgInfo[1];

			dsSuppInfo.put(i, "szzfrylb", szzfrylb);
			dsSuppInfo.put(i, "dfjgmc", dfjgmc);
			dsSuppInfo.put(i, "dfjgbh", dfjgbh);

			dsSuppInfo.put(i, "dqje", dqje);
			dsSuppInfo.put(i, "bfje", bfje);
			dsSuppInfo.put(i, "dwbh", dwbh);
			dsSuppInfo.put(i, "dwmc", dwmc);
			dsSuppInfo.put(i, "szsfzhm", szsfzhm);
			dsSuppInfo.put(i, "szxm", szxm);
		}

		dsSuppInfo = HsuTools.genSysUserDataStore(dsSuppInfo, "dyspr", "dysprbh", "dysprxm");

		dsSuppInfo = dsSuppInfo.sort("blzyrq,shbzhm,dwbh");
		rdo.put("dsSuppInfo", dsSuppInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsSuppInfo.rowCount());

		dsSuppInfo = null;
		dsSZInfo = null;
		ds = null;
		sqlBF = null;
		return rdo;
	}

	/**
	 * 方法简介.退休增员明细查询
	 * 
	 * @author 杨绍智 2015-1-8
	 * @since-2016.3.23.wb.modify.1、减少查询人员时的表关联数量，不在关联单位表.2、考虑到增员明细不是查询所有人，不再使用将整个单位的数据查出来缓存再找的方式，直接按人进行查询
	 */
	public DataObject queryTxzymxInfo(final DataObject para) throws Exception {
		String zfrylb, jbjgid, blzyyy, cxyfhbz, fhr, qsrq, zzrq, fhqsrq, fhzzrq,dyfhqsrq,dyfhzzrq;
		double stjfnx, sjjfnx, zjfnx;
		DataStore ds = new DataStore(), dsOrgn, dsPer, xzbzDs, dsStd, ds_bf, ds_csbz, ds_sf, ds_ndy, ds_txz;
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String ryid, xzbz, txzbh = "";
		String fhrSql, fhrqSql, dyfhrqSql;
		String jdid; // add xiagn 20200213
		double txj = 0, zfbt = 0, bfje = 0, ndyje = 0, ylj, zynj;
		int maxxh = 0;
		String dacfd;
		String cxwfhrybz;//用来控制查询流程中走完审批没有复核的人员 滨州现在用
		
		String querylogid = QueryLogTool.saveQueryLog("退休增员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		jbjgid = para.getString("jbjgid", "");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		blzyyy = para.getString("blzyyy");
		fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		jdid = para.getString("jdid", "");// add xiagn 20200213
		// 增加传入字段dyfhqsrq 的判断 add by blp
		if (para.containsKey("dyfhqsrq")) {
			dyfhqsrq = para.getDateToString("dyfhqsrq", "yyyyMMdd");
		} else {
			dyfhqsrq = "";
		}
		if (para.containsKey("dyfhzzrq")) {
			dyfhzzrq = para.getDateToString("dyfhzzrq", "yyyyMMdd");
		} else {
			dyfhzzrq = "";
		}
		zfrylb = para.getString("zfrylb");
		fhr = para.getString("yhid", "");
		String dyfhrid = para.getString("dyfhrid", "");   // add by gd 2020-04-23 增加dyfhr字段查询，上面的fhr是dyspr
		cxyfhbz = para.getString("cxyfhbz", "false");
		cxwfhrybz = para.getString("cxwfhrybz", "false");
		xzbzDs = getBillXzbzDs().getDataStore("xzbzds");
		
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		blzyyy = HsuTools.replaceC2QCQ(blzyyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		// modi by guanll 2016.12.15 去掉fhqsrq、fhzzrq赋初始值部分 这样才可以查出未复核的人员
		// 如果复核日期为空，就不加复核日期的限制，这样可以查出未复核的人员
//		if (fhqsrq == null || "".equals(fhqsrq)) {
//			fhqsrq = "19500101";
//		}
//		if (fhzzrq == null || "".equals(fhzzrq)) {
//			fhzzrq = "25001231";
//		}
		fhrSql = "";
		if (fhr != null && !"".equals(fhr)) {
			fhrSql = " and a.dyspr = '" + fhr + "' ";
		}

		fhrqSql = "";
		if ((fhqsrq != null && !"".equals(fhqsrq))
				&& (fhzzrq != null && !"".equals(fhzzrq))) {
			fhrqSql = "and to_char(a.dyspsj, 'yyyyMMdd') between '" + fhqsrq
					+ "' and '" + fhzzrq + "'";
		}
		//增加复核日期判断 --add by blp 20160907
		dyfhrqSql = "";
		if ((dyfhqsrq != null && !"".equals(dyfhqsrq))
				&& (dyfhzzrq != null && !"".equals(dyfhzzrq))) {
			dyfhrqSql = "and to_char(a.dyfhsj, 'yyyyMMdd') between '"
					+ dyfhqsrq + "' and '" + dyfhzzrq + "'";
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		// 查询有养老支付人员的单位
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.dwbh, a.cbdwmc, a.cbdwxz, c.jjlx  ");
		sqlBF.append("   from si3u.orgn_reg a, biu.orgn c ");
		sqlBF.append("  where a.dwid = c.dwid ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   a.jbjgid in (" + jbjgid + ") ");
		}
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid) ");
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		dsOrgn = this.readonlysql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, a.dyffzt, ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz, ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq, ");
		sqlBF.append("        ? dwbh, ? cbdwmc, ? cbdwxz, a.dyxsksny, a.yhzh, ");
		sqlBF.append("        e.sjjfnx, e.stjfnx, 0 zjfnx, '' cjgzrq, a.dylqlb, ");
		sqlBF.append("        b.rydjid, a.dfjglb, '' dfjgbh, '' dfjgmc, a.shbzhm, ");
		sqlBF.append("        0 bfje, dyspr, dyspsj, ? jjlx, e.dacsrq, e.jfbl, ");
		sqlBF.append("        e.tgyy, a.dyfhr, a.xm, a.xb, a.csrq,  ");
		sqlBF.append("        p.grsf, p.zyjszwjb, a.xzzw, p.gjzyzgdj, a.ygxs,   ");
		sqlBF.append("        p.lxrdh lxdh, p.txdz, e.cjgzrq, a.dfjgid, ");
		sqlBF.append("        a.sqid, a.jdid, e.tsgzbs, e.tsgznx, e.dacsrq, ");//add by gzh 20161114 增加查询特殊工种标识、特殊工种年限等。// 增加档案出生日期的查询展示 add by zhanghao 2018.02.09
		sqlBF.append("        e.jzgzj, p.sjhm ");//add by wbj 20180313 增加军转干职级  gzh mod 20180413 增加手机号码
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        biuv.person  p ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.ryid = p.ryid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and a.dwdjid = ? ");
		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   b.jbjgid in (" + jbjgid + ") ");
		}
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}
		if (jdid != null && !"".equals(jdid)) { //add xiagn 20200213
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append(" and a.dyspbz = '1' ");
		}
		if("false".equals(cxwfhrybz)){
		    sqlBF.append(fhrqSql);
			sqlBF.append(dyfhrqSql);
		}
		sqlBF.append(fhrSql);
		if (dyfhrid != null && !"".equals(dyfhrid)) {
			sqlBF.append(" and a.dyfhr = '" + dyfhrid + "' ");
		}

		sqlBF.append(" union all ");
		sqlBF.append(" select b.dydjid, a.ryid, e.yslb zfrylb, '' ltxrq, a.dyffzt, ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz, ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq, ");
		sqlBF.append("        ? dwbh, ? cbdwmc, ? cbdwxz, a.dyxsksny, a.yhzh, ");
		sqlBF.append("        0 sjjfnx, 0 stjfnx, 0 zjfnx, '' cjgzrq, a.dylqlb, ");
		sqlBF.append("        b.rydjid, a.dfjglb, '' dfjgbh, '' dfjgmc, a.shbzhm, ");
		sqlBF.append("        0 bfje, dyspr, dyspsj, ? jjlx, '' dacsrq, 0 jfbl,  ");
		sqlBF.append("        '' tgyy, a.dyfhr, a.xm, a.xb, a.csrq,  ");
		sqlBF.append("        p.grsf, p.zyjszwjb, a.xzzw, p.gjzyzgdj, a.ygxs,   ");
		sqlBF.append("        p.lxrdh lxdh, p.txdz, '' cjgzrq, a.dfjgid, ");
		sqlBF.append("        a.sqid, a.jdid, '' tsgzbs, 0 tsgznx, '' dacsrq, ");//add by gzh 增加查询街道社区银行账号。// 增加档案出生日期的查询展示(遗属的置为空) add by zhanghao 2018.02.09
		sqlBF.append("        '' jzgzj, p.sjhm  ");//add by wbj 20180313 增加军转干职级  gzh mod 20180413 增加查询手机号码
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info e, ");
		sqlBF.append("        biuv.person  p ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.ryid = p.ryid ");
		sqlBF.append("    and a.sszfrq = 'B' ");
		sqlBF.append("    and a.dwdjid = ? ");
		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   b.jbjgid in (" + jbjgid + ") ");
		}
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.yslb in (").append(zfrylb).append(") ");
		}
		if (jdid != null && !"".equals(jdid)) { //add xiagn 20200213
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append(" and a.dyspbz = '1' ");
		}
		if("false".equals(cxwfhrybz)){
			sqlBF.append(fhrqSql);
			sqlBF.append(dyfhrqSql);
		}
		sqlBF.append(fhrSql);
		if (dyfhrid != null && !"".equals(dyfhrid)) {
			sqlBF.append(" and a.dyfhr = '" + dyfhrid + "' ");
		}
		String perInfoSql = sqlBF.toString();// 查询人员信息的sql
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) txj, ");
		for (int m = 0, len = xzbzDs.rowCount(); m < len; m++) {
			xzbz = xzbzDs.getString(m, "code");
			sqlBF.append("    nvl(sum(decode(xzbz,'" + xzbz
					+ "', btje, 0)), 0)  txj" + xzbz + ",");
		}
		sqlBF.append("        nvl(sum(decode(btbh, 'B1F3', btje, 'A1F3', btje, 0)),0) zfbt, ");// add.yxt.20140620.增加查询住房补贴。威海需求【WHXM-606】
		sqlBF.append("        nvl(sum(decode(btbh,'B305', btje, 0)),0) zynj, ");// gzh mod 20170413 潍坊:职业年金跟养老金分开展示，职业年金+养老金=退休金。
		sqlBF.append("        nvl(sum(decode(btbh,'B305', 0, btje)),0) ylj ");//养老金
		sqlBF.append("   from ad3u.per_giv_month_std s");
		sqlBF.append("	where s.ryid = ? ");
		sqlBF.append("	  and (select min(a.qsny) from ad3u.per_giv_month_std a where a.ryid = s.ryid) between s.qsny and nvl(s.zzny, '205012') ");
		String txjSql = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) bfje ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.ryid = ? ");
		sqlBF.append("    and p.fsyy = '2' ");
		sqlBF.append("    and p.fflb = 'A'  ");
		String bfSql = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) ndyje ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.ryid = ? ");
		sqlBF.append("    and p.fflb = 'D'  ");// 年待遇
		sqlBF.append("    and p.zdlsh is null  ");
		String ndySql1 = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) ndyje ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.ryid = ? ");
		sqlBF.append("    and p.fflb = 'D'  ");// 年待遇
		sqlBF.append("    and p.ffny between ? and ?  ");
		String ndySql2 = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select max(h.xh) maxxh ");
		sqlBF.append("   from ad3u.per_cal_his h ");
		sqlBF.append("  where h.ryid = ? ");
		String csbzSql = sqlBF.toString();
		
		//查询补充信息 add by gzh 20161114
		sqlBF.setLength(0);
		sqlBF.append(" select a.bcxmbh, a.bcxmz                  ");
		sqlBF.append("   from ad3u.per_cmpl a                        ");
		sqlBF.append("  where a.ryid = ?                             ");
		sqlBF.append("    and a.bcxmbh in ('SHBZ', 'JDJLTZSWH','TXDAH') ");
		String bcxx = sqlBF.toString();
		
		// wbj 20161115 滨州增加查询实发金额，查询detl 不限制发放类别和发生原因
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) sfje ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.ryid = ? ");
		sqlBF.append("    and p.fflb = 'A' ");
		String sfSql = sqlBF.toString();
		// wbj 20161115 end

		// add by gd 2020-03-06 增加查询退休证编号
		sqlBF.setLength(0);
		sqlBF.append(" select bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl ");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and bcxmbh = 'TXZBH' ");
		String txzSql = sqlBF.toString();
		
		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String cbdwmc = dsOrgn.getString(i, "cbdwmc");
			String dwdjid = dsOrgn.getString(i, "dwdjid");
			String dwbh = dsOrgn.getString(i, "dwbh");
			String cbdwxz = dsOrgn.getString(i, "cbdwxz");
			String jjlx = dsOrgn.getString(i, "jjlx");
			prompt.prompt("正在查询单位【" + cbdwmc + "】的人员信息...");

			// 1、查询基本信息。
			this.readonlysql.setSql(perInfoSql.toString());
			this.readonlysql.setString(1, dwbh);
			this.readonlysql.setString(2, cbdwmc);
			this.readonlysql.setString(3, cbdwxz);
			this.readonlysql.setString(4, jjlx);
			this.readonlysql.setString(5, dwdjid);
			this.readonlysql.setString(6, qsrq);
			this.readonlysql.setString(7, zzrq);
			this.readonlysql.setString(8, dwbh);
			this.readonlysql.setString(9, cbdwmc);
			this.readonlysql.setString(10, cbdwxz);
			this.readonlysql.setString(11, jjlx);
			this.readonlysql.setString(12, dwdjid);
			this.readonlysql.setString(13, qsrq);
			this.readonlysql.setString(14, zzrq);
			dsPer = this.readonlysql.executeQuery();
			
			if(dsPer.rowCount()==0){
				continue;
			}

			//对人员循环，补充其他信息
			for (int j = 0, length = dsPer.rowCount(); j < length; j++) {
				ryid = dsPer.getString(j, "ryid");
				
				// 查询退休金、住房补贴
				this.readonlysql.setSql(txjSql);
				this.readonlysql.setString(1, ryid);
				dsStd = this.readonlysql.executeQuery();
				txj = dsStd.getDouble(0, "txj");
				zfbt = dsStd.getDouble(0, "zfbt");
				zynj = dsStd.getDouble(0, "zynj");
				ylj = dsStd.getDouble(0, "ylj");
				
				dsPer.put(j, "txj", txj);
				dsPer.put(j, "zfbt", zfbt);
				dsPer.put(j, "txjsbff", MathUtil.round(txj - zfbt, 2));
				dsPer.put(j, "zynj", zynj);
				dsPer.put(j, "ylj", ylj);

				stjfnx = dsPer.getDouble(j, "stjfnx");
				sjjfnx = dsPer.getDouble(j, "sjjfnx");
				// 由于存在四舍五入的问题，故总的年限如果等于视同实际缴费年限保留两位小数之后的和，那么和实际上的总年限就会有误差。所有对这个地方进行了更改
				zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);
				dsPer.put(j, "zjfnx", zjfnx);
				
				// 查询补发
				this.readonlysql.setSql(bfSql);
				this.readonlysql.setString(1, ryid);
				ds_bf = this.readonlysql.executeQuery();
				bfje = ds_bf.getDouble(0, "bfje");
				dsPer.put(j, "bfje", bfje);
				
				// 查询年待遇 add by guanll 2018.04.09 泰安东平要对数，项目同事hold不住，给他加上年待遇
				this.readonlysql.setSql(ndySql1);
				this.readonlysql.setString(1, ryid);
				ds_ndy = this.readonlysql.executeQuery();
				ndyje = ds_ndy.getDouble(0, "ndyje");
				if(ndyje == 0){// 防止退休转在职之后数据取多
					this.readonlysql.setSql(ndySql2);
					this.readonlysql.setString(1, ryid);
					this.readonlysql.setString(2, qsrq.substring(0, 6));
					this.readonlysql.setString(3, zzrq.substring(0, 6));
					ds_ndy = this.readonlysql.executeQuery();
					ndyje = ds_ndy.getDouble(0, "ndyje");
				}
				dsPer.put(j, "ndyje", ndyje);
				
				// wbj 20161115 查询实发 滨州用
				this.readonlysql.setSql(sfSql);
				this.readonlysql.setString(1, ryid);
				ds_sf = this.readonlysql.executeQuery();
				if(ds_sf.rowCount() > 0){
					dsPer.put(j, "sfje", ds_sf.getDouble(0, "sfje"));
				} else {
					dsPer.put(j, "sfje", 0);
				}
				// wbj 20161115  end
				
				//淮南新增 档案存放地列 QK 20190710
				dsPer.put(j, "dacfd", AdTools.getPerCmpl(ryid, "DACFD", ""));
				// end -QK 20190710

				// 重算标志
				this.readonlysql.setSql(csbzSql);
				this.readonlysql.setString(1, ryid);
				ds_csbz = this.readonlysql.executeQuery();
				maxxh = ds_csbz.getInt(0, "maxxh");
				if (maxxh > 1) {
					dsPer.put(j, "csbz", "1");
				} else {
					dsPer.put(j, "csbz", "0");
				}
				
				String shbz = "", jdjltzswh = "", txdah = "";
				//查询补充信息		
				this.readonlysql.setSql(bcxx);
				this.readonlysql.setString(1, ryid);
				DataStore ds_bcxx = this.readonlysql.executeQuery();
				int find = ds_bcxx.find("bcxmbh == SHBZ");
				
				if(find >= 0){
					shbz = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "shbz", shbz);
				}else{
					dsPer.put(j, "shbz", shbz);
				}
				
				find = ds_bcxx.find("bcxmbh == JDJLTZSWH");
				if(find >= 0){
					jdjltzswh = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "jdjltzswh", jdjltzswh);
				}else{
					dsPer.put(j, "jdjltzswh", jdjltzswh);
				}
				
				find = ds_bcxx.find("bcxmbh == TXDAH");
				if(find >= 0){
					txdah = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "txdah", txdah);
				}else{
					dsPer.put(j, "txdah", txdah);
				}
				
				//查询退休时岗位 add by gzh 20161114
				this.readonlysql.setSql("select gw,nvl(zzny,'20501231') zzny from si3u.per_rec  where ryid = ?");
				this.readonlysql.setString(1, ryid);
				DataStore ds_gw = this.readonlysql.executeQuery();
				
				if(ds_gw.rowCount()>0){
					ds_gw.sortdesc("zzny");
					dsPer.put(j, "gw", ds_gw.getString(0, "gw"));
				}
				
				// add by gd 2020-03-06 增加退休证编号的查询
				txzbh = "";
				this.readonlysql.setSql(txzSql);
				this.readonlysql.setString(1, ryid);
				ds_txz = this.readonlysql.executeQuery();
				if (ds_txz.rowCount() > 0) {
					txzbh = ds_txz.getString(0, "bcxmz");
				}
				dsPer.put(j, "txzbh", txzbh);
			}
			if (dsPer.rowCount() > 0) {
				ds = ds.combineDatastore(dsPer);
			}
			prompt.moveForword(1);
		}

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		ds = ds.sort("dwbh");
		ds = AdTools.genDfjgxxDataStore(ds, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		ds = HsuTools.genSysUserDataStore(ds, "dyspr", "dysprbh", "dysprxm");
		ds = HsuTools.genSysUserDataStore(ds, "dyfhr", "dyfhrbh", "dyfhrxm");
		ds = HsuTools.genJdxxDataStore(ds, "jdid", "jdbh", "jdmc");
		ds = HsuTools.genSqxxDataStore(ds, "sqid", "sqbh", "sqmc");
		rdo.put("dsperinfo", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
		
		return rdo;
	}
	/**
	 * 查询退休增员明细 - 济南
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-3-14
	 * @since V1.0
	 * 
	 * @version 2.0 
	 * 	调整查询内容，删除多余的查询
	 *  按前台传入的待遇拨付月份查询拨付明细情况 modify.by.lp.20200707
	 */
	public DataObject queryTxzymxInfo_3701(final DataObject para) throws Exception {	
		
		String zfrylb, jbjgid, blzyyy, cxyfhbz, fhr, qsrq, zzrq, fhqsrq, fhzzrq,dyfhqsrq,dyfhzzrq;
		double stjfnx, sjjfnx, zjfnx;
		DataStore ds = new DataStore(), dsOrgn, dsPer, ds_csbz;
		DataStore dsTemp = new DataStore();
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String ryid, bfny, fhrSql, fhrqSql, dyfhrqSql;
		double bfzje, tnylj, wybt, zfbt, hmbt, twqtbt1, twqtbt2, tnbf, twbf, ycxtxbt, qnf;
		int maxxh = 0;
		String cxwfhrybz;//用来控制查询流程中走完审批没有复核的人员 滨州现在用
		
		String querylogid = QueryLogTool.saveQueryLog("退休增员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		jbjgid = para.getString("jbjgid", "");
		bfny = para.getDateToString("bfny", "yyyyMM");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		blzyyy = para.getString("blzyyy");
		fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		
		// 济南 增加dyfhbz 2019.3.14
		String dyfhbz = para.getString("dyfhbz", "");
		String dyfhsql = "";
		if (dyfhbz != null) {
			if ("1".equals(dyfhbz)) {
				dyfhsql = " and a.dyspbz = '1'";
			} else if ("0".equals(dyfhbz)) {
				dyfhsql = " and nvl(a.dyspbz,'*') <> '1'";
			}
		}
		String jdjg = para.getString("jdjg", ""); // 增加街道所在经办机构
		
		// 增加传入字段dyfhqsrq 的判断 add by blp
		if (para.containsKey("dyfhqsrq")) {
			dyfhqsrq = para.getDateToString("dyfhqsrq", "yyyyMMdd");
		} else {
			dyfhqsrq = "";
		}
		if (para.containsKey("dyfhzzrq")) {
			dyfhzzrq = para.getDateToString("dyfhzzrq", "yyyyMMdd");
		} else {
			dyfhzzrq = "";
		}
		zfrylb = para.getString("zfrylb");
		fhr = para.getString("yhid", "");
		cxyfhbz = para.getString("cxyfhbz", "false");
		cxwfhrybz = para.getString("cxwfhrybz", "false");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		blzyyy = HsuTools.replaceC2QCQ(blzyyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		// modi by guanll 2016.12.15 去掉fhqsrq、fhzzrq赋初始值部分 这样才可以查出未复核的人员
		// 如果复核日期为空，就不加复核日期的限制，这样可以查出未复核的人员
//		if (fhqsrq == null || "".equals(fhqsrq)) {
//			fhqsrq = "19500101";
//		}
//		if (fhzzrq == null || "".equals(fhzzrq)) {
//			fhzzrq = "25001231";
//		}
		fhrSql = "";
		if (fhr != null && !"".equals(fhr)) {
			fhrSql = " and a.dyspr = '" + fhr + "' ";
		}

		fhrqSql = "";
		if ((fhqsrq != null && !"".equals(fhqsrq))
				&& (fhzzrq != null && !"".equals(fhzzrq))) {
			fhrqSql = "and to_char(a.dyspsj, 'yyyyMMdd') between '" + fhqsrq
					+ "' and '" + fhzzrq + "'";
		}
		//增加复核日期判断 --add by blp 20160907
		dyfhrqSql = "";
		if ((dyfhqsrq != null && !"".equals(dyfhqsrq))
				&& (dyfhzzrq != null && !"".equals(dyfhzzrq))) {
			dyfhrqSql = "and to_char(a.dyfhsj, 'yyyyMMdd') between '"
					+ dyfhqsrq + "' and '" + dyfhzzrq + "'";
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		// 查询有养老支付人员的单位
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.dwbh, a.cbdwmc, a.cbdwxz, c.jjlx, a.jbjgid  ");
		sqlBF.append("   from si3u.orgn_reg a, biu.orgn c ");
		sqlBF.append("  where a.dwid = c.dwid ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   a.jbjgid in (" + jbjgid + ") ");
		}
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid) ");
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		dsOrgn = this.readonlysql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, a.dyffzt, ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz, ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq, ");
		sqlBF.append("        ? dwbh, ? cbdwmc, ? cbdwxz, a.dyxsksny, a.yhzh, ");
		sqlBF.append("        e.sjjfnx, e.stjfnx, 0 zjfnx, '' cjgzrq, a.dylqlb, ");
		sqlBF.append("        b.rydjid, a.dfjglb, '' dfjgbh, '' dfjgmc, a.shbzhm, ");
		sqlBF.append("        0 bfje, dyspr, dyspsj, ? jjlx, e.dacsrq, e.jfbl, ");
		sqlBF.append("        e.tgyy, a.dyfhr,a.dyfhsj, a.xm, a.xb, a.csrq,  ");
		sqlBF.append("        p.grsf, p.zyjszwjb, a.xzzw, p.gjzyzgdj, a.ygxs,   ");
		sqlBF.append("        p.lxrdh lxdh, p.txdz, e.cjgzrq, a.dfjgid, ");
		sqlBF.append("        a.sqid, a.jdid, e.tsgzbs, e.tsgznx, e.dacsrq, ");//add by gzh 20161114 增加查询特殊工种标识、特殊工种年限等。// 增加档案出生日期的查询展示 add by zhanghao 2018.02.09
		sqlBF.append("        e.jzgzj, p.sjhm ");//add by wbj 20180313 增加军转干职级  gzh mod 20180413 增加手机号码
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        biuv.person  p ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.ryid = p.ryid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and a.dwdjid = ? ");
		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   b.jbjgid in (" + jbjgid + ") ");
		}
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append(" and a.dyspbz = '1' ");
		}
		if("false".equals(cxwfhrybz)){
		    sqlBF.append(fhrqSql);
			sqlBF.append(dyfhrqSql);
		}
		sqlBF.append(fhrSql);
		sqlBF.append(dyfhsql); // add gds 
		if (jdjg != null && !"".equals(jdjg)) { // add gds 2019.5.5
			sqlBF.append(" and exists(select 1 from be3u.street_natl s where s.jdid = a.jdid and s.rsjid in ("
					+ HsuTools.replaceC2QCQ(jdjg) + ") )");
		}
		sqlBF.append(" union all ");
		sqlBF.append(" select b.dydjid, a.ryid, e.yslb zfrylb, '' ltxrq, a.dyffzt, ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz, ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq, ");
		sqlBF.append("        ? dwbh, ? cbdwmc, ? cbdwxz, a.dyxsksny, a.yhzh, ");
		sqlBF.append("        0 sjjfnx, 0 stjfnx, 0 zjfnx, '' cjgzrq, a.dylqlb, ");
		sqlBF.append("        b.rydjid, a.dfjglb, '' dfjgbh, '' dfjgmc, a.shbzhm, ");
		sqlBF.append("        0 bfje, dyspr, dyspsj, ? jjlx, '' dacsrq, 0 jfbl,  ");
		sqlBF.append("        '' tgyy, a.dyfhr,a.dyfhsj, a.xm, a.xb, a.csrq,  "); // add gds 增加待遇复核时间 2019.3.14
		sqlBF.append("        p.grsf, p.zyjszwjb, a.xzzw, p.gjzyzgdj, a.ygxs,   ");
		sqlBF.append("        p.lxrdh lxdh, p.txdz, '' cjgzrq, a.dfjgid, ");
		sqlBF.append("        a.sqid, a.jdid, '' tsgzbs, 0 tsgznx, '' dacsrq, ");//add by gzh 增加查询街道社区银行账号。// 增加档案出生日期的查询展示(遗属的置为空) add by zhanghao 2018.02.09
		sqlBF.append("        '' jzgzj, p.sjhm  ");//add by wbj 20180313 增加军转干职级  gzh mod 20180413 增加查询手机号码
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info e, ");
		sqlBF.append("        biuv.person  p ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.ryid = p.ryid ");
		sqlBF.append("    and a.sszfrq = 'B' ");
		sqlBF.append("    and a.dwdjid = ? ");
		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   b.jbjgid in (" + jbjgid + ") ");
		}
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.yslb in (").append(zfrylb).append(") ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append(" and a.dyspbz = '1' ");
		}
		if("false".equals(cxwfhrybz)){
			sqlBF.append(fhrqSql);
			sqlBF.append(dyfhrqSql);
		}
		sqlBF.append(fhrSql);
		sqlBF.append(dyfhsql); // add gds 
		if (jdjg != null && !"".equals(jdjg)) { // add gds 2019.5.5
			sqlBF.append(" and exists(select 1 from be3u.street_natl s where s.jdid = a.jdid and s.rsjid in ("
					+ HsuTools.replaceC2QCQ(jdjg) + ") )");
		}
		String perInfoSql = sqlBF.toString();// 查询人员信息的sql

		// 重算标志
		sqlBF.setLength(0);
		sqlBF.append(" select max(h.xh) maxxh ");
		sqlBF.append("   from ad3u.per_cal_his h ");
		sqlBF.append("  where h.ryid = ? ");
		String csbzSql = sqlBF.toString();
		
		//查询补充信息 add by gzh 20161114
		sqlBF.setLength(0);
		sqlBF.append(" select a.bcxmbh, a.bcxmz                  ");
		sqlBF.append("   from ad3u.per_cmpl a                        ");
		sqlBF.append("  where a.ryid = ?                             ");
		sqlBF.append("    and a.bcxmbh in ('SHBZ', 'JDJLTZSWH','TXDAH') ");
		String bcxx = sqlBF.toString();
		
		// 查询街道信息
		sqlBF.setLength(0);
		sqlBF.append(" select rsjid, jdbh, jdmc ");
		sqlBF.append("   from be3u.street_natl p  ");
		sqlBF.append("  where p.jdid = ? ");
		String jdSql = sqlBF.toString();

		// 查询统内养老金（不含年金养老金）
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) tnylj ");
		sqlBF.append("   from ad3u.per_giv_detl a ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and a.ffny = ? ");
		sqlBF.append("    and a.fsyy = '1' ");
		sqlBF.append("    and a.fflb = 'A' ");
		sqlBF.append(" 	  and a.btbh <> 'B305' "); // 职业年金养老金
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.giv_item b ");
		sqlBF.append("          where b.btbh = a.btbh ");
		sqlBF.append("            and b.btlb <> '956') "); // 限制是统筹内的
		String tnyljSql = sqlBF.toString();

		// 统外月补贴查询
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(a.btbh, 'B1M2', a.btje, 'H011', a.btje, 0)), 0) wybt, ");//物业补贴
		sqlBF.append("        nvl(sum(decode(a.btbh, 'B1M3', a.btje, 'H007', a.btje, 0)), 0) zfbt, ");//住房补贴
		sqlBF.append(" 		  nvl(sum(decode(a.btbh, 'B1M1', a.btje, 0)), 0) hmbt, ");//回民补贴
		sqlBF.append(" 		  nvl(sum(decode(a.btbh, 'B1M5', a.btje, 0)), 0) twqtbt1, ");//统筹外其它1
		sqlBF.append(" 		  nvl(sum(decode(a.btbh, 'B1M6', a.btje, 0)), 0) twqtbt2 ");//统筹外其它2
		sqlBF.append("   from ad3u.per_giv_detl a ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and a.ffny = ? ");
		sqlBF.append("    and a.fsyy = '1' ");
		sqlBF.append("    and a.fflb = 'A' ");
		sqlBF.append(" 	  and a.btbh in ('B1M1', 'B1M2', 'B1M3', 'B1M5', 'B1M6', 'H007', 'H011') ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.giv_item b ");
		sqlBF.append("          where b.btbh = a.btbh ");
		sqlBF.append("            and b.btlb = '956') ");// 限制统筹外
		String twybtSql = sqlBF.toString();

		// 补发查询：除了月待遇都需要限制填了单据且已经确认了
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(b.btlb, '956', 0, a.btje)), 0) tnbf, ");
		sqlBF.append("        nvl(sum(decode(b.btlb, '956', a.btje, 0)), 0) twbf ");
		sqlBF.append("   from ad3u.per_giv_detl a, ad3u.giv_item b ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and a.ffny = ? ");
		sqlBF.append("    and a.fsyy <> '1' ");
		sqlBF.append("    and a.fflb = 'A' ");
		sqlBF.append("    and a.btbh = b.btbh ");
		sqlBF.append(" 	  and a.btbh <> 'B305' ");
		sqlBF.append("    and exists (select '1' ");
		sqlBF.append("           from ad3u.bill_genl c ");
		sqlBF.append("          where c.djzt = '1' ");
		sqlBF.append("            and a.zdlsh = c.zdlsh) ");
		String bfcxSql = sqlBF.toString();

		// 一次性退休补贴(H791)和取暖费(B1M0,B1M4)
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(decode(a.fflb, 'C', a.btbh), 'H791', a.btje, 0)), 0) ycxtxbt, ");
		sqlBF.append("        nvl(sum(decode(decode(a.fflb, 'D', a.btbh), 'B1M0', a.btje, 'B1M4', a.btje, 0)), 0) qnf ");
		sqlBF.append("   from ad3u.per_giv_detl a ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and a.ffny = ? ");
		sqlBF.append("    and a.fflb in ('C', 'D') ");
		sqlBF.append(" 	  and a.btbh in ('H791', 'B1M0', 'B1M4') "); // 缩小查询范围
		sqlBF.append("    and exists (select '1' ");
		sqlBF.append("           from ad3u.bill_genl b ");
		sqlBF.append("          where b.djzt = '1' ");
		sqlBF.append("            and a.zdlsh = b.zdlsh) ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.giv_item c ");
		sqlBF.append("          where c.btbh = a.btbh ");
		sqlBF.append("            and c.btlb = '956') ");
		String ycxndySql = sqlBF.toString();

		// 是否改革后办法：退休时是否有个人账户养老金（个人部分） - A103
		sqlBF.setLength(0);
		sqlBF.append(" select 1 ");
		sqlBF.append("   from ad3u.per_giv_month_std a ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and a.btbh = 'A103' ");
		String sfgghbfSql = sqlBF.toString();

		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String cbdwmc = dsOrgn.getString(i, "cbdwmc");
			String dwdjid = dsOrgn.getString(i, "dwdjid");
			String dwbh = dsOrgn.getString(i, "dwbh");
			String cbdwxz = dsOrgn.getString(i, "cbdwxz");
			String jjlx = dsOrgn.getString(i, "jjlx");
			String jbjgiddw = dsOrgn.getString(i, "jbjgid");
			prompt.prompt("正在查询单位【" + cbdwmc + "】的人员信息...");

			// 1、查询基本信息。
			this.readonlysql.setSql(perInfoSql.toString());
			this.readonlysql.setString(1, dwbh);
			this.readonlysql.setString(2, cbdwmc);
			this.readonlysql.setString(3, cbdwxz);
			this.readonlysql.setString(4, jjlx);
			this.readonlysql.setString(5, dwdjid);
			this.readonlysql.setString(6, qsrq);
			this.readonlysql.setString(7, zzrq);
			this.readonlysql.setString(8, dwbh);
			this.readonlysql.setString(9, cbdwmc);
			this.readonlysql.setString(10, cbdwxz);
			this.readonlysql.setString(11, jjlx);
			this.readonlysql.setString(12, dwdjid);
			this.readonlysql.setString(13, qsrq);
			this.readonlysql.setString(14, zzrq);
			dsPer = this.readonlysql.executeQuery();
			
			if(dsPer.rowCount()==0){
				continue;
			}

			//对人员循环，补充其他信息
			for (int j = dsPer.rowCount() - 1; j >= 0; j--) {
				ryid = dsPer.getString(j, "ryid");
				dsPer.put(j, "jbjgid", jbjgiddw);

				bfzje = 0.0;
				tnylj = 0.0;
				wybt = 0.0;
				zfbt = 0.0;
				hmbt = 0.0;
				twqtbt1 = 0.0;
				twqtbt2 = 0.0;
				tnbf = 0.0;
				twbf = 0.0;
				ycxtxbt = 0.0;
				qnf = 0.0;

				//查询发放信息
				this.readonlysql.setSql(tnyljSql);
				this.readonlysql.setString(1, ryid);
				this.readonlysql.setString(2, bfny);
				dsTemp = this.readonlysql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					tnylj = dsTemp.getDouble(0, "tnylj");
				}

				this.readonlysql.setSql(twybtSql);
				this.readonlysql.setString(1, ryid);
				this.readonlysql.setString(2, bfny);
				dsTemp = this.readonlysql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					wybt = dsTemp.getDouble(0, "wybt");
					zfbt = dsTemp.getDouble(0, "zfbt");
					hmbt = dsTemp.getDouble(0, "hmbt");
					twqtbt1 = dsTemp.getDouble(0, "twqtbt1");
					twqtbt2 = dsTemp.getDouble(0, "twqtbt2");
				}

				this.readonlysql.setSql(bfcxSql);
				this.readonlysql.setString(1, ryid);
				this.readonlysql.setString(2, bfny);
				dsTemp = this.readonlysql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					tnbf = dsTemp.getDouble(0, "tnbf");
					twbf = dsTemp.getDouble(0, "twbf");
				}

				this.readonlysql.setSql(ycxndySql);
				this.readonlysql.setString(1, ryid);
				this.readonlysql.setString(2, bfny);
				dsTemp = this.readonlysql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					ycxtxbt = dsTemp.getDouble(0, "ycxtxbt");
					qnf = dsTemp.getDouble(0, "qnf");
				}
				bfzje = MathUtil.round(tnylj + wybt + zfbt + hmbt + twqtbt1
						+ twqtbt2 + tnbf + twbf + ycxtxbt + qnf, 2);

				dsPer.put(j, "bfzje", bfzje);
				dsPer.put(j, "tnylj", tnylj);
				dsPer.put(j, "wybt", wybt);
				dsPer.put(j, "zfbt", zfbt);
				dsPer.put(j, "hmbt", hmbt);
				dsPer.put(j, "twqtbt1", twqtbt1);
				dsPer.put(j, "twqtbt2", twqtbt2);
				dsPer.put(j, "tnbf", tnbf);
				dsPer.put(j, "twbf", twbf);
				dsPer.put(j, "ycxtxbt", ycxtxbt);
				dsPer.put(j, "qnf", qnf);

				// 是否改革后办法
				this.readonlysql.setSql(sfgghbfSql);
				this.readonlysql.setString(1, ryid);
				dsTemp = this.readonlysql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					dsPer.put(j, "sfgghbf", "是");
				} else {
					dsPer.put(j, "sfgghbf", "否");
				}

				// 街道信息
				String jdid = dsPer.getString(j, "jdid");
				if (jdid != null && !"".equals(jdid)) {
					this.readonlysql.setSql(jdSql);
					this.readonlysql.setString(1, jdid);
					DataStore dsjd = this.readonlysql.executeQuery();
					if (dsjd.rowCount() > 0) {
						dsPer.put(j, "rsjid", dsjd.getString(0, "rsjid"));
						dsPer.put(j, "jdbh", dsjd.getString(0, "jdbh"));
						dsPer.put(j, "jdmc", dsjd.getString(0, "jdmc"));
					}
				} 

				stjfnx = dsPer.getDouble(j, "stjfnx");
				sjjfnx = dsPer.getDouble(j, "sjjfnx");
				// 由于存在四舍五入的问题，故总的年限如果等于视同实际缴费年限保留两位小数之后的和，那么和实际上的总年限就会有误差。所有对这个地方进行了更改
				zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);
				dsPer.put(j, "zjfnx", zjfnx);
				
				// 重算标志
				this.readonlysql.setSql(csbzSql);
				this.readonlysql.setString(1, ryid);
				ds_csbz = this.readonlysql.executeQuery();
				maxxh = ds_csbz.getInt(0, "maxxh");
				if (maxxh > 1) {
					dsPer.put(j, "csbz", "1");
				} else {
					dsPer.put(j, "csbz", "0");
				}
				
				String shbz = "", jdjltzswh = "", txdah = "";
				//查询补充信息		
				this.readonlysql.setSql(bcxx);
				this.readonlysql.setString(1, ryid);
				DataStore ds_bcxx = this.readonlysql.executeQuery();
				int find = ds_bcxx.find("bcxmbh == SHBZ");
				
				if(find >= 0){
					shbz = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "shbz", shbz);
				}else{
					dsPer.put(j, "shbz", shbz);
				}
				
				find = ds_bcxx.find("bcxmbh == JDJLTZSWH");
				if(find >= 0){
					jdjltzswh = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "jdjltzswh", jdjltzswh);
				}else{
					dsPer.put(j, "jdjltzswh", jdjltzswh);
				}
				
				find = ds_bcxx.find("bcxmbh == TXDAH");
				if(find >= 0){
					txdah = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "txdah", txdah);
				}else{
					dsPer.put(j, "txdah", txdah);
				}
				
				//查询退休时岗位 add by gzh 20161114
				this.readonlysql.setSql("select gw,nvl(zzny,'20501231') zzny from si3u.per_rec  where ryid = ?");
				this.readonlysql.setString(1, ryid);
				DataStore ds_gw = this.readonlysql.executeQuery();
				
				if(ds_gw.rowCount()>0){
					ds_gw.sortdesc("zzny");
					dsPer.put(j, "gw", ds_gw.getString(0, "gw"));
				}
			}
			if (dsPer.rowCount() > 0) {
				ds = ds.combineDatastore(dsPer);
			}
			prompt.moveForword(1);
		}

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		ds = ds.sort("dwbh");
		ds = AdTools.genDfjgxxDataStore(ds, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		ds = HsuTools.genSysUserDataStore(ds, "dyspr", "dysprbh", "dysprxm");
		ds = HsuTools.genSysUserDataStore(ds, "dyfhr", "dyfhrbh", "dyfhrxm");
		ds = HsuTools.genSqxxDataStore(ds, "sqid", "sqbh", "sqmc");
		ds = HsuTools.genJbjgxxDataStore(ds, "jbjgid", "jbjgbh", "jbjgmc");

		rdo.put("dsperinfo", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.打印增员明细信息
	 * 
	 * @author 杨绍智 2015-1-12
	 */
	public DataObject queryAdTxzyInfo4Print(final DataObject para) throws Exception {
		String qsrq, zfrylb, xb, txrq, year, month, txj, dyxsksny,sum, sfjestr;
		DataStore ds;
		DataObject rdo = new DataObject();
		SPrinter printer = new SPrinter();
		int count;
		double txjnum=0.00,txjsum=0.00, sfje, sfjesum;// 实发金额 add by guanll 2017.02.10

		ds = para.getDataStore("dwzymxInfo");
		qsrq = para.getDateToString("fhqsrq", "yyyy.MM.dd");

		if (ds == null || ds.rowCount() == 0) {
			this.bizException("传入的打印信息数据为空！");
		}

		if (qsrq == null || "".equals(qsrq)) {
			this.bizException("传入的审批起始日期为空！");
		}

		// 查询合计行金额
		count = ds.rowCount();
		sfjesum = 0;
		for (int i = 0; i < count; i++) {
			xb = ds.getString(i, "xb");
			zfrylb = ds.getString(i, "zfrylb");
			txrq = ds.getDateToString(i, "ltxrq", "yyyy-MM-dd");
			txjnum = ds.getDouble(i, "txj");
			txjsum += txjnum; 
			txj = DataFormat.formatDouble(txjnum, 2);
			sfje = ds.getDouble(i, "sfje");
			sfjesum += sfje;
			sfjestr = DataFormat.formatDouble(sfje, 2);
			dyxsksny = DateUtil.dateToString(ds.getDate(i, "dyxsksny"), "yyyy-MM");
			if (zfrylb == null || "".equals(zfrylb)) {
				zfrylb = "";
			} else {
				zfrylb = zfrylb.substring(0, 2);
				if ("A1".equals(zfrylb)) {
					zfrylb = "离休";
				} else if ("A2".equals(zfrylb)) {
					zfrylb = "退休";
				} else if ("A3".equals(zfrylb)) {
					zfrylb = "退职";
				} else if ("A4".equals(zfrylb)) {
					zfrylb = "一次性退职";
				} else if ("B".equals(zfrylb.substring(0, 1))) {
					zfrylb = "遗属";
				}
			}

			ds.put(i, "xb", HsuTools.discode("XB", xb, ""));
			ds.put(i, "lb", zfrylb);
			ds.put(i, "txsj", txrq);
			ds.put(i, "txj", txj);
			ds.put(i, "sfje", sfjestr);
			ds.put(i, "dyxsksny", dyxsksny);
			ds.put(i, "xh", DataFormat.formatInt(i + 1));//转换xh格式 gzh mod 20161109
		}
		ds.setTypeList("xb:s,lb:s,txsj:s,txj:s,dyxsksny:s,xh:s");// gzh add 20161109
		sum = DataFormat.formatDouble(txjsum, 2);
		year = qsrq.substring(0, 4);
		month = qsrq.substring(5, 7);

		printer.putPara("year", year);
		printer.putPara("month", month);
		printer.putPara("sum", sum);//增加打印养老金合计 gzh add 20161109
		printer.putPara("sfjesum", DataFormat.formatDouble(sfjesum, 2));// 增加打印实发养老金合计 add by guanll 2017.02.10

		String title = year + "年" + month + "月份离退休人员增加明细表";
		printer.putPara("title1", title);
		printer.putDataStore(ds);//增加放入ds，支持txt打印 gzh add 20161109

		DataStoreLoader tb = new DataStoreLoader(ds);
		printer.putPara("Adtxzyinfo", tb);
		String dygs = "AdTxzyinfo";
		String printhtml = printer.print(this.getBizInstitution(), dygs);// 使得打印格式每页都有标题和页码  hmq mod 20170714

		rdo.put("printhtml", printhtml);
		return rdo;
	}

	/**
	 * 方法简介. 查询退休减员信息
	 * 
	 * @author 杨绍智 2015-1-13
	 */
	public DataObject queryTxjyInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, dyzzyy, zfrylb, jyqsrq ="",jyzzrq="";
		DataStore dsTxjyInfo = new DataStore();
		String jbjgid;
		
		String querylogid = QueryLogTool.saveQueryLog("退休减员情况", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		dyzzyy = para.getString("dyzzyy");
		zfrylb = para.getString("zfrylb");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String ryid = para.getString("ryid",""); //增加入参人员id --刘佳广 modify 2018年5月11日
		dyzzyy = HsuTools.replaceC2QCQ(dyzzyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		jbjgid = para.getString("jbjgid", "");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
        //增加减员起始日期和终止日期 zlj 2017-1-12
		if(para.containsKey("jyqsrq")){
			jyqsrq = para.getDateToString("jyqsrq", "yyyyMMdd");
		}
		if(para.containsKey("jyzzrq")){
			jyzzrq = para.getDateToString("jyzzrq", "yyyyMMdd");
		}
		
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		// TODO hsu还未实现
		// rightSql = Si3Tools.getDataRightSql(this.userid, "r",
		// Cp3Tools.replaceC2QCQ(Si3Tools.getSjjbjgByZfjbjg(this.jbjgqxfw,"101,102")));

		// 取经办机构下起始终止日期之间有减少人员的单位，查询减员人数（职工）--mod.yxt.20160108.per_reg与per_info的关联改为ryid,jgjgid限制per_reg上的
		sqlBF.setLength(0);
		sqlBF.append(" select r.dwdjid dfjgid, r.dwbh dfjgbh, r.cbdwmc dfjgmc, 'B' dfjglb, ");
		sqlBF.append("   	  count(distinct a.ryid) jyrs ");
		sqlBF.append("   from si3u.orgn_reg r, ");
		sqlBF.append("        ad3u.per_info a ,");
		sqlBF.append("        ad3u.per_reg x ");
		sqlBF.append("	where a.dfjglb = 'B' ");
		sqlBF.append("	  and a.ryid = x.ryid ");
		sqlBF.append("	  and a.dfjgid = r.dwdjid ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  x.jbjgid in (" + jbjgid + ") ");
		}

		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and x.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and a.zfrylb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and to_char(x.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ?  ");
		if (jyqsrq != null && !"".equals(jyqsrq)&&jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and x.jyrq  between "+jyqsrq+" and "+jyzzrq+"");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("	  and x.ryid = '" + ryid + "' ");
		}
		sqlBF.append("	group by r.dwdjid, r.dwbh, r.cbdwmc, dfjglb ");

		sqlBF.append("	union all ");

		// 取经办机构下当前月份有减少人员的代发机构，查询减员人数
		// TODO hsu还未实现
		// rightSql = Si3Tools.getDataRightSql(this.userid, "i",
		// this.jbjgqxfwForSql);

		sqlBF.append(" select n.dfjgid, n.dfjgbh, n.dfjgmc, 'G' dfjglb, ");
		sqlBF.append("   	  count(distinct a.ryid) jyrs ");
		sqlBF.append("   from be3u.provide_natl n, ");
		sqlBF.append("        be3u.inst_config i, ");
		sqlBF.append("        ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg x ");
		sqlBF.append("  where i.jgid = n.dfjgid ");
		sqlBF.append("    and i.jglx = 'G' ");
		sqlBF.append("	  and a.dfjglb = 'G' ");
		sqlBF.append("	  and a.dfjgid = n.dfjgid ");
		sqlBF.append("    and a.ryid = x.ryid ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  x.jbjgid in (" + jbjgid + ") ");
		}
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and x.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and a.zfrylb in (").append(zfrylb).append(") ");
		}
		sqlBF.append("	  and to_char(x.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ?  ");
		if (jyqsrq != null && !"".equals(jyqsrq)&&jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and x.jyrq  between "+jyqsrq+" and "+jyzzrq+"");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("	  and x.ryid = '" + ryid + "' ");
		}
		sqlBF.append("	group by n.dfjgid, n.dfjgbh, n.dfjgmc, dfjglb ");

		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		this.readonlysql.setString(1, qsrq);
		this.readonlysql.setString(2, zzrq);
		this.readonlysql.setString(3, qsrq);
		this.readonlysql.setString(4, zzrq);

		dsTxjyInfo = this.readonlysql.executeQuery();

		int num = dsTxjyInfo.rowCount();
		DataStore dsnum = new DataStore();
		String strnum = "共【" + num + "】行";
		dsnum.put(0, "num", strnum);
		rdo.put("dsnum", dsnum);
		rdo.put("dstxjyinfo", dsTxjyInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsTxjyInfo.rowCount());

		return rdo;
	}

	/**
	 * 方法简介. 退休减员明细查询
	 * 
	 * @author 杨绍智 2015-1-13
	 */
	public DataObject queryTxjyInfoByDfjg(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, dyzzyy, zfrylb, ryid, dfjglb, dfjgid, jyrq, maxNy;
		DataStore ds = new DataStore(), dsTxjyInfo = new DataStore();
		String sqlNatl, sqlMaxNy, sqlTxj, sqlKj, sqlNatl_ys, sszfrq, sqlZtsj;
		double txj, ddwff, kjje, zhfh, szf, fxj, jtbt, txj2, zynj, ylj, sjffje;
		String dfjgbh, dfjgmc, jjlx, ztny = "";
		String jbjgid, jyqsrq = "", jyzzrq="", jdid;
		double stjfnx, sjjfnx, zjfnx;
		double ycxjjf;// 一次性救济费。

		// 接参数
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjglb = para.getString("dfjglb");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		dyzzyy = para.getString("dyzzyy");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		dyzzyy = HsuTools.replaceC2QCQ(dyzzyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jbjgid = para.getString("jbjgid", "");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		jjlx = para.getString("jjlx", "");
		ryid = para.getString("ryid", "");
		jdid = para.getString("jdid", "");
		//增加减员起始日期和终止日期 zlj 2017-1-12
		if(para.containsKey("jyqsrq")){
			jyqsrq = para.getDateToString("jyqsrq", "yyyyMMdd");
		}
		if(para.containsKey("jyzzrq")){
			jyzzrq = para.getDateToString("jyzzrq", "yyyyMMdd");
		}
		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("传入代发机构ID为空！");
		}
		if (dfjglb == null || "".equals(dfjglb)) {
			this.bizException("传入代发机构类别为空！");
		}

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}
		

		// TODO hsu还未实现
		// rightSql = Si3Tools.getDataRightSql(this.userid, "b",
		// Cp3Tools.replaceC2QCQ(Si3Tools.getSjjbjgByZfjbjg(this.jbjgqxfw,"101,102")));

		// 查询符合条件的办理减员的养老人员登记信息(职工)--mod.yxt.20160108.per_reg与per_info的关联改为ryid
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, '' xm, '' shbzhm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszwjb, '' xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, ? dfjgbh, ? dfjgmc, a.shbzhm, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  e.stjfnx, e.sjjfnx, e.dacsrq, b.jbjgid, a.jdid  "); //增加 jbjgid zkj add 2017/11/27 
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'A' ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  b.jbjgid in (" + jbjgid + ") ");
		} else {
			// sqlBF.append("    and  ").append(rightSql);
		}
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and b.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and a.dfjglb = ? ");
		sqlBF.append("	  and a.dfjgid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
		if (jyqsrq != null && !"".equals(jyqsrq) && jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and b.jyrq between "+jyqsrq+" and "+jyzzrq+" ");
		}
		if (jjlx != null && !"".equals(jjlx)) {
			sqlBF.append("	  and c.jjlx in(" + HsuTools.replaceC2QCQ(jjlx)
					+ ") ");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("	  and e.ryid = '" + ryid + "' ");
		}
		if (jdid != null && !"".equals(jdid)) {
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		this.readonlysql.setString(1, dfjgbh);
		this.readonlysql.setString(2, dfjgmc);
		this.readonlysql.setString(3, dfjglb);
		this.readonlysql.setString(4, dfjgid);
		this.readonlysql.setString(5, qsrq);
		this.readonlysql.setString(6, zzrq);

		DataStore dsTxjyInfo_zg = this.readonlysql.executeQuery();

		// 查询符合条件的办理减员的养老人员登记信息(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, s.yslb zfrylb,  b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, '' xm, '' shbzhm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszwjb, '' xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, ? dfjgbh, ? dfjgmc, a.shbzhm, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  '' stjfnx, '' sjjfnx, '' dacsrq, b.jbjgid, a.jdid "); //增加jbjgid查询   --张凯杰  add 2017/11/27
	 	sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info s, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = s.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'B' ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  b.jbjgid in (" + jbjgid + ") ");
		} else {
			// sqlBF.append("    and  ").append(rightSql);
		}
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and b.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and s.yslb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and a.dfjglb = ? ");
		sqlBF.append("	  and a.dfjgid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
		if (jyqsrq != null && !"".equals(jyqsrq) && jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and b.jyrq between "+jyqsrq+" and "+jyzzrq+" ");
		}
		if (jjlx != null && !"".equals(jjlx)) {
			sqlBF.append("	  and c.jjlx in(" + HsuTools.replaceC2QCQ(jjlx)
					+ ") ");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("	  and s.ryid = '" + ryid + "' ");
		}
		if (jdid != null && !"".equals(jdid)) {
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, dfjgbh);
		this.readonlysql.setString(2, dfjgmc);
		this.readonlysql.setString(3, dfjglb);
		this.readonlysql.setString(4, dfjgid);
		this.readonlysql.setString(5, qsrq);
		this.readonlysql.setString(6, zzrq);

		DataStore dsTxjyInfo_ys = this.readonlysql.executeQuery();

		// 取人员基本信息的sql（职工）
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz, e.cjgzrq, a.grbh ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlNatl = sqlBF.toString();

		// 取人员基本信息的sql(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz, a.grbh ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlNatl_ys = sqlBF.toString();

		// 取最大拨付年月的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(max(zzny), '204912') maxny ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlMaxNy = sqlBF.toString();

		// 查询退休金的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) txj, ");
		sqlBF.append(" 	      nvl(sum(decode(b.btlb, '901', a.btje, 0)), 0) ddwff, ");
		sqlBF.append("        nvl(sum(decode(a.xzbz, '106', a.btje, 0)), 0) jtbt, ");
		sqlBF.append("        nvl(sum(decode(b.btbh, 'B305', a.btje, 0)), 0) zynj, ");//增加查询职业年金 gzh mod 20180413
		sqlBF.append("        nvl(sum(decode(b.btbh, 'B305', 0, a.btje)), 0) ylj ");//增加查询养老金 gzh mod 20180413
		sqlBF.append("   from ad3u.per_giv_month_std a,  ");
		sqlBF.append(" 	      ad3u.giv_item b ");
		sqlBF.append("  where a.btbh = b.btbh ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and ? between a.qsny and nvl(a.zzny,'204912') ");
		sqlTxj = sqlBF.toString();

		// 扣减金额
		// 修正因录入发放月份有负数而产生了正数扣减而导致的计算错误 modify.zxz.20170726
		sqlBF.setLength(0);
		sqlBF.append("select nvl(sum(btje), 0) kjje ");
		sqlBF.append("  from (select nvl(a.btje, 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje < 0 ");
		sqlBF.append("           and a.fflb in ('A', 'D') ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("        union all ");
		sqlBF.append("        select nvl((a.btje * 2), 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje > 0 ");
		sqlBF.append("           and a.fflb = 'A' ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("           and exists ");
		sqlBF.append("         (select 1 ");
		sqlBF.append("                  from ad3u.per_giv_month_std c ");
		sqlBF.append("                 where c.ryid = a.ryid ");
		sqlBF.append("                   and a.btbh = c.btbh ");
		sqlBF.append("                   and a.xzbz = c.xzbz ");
		sqlBF.append("                   and c.btje < 0 ");
		sqlBF.append("                   and a.btje = - (c.btje) ");
		sqlBF.append("                   and c.zzny = ? )) ");
		//modify.zxz.20170726.end
		sqlKj = sqlBF.toString();
		
		//add gp 20200317 
		sqlBF.setLength(0);
		sqlBF.append("select nvl(sum(btje), 0) kjje ");
		sqlBF.append("  from (select nvl(a.btje, 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje < 0 ");
		sqlBF.append("           and a.fflb in ('A', 'D') ");
		sqlBF.append("           and exists ( select 'x' ");
		sqlBF.append("                          from ad3u.giv_item t");
		sqlBF.append("                         where a.btbh = t.btbh ");
		sqlBF.append("                           and nvl(t.ftcjjbz,'0')  = ? ) ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("        union all ");
		sqlBF.append("        select nvl((a.btje * 2), 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje > 0 ");
		sqlBF.append("           and a.fflb = 'A' ");
		sqlBF.append("           and exists ( select 'x' ");
		sqlBF.append("                          from ad3u.giv_item t");
		sqlBF.append("                         where a.btbh = t.btbh ");
		sqlBF.append("                           and nvl(t.ftcjjbz,'0')  = ? ) ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("           and exists ");
		sqlBF.append("         (select 1 ");
		sqlBF.append("                  from ad3u.per_giv_month_std c ");
		sqlBF.append("                 where c.ryid = a.ryid ");
		sqlBF.append("                   and a.btbh = c.btbh ");
		sqlBF.append("                   and a.xzbz = c.xzbz ");
		sqlBF.append("                   and c.btje < 0 ");
		sqlBF.append("                   and a.btje = - (c.btje) ");
		sqlBF.append("                   and c.zzny = ? )) ");
		
		String sqlKjtcnw = sqlBF.toString();
		//add gp 20200317 end
		
		
		// 取暂停待遇时间信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.qsny ");
		sqlBF.append("   from ad3u.per_pause a");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and a.ztsj = (select max(b.ztsj) ");
		sqlBF.append("                    from ad3u.per_pause b");
		sqlBF.append("                   where a.ryid = b.ryid)");
		sqlZtsj = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) txj ");
     	sqlBF.append("   from ad3u.per_giv_month_std a,  ");
		sqlBF.append(" 	      ad3u.giv_item b ");
		sqlBF.append("  where a.btbh = b.btbh ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and ? between a.qsny and nvl(a.zzny,'204912') ");
		sqlBF.append("    and nvl(ftcjjbz,'0') = ? ");
		String tcnwTxj = sqlBF.toString();

		dsTxjyInfo = dsTxjyInfo_zg.combineDatastore(dsTxjyInfo_ys);

		// 查询人员基本信息,待遇信息
		for (int i = 0; i < dsTxjyInfo.rowCount(); i++) {
			ryid = dsTxjyInfo.getString(i, "ryid");
			jyrq = dsTxjyInfo.getString(i, "jyrq");
			sszfrq = dsTxjyInfo.getString(i, "sszfrq");
			stjfnx = dsTxjyInfo.getDouble(i, "stjfnx");
			sjjfnx = dsTxjyInfo.getDouble(i, "sjjfnx");
			jbjgid = dsTxjyInfo.getString(i, "jbjgid");
			zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);

			dsTxjyInfo.put(i, "zjfnx", zjfnx);

			if ("A".equals(sszfrq)) {
				this.readonlysql.setSql(sqlNatl);
			}
			if ("B".equals(sszfrq)) {
				this.readonlysql.setSql(sqlNatl_ys);
			}

			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}
			dsTxjyInfo.put(i, "xm", ds.getString(0, "xm"));
			dsTxjyInfo.put(i, "shbzhm", ds.getString(0, "shbzhm"));
			dsTxjyInfo.put(i, "xb", ds.getString(0, "xb"));
			dsTxjyInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsTxjyInfo.put(i, "csrq", ds.getString(0, "csrq"));
			dsTxjyInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsTxjyInfo.put(i, "zyjszwjb", ds.getString(0, "zyjszwjb"));
			dsTxjyInfo.put(i, "xzzw", ds.getString(0, "xzzw"));
			dsTxjyInfo.put(i, "gjzyzgdj", ds.getString(0, "gjzyzgdj"));
			dsTxjyInfo.put(i, "ygxs", ds.getString(0, "ygxs"));
			dsTxjyInfo.put(i, "lxrdh", ds.getString(0, "lxrdh"));
			dsTxjyInfo.put(i, "txdz", ds.getString(0, "txdz"));
			dsTxjyInfo.put(i, "grbh", ds.getString(0, "grbh"));//add mxh 20200109
			if ("A".equals(sszfrq)) {
				dsTxjyInfo.put(i, "cjgzrq", ds.getString(0, "cjgzrq"));
			}

			// 退休金 取最大发放年月的待遇金额，如果取不到则取死亡当月待遇金额
			this.readonlysql.setSql(sqlMaxNy);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			maxNy = ds.getString(0, "maxny");
			if ("204912".equals(maxNy) && (jyrq != null && !"".equals(jyrq))) {
				maxNy = jyrq.substring(0, 6);
			}

			// 退休金
			this.readonlysql.setSql(sqlTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			// 20110516
			ds = this.readonlysql.executeQuery();
			txj = ds.getDouble(0, "txj");
			ddwff = ds.getDouble(0, "ddwff");
			jtbt = ds.getDouble(0, "jtbt");
			zynj = ds.getDouble(0, "zynj");
			ylj = ds.getDouble(0, "ylj");
			
			txj2 = txj - jtbt;

			this.readonlysql.setSql(tcnwTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			this.readonlysql.setString(3, "0");
			ds = this.readonlysql.executeQuery();
			double txjtcn= ds.getDouble(0, "txj");
			
			this.readonlysql.setSql(tcnwTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			this.readonlysql.setString(3, "1");
			ds = this.readonlysql.executeQuery();
			double txjtcw= ds.getDouble(0, "txj");
			
			// 多发扣回
			this.readonlysql.setSql(sqlKj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, ryid);
			this.readonlysql.setString(3, maxNy);
			ds = this.readonlysql.executeQuery();
			kjje = ds.getDouble(0, "kjje");
			
			this.readonlysql.setSql(sqlKjtcnw);
			this.readonlysql.setString(1, "0");
			this.readonlysql.setString(2, ryid);
			this.readonlysql.setString(3, "0");
			this.readonlysql.setString(4, ryid);
			this.readonlysql.setString(5, maxNy);
			ds = this.readonlysql.executeQuery();
			double kjjetcn  = ds.getDouble(0, "kjje");
			
			this.readonlysql.setSql(sqlKjtcnw);
			this.readonlysql.setString(1, "1");
			this.readonlysql.setString(2, ryid);
			this.readonlysql.setString(3, "1");
			this.readonlysql.setString(4, ryid);
			this.readonlysql.setString(5, maxNy);
			ds = this.readonlysql.executeQuery();
			double kjjetcw  = ds.getDouble(0, "kjje");

			// 丧葬费、抚恤金、个人账户返还
			DataObject pdo = new DataObject();
			pdo.put("ryid", ryid);
			DataObject result= this.doMethod(jbjgid, "getSzffxjInfo", pdo, this.getUser());  //将查询丧葬抚恤金提成一个方法方便客户化 zkj add 2017/11/27
			szf = result.getDouble("szf");
			fxj = result.getDouble("fxj");
			zhfh = result.getDouble("zhfh");
			ycxjjf = result.getDouble("ycxjjf");
			sjffje = MathUtil.round(zhfh + fxj + szf + kjje, 2);//增加实际发放金额 ysf 2018-10-31
			
			
			//最大暂停时间 ysf 2019-3-14
			this.readonlysql.setSql(sqlZtsj);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			if(ds.rowCount()>0){
				ztny = ds.getString(0, "qsny");
			}else{
				ztny = "";
			}

			dsTxjyInfo.put(i, "txj", txj);
			dsTxjyInfo.put(i, "txjtcn", txjtcn);
			dsTxjyInfo.put(i, "txjtcw", txjtcw);
			dsTxjyInfo.put(i, "ddwff", ddwff);
			dsTxjyInfo.put(i, "jtbt", jtbt);
			dsTxjyInfo.put(i, "txj2", txj2);
			dsTxjyInfo.put(i, "kjje", kjje);
			dsTxjyInfo.put(i, "kjjetcn", kjjetcn);
			dsTxjyInfo.put(i, "kjjetcw", kjjetcw);
			dsTxjyInfo.put(i, "szf", szf);
			dsTxjyInfo.put(i, "fxj", fxj);
			dsTxjyInfo.put(i, "zhfh", zhfh);
			dsTxjyInfo.put(i, "ycxjjf", ycxjjf);
			dsTxjyInfo.put(i, "zynj", zynj);
			dsTxjyInfo.put(i, "ylj", ylj);
			dsTxjyInfo.put(i, "lqrmc", AdTools.getPerCmpl(ryid, "LQRMC",""));
			dsTxjyInfo.put(i, "lqrlxdh", AdTools.getPerCmpl(ryid, "LQRLXDH",""));
			dsTxjyInfo.put(i, "lqrsfzhm", AdTools.getPerCmpl(ryid, "LQRSFZHM",""));
			dsTxjyInfo.put(i, "sjffje", sjffje);
			dsTxjyInfo.put(i, "ztny", ztny);
			dsTxjyInfo.put(i, "dacfd", AdTools.getPerCmpl(ryid, "DACFD",""));//淮南增加档案存放地 ysf 2019-3-14
		}

		dsTxjyInfo = HsuTools.genJdxxDataStore(dsTxjyInfo, "jdid", "jdbh", "jdmc");
		dsTxjyInfo = dsTxjyInfo.sortdesc("bljyrq");
		ds = new DataStore();
		ds.addRow(para);

		rdo.put("txjyinfo", dsTxjyInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}
	/**
	 * 获取数据
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-4-17
	 * @since V1.0
	 */
	public DataObject queryTxjyInfoByDfjg_3701(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, dyzzyy, zfrylb, ryid, dfjglb, dfjgid, jyrq, maxNy;
		DataStore ds = new DataStore(), dsTxjyInfo = new DataStore(), dsJytj = new DataStore();
		String sqlNatl, sqlMaxNy, sqlTxj, sqlKj, sqlNatl_ys, sszfrq, sqlZtsj;
		double txj, ddwff, kjje, zhfh, szf, fxj, jtbt, txj2, zynj, ylj, sjffje;
		String dfjgbh, dfjgmc, jjlx, ztny = "";
		String jbjgid, jyqsrq = "", jyzzrq="", jbr = "", gljglb = "";//添加管理机构类别 wsk 2021/1/22
		double stjfnx, sjjfnx, zjfnx;

		// 接参数
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjglb = para.getString("dfjglb");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		dyzzyy = para.getString("dyzzyy");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		dyzzyy = HsuTools.replaceC2QCQ(dyzzyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jbjgid = para.getString("jbjgid", "");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		jjlx = para.getString("jjlx", "");
		ryid = para.getString("ryid", "");
		jbr = para.getString("jbr", "");
		//增加减员起始日期和终止日期 zlj 2017-1-12
		if(para.containsKey("jyqsrq")){
			jyqsrq = para.getDateToString("jyqsrq", "yyyyMMdd");
		}
		if(para.containsKey("jyzzrq")){
			jyzzrq = para.getDateToString("jyzzrq", "yyyyMMdd");
		}
		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("传入代发机构ID为空！");
		}
		if (dfjglb == null || "".equals(dfjglb)) {
			this.bizException("传入代发机构类别为空！");
		}

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}
		
        // 济南新增街道机构
		String jdjg = para.getString("jdjg", "");
		
		// TODO hsu还未实现
		// rightSql = Si3Tools.getDataRightSql(this.userid, "b",
		// Cp3Tools.replaceC2QCQ(Si3Tools.getSjjbjgByZfjbjg(this.jbjgqxfw,"101,102")));

		// 查询符合条件的办理减员的养老人员登记信息(职工)--mod.yxt.20160108.per_reg与per_info的关联改为ryid
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, '' xm, '' shbzhm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszwjb, '' xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, ? dfjgbh, ? dfjgmc, a.shbzhm, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  e.stjfnx, e.sjjfnx, e.dacsrq, b.jbjgid, a.jdid, b.bljyjbr "); //增加 jbjgid zkj add 2017/11/27 
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'A' ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  b.jbjgid in (" + jbjgid + ") ");
		} else {
			// sqlBF.append("    and  ").append(rightSql);
		}
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and b.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and a.dfjglb = ? ");
		sqlBF.append("	  and a.dfjgid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
		if (jyqsrq != null && !"".equals(jyqsrq) && jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and b.jyrq between "+jyqsrq+" and "+jyzzrq+" ");
		}
		if (jjlx != null && !"".equals(jjlx)) {
			sqlBF.append("	  and c.jjlx in(" + HsuTools.replaceC2QCQ(jjlx)
					+ ") ");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("	  and e.ryid = '" + ryid + "' ");
		}
		if(jbr!=null&&!"".equals(jbr)){
			sqlBF.append("	  and b.bljyjbr = '" + jbr + "' ");
		}
		if (jdjg != null && !"".equals(jdjg)) { // add gds 2019.5.5
			sqlBF.append(" and exists(select 1 from be3u.street_natl s where s.jdid = a.jdid and s.rsjid in ("
					+ HsuTools.replaceC2QCQ(jdjg) + ") )");
		}
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		this.readonlysql.setString(1, dfjgbh);
		this.readonlysql.setString(2, dfjgmc);
		this.readonlysql.setString(3, dfjglb);
		this.readonlysql.setString(4, dfjgid);
		this.readonlysql.setString(5, qsrq);
		this.readonlysql.setString(6, zzrq);

		DataStore dsTxjyInfo_zg = this.readonlysql.executeQuery();

		// 查询符合条件的办理减员的养老人员登记信息(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, s.yslb zfrylb,  b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, '' xm, '' shbzhm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszwjb, '' xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, ? dfjgbh, ? dfjgmc, a.shbzhm, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  '' stjfnx, '' sjjfnx, '' dacsrq, b.jbjgid, a.jdid, b.bljyjbr"); //增加jbjgid查询   --张凯杰  add 2017/11/27
	 	sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info s, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = s.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'B' ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  b.jbjgid in (" + jbjgid + ") ");
		} else {
			// sqlBF.append("    and  ").append(rightSql);
		}
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and b.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and s.yslb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and a.dfjglb = ? ");
		sqlBF.append("	  and a.dfjgid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
		if (jyqsrq != null && !"".equals(jyqsrq) && jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and b.jyrq between "+jyqsrq+" and "+jyzzrq+" ");
		}
		if (jjlx != null && !"".equals(jjlx)) {
			sqlBF.append("	  and c.jjlx in(" + HsuTools.replaceC2QCQ(jjlx)
					+ ") ");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("	  and s.ryid = '" + ryid + "' ");
		}
		if(jbr!=null&&!"".equals(jbr)){
			sqlBF.append("	  and b.bljyjbr = '" + jbr + "' ");
		}
		if (jdjg != null && !"".equals(jdjg)) { // add gds 2019.5.5
			sqlBF.append(" and exists(select 1 from be3u.street_natl s where s.jdid = a.jdid and s.rsjid in ("
					+ HsuTools.replaceC2QCQ(jdjg) + ") )");
		}
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, dfjgbh);
		this.readonlysql.setString(2, dfjgmc);
		this.readonlysql.setString(3, dfjglb);
		this.readonlysql.setString(4, dfjgid);
		this.readonlysql.setString(5, qsrq);
		this.readonlysql.setString(6, zzrq);

		DataStore dsTxjyInfo_ys = this.readonlysql.executeQuery();

		// 取人员基本信息的sql（职工）
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz, e.cjgzrq ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlNatl = sqlBF.toString();

		// 取人员基本信息的sql(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlNatl_ys = sqlBF.toString();

		// 取最大拨付年月的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(max(zzny), '204912') maxny ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlMaxNy = sqlBF.toString();

		// 查询退休金的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) txj, ");
		sqlBF.append(" 	      nvl(sum(decode(b.btlb, '901', a.btje, 0)), 0) ddwff, ");
		sqlBF.append("        nvl(sum(decode(a.xzbz, '106', a.btje, 0)), 0) jtbt, ");
		sqlBF.append("        nvl(sum(decode(b.btbh, 'B305', a.btje, 0)), 0) zynj, ");//增加查询职业年金 gzh mod 20180413
		sqlBF.append("        nvl(sum(decode(b.btbh, 'B305', 0, a.btje)), 0) ylj ");//增加查询养老金 gzh mod 20180413
		sqlBF.append("   from ad3u.per_giv_month_std a,  ");
		sqlBF.append(" 	      ad3u.giv_item b ");
		sqlBF.append("  where a.btbh = b.btbh ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and ? between a.qsny and nvl(a.zzny,'204912') ");
		sqlTxj = sqlBF.toString();

        
		// 查询一次性待遇信息
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btje");
		sqlBF.append("  from ad3u.per_giv_detl");
		sqlBF.append(" where fflb = 'C'");
		sqlBF.append("   and ryid = ?");
		sqlBF.append("   and btbh in ('A107', 'A1D1', 'A1D2', 'B107', 'B10X')");
        String sqlYcx = sqlBF.toString();                  
		
        // 收回多发待遇
		sqlBF.setLength(0);
		sqlBF.append("select sum(btje) kjje");
		sqlBF.append("  from ad3u.per_giv_detl");
		sqlBF.append(" where ryid = ?");
		sqlBF.append("   and fsyy = '2'");
		sqlBF.append("   and fflb in ('A', 'D')");
		sqlBF.append("   and bz like '%收回多发%'");
		sqlKj = sqlBF.toString();
		
		// 取暂停待遇时间信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.qsny ");
		sqlBF.append("   from ad3u.per_pause a");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and a.ztsj = (select max(b.ztsj) ");
		sqlBF.append("                    from ad3u.per_pause b");
		sqlBF.append("                   where a.ryid = b.ryid)");
		sqlZtsj = sqlBF.toString();
		
		//查询减员途径是否是单位网上服务系统 wsk 2021/1/22
		sqlBF.setLength(0);
		sqlBF.append("select 1 ");
		sqlBF.append("  from tsu.hsoadyldyzz_per a ");
		sqlBF.append(" where a.ryid = ? ");
		sqlBF.append("   and a.jyzt = '1' ");
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("          from sicp3uws.addwpljy b ");
		sqlBF.append("         where b.tsid = a.tsid");
		sqlBF.append("           and b.pljyjzbz = '1' )");
		String sqlJytj_dw = sqlBF.toString();
		
		//查询减员途径是否是 局本级经办系统 wsk 2021/1/22
		sqlBF.setLength(0);
		sqlBF.append("select 1 ");
		sqlBF.append("  from sicp3uws.addyzzhd  ");
		sqlBF.append(" where length(nvl(sljgid, '')) = 8");
		sqlBF.append("   and ryid = ? ");
		sqlBF.append("   and dyzzhdjz = '1' ");
		String sqlJytj_jbj = sqlBF.toString();
		
		//查询减员途径是否是镇街基层平台系统 wsk 2021/1/22
		sqlBF.setLength(0);
		sqlBF.append("select 1 ");
		sqlBF.append("  from sicp3uws.addyzzhd  ");
		sqlBF.append(" where length(nvl(sljgid, '')) > 8");
		sqlBF.append("   and ryid = ? ");
		sqlBF.append("   and dyzzhdjz = '1' ");
		String sqlJytj_zj = sqlBF.toString();
				
		// 查询继承人信息
		String sqlJcr = "select xm,sfzhm from ad3u.fami_natl where dyryid = ?";
		
		dsTxjyInfo = dsTxjyInfo_zg.combineDatastore(dsTxjyInfo_ys);

		// 查询人员基本信息,待遇信息
		for (int i = 0; i < dsTxjyInfo.rowCount(); i++) {
			ryid = dsTxjyInfo.getString(i, "ryid");
			jyrq = dsTxjyInfo.getString(i, "jyrq");
			sszfrq = dsTxjyInfo.getString(i, "sszfrq");
			stjfnx = dsTxjyInfo.getDouble(i, "stjfnx");
			sjjfnx = dsTxjyInfo.getDouble(i, "sjjfnx");
			jbjgid = dsTxjyInfo.getString(i, "jbjgid");
			zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);

			dsTxjyInfo.put(i, "zjfnx", zjfnx);

			if ("A".equals(sszfrq)) {
				this.readonlysql.setSql(sqlNatl);
			}
			if ("B".equals(sszfrq)) {
				this.readonlysql.setSql(sqlNatl_ys);
			}

			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}
			dsTxjyInfo.put(i, "xm", ds.getString(0, "xm"));
			dsTxjyInfo.put(i, "shbzhm", ds.getString(0, "shbzhm"));
			dsTxjyInfo.put(i, "xb", ds.getString(0, "xb"));
			dsTxjyInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsTxjyInfo.put(i, "csrq", ds.getString(0, "csrq"));
			dsTxjyInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsTxjyInfo.put(i, "zyjszwjb", ds.getString(0, "zyjszwjb"));
			dsTxjyInfo.put(i, "xzzw", ds.getString(0, "xzzw"));
			dsTxjyInfo.put(i, "gjzyzgdj", ds.getString(0, "gjzyzgdj"));
			dsTxjyInfo.put(i, "ygxs", ds.getString(0, "ygxs"));
			dsTxjyInfo.put(i, "lxrdh", ds.getString(0, "lxrdh"));
			dsTxjyInfo.put(i, "txdz", ds.getString(0, "txdz"));
			if ("A".equals(sszfrq)) {
				dsTxjyInfo.put(i, "cjgzrq", ds.getString(0, "cjgzrq"));
			}

			// 退休金 取最大发放年月的待遇金额，如果取不到则取死亡当月待遇金额
			this.readonlysql.setSql(sqlMaxNy);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			maxNy = ds.getString(0, "maxny");
			if ("204912".equals(maxNy) && (jyrq != null && !"".equals(jyrq))) {
				maxNy = jyrq.substring(0, 6);
			}

			// 退休金
			this.readonlysql.setSql(sqlTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			// 20110516
			ds = this.readonlysql.executeQuery();
			txj = ds.getDouble(0, "txj");
			ddwff = ds.getDouble(0, "ddwff");
			jtbt = ds.getDouble(0, "jtbt");
			zynj = ds.getDouble(0, "zynj");
			ylj = ds.getDouble(0, "ylj");
			
			txj2 = txj - jtbt;

			// 多发扣回
			this.readonlysql.setSql(sqlKj);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			kjje = ds.getDouble(0, "kjje");

			// 丧葬费、抚恤金、个人账户返还
			zhfh = 0;
			szf = 0;
			fxj = 0;
			this.readonlysql.setSql(sqlYcx);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			for (int vi = 0; vi < ds.rowCount(); vi++) {
				String btbh = ds.getString(vi, "btbh");
				double btje = ds.getDouble(vi, "btje");
				if ("A107,B107,B10X".indexOf(btbh) >= 0) {
					zhfh = zhfh + btje;
				} else if ("A1D1,B1D1".indexOf(btbh) >= 0) {
					szf = szf + btje;
				} else if ("A1D2,B1D2".indexOf(btbh) >= 0) {
					// 20090313 lz add 一次性抚恤金
					fxj = fxj + btje;
				}
			}
	
			sjffje = MathUtil.round(zhfh + fxj + szf + kjje, 2);//增加实际发放金额 ysf 2018-10-31
			
			
			//最大暂停时间 ysf 2019-3-14
			this.readonlysql.setSql(sqlZtsj);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			if(ds.rowCount()>0){
				ztny = ds.getString(0, "qsny");
			}else{
				ztny = "";
			}
			
			// 街道信息
			String jdid = dsTxjyInfo.getString(i, "jdid");
			dsTxjyInfo.put(i, "jbjgidjd", "");
            this.sql.setSql(" select jdbh,rsjid,jdmc from be3u.street_natl where jdid = ?")	;	
            this.sql.setString(1, jdid);
            ds = this.sql.executeQuery();
            if(ds.rowCount()>0){
            	dsTxjyInfo.put(i, "jdbh", ds.getString(0, "jdbh"));
            	dsTxjyInfo.put(i, "jdmc", ds.getString(0, "jdmc"));
            	//String rsjid = ds.getString(0, "rsjid");
				//dsTxjyInfo.put(i, "rsjid", rsjid);
            }
            
            this.sql.setSql(" select gljglb from ad3u.per_info where ryid = ? ");
			this.sql.setString(1, ryid);
            ds = this.sql.executeQuery();
            if (ds.rowCount()>0) {
            	gljglb = ds.getString(0, "gljglb");
            }
            
            if ("1".equals(gljglb)) { //管理机构类别是社区管理显示街道所属经办机构
            	this.sql.setSql(" select jdmc from be3u.street_natl where jdid = ? ");
            	this.sql.setString(1, jdid);
                ds = this.sql.executeQuery();
                if(ds.rowCount()>0){
                	String jdmc = ds.getString(0, "jdmc");
    				dsTxjyInfo.put(i, "rsjid", jdmc);
                }
            } else { //管理机构类别不是社区管理显示企业所属经办机构
            	DataObject perInfo = SiTools.getPerRegWithOrgnInfoByRyid(ryid);
            	if (perInfo.size() > 0) {
            		String pjbjgid = perInfo.getString("jbjgid");
            		String jbjgmc = SiTools.getJbjgqcByJbjgid(pjbjgid);
    				dsTxjyInfo.put(i, "rsjid", jbjgmc);
            	}
            }
            
            // 继承人信息
            this.sql.setSql(sqlJcr);
            this.sql.setString(1, ryid);
            ds = this.sql.executeQuery();
			if (ds.rowCount() > 0) {
				dsTxjyInfo.put(i, "jcrxm", ds.getString(0, "xm"));
				dsTxjyInfo.put(i, "jcrsfzhm", ds.getString(0, "sfzhm"));
			}

			dsTxjyInfo.put(i, "txj", txj);
			dsTxjyInfo.put(i, "ddwff", ddwff);
			dsTxjyInfo.put(i, "jtbt", jtbt);
			dsTxjyInfo.put(i, "txj2", txj2);
			dsTxjyInfo.put(i, "kjje", kjje);
			dsTxjyInfo.put(i, "szf", szf);
			dsTxjyInfo.put(i, "fxj", fxj);
			dsTxjyInfo.put(i, "zhfh", zhfh);
			dsTxjyInfo.put(i, "ycxjjf", 0);
			dsTxjyInfo.put(i, "zynj", zynj);
			dsTxjyInfo.put(i, "ylj", ylj);
			dsTxjyInfo.put(i, "lqrmc", AdTools.getPerCmpl(ryid, "LQRMC",""));
			dsTxjyInfo.put(i, "lqrlxdh", AdTools.getPerCmpl(ryid, "LQRLXDH",""));
			dsTxjyInfo.put(i, "lqrsfzhm", AdTools.getPerCmpl(ryid, "LQRSFZHM",""));
			dsTxjyInfo.put(i, "sjffje", sjffje);
			dsTxjyInfo.put(i, "ztny", ztny);
			dsTxjyInfo.put(i, "dacfd", AdTools.getPerCmpl(ryid, "DACFD",""));//淮南增加档案存放地 ysf 2019-3-14
			
			//增加减员途径 wsk 2021/1/22
			this.sql.setSql(sqlJytj_dw);
			this.sql.setString(1, ryid);
			dsJytj = this.sql.executeQuery();
			if (dsJytj.rowCount() > 0) {
				dsTxjyInfo.put(i, "jytj", "单位网上服务系统");
			} else {
				this.sql.setSql(sqlJytj_jbj);
				this.sql.setString(1, ryid);
				dsJytj = this.sql.executeQuery();
				if (dsJytj.rowCount() > 0) {
					dsTxjyInfo.put(i, "jytj", "局本级经办系统");
				} else {
					this.sql.setSql(sqlJytj_zj);
					this.sql.setString(1, ryid);
					dsJytj = this.sql.executeQuery();
					if (dsJytj.rowCount() > 0) {
						dsTxjyInfo.put(i, "jytj", "镇街基层平台系统");
					}
				}
			}
		}

		dsTxjyInfo = HsuTools.genJbjgxxDataStore(dsTxjyInfo, "jbjgid", "jbjgbh", "jbjgmc");
		dsTxjyInfo = HsuTools.genSysUserDataStore(dsTxjyInfo, "bljyjbr", "bljyjbrbh", "bljyjbrxm");
		
		dsTxjyInfo = dsTxjyInfo.sortdesc("bljyrq");
		ds = new DataStore();
		ds.addRow(para);

		rdo.put("txjyinfo", dsTxjyInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}
	/**
	 * 方法简介：获取丧葬费、抚恤金、个人返还
	 * 
	 * @author zkj 2017/11/27
	 * @return ds
	 * @throws Exception 
	 */
	public DataObject getSzffxjInfo(DataObject para) throws Exception{
		
		String ryid = para.getString("ryid");
		StringBuffer sqlBF = new StringBuffer();
		
		if(ryid == null || "".equals(ryid)){
			this.bizException("获取丧葬抚恤金时传入的ryid为空");
		}
		// 丧葬费、抚恤金、个人账户返还
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(a.btbh, 'A1D1', a.btje, 'B1D1', a.btje, 0)), 0) szf, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A1D2', a.btje, 'B1D2', a.btje, 0)), 0) fxj, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A186', a.btje, 'B186', a.btje, 0)), 0) ycxjjf, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A107', a.btje, 'A10R', a.btje, 0)), 0) zhfh ");
		sqlBF.append("   from ad3u.per_giv_detl a ");
		sqlBF.append("  where ryid = ? ");
		
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, ryid);
		DataStore ds = this.readonlysql.executeQuery();
		
		double szf = ds.getDouble(0, "szf");
		double fxj = ds.getDouble(0, "fxj");
		double zhfh = ds.getDouble(0, "zhfh");
		double ycxjjf = ds.getDouble(0, "ycxjjf");
		
		DataObject rdo = new DataObject();
		rdo.put("szf", szf);
		rdo.put("fxj", fxj);
		rdo.put("zhfh", zhfh);
		rdo.put("ycxjjf", ycxjjf);
		return rdo;
	}
	/**
	 * 方法简介：获取丧葬费、抚恤金、个人返还 (烟台龙口机关客户化)
	 * 与标准件的区别  丧葬费  包括B7B7
	 * 
	 * @author zkj 2017/11/27
	 * @return ds
	 * @throws Exception 
	 */
	public DataObject getSzffxjInfo_37068103(DataObject para) throws Exception{
		
		String ryid = para.getString("ryid");
		StringBuffer sqlBF = new StringBuffer();
		
		if(ryid == null || "".equals(ryid)){
			this.bizException("获取丧葬抚恤金时传入的ryid为空");
		}
		// 丧葬费、抚恤金、个人账户返还
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(a.btbh, 'A1D1', a.btje, 'B1D1', a.btje, 'B7B7', a.btje, 0)), 0) szf, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A1D2', a.btje, 'B1D2', a.btje, 0)), 0) fxj, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A186', a.btje, 'B186', a.btje, 0)), 0) ycxjjf, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A107', a.btje, 'A10R', a.btje, 0)), 0) zhfh ");
		sqlBF.append("   from ad3u.per_giv_detl a ");
		sqlBF.append("  where ryid = ? ");
		
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, ryid);
		DataStore ds = this.readonlysql.executeQuery();
		
		double szf = ds.getDouble(0, "szf");
		double fxj = ds.getDouble(0, "fxj");
		double zhfh = ds.getDouble(0, "zhfh");
		double ycxjjf = ds.getDouble(0, "ycxjjf");
		
		DataObject rdo = new DataObject();
		rdo.put("szf", szf);
		rdo.put("fxj", fxj);
		rdo.put("zhfh", zhfh);
		rdo.put("ycxjjf", ycxjjf);
		return rdo;
	}
	/**
	 * 方法简介.退休减员明细信息
	 * 
	 * @author 杨绍智 2015-1-13
	 */
	public DataObject queryTxjymxInfo(final DataObject para) throws Exception {
		String qsrq, zzrq, dyzzyy, zfrylb, dfjglb, dfjgid, dfjgbh, dfjgmc;
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore ds;
		DataStore dsPerInfo = new DataStore();
		DataStore dsTxjyInfo = new DataStore();
		int count;
		String jbjgid, jjlx, jyqsrq = "",jyzzrq = "" ,jdid;
		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");
		
		String querylogid = QueryLogTool.saveQueryLog("退休减员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 接参数
		dyzzyy = para.getString("dyzzyy");
		zfrylb = para.getString("zfrylb");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		//增加减员起始日期和终止日期 zlj 2017-1-12
		if(para.containsKey("jyqsrq")){
			jyqsrq = para.getDateToString("jyqsrq", "yyyyMMdd");
		}
		if(para.containsKey("jyzzrq")){
			jyzzrq = para.getDateToString("jyzzrq", "yyyyMMdd");
		}
		jjlx = para.getString("jjlx", "");
		jbjgid = para.getString("jbjgid", "");
		jdid = para.getString("jdid", "");// add mxh 20200109

		String ryid = para.getString("ryid", "");// 增加入参人员id --刘佳广 modify 2018年5月11日

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}
		
		// 济南增加减员jbr add gds
		String jbr = para.getString("yhid", "");
		String jdjg = para.getString("jdjg", "");

		pdo.clear();
		pdo.put("qsrq", qsrq);
		pdo.put("zzrq", zzrq);
		pdo.put("dyzzyy", dyzzyy);
		pdo.put("zfrylb", zfrylb);
		pdo.put("jbjgid", jbjgid);
		pdo.put("jyqsrq", jyqsrq);
		pdo.put("jyzzrq", jyzzrq);
		pdo.put("ryid", ryid);
		// 得到按代发机构的汇总信息
		dsTxjyInfo = this.queryTxjyInfo(pdo).getDataStore("dstxjyinfo");

		count = dsTxjyInfo.rowCount();
		prompt.setTotalSteps(count); // 设置步数
		for (int i = 0; i < count; i++) {
			dfjglb = dsTxjyInfo.getString(i, "dfjglb");
			dfjgid = dsTxjyInfo.getString(i, "dfjgid");
			dfjgbh = dsTxjyInfo.getString(i, "dfjgbh");
			dfjgmc = dsTxjyInfo.getString(i, "dfjgmc");

			pdo.clear();
			pdo.put("jbjgid", jbjgid);
			pdo.put("dfjglb", dfjglb);
			pdo.put("dfjgid", dfjgid);
			pdo.put("dfjgbh", dfjgbh);
			pdo.put("dfjgmc", dfjgmc);
			pdo.put("zfrylb", zfrylb);
			pdo.put("dyzzyy", dyzzyy);
			pdo.put("qsrq", qsrq);
			pdo.put("zzrq", zzrq);
			pdo.put("jyqsrq", jyqsrq);
			pdo.put("jyzzrq", jyzzrq);
			pdo.put("jjlx", jjlx);
			pdo.put("ryid", ryid);
			pdo.put("jbr", jbr);
			pdo.put("jdjg", jdjg);
			pdo.put("jdid", jdid);
			// 查询代发机构下的人员信息     mod by gds 改成客户化形式
			ds = this.doMethod(this.getBizInstitution(), "queryTxjyInfoByDfjg", pdo, this.getUser()).getDataStore("txjyinfo");
			dsPerInfo = dsPerInfo.combineDatastore(ds);
			prompt.moveForword(1);
		}
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}
		dsPerInfo = dsPerInfo.sortdesc("bljyrq").sort("dfjgbh");
		rdo.put("dsperinfo", dsPerInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsPerInfo.rowCount());

		return rdo;
	}
	
	/**
	 * 方法简介.组装打印退休减员人员信息
	 * 
	 * @author 杨绍智 2015-1-14
	 */
	public DataObject queryAdTxjyInfo4Print(final DataObject para) throws Exception {
		String qsrq, zfrylb, xb, swrq, year, month, txj, jyqsrq="";
		DataStore ds;
		DataObject rdo = new DataObject();
		SPrinter printer = new SPrinter();
		int count;
		double txjsum = 0.00,txjnum = 0.00;
		ds = para.getDataStore("dwzyDetl");
		qsrq = para.getDateToString("qsrq", "yyyy.MM.dd");
		if (para.containsKey("jyqsrq")) {
			jyqsrq = para.getDateToString("jyqsrq", "yyyy.MM.dd");
		}

		if (ds == null || ds.rowCount() == 0) {
			this.bizException("传入的打印信息数据为空！");
		}
        //bljyrq和jyrq都不存在时报错 zlj 20147-1-13
		if (qsrq == null || "".equals(qsrq)) {
			if(jyqsrq == null || "".equals(jyqsrq)){
				this.bizException("传入的减员起始日期为空！");
			}
		}

		// 查询合计行金额
		count = ds.rowCount();
		for (int i = 0; i < count; i++) {
			xb = ds.getString(i, "xb");
			zfrylb = ds.getString(i, "zfrylb");
			swrq = ds.getDateToString(i, "jyrq", "yyyy-MM-dd");
			txjnum = ds.getDouble(i, "txj");
			txj = DataFormat.formatDouble(txjnum, 2);
			txjsum += txjnum;
			if (zfrylb == null || "".equals(zfrylb)) {
				zfrylb = "";
			} else {
				zfrylb = zfrylb.substring(0, 2);
				if ("A1".equals(zfrylb)) {
					zfrylb = "离休";
				} else if ("A2".equals(zfrylb)) {
					zfrylb = "退休";
				} else if ("A3".equals(zfrylb)) {
					zfrylb = "退职";
				} else if ("A4".equals(zfrylb)) {
					zfrylb = "一次性退职";
				} else if ("B".equals(zfrylb.substring(0, 1))) {
					zfrylb = "遗属";
				}
			}
			
			ds.put(i, "xb", HsuTools.discode("XB", xb, ""));
			ds.put(i, "lb", zfrylb);
			ds.put(i, "swrq", swrq);
			ds.put(i, "txj", txj);
			ds.put(i, "xh", DataFormat.formatInt(i + 1));//转换xh格式 gzh mod 20161109
		}
		ds.setTypeList("xb:s,lb:s,swrq:s,txj:s,xh:s");
		//先从办理减员起始日期中取数据，如果没有则在减员日期中取 zlj 2017-1-13
		if(qsrq != null && !"".equals(qsrq)){
			year = qsrq.substring(0, 4);
			month = qsrq.substring(5, 7);
		}else{
			year = jyqsrq.substring(0, 4);
			month = jyqsrq.substring(5, 7);
		}

		printer.putPara("year", year);
		printer.putPara("month", month);
		printer.putPara("sum", DataFormat.formatDouble(txjsum));

		String title = year + "年" + month + "离退休人员减员明细表";
		printer.putPara("title1", title);

		DataStoreLoader tb = new DataStoreLoader(ds);
		printer.putPara("Adtxjyinfo", tb);
		printer.putDataStore(ds);
		String dygs = "AdTxjyinfo";
		String printhtml = printer.print(this.getBizInstitution(), dygs, false, false);

		rdo.put("printhtml", printhtml);
		return rdo;
	}
	
	/**
	 * 方法简介.组装打印退休减员人员信息
	 * 
	 * @author ysf 
	 * @Date 2019-3-14
	 */
	public DataObject queryAdTxjyInfo4Print_3404(final DataObject para) throws Exception {
		String qsrq, zfrylb, xb, swrq, year, month, txj, jyqsrq="", ztny = "", dacfd = "", dacfdtext = "";
		DataStore ds;
		DataObject rdo = new DataObject();
		SPrinter printer = new SPrinter();
		int count;
		double txjsum = 0.00,txjnum = 0.00;
		ds = para.getDataStore("dwzyDetl");
		qsrq = para.getDateToString("qsrq", "yyyy.MM.dd");
		if (para.containsKey("jyqsrq")) {
			jyqsrq = para.getDateToString("jyqsrq", "yyyy.MM.dd");
		}

		if (ds == null || ds.rowCount() == 0) {
			this.bizException("传入的打印信息数据为空！");
		}
        //bljyrq和jyrq都不存在时报错 zlj 20147-1-13
		if (qsrq == null || "".equals(qsrq)) {
			if(jyqsrq == null || "".equals(jyqsrq)){
				this.bizException("传入的减员起始日期为空！");
			}
		}

		// 查询合计行金额
		count = ds.rowCount();
		for (int i = 0; i < count; i++) {
			xb = ds.getString(i, "xb");
			zfrylb = ds.getString(i, "zfrylb");
			swrq = ds.getDateToString(i, "jyrq", "yyyy-MM-dd");
			txjnum = ds.getDouble(i, "txj");
			txj = DataFormat.formatDouble(txjnum, 2);
			txjsum += txjnum;
			//淮南增加暂停年月，档案存放地 ysf 2019-3-14
			if(ds.containsItem(i, "ztny")){
				ztny = ds.getString(i, "ztny");
			}
			if(ds.containsItem(i, "dacfd")){
				dacfd = ds.getString(i, "dacfd");
				if("1".equals(dacfd)){
					dacfdtext = "田家庵区";
				}else if("2".equals(dacfd)){
					dacfdtext = "大通区";
				}else if("3".equals(dacfd)){
					dacfdtext = "谢家集区";
				}else if("4".equals(dacfd)){
					dacfdtext = "八公山区";
				}else if("5".equals(dacfd)){
					dacfdtext = "潘集区";
				}else if("6".equals(dacfd)){
					dacfdtext = "毛集实验区";
				}else if("7".equals(dacfd)){
					dacfdtext = "凤台县";
				}else if("8".equals(dacfd)){
					dacfdtext = "异地";
				}else if("9".equals(dacfd)){
					dacfdtext = "其他";
				}else if("10".equals(dacfd)){
					dacfdtext = "寿县";
				}else if("A".equals(dacfd)){
					dacfdtext = "东辰集团";
				}else{
					dacfdtext = "";
				}
			}
			
			if (zfrylb == null || "".equals(zfrylb)) {
				zfrylb = "";
			} else {
				zfrylb = zfrylb.substring(0, 2);
				if ("A1".equals(zfrylb)) {
					zfrylb = "离休";
				} else if ("A2".equals(zfrylb)) {
					zfrylb = "退休";
				} else if ("A3".equals(zfrylb)) {
					zfrylb = "退职";
				} else if ("A4".equals(zfrylb)) {
					zfrylb = "一次性退职";
				} else if ("B".equals(zfrylb.substring(0, 1))) {
					zfrylb = "遗属";
				}
			}
			
			ds.put(i, "xb", HsuTools.discode("XB", xb, ""));
			ds.put(i, "lb", zfrylb);
			ds.put(i, "swrq", swrq);
			ds.put(i, "txj", txj);
			ds.put(i, "xh", DataFormat.formatInt(i + 1));//转换xh格式 gzh mod 20161109
			ds.put(i, "dacfd", dacfdtext);
			ds.put(i, "ztny", ztny);
		}
		ds.setTypeList("xb:s,lb:s,swrq:s,txj:s,xh:s");
		//先从办理减员起始日期中取数据，如果没有则在减员日期中取 zlj 2017-1-13
		if(qsrq != null && !"".equals(qsrq)){
			year = qsrq.substring(0, 4);
			month = qsrq.substring(5, 7);
		}else{
			year = jyqsrq.substring(0, 4);
			month = jyqsrq.substring(5, 7);
		}

		printer.putPara("year", year);
		printer.putPara("month", month);
		printer.putPara("sum", DataFormat.formatDouble(txjsum));

		String title = year + "年" + month + "离退休人员减员明细表";
		printer.putPara("title1", title);

		DataStoreLoader tb = new DataStoreLoader(ds);
		printer.putPara("Adtxjyinfo", tb);
		printer.putDataStore(ds);
		String dygs = "AdTxjyinfo";
		String printhtml = printer.print(this.getBizInstitution(), dygs, false, false);

		rdo.put("printhtml", printhtml);
		return rdo;
	}

	/**
	 * 方法简介.获取拨付人员统计查询
	 * 
	 * @author 杨绍智 2015-2-4
	 */
	public DataObject queryBfrytjInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		String jbjgid, ffny;
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员统计查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		jbjgid = para.getString("jbjgid", "");
		ffny = para.getDateToString("ffny", "yyyyMM");
		if (ffny == null || "".equals(ffny)) {
			ffny = "";
		}
		
		// 查询人员信息(职工)
		sqlBF.setLength(0);
		sqlBF.append(" select c.content ltxlb, count(distinct a.ryid) zrs, sum(a.btje) zje  ");
		sqlBF.append("   from ad3u.per_giv_detl a,            ");
		sqlBF.append("        ad3u.emp_info b,                ");
		sqlBF.append("        be3u.code_config c,             ");
		sqlBF.append("        ad3u.per_reg d,                  ");
		sqlBF.append("        ad3u.per_info p                  ");
		sqlBF.append("  where d.jbjgid = ?                    ");
		sqlBF.append("    and a.ryid = p.ryid                 ");
		sqlBF.append("    and p.ryid = b.ryid                 ");
		sqlBF.append("    and p.dqdydjid = d.dydjid             ");
		sqlBF.append("    and p.sszfrq='A'             ");
		sqlBF.append("    and c.dbid = ?                  ");
		sqlBF.append("    and c.dmbh = 'ZFRYLB'               ");
		sqlBF.append("    and b.ltxlb = c.code                ");
		sqlBF.append("    and a.ffny = ?                      ");
		sqlBF.append("    and a.zdlsh is not null             ");
		sqlBF.append("  group by c.content ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, HsuTools.getSystemDBCode());
		this.sql.setString(3, ffny);
		DataStore dszg = this.sql.executeQuery();

		// 查询人员信息(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select c.content ltxlb, count(distinct a.ryid) zrs, sum(a.btje) zje  ");
		sqlBF.append("   from ad3u.per_giv_detl a,            ");
		sqlBF.append("        ad3u.supp_info b,                ");
		sqlBF.append("        be3u.code_config c,             ");
		sqlBF.append("        ad3u.per_reg d,                 ");
		sqlBF.append("        ad3u.per_info p                  ");
		sqlBF.append("  where d.jbjgid = ?                    ");
		sqlBF.append("    and a.ryid = p.ryid                 ");
		sqlBF.append("    and p.ryid = b.ryid                 ");
		sqlBF.append("    and p.dqdydjid = d.dydjid             ");
		sqlBF.append("    and p.sszfrq='B'             ");
		sqlBF.append("    and c.dbid = ?                  ");
		sqlBF.append("    and c.dmbh = 'ZFRYLB'               ");
		sqlBF.append("    and b.yslb = c.code                ");
		sqlBF.append("    and a.ffny = ?                      ");
		sqlBF.append("    and a.zdlsh is not null             ");
		sqlBF.append("  group by c.content ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, HsuTools.getSystemDBCode());
		this.sql.setString(3, ffny);
		DataStore dsys = this.sql.executeQuery();

		dszg = dszg.combineDatastore(dsys);
		rdo.put("bfrytjinfo", dszg);
		
		QueryLogTool.updateQueryLog(querylogid, dszg.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.进入离退休预审职工信息查询界面
	 * 
	 * @author ldf
	 * @date 创建时间 2015-3-23
	 * @since V1.0
	 */
	public DataObject fwdLtxyszgxxQuery(final DataObject para) throws Exception {
		Date currentDate = DateUtil.getDBDate();
		String mdacsqsrq = DateUtil.FormatDate(DateUtil.addMonth(currentDate, -708), "yyyy")
				+ "0101";
		String mdacszzrq = DateUtil.FormatDate(DateUtil.addMonth(currentDate, -708), "yyyy")
				+ "1231";
		String wdacsqsrq = DateUtil.FormatDate(DateUtil.addMonth(currentDate, -588), "yyyy")
				+ "0101";
		String wdacszzrq = DateUtil.FormatDate(DateUtil.addMonth(currentDate, -588), "yyyy")
				+ "1231";
		String wdacsqsrqgb = DateUtil.FormatDate(DateUtil.addMonth(currentDate, -648), "yyyy")
				+ "0101";
		String wdacszzrqgb = DateUtil.FormatDate(DateUtil.addMonth(currentDate, -648), "yyyy")
				+ "1231";

		DataStore dstxysbz = new DataStore();
		dstxysbz.addRow();
		dstxysbz.put(0, "value", "0");
		dstxysbz.put(0, "content", "未预审");
		dstxysbz.put(1, "value", "1");
		dstxysbz.put(1, "content", "已预审");

		DataStore ds = new DataStore();
		ds.addRow();
		ds.put(0, "value", "0");
		ds.put(0, "content", "否");
		ds.put(1, "value", "1");
		ds.put(1, "content", "是");

		DataObject rdo = new DataObject();
		rdo.put("ds", ds);
		rdo.put("dstxysbz", dstxysbz);
		rdo.put("mdacsqsrq", mdacsqsrq);
		rdo.put("mdacszzrq", mdacszzrq);
		rdo.put("wdacsqsrq", wdacsqsrq);
		rdo.put("wdacszzrq", wdacszzrq);
		rdo.put("wdacsqsrqgb", wdacsqsrqgb);
		rdo.put("wdacszzrqgb", wdacszzrqgb);
		return rdo;
	}

	/**
	 * 方法简介.查询符合条件的离退休预审职工信息
	 * 
	 * @author ldf
	 * @date 创建时间 2015-3-23
	 * @since V1.0
	 */
	@SuppressWarnings("deprecation")
	public DataObject queryLtxyszgxxInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String vstr_ltxlb = "", vstr_ltxysbz = "", vstr_ltxrq = "";
		String vsql;
		
		String querylogid = QueryLogTool.saveQueryLog("离退休预审职工信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		String dwdjid = para.getString("dwdjid");
		String ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		String ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		String mdacsqsrq = para.getDateToString("mdacsqsrq", "yyyyMMdd");
		String mdacszzrq = para.getDateToString("mdacszzrq", "yyyyMMdd");

		String ltxlb = para.getString("ltxlb");
		String wdacsqsrq = para.getDateToString("wdacsqsrq", "yyyyMMdd");
		String wdacszzrq = para.getDateToString("wdacszzrq", "yyyyMMdd");
		String txysbz = para.getString("txysbz");
		String wdacsqsrqgb = para.getDateToString("wdacsqsrqgb", "yyyyMMdd");
		String wdacszzrqgb = para.getDateToString("wdacszzrqgb", "yyyyMMdd");

		if (ltxlb == null || "".equals(ltxlb)) {
			vstr_ltxlb = "";
		} else {
			vstr_ltxlb = " and exists ( select 'x' from si3u.per_natl_cmpl where a.ryid = ryid and bcxmbh = 'LTXLB' and bcxmz = '"
					+ ltxlb + "')";
		}

		if (txysbz == null || "".equals(txysbz)) {
			vstr_ltxysbz = "";
		} else if ("1".equals(txysbz)) {
			vstr_ltxysbz = " and exists ( select 'x' from si3u.per_natl_cmpl where a.ryid = ryid and bcxmbh = 'TXXXCJBZ' and bcxmz = '1' )";
		} else if ("0".equals(txysbz)) {
			vstr_ltxysbz = " and not exists ( select 'x' from si3u.per_natl_cmpl where a.ryid = ryid and bcxmbh = 'TXXXCJBZ' and bcxmz = '1') ";
		}

		if (ltxqsrq != null && !"".equals(ltxqsrq)) {
			vstr_ltxrq = " and exists ( select 'x' from si3u.per_natl_cmpl where a.ryid = ryid and bcxmbh = 'LTXRQ' and bcxmz between '"
					+ ltxqsrq + "' and '" + ltxzzrq + "')";
		}

		sqlBF.setLength(0);
		sqlBF.append(" select a.shbzhm, a.xm, a.xb, b.cjgzrq, a.grsf, ");
		sqlBF.append("	  	  a.gjzyzgdj, a.zyjszwjb,a.ryid,b.rydjlb,c.bcxmz dacsrq  ");
		sqlBF.append(" from biuv.person a, si3u.per_reg b,si3u.per_natl_cmpl c             ");
		sqlBF.append(" where a.ryid = b.ryid                          ");
		sqlBF.append("		 and a.ryid = c.ryid                      ");
		sqlBF.append("	     and c.bcxmbh = 'DACSRQ'                  ");
		sqlBF.append(" 	  	 and b.dwdjid = ?                         ");
		sqlBF.append(" 	  	 and b.hdbz = '1'                         ");
		sqlBF.append(" 	  	 and b.zzny is null                       ");
		sqlBF.append(" 	  	 and a.xb in('1','2')                     ");
		sqlBF.append(" 	  	 and b.rydjlb in('A0A','A0C','A0D')       ");
		sqlBF.append(" 	  	 and (instr(b.tblb,'101') > 0 or instr(b.tblb,'102') > 0)           ");
		sqlBF.append("	     and not exists (                         ");
		sqlBF.append("			 select 1  from ad3u.per_info c       ");
		sqlBF.append("	 				where c.ryid = a.ryid         ");
		sqlBF.append("                  and c.dyffzt in ('1','2') )   ");
		sqlBF.append("	     and  exists (                            ");
		sqlBF.append("			 select 1  from si3u.per_natl pn      ");
		sqlBF.append("	 				where pn.ryid = a.ryid        ");
		sqlBF.append("                  and pn.ryzt <> '2'        )   ");
		sqlBF.append("  	and ((c.bcxmz between ? and ? and a.xb = '1')");
		sqlBF.append("  		or (c.bcxmz between ? and ? and a.xb = '2' and not exists (select 1 from einp_basicinfo.ac01 ea where a.ryid=to_char(ea.aac001) and ea.aac320='1' and ea.aae869 = '1'))");
		sqlBF.append("  		or (c.bcxmz between ? and ? and a.xb = '2' and exists (select 1 from einp_basicinfo.ac01 ea where a.ryid=to_char(ea.aac001) and ea.aac320='1' and ea.aae869 = '1')))");
		sqlBF.append(vstr_ltxrq + vstr_ltxysbz + vstr_ltxlb);

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		this.sql.setString(2, mdacsqsrq);
		this.sql.setString(3, mdacszzrq);
		this.sql.setString(4, wdacsqsrq);
		this.sql.setString(5, wdacszzrq);
		this.sql.setString(6, wdacsqsrqgb);
		this.sql.setString(7, wdacszzrqgb);
		DataStore dsTemp = this.sql.executeQuery();

		DataStore ltxyszgxxinfo = new DataStore();
		DataStore vdsBcxx = new DataStore();
		for (int i = 0, size = dsTemp.rowCount(); i < size; i++) {

			String ryid = dsTemp.getString(i, "ryid");

			// 离退休日期
			vsql = "select bcxmz from si3u.per_natl_cmpl where bcxmbh = 'LTXRQ' and  ryid = ?";
			this.sql.setSql(vsql);
			this.sql.setString(1, ryid);
			vdsBcxx = this.sql.executeQuery();

			if (vdsBcxx.rowCount() <= 0) {
				dsTemp.getRow(i).put("ltxrq", "");
			} else {
				dsTemp.getRow(i).put("ltxrq", vdsBcxx.getString(0, "bcxmz"));
			}

			// 离退休类别
			vsql = "select bcxmz from si3u.per_natl_cmpl where bcxmbh = 'LTXLB' and  ryid = ?";
			this.sql.setSql(vsql);
			this.sql.setString(1, ryid);
			vdsBcxx = this.sql.executeQuery();

			if (vdsBcxx.rowCount() <= 0) {
				dsTemp.getRow(i).put("ltxlb", "");
			} else {
				dsTemp.getRow(i).put("ltxLb", vdsBcxx.getString(0, "bcxmz"));
			}

			// 退休预审标志
			vsql = "select bcxmz from si3u.per_natl_cmpl where bcxmbh = 'TXXXCJBZ' and  ryid = ?";
			this.sql.setSql(vsql);
			this.sql.setString(1, ryid);
			vdsBcxx = this.sql.executeQuery();

			if (vdsBcxx.rowCount() <= 0) {
				dsTemp.getRow(i).put("txysbz", "0");
			} else {
				dsTemp.getRow(i).put("txysbz", vdsBcxx.getString(0, "bcxmz"));
			}

			// 军转干标志
			vsql = "select bcxmz from si3u.per_natl_cmpl where bcxmbh = 'JZGBZ' and  ryid = ?";
			this.sql.setSql(vsql);
			this.sql.setString(1, ryid);
			vdsBcxx = this.sql.executeQuery();

			if (vdsBcxx.rowCount() <= 0) {
				dsTemp.getRow(i).put("jzgbz", "0");
			} else {
				dsTemp.getRow(i).put("jzgbz", vdsBcxx.getString(0, "bcxmz"));
			}

			// 是否中断标志
			vsql = " select 'x' from si3u.per_rec where ryid = ? and nvl(glzdlb,'0') <> '0'";
			this.sql.setSql(vsql);
			this.sql.setString(1, ryid);
			vdsBcxx = this.sql.executeQuery();

			if (vdsBcxx.rowCount() > 0) {
				dsTemp.getRow(i).put("zdbz", "1");
			} else {
				dsTemp.getRow(i).put("zdbz", "0");
			}

			// 用工形式，行政职务
			vsql = "select ygxs ,xzzw from si3u.per_natl where ryid = ?";
			this.sql.setSql(vsql);
			this.sql.setString(1, ryid);
			vdsBcxx = this.sql.executeQuery();

			if (vdsBcxx.rowCount() <= 0) {
				dsTemp.getRow(i).put("ygxs", "");
				dsTemp.getRow(i).put("xzzw", "");
			} else {
				dsTemp.getRow(i).put("ygxs", vdsBcxx.getString(0, "ygxs"));
				dsTemp.getRow(i).put("xzzw", vdsBcxx.getString(0, "xzzw"));
			}

			ltxyszgxxinfo.add(dsTemp.getRow(i));
		}

		rdo.put("ltxyszgxxinfo", ltxyszgxxinfo);
		
		QueryLogTool.updateQueryLog(querylogid, ltxyszgxxinfo.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.根据ryid获取个人履历信息
	 * 
	 * @author ldf
	 * @date 创建时间 2015-3-23
	 * @since V1.0
	 */
	public DataObject queryLtxyszgllxxByRyid(final DataObject para) throws Exception {
		String ryid = para.getString("ryid");
		StringBuffer sqlBF = new StringBuffer();

		sqlBF.setLength(0);
		sqlBF.append(" select qsny,zzny,dwmc,tsgzbs,glzdlb, ");
		sqlBF.append(" 	 	  gw bz                         ");
		sqlBF.append(" from si3u.per_rec                    ");
		sqlBF.append(" where ryid = ?                       ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore perrec = this.sql.executeQuery();

		perrec = perrec.sort("qsny");
		DataObject rdo = new DataObject();
		rdo.put("perrec", perrec);
		return rdo;
	}

	/**
	 * 查询离退休账号变更情况
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-4-13
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryLtxzhbgqkInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("离退休账号变更情况查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dfjgid = para.getString("dfjgid");
		String dfjgbh = para.getString("dfjgbh");
		
		//临沂 判断代发机构id和编号
		if (dfjgid == null) {
			dfjgid = "";
		}
		if (dfjgbh == null) {
			dfjgbh = "";
		}
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String dqrq = DateUtil.FormatDate(DateUtil.getDBDate(), "yyyyMMdd");

		if (qsrq == null || qsrq.trim().isEmpty()) {
			this.bizException("起始日期不能为空。");
		}
		if (zzrq == null || zzrq.trim().isEmpty()) {
			this.bizException("终止日期不能为空。");
		}

		if (zzrq.compareTo(dqrq) > 0) {
			this.bizException("终止日期不能晚当前止日期。");
		}

		if (qsrq.compareTo(zzrq) > 0) {
			this.bizException("起始日期不能晚于终止日期。");
		}

		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.xm, p.shbzhm, r.dwbh, ? dfjgbh, p.yhzh ");
		sqlBF.append("   from ad3u.per_info p, ");
		sqlBF.append("        ad3u.per_chng c, ");
		sqlBF.append("        ad3u.per_chng_detl d, ");
		sqlBF.append("        si3u.orgn_reg r ");
		sqlBF.append("  where p.ryid = c.ryid ");
		sqlBF.append("    and c.xxbgid = d.xxbgid ");
		sqlBF.append("    and p.dwdjid = r.dwdjid ");
		sqlBF.append("    and d.bgxm = 'yhzh' ");
		sqlBF.append("    and to_char(c.bgrq,'yyyymmdd') between ? and ? ");
		//胜利油田允许代发机构为空 rzs 20191221
		if (!"".equals(dfjgid) && dfjgid != null) {
			sqlBF.append("    and p.dfjgid = '"+dfjgid+"' ");
		}
		
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		this.readonlysql.setString(1, dfjgbh);
		this.readonlysql.setString(2, qsrq);
		this.readonlysql.setString(3, zzrq);
		DataStore vds = this.readonlysql.executeQuery();

		for (int i = 0; i < vds.rowCount(); i++) {
			// 若存在账号变更或新增记录，取出其补贴金额
			String ryid = vds.getString(i, "ryid");

			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(btje), 0) ylj ");
			sqlBF.append("   from ad3u.per_giv_month_std s ");
			sqlBF.append("  where s.ryid = ? ");
			sqlBF.append("    and substr(?, 1, 6) between qsny and nvl(zzny,205012) ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, zzrq);
			DataStore vds_temp = this.readonlysql.executeQuery();

			double ylj = vds_temp.getDouble(0, "ylj");

			// 取出补充信息中的发放模式、电汇银行字段
			String vffms = AdTools.getPerCmpl(ryid, "FFMS","");//补充信息加默认值   LG-20160622
			String vdhyh = AdTools.getPerCmpl(ryid, "DHYH","");

			vds.put(i, "ffms", vffms);
			vds.put(i, "dhyh", vdhyh);
			vds.put(i, "ylj", DataFormat.formatDouble(ylj));
		}

		DataObject rdo = new DataObject();
		rdo.put("ds", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return rdo;
	}

	/**
	 * 查询退休信息统计信息
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-4-13
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryTxxxtjInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("退休信息统计", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String jbjgid = this.getBizInstitution();
		String dwdjid = para.getString("dwdjid");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String dwxz=para.getString("dwxz");//增加单位性质的筛选条件  zlj 2016-8-15
		dwxz = HsuTools.replaceC2QCQ(dwxz);
		jbjgid = jbjgid + "%";

		SPrompt prompt = SPromptUtil.getSPrompt();

		if (qsrq == null || qsrq.trim().isEmpty()) {
			this.bizException("起始日期不能为空。");
		}
		if (zzrq == null || zzrq.trim().isEmpty()) {
			this.bizException("终止日期不能为空。");
		}

		if (qsrq.compareTo("20140101") < 0) {
			this.bizException("起始日期不能早于20140101。");
		}

		if (qsrq.compareTo(zzrq) > 0) {
			this.bizException("起始日期不能晚于终止日期。");
		}

		sqlBF.setLength(0);
		sqlBF.append(" select r.dwbh, r.dwdjid, r.cbdwmc dwmc ");
		sqlBF.append("   from si3u.orgn_reg r ");
		sqlBF.append("  where r.jbjgid like ? ");
		if (dwdjid != null && dwdjid.trim().isEmpty() == false) {
			sqlBF.append("  and r.dwdjid = '" + dwdjid + "' ");
		}
		if (dwxz != null && dwxz.trim().isEmpty() == false) {//增加单位性质的筛选条件  zlj 2016-8-15
			sqlBF.append("and r.cbdwxz in (").append(dwxz).append(") ");
		}
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, jbjgid);
		DataStore dwds = this.readonlysql.executeQuery();

		if (dwds.rowCount() == 0) {
			this.bizException("本社保机构不存在任何单位或者输入的单位不在本社保机构中!");
		}

		prompt.setTotalSteps(dwds.rowCount());

		dwds.sort("dwbh");
		DataStore ds_temp = new DataStore();
		for (int i = 0; i < dwds.rowCount(); i++) {
			String vdwdjid = dwds.getString(i, "dwdjid");
			String vdwmc = dwds.getString(i, "dwmc");
			String vdwbh = dwds.getString(i, "dwbh");

			prompt.moveForword(1);
			prompt.prompt("正在查询[" + vdwbh + "][" + vdwmc + "]的退休信息...");
			prompt.prompt("查询进度：第[" + (i + 1) + "]个单位/共[" + dwds.rowCount()
					+ "]个单位");

			// 退休资格人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) txzgrs ");
			sqlBF.append("   from si3u.per_reg e,  ");
			sqlBF.append("        si3u.per_natl_cmpl c ");
			sqlBF.append("  where e.ryid = c.ryid ");
			sqlBF.append("    and e.hdbz = '1' ");
			sqlBF.append("    and c.bcxmbh = 'LTXRQ' ");
			sqlBF.append("    and c.bcxmz between ? and ? ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and exists (select '' ");
			sqlBF.append("                  from si3u.per_natl_cmpl c1 ");
			sqlBF.append("                 where c1.ryid = e.ryid ");
			sqlBF.append("                   and c1.bcxmbh = 'TXXXCJBZ' ");
			sqlBF.append("                   and c1.bcxmz = '1') ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, qsrq);
			this.readonlysql.setString(2, zzrq);
			this.readonlysql.setString(3, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vtxzgrs = ds_temp.getInt(0, "txzgrs");
			dwds.put(i, "txzgrs", vtxzgrs);

			// 缴费历史初审人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) csrs ");
			sqlBF.append("   from si3u.per_reg e,  ");
			sqlBF.append("        si3u.per_natl_cmpl c ");
			sqlBF.append("  where e.ryid = c.ryid ");
			sqlBF.append("    and e.hdbz = '1' ");
			sqlBF.append("    and c.bcxmbh = 'LTXRQ' ");
			sqlBF.append("    and c.bcxmz between ? and ? ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and exists (select '' ");
			sqlBF.append("                  from si3u.per_natl_cmpl c1 ");
			sqlBF.append("                 where c1.ryid = e.ryid ");
			sqlBF.append("                   and c1.bcxmbh = 'JFLSCSBZ' ");
			sqlBF.append("                   and c1.bcxmz = '1') ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, qsrq);
			this.readonlysql.setString(2, zzrq);
			this.readonlysql.setString(3, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vcsrs = ds_temp.getInt(0, "csrs");
			dwds.put(i, "csrs", vcsrs);

			// 缴费历史复审人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) fsrs ");
			sqlBF.append("   from si3u.per_reg e,  ");
			sqlBF.append("        si3u.per_natl_cmpl c ");
			sqlBF.append("  where e.ryid = c.ryid ");
			sqlBF.append("    and e.hdbz = '1' ");
			sqlBF.append("    and c.bcxmbh = 'LTXRQ' ");
			sqlBF.append("    and c.bcxmz between ? and ? ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and exists (select '' ");
			sqlBF.append("                  from si3u.per_natl_cmpl c1 ");
			sqlBF.append("                 where c1.ryid = e.ryid ");
			sqlBF.append("                   and c1.bcxmbh = 'JFLSFSBZ' ");
			sqlBF.append("                   and c1.bcxmz = '1') ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, qsrq);
			this.readonlysql.setString(2, zzrq);
			this.readonlysql.setString(3, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vfsrs = ds_temp.getInt(0, "fsrs");
			dwds.put(i, "fsrs", vfsrs);

			// 减员人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) jyrs ");
			sqlBF.append("   from si3u.per_reg e,  ");
			sqlBF.append("        si3u.per_natl_cmpl c ");
			sqlBF.append("  where e.ryid = c.ryid ");
			sqlBF.append("    and e.hdbz = '1' ");
			sqlBF.append("    and e.rydjlb in ('A0B','A0C','A0D') ");
			sqlBF.append("    and c.bcxmbh = 'LTXRQ' ");
			sqlBF.append("    and c.bcxmz between ? and ? ");
			sqlBF.append("    and e.dwdjid = ? ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, qsrq);
			this.readonlysql.setString(2, zzrq);
			this.readonlysql.setString(3, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vjyrs = ds_temp.getInt(0, "jyrs");
			dwds.put(i, "jyrs", vjyrs);

			// 账户结清人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(distinct a.rydjid) zhjqrs ");
			sqlBF.append("   from si3u.aged_settle a, ");
			sqlBF.append("        ad3u.emp_info e    ");
			sqlBF.append("  where a.ryid = e.ryid ");
			sqlBF.append("    and e.ltxrq between ? and ? ");
			sqlBF.append("    and e.dwdjid = ? ");
			// 改为限制表si3u.aged_pay_his--ywj--20161221
			sqlBF.append("    and not exists (select '1' ");
			sqlBF.append("           from si3u.aged_pay_his b ");
			sqlBF.append("          where a.ryid = b.ryid ");
			sqlBF.append("            and b.btcxlnt is null ");
			sqlBF.append("            and b.btbntcx is null) ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, qsrq);
			this.readonlysql.setString(2, zzrq);
			this.readonlysql.setString(3, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vzhjqrs = ds_temp.getInt(0, "zhjqrs");
			dwds.put(i, "zhjqrs", vzhjqrs);

			// 退休新增人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) txxzrs ");
			sqlBF.append("   from ad3u.emp_info e, ");
			sqlBF.append("        ad3u.per_info p ");
			sqlBF.append("  where e.ryid = p.ryid ");
			sqlBF.append("    and e.ltxrq between ? and ? ");
			sqlBF.append("    and e.dwdjid = ? ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, qsrq);
			this.readonlysql.setString(2, zzrq);
			this.readonlysql.setString(3, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vtxxzrs = ds_temp.getInt(0, "txxzrs");
			dwds.put(i, "txxzrs", vtxxzrs);

			// 退休待遇计算人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) dyjsrs ");
			sqlBF.append("   from ad3u.emp_info e ");
			sqlBF.append("  where e.dwdjid = ? ");
			sqlBF.append("    and e.ltxrq between ? and ? ");
			sqlBF.append("    and (exists ");
			sqlBF.append("         (select '*' from ad3u.per_giv_month_std s where e.ryid = s.ryid) or exists ");
			sqlBF.append("         (select 'x' from ad3u.per_giv_month_std_buffer b where e.ryid = b.ryid) or exists");
			sqlBF.append("         (select 'x' from ad3u.per_cal_his p where e.ryid=p.ryid and p.dyxmbh = 'PJZS_38'))   ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			this.readonlysql.setString(2, qsrq);
			this.readonlysql.setString(3, zzrq);
			ds_temp = this.readonlysql.executeQuery();

			int vdyjsrs = ds_temp.getInt(0, "dyjsrs");
			dwds.put(i, "dyjsrs", vdyjsrs);

			// 纳入统筹人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) nrtcrs ");
			sqlBF.append("   from ad3u.emp_info e, ");
			sqlBF.append("        ad3u.per_info p ");
			sqlBF.append("  where e.ryid = p.ryid  ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and e.ltxrq between ? and ? ");
			sqlBF.append("    and (exists ");
			sqlBF.append("         (select '*' from ad3u.per_giv_month_std s where e.ryid = s.ryid and nvl(p.dyspbz,'0') = '1') or exists ");
			sqlBF.append("         (select 'x' from ad3u.per_giv_month_std_buffer b where e.ryid = b.ryid)) ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			this.readonlysql.setString(2, qsrq);
			this.readonlysql.setString(3, zzrq);
			ds_temp = this.readonlysql.executeQuery();

			int vnrtcrs = ds_temp.getInt(0, "nrtcrs");
			dwds.put(i, "nrtcrs", vnrtcrs);

			// 预发人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(distinct e.ryid) yfrs ");
			sqlBF.append("   from ad3u.emp_info e, ");
			sqlBF.append("        ad3u.per_giv_month_std s ");
			sqlBF.append("  where e.ryid = s.ryid ");
			sqlBF.append("    and s.btbh = 'A1L2' ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and e.ltxrq between ? and ? ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			this.readonlysql.setString(2, qsrq);
			this.readonlysql.setString(3, zzrq);
			ds_temp = this.readonlysql.executeQuery();

			int vyfrs = ds_temp.getInt(0, "yfrs");
			dwds.put(i, "yfrs", vyfrs);
		}

		prompt.complete();
		prompt.close();

		DataObject rdo = new DataObject();
		rdo.put("ds", dwds);
		
		QueryLogTool.updateQueryLog(querylogid, dwds.rowCount());
		
		return rdo;
	}

	/**
	 * 查询当前预发人员
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-4-14
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryDqyfryInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("当前预发人员查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dfjgid = para.getString("dfjgid");
		String dwdjid = para.getString("dwdjid");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String dqrq = DateUtil.FormatDate(DateUtil.getDBDate(), "yyyyMMdd");
		String ffzt = para.getString("ffzt","0");

		if (qsrq == null || qsrq.trim().isEmpty()) {
			this.bizException("起始日期不能为空。");
		}
		if (zzrq == null || zzrq.trim().isEmpty()) {
			this.bizException("终止日期不能为空。");
		}

		if (qsrq.compareTo(zzrq) > 0) {
			this.bizException("起始日期不能晚于终止日期。");
		}
		if ("1".equals(ffzt)){//增加尚未进行二次复核人员的查询    LG-20160727
			sqlBF.setLength(0);
			sqlBF.append(" select p.ryid, p.xm, p.shbzhm, p.xb, o.dwbh, ");
			sqlBF.append("        o.dwdjid, o.cbdwmc dwmc, e.ltxrq, s.btje yfylj, s.qsny ffny, ");
			sqlBF.append("        n.dfjgid, n.dfjgbh, n.dfjgmc, p.yhzh ");
			sqlBF.append("   from ad3u.per_info p, ");
			sqlBF.append("        ad3u.emp_info e, ");
			sqlBF.append("        si3u.orgn_reg o, ");
			sqlBF.append("        be3u.provide_natl n, ");
			sqlBF.append("        ad3u.per_giv_month_std_buffer s ");
			sqlBF.append("  where p.ryid = e.ryid ");
			sqlBF.append("    and p.dwdjid = o.dwdjid ");
			sqlBF.append("    and p.dfjgid = n.dfjgid(+) ");
			sqlBF.append("    and p.ryid = s.ryid ");
			sqlBF.append("    and s.zzny is null ");
			sqlBF.append("    and nvl(s.fhbz,'0')='0' ");
			sqlBF.append("    and s.btbh = 'A1L2' ");
			sqlBF.append("    and ? between s.qsny and nvl(s.zzny,'205012') ");
			sqlBF.append("    and e.ltxrq between ? and ? ");
			sqlBF.append("    and not exists "); 
			sqlBF.append("       (select 1 from ad3u.per_giv_month_std b where s.ryid = b.ryid) ");
		}else{
			sqlBF.setLength(0);
			sqlBF.append(" select p.ryid, p.xm, p.shbzhm, p.xb, o.dwbh, ");
			sqlBF.append("        o.dwdjid, o.cbdwmc dwmc, e.ltxrq, s.btje yfylj, s.qsny ffny, ");
			sqlBF.append("        n.dfjgid, n.dfjgbh, n.dfjgmc, p.yhzh ");
			sqlBF.append("   from ad3u.per_info p, ");
			sqlBF.append("        ad3u.emp_info e, ");
			sqlBF.append("        si3u.orgn_reg o, ");
			sqlBF.append("        be3u.provide_natl n, ");
			sqlBF.append("        ad3u.per_giv_month_std s ");
			sqlBF.append("  where p.ryid = e.ryid ");
			sqlBF.append("    and p.dwdjid = o.dwdjid ");
			sqlBF.append("    and p.dfjgid = n.dfjgid(+) ");
			sqlBF.append("    and p.ryid = s.ryid ");
			sqlBF.append("    and s.zzny is null ");
			sqlBF.append("    and s.btbh = 'A1L2' ");
			sqlBF.append("    and ? between s.qsny and nvl(s.zzny,'205012') ");
			sqlBF.append("    and e.ltxrq between ? and ? ");
		}	
		if (dwdjid != null && dwdjid.trim().isEmpty() == false) {
			sqlBF.append("  and p.dwdjid = '" + dwdjid + "' ");
		}
		if (dfjgid != null && dfjgid.trim().isEmpty() == false) {
			sqlBF.append("  and p.dfjgid = '" + dfjgid + "' ");
		}
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, dqrq);
		this.readonlysql.setString(2, qsrq);
		this.readonlysql.setString(3, zzrq);
		DataStore vds = this.readonlysql.executeQuery();

		DataObject rdo = new DataObject();
		rdo.put("ds", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return rdo;
	}

	/**
	 * 查询职工预发养老金发放记录
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-4-14
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryZgyfyljffjlInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String ryid = para.getString("ryid");
		String dwdjid = para.getString("dwdjid");

		if (ryid == null || ryid.trim().isEmpty()) {
			this.bizException("人员ID为空，查询失败。");
		}
		if (dwdjid == null || dwdjid.trim().isEmpty()) {
			this.bizException("单位登记ID为空，查询失败。");
		}

		sqlBF.setLength(0);
		sqlBF.append(" select d.ffny qsny, d.ffny zzny, nvl(sum(d.btje), 0) ffje ");
		sqlBF.append("   from ad3u.per_info p, ");
		sqlBF.append("        ad3u.per_giv_detl d ");
		sqlBF.append("  where p.ryid = d.ryid ");
		sqlBF.append("    and d.zdlsh is not null ");
		sqlBF.append("    and d.btbh = 'A1L2' ");
		sqlBF.append("    and p.dwdjid = ? ");
		sqlBF.append("    and p.ryid = ? ");
		sqlBF.append("  group by d.ffny ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		this.sql.setString(2, ryid);
		DataStore vds = this.sql.executeQuery();

		vds.sort("qsny");

		DataObject rdo = new DataObject();
		rdo.put("ds", vds);
		return rdo;
	}

	/**
	 * 方法简介.进入新增离退休人员人数界面
	 * 
	 * @author ldf
	 * @date 创建时间 2015-4-25
	 * @since V1.0
	 */
	public final DataObject fwdXztxryrsQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 方法简介.根据条件查询新增离退休人员人数
	 * 
	 * @author ldf
	 * @date 创建时间 2015-4-25
	 * @since V1.0
	 */
	public DataObject queryXztxryrs(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("新增退休人员人数查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dwdjid = para.getString("dwdjid");
		String qsny = para.getDateToString("qsny", "yyyyMM");
		String zzny = para.getDateToString("zzny", "yyyyMM");
		String jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));

		if (dwdjid == null || dwdjid.trim().isEmpty()) {
			dwdjid = "%";
		}

		sqlBF.setLength(0);
		sqlBF.append("select a.dwdjid,");
		sqlBF.append("       count(1) zrs,");
		sqlBF.append("       sum(decode(nvl(c.dyspbz, '0'), '1', 1, 0)) fhrs,");
		sqlBF.append("       sum(decode(nvl(c.dyspbz, '0'), '1', 0, 1)) wfhrs");
		sqlBF.append("  from ad3u.per_reg a, ad3u.per_info c, si3u.orgn_reg b");
		sqlBF.append(" where a.dwdjid = b.dwdjid");
		sqlBF.append("   and c.ryid = a.ryid");
		sqlBF.append("   and c.dyffzt <> '3'");
		sqlBF.append("   and b.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("   and to_char(a.blzysj, 'yyyyMM') between ? and ?");
		sqlBF.append("   and a.bljyyy is null");
		sqlBF.append("   and a.dwdjid like ?");
		sqlBF.append(" group by a.dwdjid");

		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, qsny);
		this.readonlysql.setString(2, zzny);
		this.readonlysql.setString(3, dwdjid);
		DataStore vds = this.readonlysql.executeQuery();

		for (int i = 0, size = vds.rowCount(); i < size; i++) {
			String vdwdjid = vds.getString(i, "dwdjid");

			sqlBF.setLength(0);
			sqlBF.append("select a.dwbh, a.cbdwmc");
			sqlBF.append("  from si3u.orgn_reg a");
			sqlBF.append(" where a.dwdjid = ?");
			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			DataStore orgnDs = this.readonlysql.executeQuery();
			String dwbh = "";
			String dwmc = "";
			if (orgnDs.rowCount() > 0) {
				dwbh = orgnDs.getString(0, "dwbh");
				dwmc = orgnDs.getString(0, "cbdwmc");
			}
			vds.put(i, "dwbh", dwbh);
			vds.put(i, "dwmc", dwmc);
		}

		DataObject rdo = new DataObject();
		rdo.put("ds", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.进入新增退休人员退休金统计界面
	 * 
	 * @author ldf
	 * @date 创建时间 2015-4-27
	 * @since V1.0
	 */
	public final DataObject fwdXztxrytxjtjQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 方法简介.根据条件查询新增退休人员退休金统计情况
	 * 
	 * @author ldf
	 * @date 创建时间 2015-4-27
	 * @since V1.0
	 */
	public DataObject queryXztxrytxjtj(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("新增退休人员退休金统计", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dwdjid = para.getString("dwdjid");
		String qsny = para.getDateToString("qsny", "yyyyMM");
		String zzny = para.getDateToString("zzny", "yyyyMM");
		String ltxqsny = para.getDateToString("ltxqsny", "yyyyMM");
		String ltxzzny = para.getDateToString("ltxzzny", "yyyyMM");
		String jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));
		String dwxz = para.getString("dwxz");
		dwxz = HsuTools.replaceC2QCQ(dwxz);
		
		if (dwdjid == null || dwdjid.trim().isEmpty()) {
			dwdjid = "%";
		}

		if (ltxqsny == null || "".equals(ltxqsny)) {
			ltxqsny = "000000";
		}

		if (ltxzzny == null || "".equals(ltxzzny)) {
			ltxzzny = "999999";
		}

		sqlBF.setLength(0);
		sqlBF.append("select dwdjid, dwxz, ");
		sqlBF.append("       count(1) zrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A21', 1, 0)) txrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A25', 1, 0)) tstxrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A24', 1, 0)) btrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A31', 1, 0)) tzrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A27', 1, 0)) pcrs,");
		sqlBF.append("       sum(ylj) zylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A21', ylj, 0)) ylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A25', ylj, 0)) tsylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A24', ylj, 0)) btylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A31', ylj, 0)) tzylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A27', ylj, 0)) pcylj");
		sqlBF.append("  from (select a.dwdjid, a.ltxlb, a.ryid, sum(c.btje) ylj, b.cbdwxz dwxz ");
		sqlBF.append("          from ad3u.emp_info          a,");
		sqlBF.append("               si3u.orgn_reg          b,");
		sqlBF.append("               ad3u.per_giv_month_std c,");
		sqlBF.append("               ad3u.per_info          d");
		sqlBF.append("         where a.dwdjid = b.dwdjid");
		sqlBF.append("           and b.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("           and a.ryid = c.ryid(+)");
		sqlBF.append("           and a.ryid = d.ryid");
		sqlBF.append("           and a.dwdjid like ? ");
		sqlBF.append("           and to_char(d.dyspsj, 'yyyymm') between ? and ? ");//按月查询   LG-20160718
		sqlBF.append("           and substr(nvl(ltxrq, to_char(sysdate, 'yyyyMMdd')),0,6) between ? and ?");
		if (dwxz != null && dwxz.trim().isEmpty() == false) {
			     sqlBF.append("  and b.cbdwxz in (" + dwxz + ") ");
		}
		sqlBF.append("           and c.qsny = (select min(qsny)");
		sqlBF.append("                           from ad3u.per_giv_month_std d");
		sqlBF.append("                          where a.ryid = d.ryid)");
		sqlBF.append("         group by a.dwdjid, a.ryid, a.ltxlb, b.cbdwxz)");
		sqlBF.append(" group by dwdjid, dwxz");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		this.sql.setString(2, qsny);
		this.sql.setString(3, zzny);
		this.sql.setString(4, ltxqsny);
		this.sql.setString(5, ltxzzny);
		DataStore vds = this.sql.executeQuery();

		for (int i = 0, size = vds.rowCount(); i < size; i++) {
			String vdwdjid = vds.getString(i, "dwdjid");

			sqlBF.setLength(0);
			sqlBF.append("select a.dwbh, a.cbdwmc");
			sqlBF.append("  from si3u.orgn_reg a");
			sqlBF.append(" where a.dwdjid = ?");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vdwdjid);
			DataStore orgnDs = this.sql.executeQuery();
			String dwbh = "";
			String dwmc = "";
			if (orgnDs.rowCount() > 0) {
				dwbh = orgnDs.getString(0, "dwbh");
				dwmc = orgnDs.getString(0, "cbdwmc");
			}
			vds.put(i, "dwbh", dwbh);
			vds.put(i, "dwmc", dwmc);
		}

		DataObject rdo = new DataObject();
		vds.sort("dwbh").sort("dwxz");
		rdo.put("ds", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.根据条件查询新增退休人员退休金统计情况
	 * 
	 * @author 高智慧 2017-3-6
	 */
	public DataObject queryXztxrytxjtj_3799(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("新增退休人员退休金统计", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dwdjid = para.getString("dwdjid");
		String qsny = para.getDateToString("qsny", "yyyyMM");
		String zzny = para.getDateToString("zzny", "yyyyMM");
		String ltxqsny = para.getDateToString("ltxqsny", "yyyyMM");
		String ltxzzny = para.getDateToString("ltxzzny", "yyyyMM");
		String jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));
		String dwxz = para.getString("dwxz");
		dwxz = HsuTools.replaceC2QCQ(dwxz);
		
		if (dwdjid == null || dwdjid.trim().isEmpty()) {
			dwdjid = "%";
		}

		if (ltxqsny == null || "".equals(ltxqsny)) {
			ltxqsny = "000000";
		}

		if (ltxzzny == null || "".equals(ltxzzny)) {
			ltxzzny = "999999";
		}

		sqlBF.setLength(0);
		sqlBF.append("select dwdjid, dwxz, dwbh, cbdwmc dwmc, ");
		sqlBF.append("       count(1) zrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A21', 1, 0)) txrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A25', 1, 0)) tstxrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A24', 1, 0)) btrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A31', 1, 0)) tzrs,");
		sqlBF.append("       sum(decode(ltxlb, 'A27', 1, 0)) pcrs,");
		sqlBF.append("       sum(ylj) zylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A21', ylj, 0)) ylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A25', ylj, 0)) tsylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A24', ylj, 0)) btylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A31', ylj, 0)) tzylj,");
		sqlBF.append("       sum(decode(ltxlb, 'A27', ylj, 0)) pcylj");
		sqlBF.append("  from (select a.dwdjid, a.ltxlb, a.ryid, sum(c.btje) ylj, b.cbdwxz dwxz, b.dwbh, b.cbdwmc ");
		sqlBF.append("          from ad3u.emp_info          a,");
		sqlBF.append("               si3u.orgn_reg          b,");
		sqlBF.append("               ad3u.per_giv_month_std c,");
		sqlBF.append("               ad3u.per_info          d");
		sqlBF.append("         where a.dwdjid = b.dwdjid");
		sqlBF.append("           and b.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("           and a.ryid = c.ryid(+)");
		sqlBF.append("           and a.ryid = d.ryid");
		sqlBF.append("           and a.dwdjid like ? ");
		sqlBF.append("           and d.dyspbz = '1' ");
		//修改起始终止年月查询方式，不再通过dyfhsj去查而是根据补充信息YLECFHSJ去查询  --zkj modify 2018/05/21
		sqlBF.append("           and exists ( select 1                      ");
		sqlBF.append("                          from ad3u.per_cmpl g        ");
		sqlBF.append("                         where a.ryid = g.ryid        ");
		sqlBF.append("                           and g.bcxmbh = 'YLECFHSJ'  ");
		sqlBF.append("                      and substr(g.bcxmz,1,6) between ? and ?   ) ");
		sqlBF.append("           and substr(nvl(ltxrq, '20501231'),0,6) between ? and ?");
		if (dwxz != null && dwxz.trim().isEmpty() == false) {
			     sqlBF.append("  and b.cbdwxz in (" + dwxz + ") ");
		}
		sqlBF.append("           and c.qsny = (select min(qsny)");
		sqlBF.append("                           from ad3u.per_giv_month_std d");
		sqlBF.append("                          where a.ryid = d.ryid)");		
		sqlBF.append("           and not exists (select 1                   ");
		sqlBF.append("                             from ad3u.per_cmpl f     ");
		sqlBF.append("                            where a.ryid = f.ryid     ");
		sqlBF.append("                              and f.bcxmz = '1'      ");
		sqlBF.append("                              and f.bcxmbh = 'LSDYBZ')      ");
		sqlBF.append("         group by a.dwdjid, a.ryid, a.ltxlb, b.cbdwxz, b.dwbh, b.cbdwmc )");
		sqlBF.append(" group by dwdjid, dwxz, dwbh, cbdwmc");

		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, dwdjid);
		this.readonlysql.setString(2, qsny);
		this.readonlysql.setString(3, zzny);
		this.readonlysql.setString(4, ltxqsny);
		this.readonlysql.setString(5, ltxzzny);
		DataStore vds = this.readonlysql.executeQuery();
		
		DataObject rdo = new DataObject();
		vds.sort("dwbh").sort("dwxz");
		rdo.put("ds", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.进入查询退休女职工人数界面
	 * 
	 * @author ldf
	 * @date 创建时间 2015-5-8
	 * @since V1.0
	 */
	public final DataObject fwdTxnzgrscxQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 方法简介.查询退休女职工人数
	 * 
	 * @author ldf
	 * @date 创建时间 2015-5-85
	 * @since V1.0
	 */
	public DataObject queryTxnzgrs(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("退休女职工人数查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dwdjid = para.getString("dwdjid");
		String jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));

		if (dwdjid == null || dwdjid.trim().isEmpty()) {
			dwdjid = "%";
		}

		sqlBF.setLength(0);
		sqlBF.append("select a.dwdjid, count(1) zrs,b.cbdwmc dwmc,b.dwbh");
		sqlBF.append("  from ad3u.per_reg a, ad3u.per_info c, si3u.orgn_reg b");
		sqlBF.append(" where a.dwdjid = b.dwdjid");
		sqlBF.append("   and c.ryid = a.ryid");
		sqlBF.append("   and c.dyffzt = '1'");
		sqlBF.append("   and c.xb = '2'");
		sqlBF.append("   and b.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("   and a.bljyyy is null");
		sqlBF.append("   and a.dwdjid like ? ");
		sqlBF.append("   and exists (select 1");
		sqlBF.append("          from ad3u.per_giv_month_std p");
		sqlBF.append("         where a.ryid = p.ryid");
		sqlBF.append("           and to_char(sysdate, 'yyyyMM') between p.qsny and");
		sqlBF.append("               nvl(p.zzny, '999999'))");
		sqlBF.append(" group by a.dwdjid,b.cbdwmc,b.dwbh");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		DataStore vds = this.sql.executeQuery();
		vds = vds.sort("dwbh");
		DataObject rdo = new DataObject();
		rdo.put("ds", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return rdo;
	}

	/**
	 * 跳转到月新增退休人员补发查询界面
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-6-3
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject fwdYxztxrybfQuery(DataObject para) throws Exception {
		DataStore ds = new DataStore();
		
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end

		DataObject vdo = new DataObject();
		vdo.put("dsjg", ds);

		return vdo;
	}

	/**
	 * 月新增退休人员补发查询
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-6-3
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryYxztxrybfInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("月新增退休人员补发查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String ny = para.getDateToString("ny", "yyyyMM");
		String jbjgid = para.getString("jbjgid");
		jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(jbjgid));
		String sy = DateUtil.descreaseYearMonth(ny, 1);

		if (ny == null || ny.trim().isEmpty()) {
			this.bizException("年月不能为空。");
		}

		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.xm, p.dwdjid, e.ltxlb, e.dacsrq, ");
		sqlBF.append("        e.cjgzrq, e.ltxrq, p.dyxsksny, p.dfjgid, ");
		sqlBF.append("        o.dwbh, o.cbdwmc, n.dfjgbh, n.dfjgmc, ");
		sqlBF.append("        p.shbzhm ");
		sqlBF.append("   from ad3u.per_reg r, ");
		sqlBF.append("        ad3u.per_info p, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o, ");
		sqlBF.append("        be3u.provide_natl n ");
		sqlBF.append("  where p.ryid = e.ryid ");
		sqlBF.append("    and p.dqdydjid = r.dydjid ");
		sqlBF.append("    and p.dwdjid = o.dwdjid ");
		sqlBF.append("    and p.dfjgid = n.dfjgid ");
		sqlBF.append("    and instr(p.dylqlb,'101')>0 ");
		sqlBF.append("    and p.dyspbz = '1' ");
		sqlBF.append("    and nvl(p.dyffzt, '0') = '1' ");
		if (jbjgid != null && jbjgid.trim().isEmpty() == false) {
			sqlBF.append("    and r.jbjgid in (" + jbjgid + ") ");
		}
		sqlBF.append("    and to_char(r.blzysj,'yyyymm') = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ny);
		DataStore vds = this.sql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append(" select sum(decode(d.fflb, 'A', d.btje, 0)) zqyybfje, ");
		sqlBF.append("        sum(decode(d.btbh, 'A148', d.btje, 0)) bfqnf ");
		sqlBF.append("   from ad3u.per_giv_detl d ");
		sqlBF.append("  where d.ryid = ? ");
		sqlBF.append("    and d.fsyy = '2' ");
		sqlBF.append("    and d.yfny <= ? ");
		String bfSql = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append(" select min(a.qsny) qsny ");
		sqlBF.append("   from ad3u.per_giv_month_std a ");
		sqlBF.append("  where a.ryid = ? ");
		String minSql = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) txj  ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("	where ryid = ? ");
		sqlBF.append("	  and ? between qsny and nvl(zzny, '205012') ");
		String txjSql = sqlBF.toString();

		DataStore bfds = new DataStore();
		DataStore ds = new DataStore();
		double bfje = 0.0, bfqbf = 0.0;
		for (int i = 0; i < vds.rowCount(); i++) {
			String ryid = vds.getString(i, "ryid");

			// 取退休核定养老金
			this.sql.setSql(minSql);
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() == 0) {
				this.bizException("没有找到人员ID为[" + ryid + "]的人员的待遇信息。");
			}
			String qsny = ds.getString(0, "qsny");

			this.sql.setSql(txjSql);
			this.sql.setString(1, ryid);
			this.sql.setString(2, qsny);

			ds = this.sql.executeQuery();
			double txj = ds.getDouble(0, "txj");

			this.sql.setSql(bfSql);
			this.sql.setString(1, ryid);
			this.sql.setString(2, sy);
			bfds = this.sql.executeQuery();
			// 取至前一月补发金额
			bfje = bfds.getDouble(0, "zqyybfje");
			// 取补发取暖费
			bfqbf = bfds.getDouble(0, "bfqnf");

			vds.put(i, "txhdylj", DataFormat.formatDouble(txj));
			vds.put(i, "zqyybfje", DataFormat.formatDouble(bfje));
			vds.put(i, "bfqnf", DataFormat.formatDouble(bfqbf));
		}

		vds.sort("shbzhm").sort("dwbh");

		DataObject vdo = new DataObject();
		vdo.put("dsperinfo", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return vdo;
	}
	/**
	 * 
	 * 方法简介.查询月新增人员补发查询：东营客户化，东营要求统计当月开始发放待遇人员的补发（人员退休之后不一定立即发待遇，有可能是下月发）
	 * 
	 * @author 韦超 2016-5-19
	 */
	public DataObject queryYxztxrybfInfo_3705(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("月新增退休人员补发查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String ny = para.getDateToString("ny", "yyyyMM");
		String jbjgid = para.getString("jbjgid");
		jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(jbjgid));
		//String sy = DateUtil.descreaseYearMonth(ny, 1);

		if (ny == null || ny.trim().isEmpty()) {
			this.bizException("年月不能为空。");
		}

		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.xm, p.dwdjid, e.ltxlb, e.dacsrq, ");
		sqlBF.append("        e.cjgzrq, e.ltxrq, p.dyxsksny, p.dfjgid, ");
		sqlBF.append("        o.dwbh, o.cbdwmc, n.dfjgbh, n.dfjgmc, ");
		sqlBF.append("        p.shbzhm ");
		sqlBF.append("   from ad3u.per_reg r, ");
		sqlBF.append("        ad3u.per_info p, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o, ");
		sqlBF.append("        be3u.provide_natl n ");
		sqlBF.append("  where p.ryid = e.ryid ");
		sqlBF.append("    and p.dqdydjid = r.dydjid ");
		sqlBF.append("    and p.dwdjid = o.dwdjid ");
		sqlBF.append("    and p.dfjgid = n.dfjgid ");
		sqlBF.append("    and instr(p.dylqlb,'101')>0 ");
		sqlBF.append("    and p.dyspbz = '1' ");
		sqlBF.append("    and nvl(p.dyffzt, '0') = '1' ");
		if (jbjgid != null && jbjgid.trim().isEmpty() == false) {
			sqlBF.append("    and r.jbjgid in (" + jbjgid + ") ");
		}
		//东营退休当月有可能不发待遇，per_giv_detl中ffny最小的跟输入年月相等即认为为新增人员
		sqlBF.append("    and exists ( select 1     ");
		sqlBF.append("                   from ad3u.per_giv_detl a  ");
		sqlBF.append("                  where p.ryid = a.ryid ");
		sqlBF.append("               group by a.ryid  ");
		sqlBF.append("                 having min(a.ffny) = ? ) ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ny);
		DataStore vds = this.sql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append(" select sum(decode(d.fflb, 'A', d.btje, 0)) zqyybfje, ");
		sqlBF.append("        sum(decode(d.btbh, 'A148', d.btje, 0)) bfqnf ");
		sqlBF.append("   from ad3u.per_giv_detl d ");
		sqlBF.append("  where d.ryid = ? ");
		//sqlBF.append("    and d.fsyy = '2' ");东营退休当月有可能不发待遇，当下月开始发待遇时fsyy存在不为2的补发,并且统计的是查询年月填单据的金额
		sqlBF.append("    and d.yfny <= ? ");
		sqlBF.append("    and d.ffny = ? ");
		String bfSql = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append(" select min(a.qsny) qsny ");
		sqlBF.append("   from ad3u.per_giv_month_std a ");
		sqlBF.append("  where a.ryid = ? ");
		String minSql = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) txj  ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("	where ryid = ? ");
		sqlBF.append("	  and ? between qsny and nvl(zzny, '205012') ");
		String txjSql = sqlBF.toString();

		DataStore bfds = new DataStore();
		DataStore ds = new DataStore();
		double bfje = 0.0, bfqbf = 0.0;
		for (int i = 0; i < vds.rowCount(); i++) {
			String ryid = vds.getString(i, "ryid");

			// 取退休核定养老金
			this.sql.setSql(minSql);
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() == 0) {
				this.bizException("没有找到人员ID为[" + ryid + "]的人员的待遇信息。");
			}
			String qsny = ds.getString(0, "qsny");

			this.sql.setSql(txjSql);
			this.sql.setString(1, ryid);
			this.sql.setString(2, qsny);

			ds = this.sql.executeQuery();
			double txj = ds.getDouble(0, "txj");

			this.sql.setSql(bfSql);
			this.sql.setString(1, ryid);
			this.sql.setString(2, ny);            //应发年月限制到查询年月当月   李琪-20161017
			this.sql.setString(3, ny);
			bfds = this.sql.executeQuery();
			// 取至前一月补发金额
			bfje = bfds.getDouble(0, "zqyybfje");
			// 取补发取暖费
			bfqbf = bfds.getDouble(0, "bfqnf");

			vds.put(i, "txhdylj", DataFormat.formatDouble(txj));
			vds.put(i, "zqyybfje", DataFormat.formatDouble(bfje));
			vds.put(i, "bfqnf", DataFormat.formatDouble(bfqbf));
		}

		vds.sort("shbzhm").sort("dwbh");

		DataObject vdo = new DataObject();
		vdo.put("dsperinfo", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return vdo;
	}

	/**
	 * 方法简介.查询退休人员明细
	 * 
	 * @author ldf
	 * @date 创建时间 2015-6-25
	 * @since V1.0
	 */
	public DataObject queryTxrymxInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String spSql, jbjgSql, dwSql, ryztSql, dyffztSql,jyrqSql, ltxtjSql;//增加ad3u.per_reg 表中jyrq的限制sql   张超  modify 20161031
		DataStore dsTemp = new DataStore();            //增加离退休条件  add by blp  20161111  
		String jdSql,sqSql;        //增加社区、街道查询条件 add-李琪-20161118
		
		String querylogid = QueryLogTool.saveQueryLog("退休人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 接参数
		String jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		String dwdjid = para.getString("dwdjid");
		String zfrylb = para.getString("zfrylb");
		String zyqsrq = para.getDateToString("zyqsrq", "yyyyMMdd");
		String zyzzrq = para.getDateToString("zyzzrq", "yyyyMMdd");

		String spbz = para.getString("spbz");
		String spqsrq = para.getDateToString("spqsrq", "yyyyMMdd");
		String spzzrq = para.getDateToString("spzzrq", "yyyyMMdd");
		String dyxsqsny = para.getDateToString("dyxsqsny", "yyyyMM");
		String dyxszzny = para.getDateToString("dyxszzny", "yyyyMM");

		String ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		String ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		String csqsrq = para.getDateToString("csqsrq", "yyyyMMdd");
		String cszzrq = para.getDateToString("cszzrq", "yyyyMMdd");
		String cjgzqsrq = para.getDateToString("cjgzqsrq", "yyyyMMdd");

		String cjgzzzrq = para.getDateToString("cjgzzzrq", "yyyyMMdd");
		String ryzt = para.getString("ryzt");
		String dyffzt = para.getString("dyffzt");
		String spr = para.getString("yhid");

		// add 增加复核人、复核起始、终止时间 20151105
		String fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		String fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		String fhr = para.getString("fhid");
		String ltxtj = para.getString("ltxtj","");  // add by blp 20161111
		// add end
		String jdid = para.getString("jdid", ""); // add-李琪-20161118
		String sqid = para.getString("sqid", "");
		// 参数校验
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空");
		}
		if (zyqsrq == null || "".equals(zyqsrq)) {
			zyqsrq = "19000101";
		}
		if (zyzzrq == null || "".equals(zyzzrq)) {
			zyzzrq = "20501231";
		}
		if (zyqsrq.compareTo(zyzzrq) > 0) {
			this.bizException("传入的增员起始日期不能晚于增员终止日期");
		}
		// 审批日期
		if (spqsrq == null || "".equals(spqsrq)) {
			spqsrq = "19000101";
		}
		if (spzzrq == null || "".equals(spzzrq)) {
			spzzrq = "20501231";
		}

		// 复核日期
		if (fhqsrq == null || "".equals(fhqsrq)) {
			fhqsrq = "19000101";
		}
		if (fhzzrq == null || "".equals(fhzzrq)) {
			fhzzrq = "20501231";
		}

		if ("19000101".compareTo(spqsrq) > 0) {
			this.bizException("传入的审批起始日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(spqsrq) < 0) {
			this.bizException("传入的审批终止日期不能晚于2050年12月31日");
		}
		if (spqsrq.compareTo(spzzrq) > 0) {
			this.bizException("传入的审批起始日期不能晚于审批终止日期");
		}
		// 待遇享受开始年月
		if (dyxsqsny == null || "".equals(dyxsqsny)) {
			dyxsqsny = "190001";
		}
		if (dyxszzny == null || "".equals(dyxszzny)) {
			dyxszzny = "205012";
		}
		if ("190001".compareTo(dyxsqsny) > 0) {
			this.bizException("传入的待遇享受开始年月不能早于1900年1月");
		}
		if ("205012".compareTo(dyxszzny) < 0) {
			this.bizException("传入的待遇享受开始年月不能晚于2050年12月");
		}
		if (dyxsqsny.compareTo(dyxszzny) > 0) {
			this.bizException("传入的待遇享受开始年月起始年月不能晚于终止年月");
		}

		// 离退休日期
		if (ltxqsrq == null || "".equals(ltxqsrq)) {
			ltxqsrq = "19000101";
		}
		if (ltxzzrq == null || "".equals(ltxzzrq)) {
			ltxzzrq = "20501231";
		}
		if ("19000101".compareTo(ltxqsrq) > 0) {
			this.bizException("传入的离退休日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(ltxzzrq) < 0) {
			this.bizException("传入的离退休日期不能晚于2050年12月31日");
		}
		if (ltxqsrq.compareTo(ltxzzrq) > 0) {
			this.bizException("传入的离退休日期起始日期不能晚于终止日期");
		}

		// 出生日期
		if (csqsrq == null || "".equals(csqsrq)) {
			csqsrq = "19000101";
		}
		if (cszzrq == null || "".equals(cszzrq)) {
			cszzrq = "20501231";
		}
		if ("19000101".compareTo(csqsrq) > 0) {
			this.bizException("传入的出生日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(cszzrq) < 0) {
			this.bizException("传入的出生日期不能晚于2050年12月31日");
		}
		if (csqsrq.compareTo(cszzrq) > 0) {
			this.bizException("传入的出生日期起始日期不能晚于终止日期");
		}

		// 参加工作日期
		if (cjgzqsrq == null || "".equals(cjgzqsrq)) {
			cjgzqsrq = "19000101";
		}
		if (cjgzzzrq == null || "".equals(cjgzzzrq)) {
			cjgzzzrq = "20501231";
		}
		if ("19000101".compareTo(cjgzqsrq) > 0) {
			this.bizException("传入的参加工作日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(cjgzzzrq) < 0) {
			this.bizException("传入的参加工作日期不能晚于2050年12月31日");
		}
		if (cjgzqsrq.compareTo(cjgzzzrq) > 0) {
			this.bizException("传入的参加工作日期起始日期不能晚于终止日期");
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		// 先查单位，然后循环单位
		// 单位
		if (dwdjid == null || "".equals(dwdjid)) {
			dwSql = "";
		} else {
			dwSql = " and a.dwdjid = '" + dwdjid + "' ";
		}
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.cbdwmc ");
		sqlBF.append("   from si3u.orgn_reg a ");
		sqlBF.append("  where a.jbjgid in (" + jbjgid + ")");
		sqlBF.append(dwSql);
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid) ");
		this.readonlysql.setSql(sqlBF.toString());
		DataStore dsOrgn = this.readonlysql.executeQuery();
		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数
		// 审批标志
		if ("0".equals(spbz)) {
			spSql = " and nvl(a.dyspbz, '0') = '0' ";
		} else if ("1".equals(spbz)) {
			spSql = " and a.dyspbz = '1' and to_char(a.dyspsj, 'yyyymmdd') between '"
					+ spqsrq + "' and '" + spzzrq + "' ";
			if (spr != null && !"".equals(spr)) {
				spSql = spSql + " and a.dyspr = '" + spr + "' ";
			}
			// add 增加复核人、复核起始、终止时间 20151105
			spSql = spSql + " and to_char(a.dyfhsj, 'yyyymmdd') between '"
					+ fhqsrq + "' and '" + fhzzrq + "' ";
			if (fhr != null && !"".equals(fhr)) {
				spSql = spSql + " and a.dyfhr = '" + fhr + "' ";
			}
			// end
		} else {
			spSql = "";
		}
		// 经办机构
		jbjgSql = " and c.jbjgid in (" + jbjgid + ")";

		// 离退休类别
		if (zfrylb == null || "".equals(zfrylb)) {
			zfrylb = "%";
		}

		// 人员状态
		if (ryzt == null || "".equals(ryzt)) {
			ryztSql = "";
			jyrqSql = "";
		} else {
			ryztSql = " and b.ryzt = '" + ryzt + "' ";
			//如果是正常   张超   add   20161031
			if("1".equals(ryzt)){
				jyrqSql = " and c.jyrq is null  ";
			}
			//如果是死亡，出国或退休转外     张超   add   20161031
			else{
				jyrqSql = " and c.jyrq is not null  ";
			}
			
		}

		// 待遇发放状态
		if (dyffzt == null || "".equals(dyffzt)) {
			dyffztSql = "";
		} else {
			dyffztSql = " and a.dyffzt = '" + dyffzt + "' ";
		}
		
		// 离退休条件 add by blp  20161111
		if (ltxtj == null || "".equals(ltxtj)) {
			ltxtjSql = "";
		} else {
			ltxtjSql = " and d.ltxtj = '" + ltxtj + "'";
		}
		//街道、社区 add-李琪-20161118
		if (jdid == null || "".equals(jdid)) {
			jdSql = "";
		} else {
			jdSql = " and a.jdid = '" + jdid + "' ";
		}
		if (sqid == null || "".equals(sqid)) {
			sqSql = "";
		} else {
			sqSql = " and a.sqid = '" + sqid + "' ";
		}
		// 开始循环单位
		DataStore dsPerMx = new DataStore();
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String perdwdjid = dsOrgn.getString(i, "dwdjid");
			String dwmc = dsOrgn.getString(i, "cbdwmc");
			prompt.prompt("正在查询单位【" + dwmc + "】的人员信息...");
			sqlBF.setLength(0);
			sqlBF.append(" select  a.xm,a.ryid,a.xb,a.csrq,d.ltxlb  zfrylb, ");
			sqlBF.append("         d.ltxrq,c.blzyyy,e.dwbh,e.cbdwmc  dwmc,e.cbdwxz  dwxz, ");
			sqlBF.append("         a.dyspsj spsj,a.sszfrq,c.blzysj,a.yhzh,d.cjgzrq, ");
			sqlBF.append("         a.dyxsksny,a.ryid,a.dylqlb,a.dyspr spr,a.dfjglb, ");
			sqlBF.append("         a.dfjgid,a.dyffzt,a.xzzw,nvl(a.dyspbz,  '0')  spbz, ");
			sqlBF.append("         nvl(sum(p.btje),  0)  dqje, ");
			//mod by nx 20190114 增加查询机关补贴 B301~B305
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A111',  p.btje, 'B301', p.btje,  0)),  0)  jcxylj, ");// 基础性养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A112',  p.btje, 'B302', p.btje, 0)),  0)  gdxylj, ");// 过渡性养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,'A102',p.btje,'A103',p.btje,'A10D',p.btje,'B303',p.btje,'B304',p.btje,0)),0)  zhylj, ");// 账户养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A113',  p.btje,  0)),  0)  gdxtjj, ");// 过渡性调节金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'B305',  p.btje,  0)),  0)  zynj, ");// 职业年金  
			sqlBF.append("         nvl(sum(decode(p.btbh,  'H007',  p.btje,  0)),  0)  zfbt, ");// 住房补贴   add rzs-20190419
			sqlBF.append("         nvl(sum(decode(p.btbh,  'H011',  p.btje,  0)),  0)  wybt, ");// 物业补贴   add rzs-20190419
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A10B',  p.btje,  'A10E',  p.btje,  0)),  0)  ce, ");// 差额
			sqlBF.append("         nvl(sum(decode(p.btbh,'A111',0,'A112',0,'A102',0,'A103',0,'A10D',0,'A113',0,'A10B',0,'A10E',0,'B301',0,'B302',0,'B303',0,'B304',0,'B305',0,'H007',0,'H011',0,p.btje)),0)  qtylj, ");// 其他养老金
			sqlBF.append("         a.jdid, a.sqid,a.dyffzt,d.dacsrq,d.stjfnx, ");
			sqlBF.append("		   d.sjjfnx, d.sjjfnx+d.stjfnx zjfnx,c.rydjid,b.ryzt,d.jzgbz,");
			sqlBF.append("		   a.dyfhsj, a.dyfhr,'' ssjd,'' sssq");
			sqlBF.append("     from  ad3u.per_info  a, ");
			sqlBF.append("           si3u.per_natl   b, ");
			sqlBF.append("           ad3u.per_reg    c, ");
			sqlBF.append("           ad3u.emp_info  d, ");
			sqlBF.append("           si3u.orgn_reg  e, ");
			sqlBF.append("           ad3u.per_giv_month_std  p ");
			sqlBF.append("   where  a.dqdydjid  =  c.dydjid ");
			sqlBF.append("       and  c.dwdjid  =  e.dwdjid ");
			sqlBF.append("       and  a.ryid  =  d.ryid ");
			sqlBF.append("       and  a.sszfrq = 'A' ");
			sqlBF.append("       and  a.ryid  =  b.ryid(+) ");
			sqlBF.append("       and  a.ryid  =  p.ryid(+) ");
			sqlBF.append("       and  to_char(sysdate,  'yyyyMM')  between  p.qsny(+)  and ");
			sqlBF.append("               nvl(p.zzny(+),  '205012') ");
			sqlBF.append("       and  d.ltxlb  like  ? ");
			sqlBF.append("       and  to_char(c.blzysj,  'yyyyMMdd')  between  ?  and  ? ");
			sqlBF.append("       and  a.dyxsksny  between  ?  and  ? ");
			sqlBF.append("       and  d.ltxrq  between  ?  and  ? ");
			sqlBF.append("       and  a.csrq  between  ?  and  ? ");
			sqlBF.append("       and  d.cjgzrq  between  ?  and  ? ");
			sqlBF.append("       and  a.dwdjid ='" + perdwdjid + "' ");
			sqlBF.append(dyffztSql);
			sqlBF.append(ryztSql);
			sqlBF.append(jbjgSql);
			sqlBF.append(spSql);
			sqlBF.append(ltxtjSql);
			sqlBF.append(jdSql);
			sqlBF.append(sqSql);
			sqlBF.append("   group  by  a.xm,a.ryid,a.xb,a.csrq,d.ltxlb, ");
			sqlBF.append("              d.ltxrq,c.blzyyy,  e.dwbh,e.cbdwmc,e.cbdwxz, ");
			sqlBF.append("              a.dyspsj,a.sszfrq,c.blzysj,a.yhzh,d.cjgzrq, ");
			sqlBF.append("              a.dyxsksny,a.ryid,a.dylqlb,a.dyspr,a.dfjglb, ");
			sqlBF.append("              a.dfjgid,a.dyffzt,a.xzzw,a.dyspbz,a.jdid, ");
			sqlBF.append("              a.sqid,a.dyffzt,d.dacsrq,d.stjfnx, d.sjjfnx, ");
			sqlBF.append("				c.rydjid,b.ryzt,d.jzgbz,a.dyfhr,a.dyfhsj");
			sqlBF.append(" union all");
			sqlBF.append(" select  a.xm,a.ryid,a.xb,a.csrq,d.yslb  zfrylb, ");
			sqlBF.append("         '' ltxrq,c.blzyyy,e.dwbh,e.cbdwmc  dwmc,e.cbdwxz  dwxz, ");
			sqlBF.append("         a.dyspsj spsj,a.sszfrq,c.blzysj,a.yhzh,'' cjgzrq, ");
			sqlBF.append("         a.dyxsksny,a.ryid,a.dylqlb,a.dyspr spr,a.dfjglb, ");
			sqlBF.append("         a.dfjgid,a.dyffzt,a.xzzw,nvl(a.dyspbz,  '0')  spbz, ");
			sqlBF.append("         nvl(sum(p.btje),  0)  dqje, ");
			sqlBF.append("         0  jcxylj, ");// 基础性养老金
			sqlBF.append("         0  gdxylj, ");// 过渡性养老金
			sqlBF.append("         0  zhylj, ");// 账户养老金
			sqlBF.append("         0  gdxtjj, ");// 过渡性调节金
			sqlBF.append("         0  zynj, ");// 职业年金
			sqlBF.append("         0  zfbt, ");// 住房补贴
			sqlBF.append("         0  wybt, ");// 物业补贴
			sqlBF.append("         0  ce, ");// 差额
			sqlBF.append("         nvl(sum(decode(p.btbh,'A111',0,'A112',0,'A102',0,'A103',0,'A10D',0,'A113',0,'A10B',0,'A10E',0,'B301',0,'B302',0,'B303',0,'B304',0,'B305',0,'H007',0,'H011',0,p.btje)),0)  qtylj, ");// 其他养老金
			sqlBF.append("         a.jdid, a.sqid,a.dyffzt,'' dacsrq,0 stjfnx, ");
			sqlBF.append("		   0 sjjfnx, 0 zjfnx,c.rydjid,'1' ryzt,'' jzgbz, ");
			sqlBF.append("		   a.dyfhsj, a.dyfhr,'' ssjd,'' sssq");
			sqlBF.append("     from  ad3u.per_info  a, ");
			sqlBF.append("           ad3u.per_reg    c, ");
			sqlBF.append("           ad3u.supp_info  d, ");
			sqlBF.append("           si3u.orgn_reg  e, ");
			sqlBF.append("           ad3u.per_giv_month_std  p ");
			sqlBF.append("   where  a.dqdydjid  =  c.dydjid ");
			sqlBF.append("       and  c.dwdjid  =  e.dwdjid ");
			sqlBF.append("       and  a.ryid  =  d.ryid ");
			sqlBF.append("       and  a.sszfrq = 'B' ");
			sqlBF.append("       and  a.ryid  =  p.ryid(+) ");
			sqlBF.append("       and  to_char(sysdate,  'yyyyMM')  between  p.qsny(+)  and ");
			sqlBF.append("               nvl(p.zzny(+),  '205012') ");
			sqlBF.append("       and  d.yslb  like  ? ");
			sqlBF.append("       and  to_char(c.blzysj,  'yyyyMMdd')  between  ?  and  ? ");
			sqlBF.append("       and  a.dyxsksny  between  ?  and  ? ");
			sqlBF.append("       and  d.dyqsny||'01'  between  ?  and  ? ");
			sqlBF.append("       and  a.csrq  between  ?  and  ? ");
			sqlBF.append("       and  a.dwdjid ='" + perdwdjid + "' ");
			sqlBF.append(dyffztSql);
			sqlBF.append(jyrqSql);//改为限制ad3u.per_reg 表中jyrq字段   张超   modify   20161031
			sqlBF.append(jbjgSql);
			sqlBF.append(spSql);
			sqlBF.append(jdSql);
			sqlBF.append(sqSql);
			sqlBF.append("   group  by  a.xm,a.ryid,a.xb,a.csrq,d.yslb, d.dyqsny,");
			sqlBF.append("              c.blzyyy,  e.dwbh,e.cbdwmc,e.cbdwxz, ");
			sqlBF.append("              a.dyspsj,a.sszfrq,c.blzysj,a.yhzh, ");
			sqlBF.append("              a.dyxsksny,a.ryid,a.dylqlb,a.dyspr,a.dfjglb, ");
			sqlBF.append("              a.dfjgid,a.dyffzt,a.xzzw,a.dyspbz,a.jdid, ");
			sqlBF.append("              a.sqid,a.dyffzt, c.rydjid,a.dyfhr,a.dyfhsj");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, zfrylb);
			this.readonlysql.setString(2, zyqsrq);
			this.readonlysql.setString(3, zyzzrq);
			this.readonlysql.setString(4, dyxsqsny);
			this.readonlysql.setString(5, dyxszzny);
			this.readonlysql.setString(6, ltxqsrq);
			this.readonlysql.setString(7, ltxzzrq);
			this.readonlysql.setString(8, csqsrq);
			this.readonlysql.setString(9, cszzrq);
			this.readonlysql.setString(10, cjgzqsrq);
			this.readonlysql.setString(11, cjgzzzrq);
			this.readonlysql.setString(12, zfrylb);
			this.readonlysql.setString(13, zyqsrq);
			this.readonlysql.setString(14, zyzzrq);
			this.readonlysql.setString(15, dyxsqsny);
			this.readonlysql.setString(16, dyxszzny);
			this.readonlysql.setString(17, ltxqsrq);
			this.readonlysql.setString(18, ltxzzrq);
			this.readonlysql.setString(19, csqsrq);
			this.readonlysql.setString(20, cszzrq);

			DataStore ds = this.readonlysql.executeQuery();

			ds = ds.sort("shbzhm");
			for (int k = 0, n = ds.rowCount(); k < n; k++) {
				String ryid = ds.getString(k, "ryid");
				String sprbh = ds.getString(k, "spr");
				String fhrbh = ds.getString(k, "dyfhr");

				String yxzjhm = "", lxdh = "", zyjszwjb = "", jtzz = "", grsf = "", gjzyzgdj = "";
				dsTemp.clear();
				this.readonlysql.setSql("select yxzjhm,lxrdh,zyjszwjb,jtzz,grsf,gjzyzgdj from biuv.person where ryid = ?");
				this.readonlysql.setString(1, ryid);
				dsTemp = this.readonlysql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					yxzjhm = dsTemp.getString(0, "yxzjhm");
					lxdh = dsTemp.getString(0, "lxrdh");
					zyjszwjb = dsTemp.getString(0, "zyjszwjb");
					jtzz = dsTemp.getString(0, "jtzz");
					grsf = dsTemp.getString(0, "grsf");
					gjzyzgdj = dsTemp.getString(0, "gjzyzgdj");
				}
				// 审批人
				ds.put(k, "spr", HsuTools.getCzyxmByUserId(sprbh));
				ds.put(k, "fhr", HsuTools.getCzyxmByUserId(fhrbh));
				ds.put(k, "txdah", AdTools.getPerCmpl(ryid, "TXDAH", ""));
				ds.put(k, "sfzhm", yxzjhm);
				ds.put(k, "lxdh", lxdh);
				ds.put(k, "zyjszwjb", zyjszwjb);
				ds.put(k, "jtzz", jtzz);
				ds.put(k, "grsf", grsf);
				ds.put(k, "gjzyzgdj", gjzyzgdj);
				// 东营增加原单位信息-李琪-20161019
				String ydw = "";
				dsTemp.clear();
				sqlBF.setLength(0);
				sqlBF.append("select a.zglb, b.cbdwmc ");
				sqlBF.append("  from si3u.per_reg a,si3u.orgn_reg b ");
				sqlBF.append(" where a.ryid = ? ");
				sqlBF.append("    and a.dwdjid = b.dwdjid ");
				sqlBF.append("   order by a.qsny desc ");
				sql.setSql(sqlBF.toString());
				sql.setString(1, ryid);
				dsTemp = sql.executeQuery();
				if (dsTemp.rowCount() > 1) {
					String zglb = dsTemp.getString(0, "zglb");
					String zglbl = dsTemp.getString(1, "zglb");
					if (zglb != null && !"".equals(zglb)) {
						if (zglb.equals(zglbl)) {
							ydw = dsTemp.getString(1, "cbdwmc");
						}
					}
				}
				ds.put(k, "ydw", ydw); // end-李琪-20161019
				
				// 临沂增加退休证编号 zxk-2019-10-25
				String txzbh = "";
				this.sql.setSql(" select bcxmz from ad3u.per_cmpl where ryid = ? and bcxmbh = 'TXZBH' ");
				this.sql.setString(1, ryid);
				DataStore txzds = this.sql.executeQuery();

				if (txzds.rowCount() > 0) {
					txzbh = txzds.getString(0, "bcxmz");
				}
				ds.put(k,"txzbh",txzbh);
			}
			dsPerMx.combineDatastore(ds);
			prompt.moveForword(1);
		}
		HsuTools.genJdxxDataStore(dsPerMx, "jdid", "jdbh", "ssjd");
		HsuTools.genSqxxDataStore(dsPerMx, "sqid", "sqbh", "sssq");
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}
		dsPerMx = AdTools.genDfjgxxDataStore(dsPerMx, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		DataObject vdo = new DataObject();
		vdo.put("dsperinfo", dsPerMx);
		
		QueryLogTool.updateQueryLog(querylogid, dsPerMx.rowCount());
		
		return vdo;
	}
	
	/**
	 * 退休人员明细--导出
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2016-2-16
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject genTxrymxExportFile(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		SPrompt prompt = SPromptUtil.getSPrompt();
		
		prompt.prompt("正在导出数据，请稍等...");
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryTxrymxInfo(para);
		fileDs = pdo.getDataStore("dsperinfo");
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "sszfrq", HsuTools.discode("SSZFRQ", fileDs.getString(i, "sszfrq"), ""));
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ryzt", HsuTools.discode("RYSCZT", fileDs.getString(i, "ryzt"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
			
			String spbz = fileDs.getString(i, "spbz");
			if ("1".equals(spbz)) {
				fileDs.put(i, "spbz", "已审批");
			}else {
				fileDs.put(i, "spbz", "未审批");
			}
			
			Date blzysj = fileDs.getDate(i, "blzysj");
			if(blzysj!=null){
				fileDs.put(i, "blzysj", DateUtil.dateToString(blzysj, "yyyy-MM-dd"));
			}
			Date spsj = fileDs.getDate(i, "spsj");
			if(blzysj!=null){
				fileDs.put(i, "spsj", DateUtil.dateToString(spsj, "yyyy-MM-dd"));
			}
			Date dyfhsj = fileDs.getDate(i, "dyfhsj");
			if(dyfhsj!=null){
				fileDs.put(i, "dyfhsj", DateUtil.dateToString(dyfhsj, "yyyy-MM-dd"));
			}
		}
		
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "sfzhm", "身份证号码", "String", "", 18);
		
		addTableInfo4Write(tableInfo, "jcxylj", "基础养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "zhylj", "个人账户养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "gdxylj", "过渡性养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "gdxtjj", "过渡性调节金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "ce", "新老办法差额", "number", "#########0.00", 12);
		
		addTableInfo4Write(tableInfo, "qtylj", "其他养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "dqje", "退休金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "zynj", "职业年金", "number", "#######0.00", 12);//导出增加职业年金显示   add rzs-20190409
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 20);
		
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "sszfrq", "所属支付人群", "String", "", 20);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "blzysj", "办理增员日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "spbz", "审批标志", "String", "", 10);
		
		addTableInfo4Write(tableInfo, "spr", "审批人", "String", "", 50);
		addTableInfo4Write(tableInfo, "spsj", "审批日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "fhr", "复核人", "String", "", 50);
		addTableInfo4Write(tableInfo, "dyfhsj", "复核日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "zjfnx", "总缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "jtzz", "家庭地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ssjd", "所属街道", "String", "", 100);
		addTableInfo4Write(tableInfo, "sssq", "所属社区", "String", "", 100);
		addTableInfo4Write(tableInfo, "txdah", "退休档案号", "String", "", 50);
		addTableInfo4Write(tableInfo, "ryzt", "人员状态", "String", "", 50);
		
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 50);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "国家职业资格等级", "String", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		sheet = ExcelTool.createSheet(workbook, "报盘文件", 0);
		// 生成excel文件
		ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
		ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, fileDs);
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		prompt.complete(); // 进度条任务完成
		prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		return rdo;
	}
	/**
	 * 
	 * 方法简介.退休人员明细导出莱芜客户化
	 *
	 * @author rzs
	 * @date 创建时间 2019年4月19日
	 * @since V1.0
	 */
	public DataObject genTxrymxExportFile_3712(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		SPrompt prompt = SPromptUtil.getSPrompt();
		
		prompt.prompt("正在导出数据，请稍等...");
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryTxrymxInfo(para);
		fileDs = pdo.getDataStore("dsperinfo");
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "sszfrq", HsuTools.discode("SSZFRQ", fileDs.getString(i, "sszfrq"), ""));
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ryzt", HsuTools.discode("RYSCZT", fileDs.getString(i, "ryzt"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
			
			String spbz = fileDs.getString(i, "spbz");
			if ("1".equals(spbz)) {
				fileDs.put(i, "spbz", "已审批");
			}else {
				fileDs.put(i, "spbz", "未审批");
			}
			
			Date blzysj = fileDs.getDate(i, "blzysj");
			if(blzysj!=null){
				fileDs.put(i, "blzysj", DateUtil.dateToString(blzysj, "yyyy-MM-dd"));
			}
			Date spsj = fileDs.getDate(i, "spsj");
			if(blzysj!=null){
				fileDs.put(i, "spsj", DateUtil.dateToString(spsj, "yyyy-MM-dd"));
			}
			Date dyfhsj = fileDs.getDate(i, "dyfhsj");
			if(dyfhsj!=null){
				fileDs.put(i, "dyfhsj", DateUtil.dateToString(dyfhsj, "yyyy-MM-dd"));
			}
		}
		
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "sfzhm", "身份证号码", "String", "", 18);
		
		addTableInfo4Write(tableInfo, "jcxylj", "基础养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "zhylj", "个人账户养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "gdxylj", "过渡性养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "gdxtjj", "过渡性调节金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "ce", "新老办法差额", "number", "#########0.00", 12);
		
		addTableInfo4Write(tableInfo, "qtylj", "其他养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "dqje", "退休金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "zynj", "职业年金", "number", "#######0.00", 12);//导出增加职业年金显示   add rzs-20190409
		addTableInfo4Write(tableInfo, "zfbt", "住房补贴", "number", "#######0.00", 12);//导出增加住房补贴显示   add rzs-20190409
		addTableInfo4Write(tableInfo, "wybt", "物业补贴", "number", "#######0.00", 12);//导出增加物业补贴显示   add rzs-20190409
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 20);
		
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "sszfrq", "所属支付人群", "String", "", 20);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "blzysj", "办理增员日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "spbz", "审批标志", "String", "", 10);
		
		addTableInfo4Write(tableInfo, "spr", "审批人", "String", "", 50);
		addTableInfo4Write(tableInfo, "spsj", "审批日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "fhr", "复核人", "String", "", 50);
		addTableInfo4Write(tableInfo, "dyfhsj", "复核日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "zjfnx", "总缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "jtzz", "家庭地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ssjd", "所属街道", "String", "", 100);
		addTableInfo4Write(tableInfo, "sssq", "所属社区", "String", "", 100);
		addTableInfo4Write(tableInfo, "txdah", "退休档案号", "String", "", 50);
		addTableInfo4Write(tableInfo, "ryzt", "人员状态", "String", "", 50);
		
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 50);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "国家职业资格等级", "String", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		sheet = ExcelTool.createSheet(workbook, "报盘文件", 0);
		// 生成excel文件
		ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
		ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, fileDs);
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		prompt.complete(); // 进度条任务完成
		prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		return rdo;
	}


	/**
	 * 待遇核定汇总情况查询
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-6-30
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryDyhdhzqkInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("待遇核定汇总情况查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 接参数
		String jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		String jbqsrq = para.getDateToString("jbqsrq", "yyyyMMdd");
		String jbzzrq = para.getDateToString("jbzzrq", "yyyyMMdd");
		String jbr = para.getString("yhid");
		String hzlb = para.getString("hzlb");

		// 参数校验
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空");
		}
		// 审批日期
		if (jbqsrq == null || "".equals(jbqsrq)) {
			this.bizException("传入的经办起始日期不能为空");
		}
		if (jbzzrq == null || "".equals(jbzzrq)) {
			this.bizException("传入的经办终止日期不能为空");
		}
		if ("19000101".compareTo(jbqsrq) > 0) {
			this.bizException("传入的经办起始日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(jbqsrq) < 0) {
			this.bizException("传入的经办终止日期不能晚于2050年12月31日");
		}
		if (jbqsrq.compareTo(jbzzrq) > 0) {
			this.bizException("传入的经办起始日期不能晚于经办终止日期");
		}

		sqlBF.setLength(0);
		sqlBF.append(" select a.piid, a.slr yhid, a.slsj jbsj, a.hzblsh hzlsh, a.hzblb hzlb, ");
		sqlBF.append("        count(distinct p.ryid) hzrs, a.lsjgid jbjgid ");
		sqlBF.append("   from sicp3uws.adtxdyhdhzspb a, ");
		sqlBF.append("        sicp3uws.adtxdyhdhzspb_per p ");
		sqlBF.append("  where a.piid = p.piid ");
		sqlBF.append("    and a.djhzjzbz = '1' ");
		sqlBF.append("    and a.lsjgid in (" + jbjgid + ") ");
		sqlBF.append("    and to_char(a.slsj,'yyyyMMdd') between ? and ? ");
		if (jbr != null && jbr.trim().isEmpty() == false) {
			sqlBF.append("    and a.slr = '" + jbr + "' ");
		}
		if (hzlb != null && hzlb.trim().isEmpty() == false) {
			sqlBF.append("    and a.hzblb = '" + hzlb + "' ");
		}
		sqlBF.append("    group by a.piid, a.slr, a.slsj, a.hzblsh, a.hzblb, a.lsjgid ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbqsrq);
		this.sql.setString(2, jbzzrq);
		DataStore ds = this.sql.executeQuery();

		for (int i = 0, n = ds.rowCount(); i < n; i++) {
			String yhid = ds.getString(i, "yhid");
			String vjbjgid = ds.getString(i, "jbjgid");

			String jbjgmc = HsuTools.getJbjgmc(vjbjgid);
			String yhbh = HsuTools.getCzybhByUserId(yhid);
			String yhmc = HsuTools.getCzyxmByUserId(yhid);

			ds.put(i, "jbjgmc", jbjgmc);
			ds.put(i, "yhbh", yhbh);
			ds.put(i, "yhxm", yhmc);
		}

		ds = ds.sortdesc("jbsj");
		DataObject vdo = new DataObject();
		vdo.put("dyhdhzqk", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
		
		return vdo;
	}

	/**
	 * 待遇核定汇总情况查询--双击一行查看汇总详细信息
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-6-30
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject showDyhdhzmx(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String piid = para.getString("piid");
		String hzlb = para.getString("hzlb");

		if (piid == null || piid.trim().isEmpty()) {
			this.bizException("传入的PIID为空，查询明细信息失败。");
		}

		if (hzlb == null || hzlb.trim().isEmpty()) {
			this.bizException("传入的汇总类别为空，查询明细信息失败。");
		}

		DataStore vds = new DataStore();
		if ("01".equals(hzlb)) {
			// 企业
			sqlBF.setLength(0);
			sqlBF.append(" select a.ryid, a.ltxrq, a.cjgzrq, p.xm,  ");
			sqlBF.append("        p.xb, a.ltxtj, p.csrq, p.shbzhm, p1.lxrdh, ");
			sqlBF.append("        c.cbdwmc, p.dyxsksny, c.dwbh ");
			sqlBF.append("   from sicp3uws.adtxdyhdhzspb_per b, ");
			sqlBF.append("        ad3u.per_info     p, ");
			sqlBF.append("        ad3u.emp_info     a, ");
			sqlBF.append("        biuv.person       p1, ");
			sqlBF.append("        si3u.orgn_reg c ");
			sqlBF.append("  where b.ryid = p.ryid ");
			sqlBF.append("    and p.ryid = a.ryid ");
			sqlBF.append("    and p.dwdjid = c.dwdjid ");
			sqlBF.append("    and p.ryid = p1.ryid ");
			sqlBF.append("    and b.piid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, piid);
			vds = this.sql.executeQuery();
			
			// 增加待遇合计 weichao 20160818
			for (int j = 0; j < vds.rowCount(); j++) {
				String ryid = vds.getString(j, "ryid");
				// 取待遇合计
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(s.btje),0) txdyhj  ");
				sqlBF.append("   from ad3u.per_giv_month_std s  ");
				sqlBF.append("  where s.ryid= ?                  ");
				sqlBF.append("	  and (select min(a.qsny) from ad3u.per_giv_month_std a where a.ryid = s.ryid) between s.qsny and nvl(s.zzny, '205012') ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsTemp = this.sql.executeQuery();

				double dyhj = dsTemp.getDouble(0, "txdyhj");
				if (dsTemp.rowCount() > 0) {
					vds.put(j, "txdyhj", dyhj);
				}
			}
			// end weichao 20160818
		} else if ("02".equals(hzlb)) {
			vds = this.queryJgdyhdhzqkmx(piid);// 机关
		} else if ("03".equals(hzlb)) {
			vds = this.queryQytqdyhdhzqkmx(piid);// 企业提前
		} else if ("04".equals(hzlb)) {
			vds = this.queryYsdyhdhzqkmx(piid);// 遗属
		} else {
			this.bizException("汇总类别[" + hzlb + "]无效");
		}

		vds = vds.sort("shbzhm");
		DataObject vdo = new DataObject();
		vdo.put("hzqkmx", vds);
		return vdo;
	}

	/**
	 * 方法简介.打印待遇核定汇总表
	 * 
	 * @author 韦超 2015-12-31
	 */
	public DataObject printDyhdhzb(DataObject para) throws Exception {
		String piid = para.getString("piid");
		String hzlb = para.getString("hzlb");

		if (piid == null || piid.trim().isEmpty()) {
			this.bizException("传入的PIID为空");
		}

		if (hzlb == null || hzlb.trim().isEmpty()) {
			this.bizException("传入的汇总类别为空");
		}

		DataObject vdo = new DataObject();
		if ("01".equals(hzlb)) {
			// 企业
			vdo = this.printQyDyhdhzb(para);
		} else if ("02".equals(hzlb)) {
			// 机关
			vdo = this.printJgDyhdhzb(para);
		} else if ("03".equals(hzlb)) {
			// 企业提前
			vdo = this.printQytqDyhdhzb(para);
		} else if ("04".equals(hzlb)) {
			// 遗属
			vdo = this.printYsDyhdhzb(para);
		} else {
			this.bizException("汇总类别[" + hzlb + "]无效");
		}

		return vdo;
	}

	/**
	 * 方法简介.获取企业打印汇总表
	 * 
	 * @author 韦超 2015-12-31
	 */
	public DataObject printQyDyhdhzb(DataObject para) throws Exception {
		DataObject vdo = new DataObject();
		String piid = para.getString("piid");
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.xb, a.zfrylb, b.dacsrq, b.cjgzrq,   ");
		sqlBF.append("        b.ltxrq, a.dyxsksny, a.dwdjid, a.ryid, a.shbzhm               ");
		sqlBF.append("   from ad3u.per_info a,                            ");
		sqlBF.append("        ad3u.emp_info b,                            ");
		sqlBF.append("        sicp3uws.adtxdyhdhzspb_per c                ");
		sqlBF.append("  where a.ryid = b.ryid                             ");
		sqlBF.append("    and a.ryid = c.ryid                             ");
		sqlBF.append("    and c.shjg = '1'                                ");
		sqlBF.append("    and c.piid = ?                                   ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);

		DataStore allPerInfo = this.sql.executeQuery();

		String ryid = "", dwdjid, dwmc, ltxrq, ltxlb, xb, dyxsksny, dacsrq, cjgzrq;
		for (int i = 0; i < allPerInfo.rowCount(); i++) {
			dwdjid = allPerInfo.getString(i, "dwdjid");
			ltxrq = allPerInfo.getString(i, "ltxrq");
			dyxsksny = allPerInfo.getString(i, "dyxsksny");
			dacsrq = allPerInfo.getString(i, "dacsrq");
			cjgzrq = allPerInfo.getString(i, "cjgzrq");
			ltxlb = allPerInfo.getString(i, "zfrylb");
			xb = allPerInfo.getString(i, "xb");
			ryid = allPerInfo.getString(i, "ryid");

			DataObject dwInfo = SiTools.getOrgnRegByDwdjid(dwdjid);
			dwmc = dwInfo.getString("cbdwmc");
			// 取待遇信息
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(dyxmz, 0) dyxmz ");
			sqlBF.append("   from ad3u.per_cal_his ");
			sqlBF.append("  where ryid = ? ");
			sqlBF.append("    and dyxmbh in ('6062138','6158138','6159138','6160138','606738','607038','XBF38') ");
			sqlBF.append("    and xh = (select max(xh) from ad3u.per_cal_his where ryid = ?)");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, ryid);
			DataStore vdsdyjs = this.sql.executeQuery();

			Double qtdyje = 0.0;
			Double jcxylj_new = 0.0;
			Double grzh_new = 0.0;
			Double gdxylj_new = 0.0;
			Double gdxtjj_new = 0.0;
			Double hj = 0.0;
			double ce = 0.0;
			if (vdsdyjs.rowCount() == 0) {
				// 如果没有五项待遇，则取临时待遇
				sqlBF.setLength(0);
				sqlBF.append(" select sum(btje) qtdyje ");
				sqlBF.append("   from ad3u.per_giv_month_std ");
				sqlBF.append("  where zzny is null and ryid = ? ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore qtdy = this.sql.executeQuery();

				if (qtdy.rowCount() > 0) {
					jcxylj_new = qtdy.getDouble(0, "qtdyje");
				}

				hj = jcxylj_new;
			} else {
				// 个人账户养老金单位部分
				Double zhyljdw_new = this.getPerCalHis(ryid, "6158138");
				// 个人账户养老金个人部分
				Double zhyljgr_new = this.getPerCalHis(ryid, "6159138");
				// 个人账户养老金做实部分
				Double zhyljzs_new = this.getPerCalHis(ryid, "6160138");

				// 基础性养老金
				jcxylj_new = this.getPerCalHis(ryid, "6062138");
				// 个人账户养老金 ： 个人账户养老金=个人账户养老金单位部分+个人部分+坐实部分
				grzh_new = zhyljdw_new + zhyljgr_new + zhyljzs_new;
				// 过渡性养老金
				gdxylj_new = this.getPerCalHis(ryid, "606738");
				// 过渡性调节
				gdxtjj_new = this.getPerCalHis(ryid, "607038");
				// 新办法基本养老金 这个也是合计
				hj = this.getPerCalHis(ryid, "38DY");
				// 其他金额，先
				qtdyje = MathUtil.round(hj - jcxylj_new - grzh_new - gdxylj_new
						- gdxtjj_new, 2);

				Double ylj_old = this.getPerCalHis(ryid, "XBFHJ"); // 老办法基本养老金

				DataObject tempDo = new DataObject();
				// 计算差额，调用计算待遇时的对比方法，保证fdbl、fdje等正确
				if ("201101".compareTo(ltxrq) > 0) {
					// 3.新老办法比对
					tempDo.clear();
					para.put("ylj_old", ylj_old);
					para.put("ylj_new", hj);
					para.put("ltxrq", ltxrq);
					tempDo = this.xlbfDb(para);

					ce = tempDo.getDouble("fdje");

				} else {
					// 3.新老办法比对
					tempDo.clear();
					para.put("ylj_old", ylj_old);
					para.put("ylj_new", hj);
					para.put("ltxrq", ltxrq);
					tempDo = this.xlbfDb_34(para);

					ce = tempDo.getDouble("fdje");
				}
			}
			allPerInfo.put(i, "ltxlb", HsuTools.discode("ZFRYLB", ltxlb, ""));
			allPerInfo.put(i, "xb", HsuTools.discode("XB", xb, ""));
			allPerInfo.put(i, "dwmc", dwmc);

			allPerInfo.put(i, "ltxrq", DateUtil.dateToString(DateUtil.stringToDate(ltxrq, "yyyyMMdd"), "yyyy-MM"));
			allPerInfo.put(i, "dacsrq", DateUtil.dateToString(DateUtil.stringToDate(dacsrq, "yyyyMMdd"), "yyyy-MM"));
			allPerInfo.put(i, "cjgzrq", DateUtil.dateToString(DateUtil.stringToDate(cjgzrq, "yyyyMMdd"), "yyyy-MM"));
			allPerInfo.put(i, "dyzxsj", DateUtil.dateToString(DateUtil.stringToDate(dyxsksny, "yyyyMM"), "yyyy-MM"));

			allPerInfo.put(i, "jcylj", DataFormat.formatDouble(jcxylj_new));
			allPerInfo.put(i, "grzh", DataFormat.formatDouble(grzh_new));
			allPerInfo.put(i, "gdx", DataFormat.formatDouble(gdxylj_new));
			allPerInfo.put(i, "tjj", DataFormat.formatDouble(gdxtjj_new));
			allPerInfo.put(i, "xlbfce", DataFormat.formatDouble(ce));
			allPerInfo.put(i, "qtylj", DataFormat.formatDouble(qtdyje));
			allPerInfo.put(i, "hj", DataFormat.formatDouble(hj));
			allPerInfo.put(i, "xh", DataFormat.formatDouble(i + 1, 0));
		}

		// 取审批人
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(kzshr,'0') kzshr, nvl(fgldshr,'0') fgldshr, nvl(slr,'0') slr, nvl(hzblsh,'') hzblsh ");
		sqlBF.append("   from sicp3uws.adtxdyhdhzspb  ");
		sqlBF.append("  where piid = ? ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);
		DataStore sprds = this.sql.executeQuery();

		String kzsp_qy = HsuTools.getCzyxmByUserId(sprds.getString(0, "kzshr"));
		String fgld_qy = HsuTools.getCzyxmByUserId(sprds.getString(0, "fgldshr"));
		String zbr = HsuTools.getCzyxmByUserId(sprds.getString(0, "slr"));
		String hzblsh = sprds.getString(0, "hzblsh");

		SPrinter printer = new SPrinter();
		printer.putPara("zbr", zbr);
		printer.putPara("hzblsh", hzblsh);
		printer.putPara("qykzsp", kzsp_qy);
		printer.putPara("qyfgld", fgld_qy);
		printer.putDataStore(allPerInfo);

		String printhtml = printer.print(this.getBizInstitution(), "AdQytxdyhzsp");
		vdo.put("html", printhtml);
		return vdo;
	}

	/**
	 * 方法简介.获取机关打印汇总表
	 * 
	 * @author 韦超 2015-12-31
	 */
	public DataObject printJgDyhdhzb(DataObject para) throws Exception {
		DataObject vdo = new DataObject();
		String piid = para.getString("piid");
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.xb, b.dacsrq, b.cjgzrq, b.ltxrq,    ");
		sqlBF.append("        a.dwdjid, a.ryid, nvl(b.jfbl,'0') jfdybl, b.jgdysplb, b.tgyy, ");
		sqlBF.append("        a.dfjglb, a.dfjgid, b.jgdysplb, '' dfjgmc, d.slr,             ");
		sqlBF.append("        d.kzshr, d.fgldshr              ");
		sqlBF.append("   from ad3u.per_info a,                            ");
		sqlBF.append("        ad3u.emp_info b,                            ");
		sqlBF.append("        sicp3uws.adtxdyhdhzspb_per c,               ");
		sqlBF.append("        sicp3uws.adtxdyhdhzspb d                    ");
		sqlBF.append("  where a.ryid = b.ryid                             ");
		sqlBF.append("    and a.ryid = c.ryid                             ");
		sqlBF.append("    and c.piid = d.piid                             ");
		sqlBF.append("    and c.shjg = '1'                             ");
		sqlBF.append("    and d.piid = ?                                  ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);

		DataStore allPerInfo = this.sql.executeQuery();
		
		// modify 取受理时间的下个月计算实发  weichao 20160103
		String slr = "", kzshr = "", fgldshr = "", hzblsh = "";
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(a.slr,'0') slr, nvl(a.kzshr,'0') kzshr, nvl(a.fgldshr, '0') fgldshr, nvl(a.hzblsh, '') hzblsh,   ");
		sqlBF.append("        nvl(a.slsj,sysdate) slsj  ");
		sqlBF.append("   from sicp3uws.adtxdyhdhzspb a                    ");
		sqlBF.append("  where a.piid = ?                                  ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);

		DataStore shInfo = this.sql.executeQuery();
		slr = HsuTools.getCzyxmByUserId(shInfo.getString(0, "slr"));
		kzshr = HsuTools.getCzyxmByUserId(shInfo.getString(0, "kzshr"));
		fgldshr = HsuTools.getCzyxmByUserId(shInfo.getString(0, "fgldshr"));
		hzblsh = shInfo.getString(0, "hzblsh");
		String nextMon = DateUtil.addMonthToString(DateUtil.dateToString(shInfo.getDate(0, "slsj"), "yyyyMM"), "yyyyMM", 1);
		// end
		String ryid = "", dwdjid, dwmc, ltxrq, xb, dacsrq, cjgzrq, dysplb, tgyy;
		double jfdybl = 0, txdyhj = 0;
		for (int i = 0; i < allPerInfo.rowCount(); i++) {
			xb = allPerInfo.getString(i, "xb");
			dwdjid = allPerInfo.getString(i, "dwdjid");
			dacsrq = allPerInfo.getString(i, "dacsrq");
			dysplb = allPerInfo.getString(i, "jgdysplb");
			jfdybl = allPerInfo.getDouble(i, "jfdybl");

			cjgzrq = allPerInfo.getString(i, "cjgzrq");
			ltxrq = allPerInfo.getString(i, "ltxrq");
			tgyy = allPerInfo.getString(i, "tgyy");// 备注
			ryid = allPerInfo.getString(i, "ryid");

			// 取单位
			DataObject dwInfo = SiTools.getOrgnRegByDwdjid(dwdjid);
			dwmc = dwInfo.getString("cbdwmc");
			// 取待遇信息
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(a.btje), 0) txdyhj  ");
			sqlBF.append("   from ad3u.per_giv_detl a     ");
			sqlBF.append("  where a.yfny <= ?                    ");
			sqlBF.append("    and a.ryid = ?             ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, nextMon);
			this.sql.setString(2, ryid);
			DataStore dshj = this.sql.executeQuery();
			txdyhj = dshj.getDouble(0, "txdyhj");

			// 取退休时职务
			String txszw = "";
			if (dysplb != null && !"".equals(dysplb)) {
				if ("A11".endsWith(dysplb)) {
					this.sql.setSql(" select xzzw txszw from ad3u.per_info where ryid = ? ");
					this.sql.setString(1, ryid);
					DataStore dstxzw = this.sql.executeQuery();
					txszw = dstxzw.getString(0, "txszw");
					if (txszw != null && !"".equals(txszw)) {
						txszw = HsuTools.discode("XZZW", txszw);
					}
				}
				if ("A12".endsWith(dysplb)) {
					this.sql.setSql(" select zyjszwjb txszw from biuv.person  where ryid = ? ");
					this.sql.setString(1, ryid);
					DataStore dstxzw = this.sql.executeQuery();
					txszw = dstxzw.getString(0, "txszw");
					if (txszw != null && !"".equals(txszw)) {
						txszw = HsuTools.discode("zyjszwjb", txszw);
					}
				}
				if ("A13".endsWith(dysplb)) {
					this.sql.setSql(" select gjzyzgdj txszw from biuv.person where ryid = ? ");
					this.sql.setString(1, ryid);
					DataStore dstxzw = this.sql.executeQuery();
					txszw = dstxzw.getString(0, "txszw");

					if (txszw != null && !"".equals(txszw)) {
						txszw = HsuTools.discode("GJZYZGDJ", txszw);
					}
				}
			}

			allPerInfo.put(i, "xh", DataFormat.formatDouble(i + 1, 0));
			allPerInfo.put(i, "xb", HsuTools.discode("XB", xb, ""));
			allPerInfo.put(i, "dwmc", dwmc);
			allPerInfo.put(i, "csrq", DateUtil.dateToString(DateUtil.stringToDate(dacsrq, "yyyyMMdd"), "yyyy-MM-dd"));
			allPerInfo.put(i, "txszw", txszw);

			allPerInfo.put(i, "jfdybl", DataFormat.formatDouble(jfdybl * 100));
			allPerInfo.put(i, "cjgzsj", DateUtil.dateToString(DateUtil.stringToDate(cjgzrq, "yyyyMMdd"), "yyyy-MM-dd"));
			allPerInfo.put(i, "ltxrq", DateUtil.dateToString(DateUtil.stringToDate(ltxrq, "yyyyMMdd"), "yyyy-MM-dd"));
			allPerInfo.put(i, "txdyhj", DataFormat.formatDouble(txdyhj, 2));

			allPerInfo.put(i, "tgyy", HsuTools.discode("JFBLTGYY", tgyy, ""));
		}
		AdTools.genDfjgxxDataStore(allPerInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		SPrinter printer = new SPrinter();
		printer.putDataStore(allPerInfo);

		printer.putPara("ywjby", slr);
		printer.putPara("kzs", kzshr);
		printer.putPara("fglds", fgldshr);
		printer.putPara("hzblsh", hzblsh);

		String printhtml = printer.print(this.getBizInstitution(), "Adspxxhzb");
		vdo.put("html", printhtml);
		return vdo;
	}

	/**
	 * 方法简介.获取企业提前打印汇总表
	 * 
	 * @author 韦超 2015-12-31
	 */
	public DataObject printQytqDyhdhzb(DataObject para) throws Exception {
		DataObject vdo = new DataObject();
		String piid = para.getString("piid");
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select ryid, ltxrq, ltxlb, bz, '' jbjgmc  ");
		sqlBF.append("  from  sicp3uws.adtxdyhdhzspb_per  ");
		sqlBF.append(" where  piid= ? ");
		sqlBF.append("   and  nvl(shjg,'0') = '1' ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);

		DataStore vds = this.sql.executeQuery();

		String ryid = "";
		for (int i = 0; i < vds.rowCount(); i++) {
			ryid = vds.getString(i, "ryid");

			String ltxlb = vds.getString(i, "ltxlb");
			ltxlb = HsuTools.discode("ZFRYLB", ltxlb);
			vds.put(i, "ltxlb", ltxlb);

			String ltxrq = vds.getDateToString(i, "ltxrq", "yyyy-MM-dd");
			vds.put(i, "ltxrq", ltxrq);

			// 取人员登记ID
			sqlBF.setLength(0);
			sqlBF.append(" select rydjid  ");
			sqlBF.append(" from   si3u.per_reg_join  ");
			sqlBF.append(" where  ryid = ? and  xzbz in ('101','102') and zzrq is null ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			DataStore rydjidds = this.sql.executeQuery();

			if (rydjidds.rowCount() == 1) {
				String rydjid = rydjidds.getString(0, "rydjid");

				// 取姓名，性别，出生日期,社会保障号码
				sqlBF.setLength(0);
				sqlBF.append(" select a.xm, a.xb,a.csrq,a.shbzhm,a.cjgzrq,a.dwdjid   ");
				sqlBF.append("   from si3u.per_reg a         ");
				sqlBF.append("  where rydjid= ?              ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, rydjid);
				DataStore dsInfo = this.sql.executeQuery();

				if (dsInfo.rowCount() == 0) {
					this.bizException("si3u.per_reg表中没有找到人员ID为【" + ryid
							+ "】的人员的信息。");
				}

				String xb = dsInfo.getString(0, "xb");
				xb = HsuTools.discode("XB", xb);

				String csrq = DateUtil.dateToString(DateUtil.stringToDate(dsInfo.getString(0, "csrq"), "yyyyMMdd"), "yyyy-MM");
				String cjgzrq = DateUtil.dateToString(DateUtil.stringToDate(dsInfo.getString(0, "cjgzrq"), "yyyyMMdd"), "yyyy-MM");

				vds.put(i, "xm", dsInfo.getString(0, "xm"));
				vds.put(i, "xb", xb);
				vds.put(i, "csrq", csrq);
				vds.put(i, "shbzhm", dsInfo.getString(0, "shbzhm"));
				vds.put(i, "cjgzrq", cjgzrq);

				String dwdjid = dsInfo.getString(0, "dwdjid");

				// 取单位
				DataObject pdo = SiTools.getOrgnRegByDwdjid(dwdjid);
				String dwmc = pdo.getString("cbdwmc");
				String jbjgid = pdo.getString("jbjgid");

				vds.put(i, "cbdwmc", dwmc);
				vds.put(i, "jbjgid", jbjgid);
			}
		}
		HsuTools.genJbjgxxDataStore(vds, "jbjgid", "jbjgbh", "jbjgmc");

		SPrinter sprinter = new SPrinter();
		sprinter.putDataStore(vds);

		// 取审批人
		String kzshr = "", fgldshr = "", zxzyldshr = "", hzblsh = "";
		sqlBF.setLength(0);
		sqlBF.append("select nvl(kzshr, '0') kzshr,nvl(fgldshr, '0') fgldshr, nvl(zxzyldshr, '0') zxzyldshr, nvl(hzblsh,'') hzblsh ");
		sqlBF.append("  from sicp3uws.adtxdyhdhzspb        ");
		sqlBF.append(" where piid= ?                            ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);
		DataStore dssh = this.sql.executeQuery();

		kzshr = dssh.getString(0, "kzshr");
		fgldshr = dssh.getString(0, "fgldshr");
		zxzyldshr = dssh.getString(0, "zxzyldshr");
		hzblsh = dssh.getString(0, "hzblsh");

		sprinter.putPara("tqtxkzsp", HsuTools.getCzyxmByUserId(kzshr));
		sprinter.putPara("tqtxfgldsh", HsuTools.getCzyxmByUserId(fgldshr));
		sprinter.putPara("tqtxzxzyldsh", HsuTools.getCzyxmByUserId(zxzyldshr));
		sprinter.putPara("hzblsh", hzblsh);

		String html = sprinter.print(this.getBizInstitution(), "AdQytqtxdyhdhzsp");
		vdo.put("html", html);

		return vdo;
	}

	/**
	 * 方法简介.获取遗属打印汇总表
	 * 
	 * @author 韦超 2015-12-31
	 */
	public DataObject printYsDyhdhzb(DataObject para) throws Exception {
		DataObject vdo = new DataObject();
		String piid = para.getString("piid");
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select sum(nvl(s.btje, 0)) btje ");
		sqlBF.append("   from ad3u.per_giv_month_std s ");
		sqlBF.append("  where s.ryid = ? ");
		sqlBF.append("    and ? between s.qsny and nvl(s.zzny,'20501231') ");
		String dqjeSql = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append(" select s.qsny, s.zzny, s.btje, s.btbh ");
		sqlBF.append("   from ad3u.per_giv_month_std s ");
		sqlBF.append("  where s.ryid = ? ");
		sqlBF.append("    and ((? between s.qsny and nvl(s.zzny,'20501231')) ");
		sqlBF.append("          or  (? > s.zzny)) ");
		String bfjeSql = sqlBF.toString();

		// 取要组装数据的人员
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.xb, a.csrq, a.dwdjid, a.ryid,     ");
		sqlBF.append("        a.dfjglb, a.dfjgid, '' dfjgmc, a.dyxsksny   ");
		sqlBF.append("   from ad3u.per_info a,                            ");
		sqlBF.append("        ad3u.supp_info b,                            ");
		sqlBF.append("        sicp3uws.adtxdyhdhzspb_per c               ");
		sqlBF.append("  where a.ryid = b.ryid                             ");
		sqlBF.append("    and a.ryid = c.ryid                             ");
		sqlBF.append("    and c.shjg = '1'                             ");
		sqlBF.append("    and c.piid = ?                                  ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);

		DataStore allPerInfo = this.sql.executeQuery();
		
		// modify 取受理时间的下个月计算实发  weichao 20160103
		// 查询审核信息
		String slr = "", kzshr = "", fgldshr = "", hzblsh = "";
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(a.slr,'0') slr, nvl(a.kzshr,'0') kzshr, nvl(a.fgldshr, '0') fgldshr, nvl(a.hzblsh, '') hzblsh,   ");
		sqlBF.append("        nvl(a.slsj,sysdate) slsj  ");
		sqlBF.append("   from sicp3uws.adtxdyhdhzspb a                    ");
		sqlBF.append("  where a.piid = ?                                  ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);

		DataStore shInfo = this.sql.executeQuery();
		slr = HsuTools.getCzyxmByUserId(shInfo.getString(0, "slr"));
		kzshr = HsuTools.getCzyxmByUserId(shInfo.getString(0, "kzshr"));
		fgldshr = HsuTools.getCzyxmByUserId(shInfo.getString(0, "fgldshr"));
		hzblsh = shInfo.getString(0, "hzblsh");
		String dqny = shInfo.getDateToString(0, "slsj","yyyyMM");
		// end
		
		String ryid = "", dwdjid, dwmc, xb, csrq, dyxsksny;
		double jfdybl = 0, txdyhj = 0;
		double sfhj = 0, bfhj = 0, dqhj = 0;
		for (int i = 0; i < allPerInfo.rowCount(); i++) {
			xb = allPerInfo.getString(i, "xb");
			dwdjid = allPerInfo.getString(i, "dwdjid");
			csrq = allPerInfo.getString(i, "csrq");
			dyxsksny = allPerInfo.getString(i, "dyxsksny");
			ryid = allPerInfo.getString(i, "ryid");

			// 取单位
			DataObject dwInfo = SiTools.getOrgnRegByDwdjid(dwdjid);
			dwmc = dwInfo.getString("cbdwmc");
			// 取待遇信息
			sqlBF.setLength(0);
			sqlBF.append(" select   nvl(sum(btje),0) txdyhj  ");
			sqlBF.append("   from ad3u.per_giv_month_std     ");
			sqlBF.append("  where ryid= ?                    ");
			sqlBF.append("    and   zzny is null             ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			DataStore dshj = this.sql.executeQuery();
			if (dshj.rowCount() > 0) {
				txdyhj = dshj.getDouble(0, "txdyhj");
			}

			// 取遗属相关信息
			sqlBF.setLength(0);
			sqlBF.append(" select a.dqzfje,a.bz ");
			sqlBF.append("   from ad3u.supp_info a, ");
			sqlBF.append("        ad3u.per_info b ");
			sqlBF.append("  where a.ryid=b.ryid   ");
			sqlBF.append("    and a.ryid=?        ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			DataStore dsysinfo = this.sql.executeQuery();

			if (dsysinfo.rowCount() > 0) {
				double dqzfje = dsysinfo.getDouble(0, "dqzfje");
				allPerInfo.put(i, "dqzfje", DataFormat.formatDouble(dqzfje));
				allPerInfo.put(i, "bz", dsysinfo.getString(0, "bz"));
			}

			// 取当月定期金额
			this.sql.setSql(dqjeSql);
			this.sql.setString(1, ryid);
			this.sql.setString(2, DateUtil.descreaseYearMonth(dqny, -1));
			DataStore dqds = this.sql.executeQuery();

			double dqje = dqds.getDouble(0, "btje");

			// 取补发金额
			this.sql.setSql(bfjeSql);
			this.sql.setString(1, ryid);
			this.sql.setString(2, dqny);
			this.sql.setString(3, dqny);
			DataStore bfds = this.sql.executeQuery();

			double bfje = 0.0;
			int no = 0;
			for (int j = 0; j < bfds.rowCount(); j++) {
				String qsny = bfds.getString(j, "qsny");
				String zzny = bfds.getString(j, "zzny");
				double btje = bfds.getDouble(j, "btje");

				if (zzny != null && zzny.trim().isEmpty() == false
						&& zzny.compareTo(dqny) < 0) {
					no = DateUtil.getMonthDifferenceBetweenTwoStringDate(qsny, zzny) + 1;
					bfje = bfje + btje * no;
				} else {
					no = DateUtil.getMonthDifferenceBetweenTwoStringDate(qsny, dqny) + 1;
					bfje = bfje + btje * no;
				}
			}

			double sfje = bfje + dqje;

			sfhj += sfje;
			bfhj += bfje;
			dqhj += dqje;

			allPerInfo.put(i, "xh", DataFormat.formatDouble(i + 1, 0));
			allPerInfo.put(i, "xb", HsuTools.discode("XB", xb, ""));
			allPerInfo.put(i, "dwmc", dwmc);
			allPerInfo.put(i, "csrq", DateUtil.dateToString(DateUtil.stringToDate(csrq, "yyyyMMdd"), "yyyy-MM-dd"));

			allPerInfo.put(i, "jfdybl", DataFormat.formatDouble(jfdybl * 100));
			allPerInfo.put(i, "dyzxsj", DateUtil.dateToString(DateUtil.stringToDate(dyxsksny, "yyyyMM"), "yyyy-MM"));
			allPerInfo.put(i, "txdyhj", DataFormat.formatDouble(txdyhj, 2));
			allPerInfo.put(i, "bfje", DataFormat.formatDouble(bfje, 2));
			allPerInfo.put(i, "sfje", DataFormat.formatDouble(sfje, 2));
			allPerInfo.put(i, "dqje", DataFormat.formatDouble(dqje, 2));
		}
		AdTools.genDfjgxxDataStore(allPerInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		SPrinter printer = new SPrinter();
		printer.putPara("sfhj", DataFormat.formatDouble(sfhj));
		printer.putPara("bfhj", DataFormat.formatDouble(bfhj));
		printer.putPara("dqhj", DataFormat.formatDouble(dqhj));
		printer.putDataStore(allPerInfo);

		printer.putPara("ywjby", slr);
		printer.putPara("kzs", kzshr);
		printer.putPara("fglds", fgldshr);
		printer.putPara("hzblsh", hzblsh);

		String printhtml = printer.print(this.getBizInstitution(), "AdYsdyhdhzspb");
		vdo.put("html", printhtml);
		return vdo;
	}
	/**
	 * 根据人员ID、待遇编号取待遇金额
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2014-11-20
	 * @param ryid
	 * @param pDyxmbh
	 * @return
	 * @throws Exception
	 */
	private final Double getPerCalHis(final String ryid, final String pDyxmbh) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		double dyxmz;
		DataStore ds;

		if (ryid == null || "".equals(ryid)) {
			throw new BusinessException("读取待遇计算历史时传入ryid为空！");
		}
		if (pDyxmbh == null || "".equals(pDyxmbh)) {
			throw new BusinessException("读取待遇计算历史时传入待遇项目编号为空！");
		}

		sqlBF.append(" select nvl(dyxmz, 0) dyxmz ");
		sqlBF.append("   from ad3u.per_cal_his ");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and dyxmbh = ? ");
		sqlBF.append("    and xh = (select max(xh) from ad3u.per_cal_his where ryid = ?) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, pDyxmbh);
		this.sql.setString(3, ryid);

		ds = this.sql.executeQuery();

		if (ds.rowCount() <= 0) {
			return 0.0;
		}
		dyxmz = ds.getDouble(0, "dyxmz");

		return dyxmz;
	}
	/**
	 * 方法简介.38号文新老办法对比
	 * 
	 * @author 韦超 2014-11-17
	 */
	public final DataObject xlbfDb(final DataObject para) throws Exception {
		double ylj_old = 0.0, ylj_new = 0.0, ce = 0.0, fdbl = 0.0, fdje = 0.0, dy = 0.0;
		String ltxrq = null;
		DataObject rdo = new DataObject();
		int ad301008;
		String piid = para.getString("piid");
		String lsjgid = (String) ProcessUtil.getTEEVarByPiid(piid, "biz");
		ylj_old = para.getDouble("ylj_old");
		ylj_new = para.getDouble("ylj_new");
		ltxrq = para.getString("ltxrq");
		ad301008 = StringUtil.stringToInt(SiTools.getPara(lsjgid, "ad301008", "2"));

		ce = ylj_new - ylj_old;
		if (ce <= 0) {
			// 老办法大于新办法，使用老办法的养老金作为待遇
			dy = ylj_old;
			fdbl = 0.00;
			fdje = 0;
		} else {
			// 新办法大于老办法，取封顶比例
			fdbl = this.getFdbl(ltxrq.substring(0, 4));
			fdje = MathUtil.round(ce * fdbl, ad301008);
			dy = ylj_old + fdje;
		}

		rdo.put("dy", dy);
		rdo.put("ce", ce);
		rdo.put("fdje", fdje);
		rdo.put("fdbl", fdbl);
		return rdo;
	}
	/**
	 * 方法简介.34号文新老办法对比
	 * 
	 * @author 韦超 2014-11-17
	 */
	public final DataObject xlbfDb_34(final DataObject para) throws Exception {
		double ylj_old = 0.0, ylj_new = 0.0, ce = 0.0, fdbl = 0.0, fdje = 0.0, dy = 0.0;
		String ltxrq = null, ad302003;
		DataObject rdo = new DataObject();
		int ad301008;
		String piid = para.getString("piid");
		String lsjgid = (String) ProcessUtil.getTEEVarByPiid(piid, "biz");
		ylj_old = para.getDouble("ylj_old");
		ylj_new = para.getDouble("ylj_new");
		ltxrq = para.getString("ltxrq");
		ad301008 = StringUtil.stringToInt(SiTools.getPara(lsjgid, "ad301008", "2"));
		ad302003 = SiTools.getPara(lsjgid, "ad302003", "0");// 2011年后实行新老办法对比标
		// 1时对比,默认为0
		ce = ylj_old - ylj_new;
		if (ce > 0 && "1".equals(ad302003)) {// 老办法大于新办法且需要对比时
			// 新办法大于老办法，取封顶比例
			fdbl = this.getFdbl_34(ltxrq.substring(0, 4));
			fdje = MathUtil.round(ce * fdbl, ad301008);
			dy = ylj_new + fdje;
		} else {
			// 新办法大于老办法，使用新办法的养老金作为待遇
			dy = ylj_new;
			fdbl = 0.00;
			fdje = 0;
		}

		rdo.put("dy", dy);
		rdo.put("ce", ce);
		rdo.put("fdje", fdje);
		rdo.put("fdbl", fdbl);
		return rdo;
	}
	/**
	 * 方法简介.省34号文新老办法对比，取封顶比例
	 * 
	 * @author 韦超 2014-11-17
	 */
	private double getFdbl_34(String pNf) {
		double bl = 0.00;

		if ("2011".equals(pNf)) {
			bl = 0.80;
		} else if ("2012".equals(pNf)) {
			bl = 0.50;
		} else if ("2013".equals(pNf)) {
			bl = 0.20;
		} else if ("2013".compareTo(pNf) < 0) {
			bl = 0.00;
		}
		return bl;
	}
	/**
	 * 方法简介.38号文新老办法对比，取封顶比例
	 * 
	 * @author 韦超 2014-11-17
	 */
	private double getFdbl(String pNf) {
		double bl = 0.00;

		if ("2006".equals(pNf)) {
			bl = 0.10;
		} else if ("2007".equals(pNf)) {
			bl = 0.30;
		} else if ("2008".equals(pNf)) {
			bl = 0.50;
		} else if ("2009".equals(pNf)) {
			bl = 0.70;
		} else if ("2010".equals(pNf)) {
			bl = 0.90;
		} else if ("2010".compareTo(pNf) < 0) {
			bl = 1.00;
		}
		return bl;
	}
	/**
	 * 查询按机关汇总的详细信息
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-6-30
	 * @param piid
	 * @return
	 * @throws Exception
	 */
	private DataStore queryJgdyhdhzqkmx(String piid) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, d.shbzhm, a.ltxrq, a.jfbl, a.cjgzrq, ");
		sqlBF.append("        a.jfbl, d.xm, d.xb, d.csrq, d.dfjglb, ");
		sqlBF.append("        d.dfjgid, a.tgyy, d.dwdjid, d.dyxsksny, a.jgdysplb, ");
		sqlBF.append("        d.xzzw, p.zyjszwjb, p.gjzyzgdj ");
		sqlBF.append("   from sicp3uws.adtxdyhdhzspb_per b, ");
		sqlBF.append("        ad3u.per_info     d, ");
		sqlBF.append("        ad3u.emp_info     a, ");
		sqlBF.append("        ad3u.per_reg      c, ");
		sqlBF.append("        biuv.person       p ");
		sqlBF.append("  where b.ryid = d.ryid  ");
		sqlBF.append("    and d.ryid = a.ryid ");
		sqlBF.append("    and d.dqdydjid = c.dydjid ");
		sqlBF.append("    and d.ryid = p.ryid ");
		sqlBF.append("    and piid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);
		DataStore vds = this.sql.executeQuery();

		DataStore dsTemp = new DataStore();
		for (int i = 0; i < vds.rowCount(); i++) {
			String dwdjid = vds.getString(i, "dwdjid");
			String dfjgid = vds.getString(i, "dfjgid");
			String dfjglb = vds.getString(i, "dfjglb");
			String ryid = vds.getString(i, "ryid");

			// 根据待遇审批类别查询退休时职务
			String dysplb = vds.getString(i, "jgdysplb");
			String xzzw = vds.getString(i, "xzzw");
			String gjzyzgdj = vds.getString(i, "gjzyzgdj");
			String zyjszwjb = vds.getString(i, "zyjszwjb");
			if ("A11".equals(dysplb)) {
				if (xzzw != null && !"".equals(xzzw)) {
					xzzw = HsuTools.discode("XZZW", xzzw);
					vds.put(i, "txszw", xzzw);
				}
			}
			if ("A12".equals(dysplb)) {
				if (zyjszwjb != null && !"".equals(zyjszwjb)) {
					zyjszwjb = HsuTools.discode("zyjszwjb", zyjszwjb);
					vds.put(i, "txszw", zyjszwjb);
				}
			}
			if ("A13".equals(dysplb)) {
				if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
					gjzyzgdj = HsuTools.discode("GJZYZGDJ", gjzyzgdj);
					vds.put(i, "txszw", gjzyzgdj);
				}
			}

			// 取单位
			sqlBF.setLength(0);
			sqlBF.append(" select b.cbdwmc, b.dwbh             ");
			sqlBF.append("   from si3u.orgn_reg b      ");
			sqlBF.append("  where b.dwdjid = ?   ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				vds.put(i, "cbdwmc", dsTemp.getString(0, "cbdwmc"));
				vds.put(i, "dwbh", dsTemp.getString(0, "dwbh"));// 增加单位编号 weichao 20160819
			}

			// 取代发机构
			if ("G".equals(dfjglb)) {
				sqlBF.setLength(0);
				sqlBF.append(" select n.dfjgbh ztbh, n.dfjgmc ztmc ");
				sqlBF.append("   from be3u.provide_natl n  ");
				sqlBF.append("  where n.dfjgid = ?   ");
			} else if ("B".equals(dfjglb)) {
				sqlBF.setLength(0);
				sqlBF.append(" select cbdwmc ztmc, dwbh ztbh ");
				sqlBF.append("   from si3u.orgn_reg  ");
				sqlBF.append("  where dwdjid = ?   ");
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dfjgid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() > 0) {
				String dfjgmc = dsTemp.getString(0, "ztmc");
				vds.put(i, "dfjgmc", dfjgmc);
			}

			// 取待遇合计
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(s.btje),0) txdyhj  ");
			sqlBF.append("   from ad3u.per_giv_month_std s  ");
			sqlBF.append("  where s.ryid= ?                  ");
			sqlBF.append("	  and (select min(a.qsny) from ad3u.per_giv_month_std a where a.ryid = s.ryid) between s.qsny and nvl(s.zzny, '205012') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();

			double dyhj = dsTemp.getDouble(0, "txdyhj");
			if (dsTemp.rowCount() > 0) {
				vds.put(i, "txdyhj", dyhj);
			}
		}

		return vds;
	}
	/**
	 * 
	 * 方法简介.查询按企业提前汇总的详细信息
	 * 
	 * @author 韦超 2015-12-31
	 */
	private DataStore queryQytqdyhdhzqkmx(String piid) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append("select b.lsjgid, a.ryid, a.ltxlb, a.ltxrq, a.bz, ");
		sqlBF.append("       '' jbjgmc, '' jbjgid, '' jbjgbh, c.dyxsksny ");
		sqlBF.append("  from sicp3uws.adtxdyhdhzspb_per a, ");
		sqlBF.append("       sicp3uws.adtxdyhdhzspb b, ");
		sqlBF.append("       ad3u.per_info c ");
		sqlBF.append(" where a.piid = b.piid ");
		sqlBF.append("   and a.ryid = c.ryid(+) ");
		sqlBF.append("   and a.piid = ? ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);
		DataStore ds = this.sql.executeQuery();
		
		String ryid = "";
		for (int i = 0; i < ds.rowCount(); i++) {
			ryid = ds.getString(i, "ryid");
			
			// 根据ryid 取rydjid
			// 取人员登记ID
			sqlBF.setLength(0);
			sqlBF.append(" select rydjid  ");
			sqlBF.append(" from   si3u.per_reg_join  ");
			sqlBF.append(" where  ryid = ? and  xzbz in ('101','102') and zzrq is null ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			DataStore rydjidds = this.sql.executeQuery();

			if (rydjidds.rowCount() == 1) {
				String rydjid = rydjidds.getString(0, "rydjid");

				// 取姓名，性别，出生日期,社会保障号码
				sqlBF.setLength(0);
				sqlBF.append(" select a.xm, a.xb,a.csrq,a.shbzhm,a.cjgzrq,a.dwdjid   ");
				sqlBF.append("   from si3u.per_reg a         ");
				sqlBF.append("  where rydjid= ?              ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, rydjid);
				DataStore dsInfo = this.sql.executeQuery();

				if (dsInfo.rowCount() == 0) {
					this.bizException("si3u.per_reg表中没有找到人员ID为【" + ryid
							+ "】的人员的信息。");
				}

				ds.put(i, "xm", dsInfo.getString(0, "xm"));
				ds.put(i, "xb", dsInfo.getString(0, "xb"));
				ds.put(i, "csrq", dsInfo.getString(0, "csrq"));
				ds.put(i, "shbzhm", dsInfo.getString(0, "shbzhm"));
				ds.put(i, "cjgzrq", dsInfo.getString(0, "cjgzrq"));

				String dwdjid = dsInfo.getString(0, "dwdjid");

				// 取单位
				DataObject pdo = SiTools.getOrgnRegByDwdjid(dwdjid);
				String dwmc = pdo.getString("cbdwmc");
				String dwbh = pdo.getString("dwbh");//增加单位编号 weichao 20160819
				String jbjgid = pdo.getString("jbjgid");
				
				ds.put(i, "cbdwmc", dwmc);
				ds.put(i, "jbjgid", jbjgid);
				ds.put(i, "dwbh", dwbh);
				
				// 取待遇合计 weichao 20160818
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(s.btje),0) txdyhj  ");
				sqlBF.append("   from ad3u.per_giv_month_std s  ");
				sqlBF.append("  where s.ryid= ?                  ");
				sqlBF.append("	  and (select min(a.qsny) from ad3u.per_giv_month_std a where a.ryid = s.ryid) between s.qsny and nvl(s.zzny, '205012') ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsTemp = this.sql.executeQuery();

				double dyhj = dsTemp.getDouble(0, "txdyhj");
				if (dsTemp.rowCount() > 0) {
					ds.put(i, "txdyhj", dyhj);
				}
				// end weichao 20160818
			}
		}
		HsuTools.genJbjgxxDataStore(ds, "jbjgid", "jbjgbh", "jbjgmc");
		
		return ds;
	}
	/**
	 * 查询按遗属汇总的详细信息
	 * 
	 * @Description:
	 * @author 刘维秋
	 * @date 2015-6-30
	 * @param piid
	 * @return
	 * @throws Exception
	 */
	private DataStore queryYsdyhdhzqkmx(String piid) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, d.xm, d.xb, d.csrq, a.dwdjid, ");
		sqlBF.append("        d.dyxsksny, a.gygx, a.dqzfje, a.bz, a.swryid, ");
		sqlBF.append("        d.dfjgid, d.dfjglb, a.swryid ");
		sqlBF.append("   from sicp3uws.adtxdyhdhzspb_per b, ");
		sqlBF.append("        ad3u.per_info     d, ");
		sqlBF.append("        ad3u.supp_info    a, ");
		sqlBF.append("        ad3u.per_reg      c, ");
		sqlBF.append("        biuv.person       p ");
		sqlBF.append("  where d.ryid = b.ryid  ");
		sqlBF.append("    and d.ryid = a.ryid ");
		sqlBF.append("    and d.dqdydjid = c.dydjid ");
		sqlBF.append("    and d.ryid = p.ryid ");
		sqlBF.append("    and b.piid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, piid);
		DataStore vds = this.sql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append(" select sum(nvl(s.btje, 0)) btje ");
		sqlBF.append("   from ad3u.per_giv_month_std s ");
		sqlBF.append("  where s.ryid = ? ");
		sqlBF.append("	  and (select min(a.qsny) from ad3u.per_giv_month_std a where a.ryid = s.ryid) between s.qsny and nvl(s.zzny, '205012') ");
		String dqjeSql = sqlBF.toString();

		DataStore dsTemp = new DataStore();
		for (int i = 0; i < vds.rowCount(); i++) {
			String dwdjid = vds.getString(i, "dwdjid");
			String dfjgid = vds.getString(i, "dfjgid");
			String dfjglb = vds.getString(i, "dfjglb");
			String ryid = vds.getString(i, "ryid");
			String swryid = vds.getString(i, "swryid");

			// 取单位
			sqlBF.setLength(0);
			sqlBF.append(" select b.cbdwmc, b.dwbh             ");
			sqlBF.append("   from si3u.orgn_reg b      ");
			sqlBF.append("  where b.dwdjid = ?   ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				vds.put(i, "cbdwmc", dsTemp.getString(0, "cbdwmc"));
				vds.put(i, "dwbh", dsTemp.getString(0, "dwbh"));//增加单位编号 weichao 20160819
			}

			// 取代发机构
			if ("G".equals(dfjglb)) {
				sqlBF.setLength(0);
				sqlBF.append(" select n.dfjgbh ztbh, n.dfjgmc ztmc ");
				sqlBF.append("   from be3u.provide_natl n  ");
				sqlBF.append("  where n.dfjgid = ?   ");
			} else if ("B".equals(dfjglb)) {
				sqlBF.setLength(0);
				sqlBF.append(" select cbdwmc ztmc, dwbh ztbh ");
				sqlBF.append("   from si3u.orgn_reg  ");
				sqlBF.append("  where dwdjid = ?   ");
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dfjgid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() > 0) {
				String dfjgmc = dsTemp.getString(0, "ztmc");
				vds.put(i, "dfjgmc", dfjgmc);
			}

			// 取死亡人员信息
			this.sql.setSql(" select xm szxm from biuv.person where ryid=? ");
			this.sql.setString(1, swryid);
			DataStore dssw = this.sql.executeQuery();
			if (dssw.rowCount() > 0) {
				vds.put(i, "szxm", dssw.getString(0, "szxm"));
			}

			// 取当月定期金额
			this.sql.setSql(dqjeSql);
			this.sql.setString(1, ryid);
			DataStore dqds = this.sql.executeQuery();

			double dqje = dqds.getDouble(0, "btje");
			vds.put(i, "dqzfje", DataFormat.formatDouble(dqje));
		}

		return vds;
	}

	/**
	 * 方法简介.跳转到银行账号变更人员查询页面
	 * 
	 * @author 韦超 2015-8-6
	 */
	public final DataObject fwdYhzhbdryQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 方法简介.银行账号变更人员查询
	 * 
	 * @author 韦超 2015-8-6
	 */
	public final DataObject queryYhzhbdryQueryInfo(final DataObject para) throws Exception {
		String ffztlb, ffztid, jbjgid, ny, ryid, dfjgbh, dfjgmc;
		DataStore dsPerChng, ds;
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		int count;
		double btje;
		String sqlStd, sqlDfjg, sqlDw;
		String dfjglb, dfjgid, jbr, dwdjid, dwbh, dwmc;
		
		String querylogid = QueryLogTool.saveQueryLog("银行账号变动人员查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接收参数
		ffztlb = para.getString("dfjglb");
		ffztid = para.getString("dfjgid");
		ny = para.getDateToString("ny", "yyyyMM");
		jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));

		// 查询当月发生过信息变动的人员
		// 查询增加ltxrq字段 zxk-2019-07-10
		sqlBF.setLength(0);
		sqlBF.append("select c.dfjglb, c.dfjgid, c.dwdjid, c.shbzhm, c.xm, ");
		sqlBF.append("       e.ltxlb, b.bgqxx, b.bghxx, a.jbr, c.ryid, ");
		sqlBF.append("       e.ltxrq ");
		sqlBF.append("  from ad3u.per_chng a, ");
		sqlBF.append("       ad3u.per_chng_detl b, ");
		sqlBF.append("       ad3u.per_info c, ");
		sqlBF.append("       ad3u.per_reg d, ");
		sqlBF.append("       ad3u.emp_info e ");
		sqlBF.append(" where c.ryid = a.ryid ");
		sqlBF.append("   and c.dqdydjid = d.dydjid ");
		sqlBF.append("   and c.ryid = e.ryid ");
		sqlBF.append("   and a.xxbgid = b.xxbgid ");
		sqlBF.append("   and b.bgxm = 'yhzh' ");
		sqlBF.append("   and c.sszfrq = 'A' ");
		sqlBF.append("   and to_char(a.bgrq,'yyyyMM') = ? ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and d.jbjgid in (");
			sqlBF.append(jbjgid + ")");
		}
		if (ffztlb != null && !"".equals(ffztlb)) {
			sqlBF.append("     and c.dfjglb = '");
			sqlBF.append(ffztlb);
			sqlBF.append("'");
		}
		if (ffztid != null && !"".equals(ffztid)) {
			sqlBF.append("     and c.dfjgid = '");
			sqlBF.append(ffztid);
			sqlBF.append("'");
		}
		sqlBF.append(" union all ");
		sqlBF.append("select c.dfjglb, c.dfjgid, c.dwdjid, c.shbzhm, c.xm, ");
		sqlBF.append("       e.yslb ltxlb, b.bgqxx, b.bghxx, a.jbr, c.ryid, ");
		sqlBF.append("       null ltxrq ");
		sqlBF.append("  from ad3u.per_chng a, ");
		sqlBF.append("       ad3u.per_chng_detl b, ");
		sqlBF.append("       ad3u.per_info c, ");
		sqlBF.append("       ad3u.per_reg d, ");
		sqlBF.append("       ad3u.supp_info e ");
		sqlBF.append(" where c.ryid = a.ryid ");
		sqlBF.append("   and c.dqdydjid = d.dydjid ");
		sqlBF.append("   and c.ryid = e.ryid ");
		sqlBF.append("   and a.xxbgid = b.xxbgid ");
		sqlBF.append("   and b.bgxm = 'yhzh' ");
		sqlBF.append("   and c.sszfrq = 'B' ");
		sqlBF.append("   and to_char(a.bgrq,'yyyyMM') = ? ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and d.jbjgid in ( ");
			sqlBF.append(jbjgid + " ) ");
		}
		if (ffztlb != null && !"".equals(ffztlb)) {
			sqlBF.append("     and c.dfjglb = '");
			sqlBF.append(ffztlb);
			sqlBF.append("'");
		}
		if (ffztid != null && !"".equals(ffztid)) {
			sqlBF.append("     and c.dfjgid = '");
			sqlBF.append(ffztid);
			sqlBF.append("'");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ny);
		this.sql.setString(2, ny);
		dsPerChng = this.sql.executeQuery();

		// 查询当月待遇
		sqlBF.setLength(0);
		sqlBF.append(" select sum(a.btje) btje ");
		sqlBF.append("   from ad3u.per_giv_month_std a ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and ? between qsny and nvl(zzny, '204912') ");
		sqlStd = sqlBF.toString();

		// 查询代发机构编号名称
		sqlBF.setLength(0);
		sqlBF.append(" select dfjgbh, dfjgmc ");
		sqlBF.append("   from be3u.provide_natl ");
		sqlBF.append("  where dfjgid = ? ");
		sqlDfjg = sqlBF.toString();

		// 查询单位编号名称
		sqlBF.setLength(0);
		sqlBF.append(" select dwbh, cbdwmc ");
		sqlBF.append("   from si3u.orgn_reg ");
		sqlBF.append("  where dwdjid = ? ");
		sqlDw = sqlBF.toString();

		count = dsPerChng.rowCount();
		for (int i = count - 1; i >= 0; i--) {
			ryid = dsPerChng.getString(i, "ryid");
			dfjglb = dsPerChng.getString(i, "dfjglb");
			dfjgid = dsPerChng.getString(i, "dfjgid");
			dfjgbh = "";
			dfjgmc = "";
			dwbh = "";
			dwmc = "";
			btje = 0;
			// 查询当月待遇
			this.sql.setSql(sqlStd);
			this.sql.setString(1, ryid);
			this.sql.setString(2, ny);
			ds = this.sql.executeQuery();
			btje = ds.getDouble(0, "btje");

			// 查询代发机构编号和名称
			if (dfjglb != null && !"".equals(dfjglb)) {
				if ("G".equals(dfjglb)) {
					this.sql.setSql(sqlDfjg);
					this.sql.setString(1, dfjgid);
					ds = this.sql.executeQuery();
					if (ds.rowCount() > 0) {
						dfjgbh = ds.getString(0, "dfjgbh");
						dfjgmc = ds.getString(0, "dfjgmc");
					}
				} else if ("B".equals(dfjglb)) {
					this.sql.setSql(sqlDw);
					this.sql.setString(1, dfjgid);
					ds = this.sql.executeQuery();
					if (ds.rowCount() > 0) {
						dfjgbh = ds.getString(0, "dwbh");
						dfjgmc = ds.getString(0, "cbdwmc");
					}
				}
			}
			dwdjid = dsPerChng.getString(i, "dwdjid");
			this.sql.setSql(sqlDw);
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() > 0) {
				dwbh = ds.getString(0, "dwbh");
				dwmc = ds.getString(0, "cbdwmc");
			}
			jbr = HsuTools.getCzyxmByUserId(dsPerChng.getString(i, "jbr"));
			dsPerChng.put(i, "jbr", jbr);
			dsPerChng.put(i, "txj", btje);
			dsPerChng.put(i, "dwbh", dwbh);
			dsPerChng.put(i, "dwmc", dwmc);
			dsPerChng.put(i, "dfjglb", dfjglb);
			dsPerChng.put(i, "dfjgbh", dfjgbh);
			dsPerChng.put(i, "dfjgmc", dfjgmc);
		}
		rdo.put("dsbdinfo", dsPerChng);
		
		QueryLogTool.updateQueryLog(querylogid, dsPerChng.rowCount());

		return rdo;
	}

	/**
	 * 查询经办机构下人员信息
	 * 
	 * @param sszfrq 所属支付人员群
	 * @param zfrylb 支付人员类别
	 * @param dyffzt 待遇发放状态
	 * @return perinfo 经办机构下人员信息
	 * @author changt
	 * @date 创建时间 2015年10月15日
	 * @since V1.0
	 */
	public final DataObject queryJbjgry(final DataObject para) throws Exception {

		String sszfrq, zfrylb, dyffzt, ny, jbjgid;
		String dylqlb, sszfrq_tmp;
		double dyje, jfnx, stjfnx, sjjfnx, zhqnx, zhhnx;
		DataStore ds = new DataStore(), dsOrgn, dsPer;
		DataObject rdo = new DataObject(), do_std;
		StringBuffer sqlBF = new StringBuffer();
		StringBuffer sqlBF_std = new StringBuffer();
		String ryid;
		
		String querylogid = QueryLogTool.saveQueryLog("经办机构人员查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		sszfrq = para.getString("sszfrq");
		zfrylb = para.getString("zfrylb");
		dyffzt = para.getString("dyffzt");
		jbjgid = para.getString("jbjgid", "");
		sszfrq = HsuTools.replaceC2QCQ(sszfrq);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		dyffzt = HsuTools.replaceC2QCQ(dyffzt);

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		sqlBF.append(" select dwdjid, dwbh, cbdwmc dwmc, cbdwxz  dwxz");
		sqlBF.append("   from si3u.orgn_reg a ");
		sqlBF.append("  where a.jbjgid = ? ");
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid) ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		dsOrgn = this.sql.executeQuery();

		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数

		// 查询待遇金额
		sqlBF_std.setLength(0);
		sqlBF_std.append(" select b.ryid,nvl(sum(btje), 0) dyje ");
		sqlBF_std.append("   from ad3u.per_giv_month_std a,ad3u.per_info b ");
		sqlBF_std.append("  where b.dwdjid = ? ");
		sqlBF_std.append("    and a.ryid = b.ryid ");
		sqlBF_std.append("    and ? between qsny and nvl(zzny, '205012') ");
		sqlBF_std.append(" group by b.ryid");
		String sql_std = sqlBF_std.toString();

		// 查询人员基本信息和养老登记信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid,a.shbzhm ,a.xm, a.xb, a.shbzhm  sfzhm, ");
		sqlBF.append(" 	      a.csrq, a.sszfrq, a.zfrylb, b.ltxrq, a.dyxsksny, ");
		sqlBF.append(" 	      a.dylqlb, a.dyffzt, a.dyspbz, a.yhzh,b.cjgzrq, ");
		sqlBF.append(" 	      a.dfjglb, dfjgid, ? dwbh, ? dwmc,? dwxz,b.stjfnx,  ");
		sqlBF.append(" 	      b.sjjfnx, b.zhqnx, b.zhhnx, b.dacsrq, c.lxrdh,  ");
		sqlBF.append("        c.txdz, c.zyjszwjb ,a.xzzw ");//增加查询行政职务 gzh mod 20171014
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.emp_info b, ");
		sqlBF.append("        biuv.person c ");
		sqlBF.append("  where a.dwdjid = ? ");
		sqlBF.append("    and a.ryid = b.ryid(+) ");
		sqlBF.append("    and a.ryid = c.ryid ");
		if (sszfrq != null && !"".equals(sszfrq)) {
			sqlBF.append("    and a.sszfrq in (");
			sqlBF.append(sszfrq + " ) ");

		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and a.zfrylb in (");
			sqlBF.append(zfrylb + " ) ");

		}
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and a.dyffzt in (");
			sqlBF.append(dyffzt + " ) ");

		}

		// 依次查出各管理机构的人员基本信息及拨付信息
		ny = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		HashMap<String, DataObject> stdMap = new HashMap<String, DataObject>();
		DataStore ds_std;
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String dwmc = dsOrgn.getString(i, "dwmc");
			prompt.prompt("正在查询单位【" + dwmc + "】的人员信息...");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dsOrgn.getString(i, "dwbh"));
			this.sql.setString(2, dwmc);
			this.sql.setString(3, dsOrgn.getString(i, "dwxz"));
			this.sql.setString(4, dsOrgn.getString(i, "dwdjid"));
			dsPer = this.sql.executeQuery();

			this.sql.setSql(sql_std);
			this.sql.setString(1, dsOrgn.getString(i, "dwdjid"));
			this.sql.setString(2, ny);
			ds_std = this.sql.executeQuery();

			stdMap = SiTools.ds2HashMapWithOneKey(ds_std, "ryid");

			for (int j = 0, length = dsPer.rowCount(); j < length; j++) {
				ryid = dsPer.getString(j, "ryid");
				dylqlb = dsPer.getString(j, "dylqlb");
				sszfrq_tmp = dsPer.getString(j, "sszfrq");

				if (stdMap.containsKey(ryid)) {
					do_std = stdMap.get(ryid);
					dyje = do_std.getDouble("dyje");
				} else {
					dyje = 0;
				}

				String gl = AdTools.getPerCmpl(ryid, "GL", "");
				String txdah = AdTools.getPerCmpl(ryid, "TXDAH", "");

				dsPer.put(j, "gl", gl);
				dsPer.put(j, "txdah", txdah);
				dsPer.put(j, "dyje", dyje);

				// 缴费年限、视同缴费年限、实际缴费年限
				if ("A".equals(sszfrq_tmp)) {
					if (dylqlb.indexOf("101") >= 0) {
						zhqnx = dsPer.getDouble(j, "zhqnx");
						zhhnx = dsPer.getDouble(j, "zhhnx");
						jfnx = MathUtil.round(MathUtil.round((zhqnx + zhhnx) * 12, 0) / 12, 2);
						dsPer.put(j, "jfnx", jfnx);
					} else if (dylqlb.indexOf("102") >= 0) {
						stjfnx = dsPer.getDouble(j, "stjfnx");
						sjjfnx = dsPer.getDouble(j, "sjjfnx");
						jfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);
						dsPer.put(j, "jfnx", jfnx);
					}
				}
			}
			if (dsPer.rowCount() > 0) {
				ds = ds.combineDatastore(dsPer);
			}
			prompt.moveForword(1);
		}

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		ds = ds.sort("dwbh");
		ds = AdTools.genDfjgxxDataStore(ds, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		ds.setTypeList("shbzhm:s,xm:s,xb:s,sfzhm:s,csrq:s,sszfrq:s,zfrylb:s,"
				+ "ltxrq:s,dyxsksny:s,dylqlb:s,dyffzt:s,dyspbz:s,yhzh:s,dfjglb:s,"
				+ "dfjgid:s,dwbh:s,dwmc:s,dwxz:s,cjgzrq:s,ryid:s,lxrdh:s,txdz:s,"
				+ "zyjszwjb:s,gl:s,txdah:s,dyje:n,dfjgbh:s,dfjgmc:s");

		rdo.put("dsjbjgry", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.进入单位应拨付界面
	 * 
	 * @author changt
	 * @date 创建时间 2015-10-15
	 * @since V1.0
	 */
	public final DataObject fwdJbjgryQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);

		return rdo;
	}

	/**
	 * 单位企业职工退休预审核人员查询，获取经办机构信息
	 * 
	 * @author 刘欣
	 * @throws Exception
	 * @date 创建时间2015-10-21
	 * @since V1.0
	 */
	public DataObject fwdQyzgtxyshInfo(DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		
		rdo.put("dsjbjg", ds);

		return rdo;
	}

	/**
	 * 企业职工退休预审核人员查询
	 * 
	 * @author 刘欣
	 * @throws Exception
	 * @date 创建时间2015-10-21
	 * @since V1.0
	 * @since-2016-3-3-wb-优化速度:1、查询单位增加单位有已经预审人员的限制，减少单位循环次数.2、进度条改为10个单位提示一次进度
	 * @since-2016.3.23-wb-优化速度：改为先查人再循环人员补充人员的信息
	 */
	public DataObject queryQyzgtxyshInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsPer = new DataStore();
		DataStore dsTemp;
		
		String querylogid = QueryLogTool.saveQueryLog("企业职工退休预审核人员查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 接参
		String jbjgid = para.getString("jbjgid");
		String dwdjid = para.getString("dwdjid");
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String bltxdjbz = para.getString("bltxdjbz");
		
		SPrompt prompt = SPromptUtil.getSPrompt();
		prompt.prompt("正在查询符合条件的人员...");

		sqlBF.setLength(0);
		sqlBF.append("select b.rydjid, b.ryid, b.shbzhm, b.xm, b.xb,  ");
		sqlBF.append("       b.cjgzrq, a.dwbh, a.cbdwmc, b.zglb ");
		sqlBF.append("  from si3u.orgn_reg a, si3u.per_reg b, si3u.per_natl_cmpl c ");
		sqlBF.append(" where a.dwdjid = b.dwdjid ");
		sqlBF.append("   and b.hdbz = '1' ");
		if (null != dwdjid && !"".equals(dwdjid)) {
			sqlBF.append("    and a.dwdjid = '" + dwdjid + "'");
		}
		sqlBF.append("   and b.ryid = c.ryid ");
		sqlBF.append("   and c.bcxmbh = 'DASHSJ' ");
		sqlBF.append("   and c.bcxmz between ? and ? ");
		sqlBF.append("   and a.cbdjzt = '1' ");
		sqlBF.append("   and a.jbjgid in ( " + HsuTools.replaceC2QCQ(jbjgid)
				+ ") ");
		if ("1".equals(bltxdjbz)) {
			sqlBF.append(" and exists (select 1 from ad3u.per_info d where c.ryid = d.ryid) ");
		} else if ("0".equals(bltxdjbz)) {
			sqlBF.append(" and not exists (select 1 from ad3u.per_info d where c.ryid = d.ryid) ");
		}

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		dsPer = this.sql.executeQuery();

		prompt.setTotalSteps(dsPer.rowCount());// 设置步数
		boolean isComplete = true;
		int step = 50, num = 0;
		for (int i = 0, count = dsPer.rowCount(); i < count; i++) {
			String ryid = dsPer.getString(i, "ryid");
			String zglb = dsPer.getString(i, "zglb");

			if (0 == (i % step)) {
				num++;
				prompt.prompt("共" + count + "个人，正在查询第" + (i + 1) + "至第"
						+ ((num * step > count) ? count : (num * step))
						+ "个人的的退休预审核情况...");// 进度条刷新的内容
			}

			if (prompt.isTerminating()) { // 这里负责判定是否点击了【终止】按钮
				isComplete = false;
				prompt.terminate("查询任务已终止!");
				break;
			}

			this.sql.setSql(" select bcxmbh, bcxmz from si3u.per_natl_cmpl where ryid = ? and bcxmbh in ('DACSRQ', 'LTXRQ') ");
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();

			for (int j = 0, m = dsTemp.rowCount(); j < m; j++) {
				if ("DACSRQ".equals(dsTemp.getString(j, "bcxmbh"))) {
					dsPer.put(i, "dacsrq", dsTemp.getString(j, "bcxmz"));
				}
				if ("LTXRQ".equals(dsTemp.getString(j, "bcxmbh"))) {
					dsPer.put(i, "ltxrq", dsTemp.getString(j, "bcxmz"));
				}
			}

			String bltxdjbz_per, blzysj= null;
			if (bltxdjbz == null || "".equals(bltxdjbz) || "1".equals(bltxdjbz)) {
				this.sql.setSql(" select to_char(blzysj, 'yyyyMMdd') blzysj from ad3u.per_reg where ryid = ? ");
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();

				bltxdjbz_per = "0";
				if (dsTemp.rowCount() > 0) {
					bltxdjbz_per = "1";
					blzysj = dsTemp.getString(0, "blzysj");
				}
			} else {
				bltxdjbz_per = bltxdjbz;
			}
			
			// add by guanll 2018.04.18 增加减员标志和提交退休申请标志
			String jybz = "1";// 减员标志
			if("A0A".equals(zglb) || "A0F".equals(zglb)){
				jybz = "0";
			}
			String txsqbz = "0";// 提交退休申请标志
			sqlBF.setLength(0);
			sqlBF.append(" select 1 ");// 审核工单表中有就算已提交退休申请
			sqlBF.append("   from sicp3uws.adqyzgtxysh_natl a ");
			sqlBF.append("  where a.ryid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();
			if(dsTemp.rowCount() > 0){
				txsqbz = "1";
			}
			
			dsPer.put(i, "bltxdjbz", bltxdjbz_per);
			dsPer.put(i, "blzysj", blzysj);
			dsPer.put(i, "jybz", jybz);
			dsPer.put(i, "txsqbz", txsqbz);
			prompt.moveForword(1);
		}

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		DataObject rdo = new DataObject();
		rdo.put("ds", dsPer);
		
		QueryLogTool.updateQueryLog(querylogid, dsPer.rowCount());

		return rdo;
	}
	/**
	 * 
	 * 方法简介.机关事业单位离退休人员人数统计查询
	 * 
	 * @author 韦超 2016-1-7
	 */
	public DataObject queryJgsydwltxryrstjInfo(DataObject para) throws Exception {
		
		String querylogid = QueryLogTool.saveQueryLog("机关事业离退休人员人数查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dwxz = para.getString("dwxz");
		String dwdjid = para.getString("dwdjid");
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append("select sum(decode(b.xzzw,'121',1,0)) zt, ");
		sqlBF.append("       sum(decode(b.xzzw,'122',1,0)) ft, ");
		sqlBF.append("       sum(decode(b.xzzw,'131',1,'131',1,0)) zx, ");
		sqlBF.append("       sum(decode(b.xzzw,'132',1,'132',1,0)) fx, ");
		sqlBF.append("       sum(decode(b.xzzw,'141',1,0)) zk, ");
		sqlBF.append("       sum(decode(b.xzzw,'142',1,0)) fk, ");
		sqlBF.append("       sum(decode(b.xzzw,'150',1,0)) ky, ");
		sqlBF.append("       sum(decode(b.xzzw,'160',1,0)) bsy,       ");
		sqlBF.append("       sum(decode(a.zyjszwjb,'1',1,0)) zg, ");
		sqlBF.append("       sum(decode(a.zyjszwjb,'2',1,0)) fg, ");
		sqlBF.append("       sum(decode(a.zyjszwjb,'3',1,0)) zj, ");
		sqlBF.append("       sum(decode(a.zyjszwjb,'4',1,0)) cj, ");
		sqlBF.append("       sum(decode(a.zyjszwjb,'6',1,0)) yj, ");
		sqlBF.append("       sum(decode(a.gjzyzgdj,'3',1,0)) gjg, ");
		sqlBF.append("       sum(decode(a.gjzyzgdj,'4',1,0)) zjg, ");
		sqlBF.append("       sum(decode(a.gjzyzgdj,'5',1,0)) cjg, ");
		sqlBF.append("       sum(decode(a.gjzyzgdj,'0',1,0)) pg ");
		sqlBF.append("  from biuv.person a, ");
		sqlBF.append("       ad3u.per_reg d, ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("       ad3u.per_info b,  ");
			sqlBF.append("       si3u.orgn_reg c  ");
		}else {
			sqlBF.append("       ad3u.per_info b  ");
		}
		sqlBF.append(" where a.ryid = b.ryid ");
		sqlBF.append("   and b.dqdydjid = d.dydjid ");
		sqlBF.append("   and b.dylqlb = '102' ");
		sqlBF.append("   and b.dyffzt in ('1','2') ");
		sqlBF.append("   and b.sszfrq = 'A' ");
		sqlBF.append("   and b.zfrylb like ? ");
		sqlBF.append("   and d.jbjgid like '"+ this.getBizInstitution() +"%'");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("   and c.dwdjid = b.dwdjid ");
			sqlBF.append("   and c.cbdwxz = '" + dwxz + "'");
		}
		if (dwdjid != null && !"".equals(dwdjid)){
			sqlBF.append("   and b.dwdjid = '" + dwdjid + "'");
		}
		String str = sqlBF.toString();
		
		DataStore allInfo = new DataStore();//用来存放所有的返回数据
		//开始查询离休
		this.sql.setSql(str);
		this.sql.setString(1, "A1%");
		DataStore dsLxInfo = this.sql.executeQuery();
		allInfo = this.initJgsydwltxryrstjInfo(dsLxInfo, allInfo);
		allInfo.put(allInfo.rowCount() - 1, "zfrylb", "离休");
		
		//开始查询退休
		this.sql.setSql(str);
		this.sql.setString(1, "A2%");
		DataStore dsTxInfo = this.sql.executeQuery();
		allInfo = this.initJgsydwltxryrstjInfo(dsTxInfo, allInfo);
		allInfo.put(allInfo.rowCount() - 1, "zfrylb", "退休");
		
		//开始查询退职
		this.sql.setSql(str);
		this.sql.setString(1, "A3%");
		DataStore dsTzInfo = this.sql.executeQuery();
		allInfo = this.initJgsydwltxryrstjInfo(dsTzInfo, allInfo);
		allInfo.put(allInfo.rowCount() - 1, "zfrylb", "退职");
		
		int zt = 0, ft = 0, zx = 0, fx = 0, zk = 0, fk = 0, ky = 0, bsy = 0, xzzwxj = 0;
		int zg = 0, fg = 0, zj = 0, cj = 0, yj = 0, zyjszwjbxj = 0;
		int gjg = 0, zjg = 0, cjg = 0, pg = 0, gjzyzgdjxj = 0, hj = 0;
		for (int i = 0; i < allInfo.rowCount(); i++) {
			zt += allInfo.getInt(i, "zt");
			ft += allInfo.getInt(i, "ft");
			zx += allInfo.getInt(i, "zx");
			fx += allInfo.getInt(i, "fx");
			zk += allInfo.getInt(i, "zk");
			fk += allInfo.getInt(i, "fk");
			ky += allInfo.getInt(i, "ky");
			bsy += allInfo.getInt(i, "bsy");
			xzzwxj += allInfo.getInt(i, "xzzwxj");

			zg += allInfo.getInt(i, "zg");
			fg += allInfo.getInt(i, "fg");
			zj += allInfo.getInt(i, "zj");
			cj += allInfo.getInt(i, "cj");
			yj += allInfo.getInt(i, "yj");
			zyjszwjbxj += allInfo.getInt(i, "zyjszwjbxj");

			gjg += allInfo.getInt(i, "gjg");
			zjg += allInfo.getInt(i, "zjg");
			cjg += allInfo.getInt(i, "cjg");
			pg += allInfo.getInt(i, "pg");
			gjzyzgdjxj += allInfo.getInt(i, "gjzyzgdjxj");

			hj += allInfo.getInt(i, "hj");
		}
		allInfo.addRow();
		int row = allInfo.rowCount() - 1;
		allInfo.put(row, "zt", zt);
		allInfo.put(row, "ft", ft);
		allInfo.put(row, "zx", zx);
		allInfo.put(row, "fx", fx);
		allInfo.put(row, "zk", zk);
		allInfo.put(row, "fk", fk);
		allInfo.put(row, "ky", ky);
		allInfo.put(row, "bsy", bsy);
		allInfo.put(row, "xzzwxj", xzzwxj);
		
		allInfo.put(row, "zg", zg);
		allInfo.put(row, "fg", fg);
		allInfo.put(row, "zj", zj);
		allInfo.put(row, "cj", cj);
		allInfo.put(row, "yj", yj);
		allInfo.put(row, "zyjszwjbxj", zyjszwjbxj);
		
		allInfo.put(row, "gjg", gjg);
		allInfo.put(row, "zjg", zjg);
		allInfo.put(row, "cjg", cjg);
		allInfo.put(row, "pg", pg);
		allInfo.put(row, "gjzyzgdjxj", gjzyzgdjxj);
		
		allInfo.put(row, "hj", hj);
		allInfo.put(row, "zfrylb", "合计");
		
		sqlBF.setLength(0);
		sqlBF.append("select count(a.ryid) ysrs ");
		sqlBF.append("  from ad3u.per_info a,  ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("       ad3u.per_reg c,  ");
			sqlBF.append("       si3u.orgn_reg b  ");
		}else {
			sqlBF.append("       ad3u.per_reg c  ");
		}
		sqlBF.append(" where a.dylqlb = '102' ");
		sqlBF.append("   and a.dqdydjid = c.dydjid ");
		sqlBF.append("   and c.jbjgid like '"+ this.getBizInstitution() +"%'");
		sqlBF.append("   and a.dyffzt in ('1','2') ");
		sqlBF.append("   and a.sszfrq = 'B' ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("   and a.dwdjid = b.dwdjid ");
			sqlBF.append("   and b.cbdwxz = '" + dwxz + "'");
		}
		if (dwdjid != null && !"".equals(dwdjid)){
			sqlBF.append("   and a.dwdjid = '" + dwdjid + "'");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsYs = this.sql.executeQuery();

		int ysrs = dsYs.getInt(0, "ysrs");
		String strYs = "注：遗属总计为"+ ysrs + "人";
		
		dsYs.put(0, "ysxx", strYs);
		
		DataObject rdo = new DataObject();
		rdo.put("ds", allInfo);
		rdo.put("dsys", dsYs);
		
		QueryLogTool.updateQueryLog(querylogid, allInfo.rowCount()+dsYs.rowCount());
		
		return rdo;
	}
	/**
	 * 
	 * 方法简介.机关事业单位离退休人员人数统计查询：组装回传的ds
	 * 
	 * @author 韦超 2016-1-7
	 */
	public DataStore initJgsydwltxryrstjInfo(DataStore dsInfo, DataStore allInfo) throws Exception {
		int zt = dsInfo.getInt(0, "zt");
		int ft = dsInfo.getInt(0, "ft");
		int zx = dsInfo.getInt(0, "zx");
		int fx = dsInfo.getInt(0, "fx");
		int zk = dsInfo.getInt(0, "zk");
		int fk = dsInfo.getInt(0, "fk");
		int ky = dsInfo.getInt(0, "ky");
		int bsy = dsInfo.getInt(0, "bsy");
		int xzzwxj = zt + ft + zx + fx + zk + fk + ky + bsy;
		
		int zg = dsInfo.getInt(0, "zg");
		int fg = dsInfo.getInt(0, "fg");
		int zj = dsInfo.getInt(0, "zj");
		int cj = dsInfo.getInt(0, "cj");
		int yj = dsInfo.getInt(0, "yj");
		int zyjszwjbxj = zg + fg + zj + cj + yj;
		
		int gjg = dsInfo.getInt(0, "gjg");
		int zjg = dsInfo.getInt(0, "zjg");
		int cjg = dsInfo.getInt(0, "cjg");
		int pg = dsInfo.getInt(0, "pg");
		int gjzyzgdj = gjg + zjg + cjg + pg;
		
		int hj = xzzwxj + zyjszwjbxj + gjzyzgdj;
		
		int row = allInfo.rowCount();
		allInfo.put(row, "zt", zt);
		allInfo.put(row, "ft", ft);
		allInfo.put(row, "zx", zx);
		allInfo.put(row, "fx", fx);
		allInfo.put(row, "zk", zk);
		allInfo.put(row, "fk", fk);
		allInfo.put(row, "ky", ky);
		allInfo.put(row, "bsy", bsy);
		allInfo.put(row, "xzzwxj", xzzwxj);
		
		allInfo.put(row, "zg", zg);
		allInfo.put(row, "fg", fg);
		allInfo.put(row, "zj", zj);
		allInfo.put(row, "cj", cj);
		allInfo.put(row, "yj", yj);
		allInfo.put(row, "zyjszwjbxj", zyjszwjbxj);
		
		allInfo.put(row, "gjg", gjg);
		allInfo.put(row, "zjg", zjg);
		allInfo.put(row, "cjg", cjg);
		allInfo.put(row, "pg", pg);
		allInfo.put(row, "gjzyzgdjxj", gjzyzgdj);
		
		allInfo.put(row, "hj", hj);
		return allInfo;
	}

	/**
	 * 方法简介.养老缴费年限认定查询
	 * 
	 * @author 韦超 2016-2-19
	 */
	public DataObject queryYljfnxrdcxInfo(DataObject para) throws Exception {
		DataStore ds = new DataStore();
		
		String querylogid = QueryLogTool.saveQueryLog("养老缴费年限认定查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dfjgid = para.getString("dfjgid");
		String dwdjid = para.getString("dwdjid");
		String jbjgid = para.getString("jbjgid");
		String zfrylb = para.getString("zfrylb");
		String rdbz = para.getString("rdbz");
		String ltxqsrq = para.getDateToString("qsrq", "yyyyMMdd");//查询条件增加离退休日期 weichao 20160715
		String ltxzzrq = para.getDateToString("zzrq", "yyyyMMdd");
		
		String ad302081;
		StringBuffer sqlBF = new StringBuffer();

		String[] strJbjgid = jbjgid.split(",");//拆分经办机构id
		for (int i = 0; i < strJbjgid.length; i++) {
			String sJbjgid = strJbjgid[i];
			ad302081 = SiTools.getPara(sJbjgid, "ad302081", "20501231");
			// 已认定人员
			if ("1".equals(rdbz) || "".equals(rdbz) || rdbz == null) {
				sqlBF.setLength(0);
				sqlBF.append(" select a.xm, a.shbzhm, c.dwbh, c.cbdwmc,  ");
				sqlBF.append("        a.zfrylb, b.ltxrq, a.dyxsksny, b.cjgzrq, ");
				sqlBF.append("        b.dacsrq, '1' rdbz, a.ryid ");
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        ad3u.emp_info b, ");
				sqlBF.append("        si3u.orgn_reg c ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and a.dfjgid = '" + dfjgid + "' ");
				sqlBF.append("    and c.jbjgid = '" + sJbjgid + "' ");
				if (ltxqsrq != null && !"".equals(ltxqsrq)) {//查询条件增加离退休日期 weichao 20160715
					sqlBF.append("    and b.ltxrq >= '" + ltxqsrq + "' ");
				}
				if (ltxzzrq != null && !"".equals(ltxzzrq)) {
					sqlBF.append("    and b.ltxrq <= '" + ltxzzrq + "' ");
				}
				if (!"".equals(dwdjid) && dwdjid != null) {
					sqlBF.append("    and a.dwdjid = '" + dwdjid + "' ");
				}
				if (!"".equals(zfrylb) && zfrylb != null) {
					sqlBF.append("    and a.zfrylb in ( "
							+ HsuTools.replaceC2QCQ(zfrylb) + ") ");
				}
				sqlBF.append("    and exists ( ");
				sqlBF.append("        select 1  ");
				sqlBF.append("          from ad3u.per_jfnxrd d ");
				sqlBF.append("         where d.dydjid = a.dqdydjid) ");
				this.sql.setSql(sqlBF.toString());
				DataStore dsRd = this.sql.executeQuery();
				ds.combineDatastore(dsRd);
			}

			// 未认定
			if ("2".equals(rdbz) || "".equals(rdbz) || rdbz == null) {
				sqlBF.setLength(0);
				sqlBF.append(" select a.xm, a.shbzhm, c.dwbh, c.cbdwmc,  ");
				sqlBF.append("        a.zfrylb, b.ltxrq, a.dyxsksny, b.cjgzrq, ");
				sqlBF.append("        b.dacsrq, '2' rdbz, a.ryid ");
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        ad3u.emp_info b, ");
				sqlBF.append("        si3u.orgn_reg c ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and to_char(a.dyspsj,'yyyyMMdd') < '" + ad302081
						+ "' ");
				sqlBF.append("    and a.dfjgid = '" + dfjgid + "' ");
				sqlBF.append("    and c.jbjgid = '" + sJbjgid + "' ");
				if (ltxqsrq != null && !"".equals(ltxqsrq)) {//查询条件增加离退休日期 weichao 20160715
					sqlBF.append("    and b.ltxrq >= '" + ltxqsrq + "' ");
				}
				if (ltxzzrq != null && !"".equals(ltxzzrq)) {
					sqlBF.append("    and b.ltxrq <= '" + ltxzzrq + "' ");
				}
				if (!"".equals(dwdjid) && dwdjid != null) {
					sqlBF.append("    and a.dwdjid = '" + dwdjid + "' ");
				}
				if (!"".equals(zfrylb) && zfrylb != null) {
					sqlBF.append("    and a.zfrylb in ( "
							+ HsuTools.replaceC2QCQ(zfrylb) + ") ");
				}
				sqlBF.append("    and not exists (select 1  ");
				sqlBF.append("                      from ad3u.per_jfnxrd d ");
				sqlBF.append("                     where d.dydjid = a.dqdydjid) ");
				this.sql.setSql(sqlBF.toString());
				DataStore dsWr = this.sql.executeQuery();
				ds.combineDatastore(dsWr);
			}

			// 无需认定
			if ("3".equals(rdbz) || "".equals(rdbz) || rdbz == null) {
				sqlBF.setLength(0);
				sqlBF.append(" select a.xm, a.shbzhm, c.dwbh, c.cbdwmc,  ");
				sqlBF.append("        a.zfrylb, b.ltxrq, a.dyxsksny, b.cjgzrq, ");
				sqlBF.append("        b.dacsrq, '3' rdbz, a.ryid ");
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        ad3u.emp_info b, ");
				sqlBF.append("        si3u.orgn_reg c ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and to_char(a.dyspsj,'yyyyMMdd') >= '" + ad302081
						+ "' ");
				sqlBF.append("    and a.dfjgid = '" + dfjgid + "' ");
				sqlBF.append("    and c.jbjgid = '" + sJbjgid + "' ");
				if (ltxqsrq != null && !"".equals(ltxqsrq)) {//查询条件增加离退休日期 weichao 20160715
					sqlBF.append("    and b.ltxrq >= '" + ltxqsrq + "' ");
				}
				if (ltxzzrq != null && !"".equals(ltxzzrq)) {
					sqlBF.append("    and b.ltxrq <= '" + ltxzzrq + "' ");
				}
				if (!"".equals(dwdjid) && dwdjid != null) {
					sqlBF.append("    and a.dwdjid = '" + dwdjid + "' ");
				}
				if (!"".equals(zfrylb) && zfrylb != null) {
					sqlBF.append("    and a.zfrylb in ( "
							+ HsuTools.replaceC2QCQ(zfrylb) + ") ");
				}
				sqlBF.append("    and not exists (select 1  ");
				sqlBF.append("                      from ad3u.per_jfnxrd d ");
				sqlBF.append("                     where d.dydjid = a.dqdydjid) ");
				this.sql.setSql(sqlBF.toString());
				DataStore dsWx = this.sql.executeQuery();
				ds.combineDatastore(dsWx);
			}
		}
		
		ds.sort("rdbz,shbzhm");;
		//循环取定期待遇
		String dqny = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMMdd");
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje),0) dyje ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and ? between qsny and nvl(zzny, '205012') ");
		
		String strDq = sqlBF.toString();
		for (int i = 0; i < ds.rowCount(); i++) {
			String ryid = ds.getString(i, "ryid");
			this.sql.setSql(strDq);
			this.sql.setString(1, ryid);
			this.sql.setString(2, dqny);
			DataStore dsDy = this.sql.executeQuery();
			
			ds.put(i, "dqdy", dsDy.getDouble(0, "dyje"));
		}
		DataObject rdo = new DataObject();
		rdo.put("ds", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
		
		return rdo;
	}

	/**
	 * 养老缴费年限认定查询_标准客户化
	 * 
	 * @author 李艾诺 2017-9-14
	 */
	public DataObject queryYljfnxrdcxInfo_common(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dsTemp = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, qsrq, zzrq, dwdjid;

		jbjgid = para.getString("jbjgid");
		qsrq = para.getDateToString("qsrq", "yyyymmdd");
		zzrq = para.getDateToString("zzrq", "yyyymmdd");
		dwdjid = para.getString("dwdjid", "");
		
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构ID为空!");
		}

		// csl modi begin 20141013 此统计查询只关心审核通过时间，审核通过结果的查询
		if (qsrq != null && !"".equals(qsrq) && zzrq != null
				&& !"".equals(zzrq)) {
			SiTools.checkQsZzrq(qsrq, zzrq, 12);
		}

		jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));

		sqlBF.setLength(0);
		sqlBF.append(" select a.rdid, a.dydjid, a.rydjid, a.ryid, a.grbh, ");
		sqlBF.append("        a.sfzhm, a.xm, a.csrq, a.dwdjid, b.dwbh, ");
		sqlBF.append("        b.cbdwmc, a.jbr csjbr, a.jbsj csjbrq, a.cjgzrq, a.scjfrq, ");
		sqlBF.append("        a.ltxrq, a.fhr fsjbr, a.fhsj fsjbrq, a.ygxs, a.dacsrq, ");
		sqlBF.append("        a.stjfnx, a.sjjfnx, round(a.stjfnx + a.sjjfnx, 2) nxhj, a.bz ");// add.lb.20150105.增加查询年限信息
		sqlBF.append("   from ad3u.per_jfnxrd a, si3u.orgn_reg b ");
		sqlBF.append("  where a.dwdjid = b.dwdjid ");
		sqlBF.append("    and a.jbjgid in (" + jbjgid + ")");
		// ----modify.by.lb.20150105.解决当只录入起始日期或终止日期时限制不起作用的问题
		if (qsrq != null && !"".equals(qsrq)) {
			sqlBF.append("    and to_char(a.fhsj,'yyyymmdd') >= '" + qsrq + "'");
		}
		if (zzrq != null && !"".equals(zzrq)) {
			sqlBF.append("    and to_char(a.fhsj,'yyyymmdd') <= '" + zzrq + "'");
		}
		// ----modify.by.lb.20150105.end
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("    and b.dwdjid = '" + dwdjid + "'");
		}

		this.sql.setSql(sqlBF.toString());
		dsTemp = this.sql.executeQuery();
		// csl modi end
		
		dsTemp.sort("dwbh,grbh");

		// 转换经办人
		dsTemp = Auth3Tools.genCzyDataStore(dsTemp, "csjbr csjbr&fsjbr fsjbr");

		rdo.put("ds", dsTemp);

		String querylogid = QueryLogTool.saveQueryLog("养老缴费年限认定查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		QueryLogTool.updateQueryLog(querylogid, dsTemp.rowCount());
		
		dsTemp = null;
		sqlBF = null;

		return rdo;
	}
	
	/**
	 * 养老缴费年限认定查询明细页面
	 * 
	 * @author 李艾诺 2017-9-14
	 */
	public final DataObject queryYljfnxrdcxMx(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dsRdJbxx = new DataStore();
		DataStore dsRdMx = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String rdid, cjjflslb;
		rdid = para.getString("rdid");
		String qsny, zzny;
		int monthNum, zdys, jfys, sumZdys = 0;

		if (rdid == null || "".equals(rdid)) {
			this.bizException("传入的认定ID为空!");
		}

		// 获取基本信息
		sqlBF.setLength(0);
		sqlBF.append(" select rdid, jbjgid, dwdjid, dwid, dwbh, ");
		sqlBF.append("        dwmc, rydjid, ryid, dydjid, grbh, ");
		sqlBF.append("        xm, sfzhm, csrq, cjgzrq, ltxrq, ");
		sqlBF.append("        scjfrq, ygxs, gzjl, hkszd, jtzz, ");
		sqlBF.append("        lxdh, znxm, znlxdh, zntxdz, dwjbr, ");
		sqlBF.append("        dwjbsj, stjfys, stjfnx, tsgzzzys, ");
		sqlBF.append("        tsgzzznx, sjjfys, sjjfnx, jbr, jbsj, ");
		sqlBF.append("        fhr, fhsj, dacsrq, zfrylb ");
		sqlBF.append("  from ad3u.per_jfnxrd ");
		sqlBF.append(" where rdid = '" + rdid + "'");
		this.sql.setSql(sqlBF.toString());
		dsRdJbxx = this.sql.executeQuery();
		
		if (dsRdJbxx.rowCount() <= 0) {
			this.bizException("查询退休人员认定信息失败!");
		}
		
		// add.by.mp.2015-02-28.人员信息中增加总缴费年限
		dsRdJbxx.put(0, "zjfnx", MathUtil.round(dsRdJbxx.getDouble(0, "stjfnx")
				+ dsRdJbxx.getDouble(0, "tsgzzznx")
				+ dsRdJbxx.getDouble(0, "sjjfnx"), 2));

		// 获取认定详细信息
		sqlBF.setLength(0);
		sqlBF.append(" select rdid, cjjflslb, sjqsny, sjzzny, jfys, ");
		sqlBF.append("		  jfnx, shr, jbr, jbsj, fhr, fhsj ");
		sqlBF.append("   from ad3u.per_jfnxrd_detl");
		sqlBF.append("  where rdid = '" + rdid + "'");
		this.sql.setSql(sqlBF.toString());
		dsRdMx = this.sql.executeQuery();
		
		for (int i = 0, n = dsRdMx.rowCount(); i < n; i++) {
			cjjflslb = dsRdMx.getString(i, "cjjflslb");
			dsRdMx.put(i, "cjjflslbmc", HsuTools.discode("CJJFLSLB", cjjflslb));
			
			// add.by.mp.2015-02-28.每行中放入中断月数
			jfys = dsRdMx.getInt(i, "jfys");
			qsny = dsRdMx.getString(i, "sjqsny");
			zzny = dsRdMx.getString(i, "sjzzny");

			if (qsny != null && !"".equals(qsny) && zzny != null
					&& !"".equals(zzny)) {
				monthNum = DateUtil.getMonthDifferenceBetweenTwoStringDate(qsny, zzny) + 1;
				zdys = monthNum - jfys;
				dsRdMx.put(i, "zdys", zdys);
				sumZdys = sumZdys + zdys;
			}
		}
		// add.by.mp.2015-02-28.放入中断月数合计
		dsRdJbxx.put(0, "sumZdys", sumZdys);

		// 转换经办人
		dsRdMx = Auth3Tools.genCzyDataStore(dsRdMx, "jbr jbr&fhr fhr&shr shr");
		dsRdMx.sort("cjjflslb");
		
		rdo.put("dsrdjbxx", dsRdJbxx);
		rdo.put("dsrdmx", dsRdMx);

		String querylogid = QueryLogTool.saveQueryLog("养老缴费年限认定查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		QueryLogTool.updateQueryLog(querylogid, dsRdMx.rowCount());
		
		sqlBF = null;
		dsRdJbxx = null;
		dsRdMx = null;
		
		return rdo;
	}
	
	/**
	 * 方法简介.跳转到暂停人员指静脉认证情况查询
	 * 
	 * @author 韦超 2016-6-1
	 */
	public DataObject fwdZtryzjmrzqkcx(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dsdfjg = new DataStore();
		// 取经办机构信息
		DataStore dsjbjg = new DataStore();
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			dsjbjg = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			dsjbjg = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end

		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append("  select dfjgid value, dfjgmc content      ");
		sqlBF.append("		    from be3u.provide_natl n         ");
		sqlBF.append("		   where  exists(                    ");
		sqlBF.append("		           select a.jgid             ");
		sqlBF.append("		             from be3u.inst_config a ");
		sqlBF.append("		            where a.jgid = n.dfjgid  ");
		sqlBF.append("		            and a.jbjgid = ?  ");
		sqlBF.append("                  and a.jglx ='G' )        ");
		String str = sqlBF.toString();
		for (int i = 0; i < dsjbjg.rowCount(); i++) {
			String jbjgid = dsjbjg.getString(i, "value");
			this.sql.setSql(str);
			this.sql.setString(1, jbjgid);

			DataStore ds = this.sql.executeQuery();
			dsdfjg.combineDatastore(ds);
		}

		// 返回代发机构信息
		rdo.put("dsdfjg", dsdfjg);
		rdo.put("dsjbjg", dsjbjg);
		return rdo;
	}

	/**
	 * 方法简介.暂停人员指静脉认证情况查询
	 * 
	 * @author 韦超 2016-6-1
	 */
	public DataObject queryZtryzjmrzqk(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		String dfjgid, rzqssj, rzzzsj, dwdjid, dyffzt;
		StringBuffer sqlBF = new StringBuffer();
		DataStore perinfo, dsTemp;
		int rowcount;
		double yylje;
		DataObject pdo = new DataObject();
		String shbzhm, yxzjhm, return_code, return_msg, rzjg, sszfrq, xm;
		String jbjgid = para.getString("jbjgid");
		
		String querylogid = QueryLogTool.saveQueryLog("资格认证情况查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		dwdjid = para.getString("gljgid");// 单位
		dfjgid = HsuTools.replaceC2QCQ(para.getString("ffztbh"));// 代发机构
		rzqssj = para.getDateToString("rzqssj", "yyyy-MM-dd hh:mm:ss", new Date());
		rzzzsj = para.getDateToString("rzzzsj", "yyyy-MM-dd hh:mm:ss", new Date());
		rzjg = para.getString("rzjg");
		sszfrq = para.getString("sszfrq");
		dyffzt = para.getString("dyffzt");

		if ((rzqssj != null && !"".equals(rzqssj))
				&& (rzzzsj != null && !"".equals(rzzzsj))
				&& (rzqssj.compareTo(rzzzsj) > 0)) {
			this.bizException("认证起始日期不能大于认证终止日期!");
		}

		if ((dwdjid == null || "".equals(dwdjid))
				&& (dfjgid == null || "".equals(dfjgid))) {
			this.bizException("代发机构和单位编号不能同时为空");
		}

		sqlBF.setLength(0);
		sqlBF.append("   select r.rydjid, r.ryid, r.dydjid, i.shbzhm, i.xm,  ");
		sqlBF.append("          i.csrq, i.dfjgid, i.gljgid, p.yxzjlx, p.yxzjhm,  ");
		sqlBF.append("          i.zfrylb, r.dwdjid, i.sszfrq, i.dfjglb, a.dwbh,  ");
		sqlBF.append("          a.cbdwmc, i.dyffzt, nvl(p.lxrdh,p.sjhm) lxdh, p.gddhqh || p.gddh  gddh,  ");
		sqlBF.append("          p.txdz, p.jtzz, add_months(to_date(dyxsksny, 'yyyyMM'), -1) ltxrq  ");//modify 增加联系电话、住址信息 weichao 20160708 
		sqlBF.append("     from ad3u.per_reg r,  ");// 增加离退休日期 weichao 20160909 
		sqlBF.append("          ad3u.per_info i, ");
		sqlBF.append("          biuv.person p,  ");
		sqlBF.append("          si3u.orgn_reg a  ");
		sqlBF.append("    where i.dyspbz = '1'   ");
		sqlBF.append("      and r.dydjid = i.dqdydjid  ");
		sqlBF.append("      and i.ryid = p.ryid  ");
		sqlBF.append("      and i.dwdjid = a.dwdjid  ");
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("      and i.dyffzt = '" + dyffzt + "' ");
		}else {
			sqlBF.append("      and i.dyffzt <> '3' ");
		}
		if (sszfrq != null && !"".equals(sszfrq)) {
			sqlBF.append("      and i.sszfrq = '" + sszfrq + "' ");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("  and i.dfjglb = 'G' ");
			sqlBF.append("  and i.dfjgid in (" + dfjgid + ") ");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("  and i.dwdjid = '" + dwdjid + "' ");
		}

		this.sql.setSql(sqlBF.toString());
		perinfo = this.sql.executeQuery();

		// 取月养老金额
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) yylje ");
		sqlBF.append("   from ad3u.per_giv_month_std a ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and to_char(sysdate,'yyyyMM') between a.qsny and nvl(a.zzny,'205012') ");

		rowcount = perinfo.rowCount();

		DataStore dsSuccess = new DataStore();
		DataStore dsErr = new DataStore();
		DataStore dsPerinfo = new DataStore();
		for (int i = 0; i < rowcount; i++) {
			// 取代发机构编号，代发机构名称，单位编号，单位名称
			String ryid = perinfo.getString(i, "ryid");
			shbzhm = perinfo.getString(i, "shbzhm");
			yxzjhm = perinfo.getString(i, "yxzjhm");
			xm = perinfo.getString(i, "xm");
			yylje = 0.0;

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() == 1) {
				yylje = dsTemp.getDouble(0, "yylje");
			}
			perinfo.put(i, "yylje", MathUtil.round(yylje, 2));

			String sdrzsj = AdTools.getPerCmpl(ryid, "SCRZSJ","");
			if (!"".equals(sdrzsj) && sdrzsj != null) {
				if (rzqssj.compareTo(sdrzsj) <= 0 && rzzzsj.compareTo(sdrzsj) >= 0) {
					String rzr = AdTools.getPerCmpl(ryid, "SCRZR","");
					String rzfs = AdTools.getPerCmpl(ryid, "SCRZFS","");
					perinfo.put(i, "rzfs", rzfs);
					perinfo.put(i, "rzjg", "1");
					perinfo.put(i, "rzsj", sdrzsj);
					perinfo.put(i, "rzr", rzr);//认证人保存时改为原样保存，查询时不在做处理 weichao 20160817
					dsPerinfo.addRow(perinfo.get(i));
					continue;
				}
			}
			
			// 调接口查询认证情况
			try {
				pdo.clear();
				pdo.put("method", "selectVerifyInfo");
				pdo.put("sfzhm", yxzjhm);
				pdo.put("grbh", shbzhm);
				pdo.put("rzqssj", rzqssj);
				pdo.put("rzzzsj", rzzzsj);
				BPO bpo = this.newBPO(SghsMethodInvokBPO.class);
				rdo = bpo.doMethod(jbjgid, "invokAuthPlat", pdo, this.getUser());
			} catch (Exception e) {
				this.bizException("【" + shbzhm + " " + xm + "】"
						+ e.getMessage());
			}
			// 查询成功为认证成功，不存在则认证失败，其他情况抛异常
			return_code = rdo.getString("code");
			return_msg = rdo.getString("message");
			dsSuccess = rdo.getDataStore("success");
			dsSuccess.sort("rzsj");
			if ("1001".equals(return_code)) {// 查询成功
				perinfo.put(i, "rzfs", "1");
				perinfo.put(i, "rzjg", "1");
				perinfo.put(i, "rzsj", dsSuccess.getString(0, "rzsj"));
				perinfo.put(i, "rzr", "指静脉平台认证");
				dsPerinfo.addRow(perinfo.get(i));
			} else if ("1002".equals(return_code)) {// 不存在
				perinfo.put(i, "rzjg", "0");
				dsPerinfo.addRow(perinfo.get(i));
			} else {
				dsErr.addRow();
				dsErr.put(dsErr.rowCount() - 1, "shbzhm", shbzhm);
				dsErr.put(dsErr.rowCount() - 1, "xm", xm);
				dsErr.put(dsErr.rowCount() - 1, "err", return_msg);
			}
		}
		// 根据录入的认证条件筛选
		if (!"".equals(rzjg) && rzjg != null) {
			for (int i = dsPerinfo.rowCount() - 1; i >= 0; i--) {
				String vrzjg = dsPerinfo.getString(i, "rzjg");
				if (!rzjg.equals(vrzjg)) {
					dsPerinfo.delRow(i);
				}
			}
		}

		dsPerinfo = AdTools.genDfjgxxDataStore(dsPerinfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsPerinfo.sort("shbzhm").sort("zfrylb").sort("rzjg").sort("rzfs");
		dsErr.sort("shbzhm");
		rdo.put("perinfo", dsPerinfo);
		rdo.put("errinfo", dsErr);
		
		QueryLogTool.updateQueryLog(querylogid, dsPerinfo.rowCount()+dsErr.rowCount());
		
		return rdo;
	}
	/**
	 * 
	 * 方法简介. 打印预发养老金核定表
	 * 
	 * @author 路国 2016-7-27
	 */
	public DataObject printYfdyhdb(DataObject para) throws Exception {
		StringBuffer printhtml = new StringBuffer();
		printhtml.setLength(0);
		
		String html = "";
		DataStore dsPer = para.getDataStore("dwOrgn");
		DataObject pdo = new DataObject();
		for (int i = 0; i < dsPer.rowCount(); i++) {
			pdo.clear();
			String ryid = dsPer.getString(i, "ryid");
			pdo.put("ryid", ryid);
			
			pdo = this.getPrintYfspb(pdo);
			
			html += pdo.getString("html");
		}
		
		DataObject vdo = new DataObject();
		vdo.put("html", html);
		return vdo;

	}
	
	public DataObject getPrintYfspb(DataObject para) throws Exception {
		SPrinter sprinter = new SPrinter();
		DataObject vdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();

		// 接参
		String ryid = para.getString("ryid", "");

		// 获取人员信息
		sqlBF.setLength(0);
		sqlBF.append("select a.ryid, a.xm, a.xb, b.ltxrq ");
		sqlBF.append(" from ad3u.per_info a, ");
		sqlBF.append("      ad3u.emp_info b ");
		sqlBF.append("where a.ryid = ? ");
		sqlBF.append("  and a.dyffzt = '1' ");
		sqlBF.append("  and a.ryid = b.ryid ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsPer = this.sql.executeQuery();

		if (dsPer.rowCount() == 0) {
			this.bizException("未查询到人员ID" + ryid + "的人员信息！");
		}

		String ltxrq1 = dsPer.getString(0, "ltxrq");

		String txxxcjbz = SiTools.getPerNatlCmpl(ryid, "TXXXCJBZ", "0");
		if (txxxcjbz == "0" || ltxrq1.compareTo("20140101") < 0) {
			this.bizException("职工" + ryid + "未计算过养老待遇或离退休早于2014年01月01日,不能打印!！");
		}

		sqlBF.setLength(0);
		sqlBF.append("select a.xm, a.shbzhm, a.xb, b.dacsrq, a.ygxs,b.ltxrq,    ");
		sqlBF.append("       b.cjgzrq, b.ltxlb, c.yxzjhm , c.grsf, c.zyjszwjb zc,  ");
		sqlBF.append("       c.gjzyzgdj, d.dwbh, d.cbdwmc dwmc , b.jzgbz, c.jtzz, ");
		sqlBF.append("       c.yzbm,c.lxrdh,a.dwdjid,b.stjfnx,b.sjjfnx,b.tsgznx,b.zsqsny,  ");
		sqlBF.append("       a.dyxsksny, a.dyspr,a.dyspsj,nvl(b.grjze,0)+nvl(b.zsjze,0) grjze,b.zhqnx   ");
		sqlBF.append("  from ad3u.per_info a,    ");
		sqlBF.append("       ad3u.emp_info b,    ");
		sqlBF.append("       biuv.person c,    ");
		sqlBF.append("       si3u.orgn_reg d    ");
		sqlBF.append(" where a.ryid = b.ryid    ");
		sqlBF.append("   and a.ryid = c.ryid    ");
		sqlBF.append("   and a.dwdjid = d.dwdjid ");
		sqlBF.append("   and a.ryid = ? ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore ds = this.sql.executeQuery();

		String dwdjid = "";
		double grzhgrzje = 0;
		if (ds.rowCount() > 0) {
			sprinter.putPara("tcny", DateUtil.dateToString(ds.getStringDate(0, "dyxsksny", "yyyyMM"), "yyyy年MM月"));
			sprinter.putPara("dyhsr", HsuTools.getCzyxmByUserId(ds.getString(0, "dyspr")));

			dwdjid = ds.getString(0, "dwdjid");
			grzhgrzje = ds.getDouble(0, "grjze");
			sprinter.putPara("xm", ds.getString(0, "xm"));
			sprinter.putPara("shbzhm", ds.getString(0, "shbzhm"));
			sprinter.putPara("grbh", ryid);
			sprinter.putPara("xb", HsuTools.discode("XB", ds.getString(0, "xb"), ""));
			Date dacsrq = ds.getStringDate(0, "dacsrq", "yyyyMMdd");
			//预发的年龄计算到离退休上年末   LG-20160310
			Date ltxrq = ds.getStringDate(0, "ltxrq", "yyyyMMdd");
			ltxrq = DateUtil.stringToDate(DateUtil.dateToString(DateUtil.addMonth(ltxrq, -12), "yyyy")+ "1231", "yyyyMMdd");
			int ys = DateUtil.getMonthDifferenceBetweenTwoDate(dacsrq, ltxrq);
			int nl;
			if (ys % 12 > 0) {
				nl = ys / 12 + 1;
			} else {
				nl = ys / 12;
			}
			sprinter.putPara("csrq", DateUtil.dateToString(dacsrq, "yyyy年MM月dd日")
					+ "(" + nl + "岁)");
			sprinter.putPara("ygxs", HsuTools.discode("YGXS", ds.getString(0, "ygxs"), ""));

			sprinter.putPara("cjgzrq", DateUtil.dateToString(ds.getStringDate(0, "cjgzrq", "yyyyMMdd"), "yyyy年MM月dd日"));
			sprinter.putPara("ltxlb", HsuTools.discode("ZFRYLB", ds.getString(0, "ltxlb"), ""));
			sprinter.putPara("yxzjhm", ds.getString(0, "yxzjhm"));
			sprinter.putPara("grsf", HsuTools.discode("GRSF", ds.getString(0, "grsf"), ""));
			sprinter.putPara("dwbh", ds.getString(0, "dwbh"));
			sprinter.putPara("dwmc", ds.getString(0, "dwmc"));

			double stjfnx = ds.getDouble(0, "stjfnx");
			double sjjfnx = ds.getDouble(0, "sjjfnx");
			double ljjfnx = stjfnx + sjjfnx;
			String strnx = (int)MathUtil.round(ljjfnx-0.5, 0) + "年"
			+ (int)MathUtil.round((ljjfnx - MathUtil.round((ljjfnx - 0.5), 0)) * 12, 0) + "个月";
			if (stjfnx > 0){
				strnx = strnx + ",其中视同缴费年限" + (int)MathUtil.round(stjfnx-0.5, 0) + "年"
				+ (int)MathUtil.round((stjfnx - MathUtil.round((stjfnx - 0.5), 0)) * 12, 0) + "个月";
			}
			sprinter.putPara("ljjfnx", strnx);

			sprinter.putPara("jzqjfnx", DataFormat.formatDouble(ds.getDouble(0, "zhqnx")));
			sprinter.putPara("jfnx1", DataFormat.formatDouble(ljjfnx));
			Date zsqsny = ds.getStringDate(0, "zsqsny", "yyyyMM");
			if (zsqsny == null) {
				sprinter.putPara("zsjsqsny", "");
			} else {
				sprinter.putPara("zsjsqsny", DateUtil.dateToString(zsqsny, "yyyy年MM月")
						+ "01日");
			}
		}

		// 二级单位编号、建立账户日期
		sqlBF.setLength(0);
		sqlBF.append("select c.ejdwbh, a.jlgrzhnya  ");
		sqlBF.append("  from si3u.per_natl a,  ");
		sqlBF.append("       si3u.per_reg b,  ");
		sqlBF.append("       si3u.sub_orgn_natl c  ");
		sqlBF.append(" where a.ryid = b.ryid  ");
		sqlBF.append("   and b.hdbz = '1'  ");
		sqlBF.append("   and b.ejdwid = c.ejdwid(+)  ");
		sqlBF.append("   and a.ryid = ? ");
		sqlBF.append("   and b.dwdjid = ? ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, dwdjid);
		ds = this.sql.executeQuery();
		if (ds.rowCount() > 0) {
			sprinter.putPara("ejdwbh", ds.getString(0, "ejdwbh"));
			Date jlzhrq = ds.getStringDate(0, "jlgrzhnya", "yyyyMM");
			if (jlzhrq != null) {
				sprinter.putPara("jlgrzhrq", DateUtil.dateToString(jlzhrq, "yyyy年MM月")
						+ "01日");
			}
		}
		//根据核二预发的取账户中的建立个人账户日期   LG-20160516
		sqlBF.setLength(0);
		sqlBF.append("select jfny qsny, jfny zzny, sum(grjfjs) jfjs, '5' dyjrfs "); 
		sqlBF.append("  from (select jfny, grjfjs ");
		sqlBF.append("          from si3u.aged_account ");
		sqlBF.append("         where ryid = ? ");
		sqlBF.append("        union all ");
		sqlBF.append("        select jfny, grjfjs ");
		sqlBF.append("          from si3u.aged_account_his ");
		sqlBF.append("         where ryid = ? ");
		sqlBF.append("        union all ");
		sqlBF.append("        select jfny, grjfjs ");
		sqlBF.append("          from si3u.aged_account_settle ");
		sqlBF.append("         where ryid = ?) ");
		sqlBF.append(" group by jfny ");
		sqlBF.append("union all ");
		sqlBF.append("select qsny, zzny, jfjs, dyjrfs ");
		sqlBF.append("  from ad3u.per_pay_his ");
		sqlBF.append(" where ryid = ? and nvl(dyjrfs,'0')='5'  ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, ryid);
		this.sql.setString(3, ryid);
		this.sql.setString(4, ryid);
		ds = this.sql.executeQuery();
		if (ds.rowCount() >0){
			ds = ds.sort("qsny");
			Date jlgrzhrq = ds.getStringDate(0, "qsny", "yyyyMM");
			if (jlgrzhrq != null) {
				sprinter.putPara("jlgrzhrq", DateUtil.dateToString(jlgrzhrq, "yyyy年MM月")
						+ "01日");
			}
		}

		// 1：预发基础养老金
		// 基础性养老金
		double jcxylj = this.getPerCalHis(ryid,"6062138");
		// 指数化平均工资
		double zshgz = this.getPerCalHis(ryid,"606538");
		double pjzs = this.getPerCalHis(ryid,"PJZS_38");
		double zggz;
		if (pjzs == 0) {
			zggz = 0;
		}else {
			zggz = zshgz / pjzs;
		}

		// 2:预发个人账户养老金
		// 个人账户养老金
		double zhyljdw = this.getPerCalHis(ryid,"6158138");// 新办法个人账户养老金单位部分
		double zhyljgr = this.getPerCalHis(ryid,"6159138");// 新办法个人账户养老金个人部分
		double zhyljzs = this.getPerCalHis(ryid,"6160138"); // 新办法个人账户养老金做实部分
		double grzhylj = zhyljdw + zhyljgr + zhyljzs;
		// 个人账户总额
		double grzhzje = this.getPerCalHis(ryid,"6063");

		// 计发月数
		double jfys = this.getPerCalHis(ryid,"JFYS38");

		// 3:预发过渡性养老金
		// 过渡性养老金
		double gdxylj = this.getPerCalHis(ryid,"606738"); // 新办法过渡性养老金
		double zshgz_1 = zshgz;
		// 养老金合计
		double yljh = jcxylj + grzhylj + gdxylj;

		sprinter.putPara("zggz", DataFormat.formatDouble(zggz) + "元/月");
		sprinter.putPara("zshgz", DataFormat.formatDouble(zshgz) + "元/月");
		sprinter.putPara("jcylj", DataFormat.formatDouble(jcxylj) + "元/月");
		sprinter.putPara("grzhzje", DataFormat.formatDouble(grzhzje)+ "元,其中");	//txt无法自动换行，将原来的分开  LG-20160310		
		sprinter.putPara("grzhje", "个人部分金额为" + DataFormat.formatDouble(grzhgrzje)+"元");	
		sprinter.putPara("jfys", DataFormat.formatDouble(jfys, 0) + "个月");
		sprinter.putPara("grzhylj", DataFormat.formatDouble(grzhylj) + "元/月");
		sprinter.putPara("zshgz_1", DataFormat.formatDouble(zshgz_1) + "元/月");
		sprinter.putPara("gdxylj", DataFormat.formatDouble(gdxylj) + "元/月");
		sprinter.putPara("yljhj", DataFormat.formatDouble(yljh) + "元/月");

		sprinter.putPara("shny", DateUtil.dateToString(DateUtil.getDBDate(), "yyyy年MM月dd日"));
		sprinter.putPara("zgshr", HsuTools.getCzyxmByUserId(SiTools.getPerNatlCmpl(ryid, "TXZGSHR","")));
		//add 新增退休年月  张涛  20170511
		Date ltxrq2 = DateUtil.stringToDate(ltxrq1, "yyyyMMdd");
		sprinter.putPara("ltxny", DateUtil.dateToString(ltxrq2, "yyyy年MM月"));

		String jbjgid = SiTools.getJbjgidByRyid(ryid);
		String printhtml = sprinter.printTxtModelAsTxtStr(jbjgid, "AdDwprinttxspbyf");

		vdo.clear();
		vdo.put("html", printhtml);
		return vdo;
	}

	/**
	 * 方法简介.跳转到根据街道社区查询离退休人员页面
	 * 原功能是给烟台做的，现在把烟台代码改为了客户化 
	 * 
	 * @author lixinyu 20200706
	 */
	public DataObject fwdJdsqltxryQuery(DataObject para) throws Exception {
		String vbiz = this.getBizInstitution();
		
		DataObject vdo = new DataObject();
		vdo.put("biz", vbiz);
		return vdo;
	}
	
	/**
	 * 方法简介.跳转到根据街道社区查询离退休人员页面
	 * 原功能是给烟台做的，现在把烟台代码改为了客户化 lixinyu 20200706
	 * 
	 * @date 创建时间 2016-8-9
	 * @since V1.0
	 * @author bulingpan
	 */
	public DataObject fwdJdsqltxryQuery_3706(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select  b.jbjgmc content, b.jbjgid value ");
		sqlBF.append("from be3u.inst_config a, be3u.agency_natl b, be3u.street_natl c ");
		sqlBF.append(" where a.jbjgid = b.jbjgid ");
		sqlBF.append("   and jglx = 'C' ");
		sqlBF.append("	 and a.jgid = c.jdid ");
		sqlBF.append("	 and c.rsjid like '3706%' ");
		this.sql.setSql(sqlBF.toString());
		DataStore vds = this.sql.executeQuery();
		DataObject temp = new DataObject();
		temp.clear();
		temp.put("content", "烟台市外山东省内");
		temp.put("value", "000001");
		vds.addRow(temp);
		temp = new DataObject();
		temp.put("content", "国内");
		temp.put("value", "000002");
		vds.addRow(temp);
		temp = new DataObject();
		temp.put("content", "港澳台");
		temp.put("value", "000003");
		vds.addRow(temp);
		temp = new DataObject();
		temp.put("content", "国外");
		temp.put("value", "000004");
		vds.addRow(temp);

		String vbiz = this.getBizInstitution();
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		DataObject vdo = new DataObject();
		vdo.put("xsq", vds);
		vdo.put("jbjgid", biz);
		return vdo;
	}

	/**
	 * 方法简介.查询离退休人员
	 * 
	 * @author lixinyu 20200706
	 */

	public DataObject queryLtxperInfo(DataObject para) throws Exception {

		String querylogid = QueryLogTool.saveQueryLog("根据单位街道社区查询离退休人员", "职工养老支付-根据单位街道社区查询离退休人员", this.getUser()
			.getUserid(), para);

		String dwdjid = para.getString("dwdjid");
		String jdid = para.getString("jdid");
		String sqid = para.getString("sqid");
		String biz = this.getBizInstitution();

		StringBuffer sqlBF = new StringBuffer();
		DataStore vdtemp = new DataStore();
		if (jdid != null && jdid.length() > 0) {
			sqlBF.setLength(0);
			sqlBF.append("select jdid from  be3u.street_natl ");
			sqlBF.append("	where jdid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, jdid);
			vdtemp = this.sql.executeQuery();
			if (vdtemp.rowCount() < 1) {
				this.bizException("街道不存在！");
			}
		}

		if (sqid != null && sqid.length() > 0) {
			sqlBF.setLength(0);
			sqlBF.append("select sqmc from be3u.community_natl ");
			sqlBF.append(" where sqid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, sqid);
			vdtemp = this.sql.executeQuery();
			if (vdtemp.rowCount() < 1) {
				this.bizException("社区不存在！");
			}
		}

		sqlBF.setLength(0);
		sqlBF.append("select p.dyffzt, o.dwdjid, o.dwbh, o.cbdwmc, p.shbzhm,  ");
		sqlBF.append("		 p.xm, e.ltxlb, e.ltxrq, c.sqid, c.sqbh, c.sqmc, ");
		sqlBF.append("       s.jdid, s.jdbh, s.jdmc ");
		sqlBF.append(" from si3u.orgn_reg o , ");
		sqlBF.append("		ad3u.emp_info e , ");
		sqlBF.append("		ad3u.per_info p, ");
		sqlBF.append("		be3u.community_natl c, ");
		sqlBF.append("		be3u.street_natl s ");
		sqlBF.append(" where e.ryid = p.ryid ");
		sqlBF.append("	 and o.dwdjid = e.dwdjid ");
		sqlBF.append("	 and p.jdid = s.jdid(+) ");
		sqlBF.append("	 and p.sqid = c.sqid(+) ");
		sqlBF.append(" 	 and p.dyspbz = '1' ");
		sqlBF.append(" 	 and p.dyffzt in ('1', '2') ");
		sqlBF.append("	 and o.jbjgid like ? ");
		if (!"".equals(dwdjid) && dwdjid != null) {
			sqlBF.append("  and o.dwdjid = ? ");
		}
		if (!"".equals(jdid) && jdid != null) {
			sqlBF.append("  and s.jdid = ? ");
		}
		if (!"".equals(sqid) && sqid != null) {
			sqlBF.append("	and c.sqid = ? ");
		}

		this.sql.setSql(sqlBF.toString());
		int index = 1;
		this.sql.setString(index++, biz + "%");
		if (!"".equals(dwdjid) && dwdjid != null) {
			this.sql.setString(index++, dwdjid);
		}
		if (!"".equals(jdid) && jdid != null) {
			this.sql.setString(index++, jdid);
		}
		if (!"".equals(sqid) && sqid != null) {
			this.sql.setString(index++, sqid);
		}

		DataStore ltxry = this.sql.executeQuery();

		ltxry.sort("dwdjid,jdid,sqid,shbzhm");
		DataObject vdo = new DataObject();
		vdo.put("ltxperinfo", ltxry);

		QueryLogTool.updateQueryLog(querylogid, ltxry.rowCount());

		return vdo;
	}
	
	/**
	 * 方法简介.查询离退休人员
	 * 原此功能只给烟台做，现在把 代码改为了客户化 .lixinyu 20200706
	 * @author blp
	 * @date 创建时间 2016-8-10
	 * @since V1.0
	 */

	public DataObject queryLtxperInfo_3706(DataObject para) throws Exception {
		
		String querylogid = QueryLogTool.saveQueryLog("根据街道社区查询离退休人员", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String jbjgid = para.getString("xsq");
		String jdid = para.getString("jdid");
		String sqid = para.getString("sqid");
		String cjgzqssj = para.getDateToString("cjgzqssj", "yyyyMMdd");
		String cjgzzzsj = para.getDateToString("cjgzzzsj", "yyyyMMdd");
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidtemp = getBizInstitution();
		DataStore vdtemp = new DataStore();
		if (jbjgid.length() < 1 || jbjgid == null) {
			this.bizException("县市区不能为空");
		}
		if (cjgzqssj == null || "".equals(cjgzqssj)) {
			cjgzqssj = "19300101";
		}
		if (cjgzzzsj == null || "".equals(cjgzzzsj)) {
			cjgzzzsj = "20501201";
		}
		if (jdid != null && jdid.length() > 0) {
			sqlBF.setLength(0);
			sqlBF.append("select jdid from  be3u.street_natl ");
			sqlBF.append("	where jdid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, jdid);
			vdtemp = this.sql.executeQuery();
			if (vdtemp.rowCount() < 1) {
				this.bizException("街道不存在！");
			}
		}

		if (sqid != null && sqid.length() > 0) {
			sqlBF.setLength(0);
			sqlBF.append("select sqmc from be3u.community_natl ");
			sqlBF.append(" where sqid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, sqid);
			vdtemp = this.sql.executeQuery();
			if (vdtemp.rowCount() < 1) {
				this.bizException("社区不存在！");
			}
		}

		StringBuffer sqlBFt = new StringBuffer();
		if ("3706".equals(jbjgid.substring(0, 4))) {// 烟台市内
			sqlBFt.append("  and s.rsjid = '" + jbjgid.substring(0, 6) + "'");
		} else if ("000001".equals(jbjgid)) {// 省内
			sqlBFt.append("  and s.rsjid like '37%' ");
			sqlBFt.append("	  and s.rsjid not like '3706%' ");
		} else if ("000002".equals(jbjgid)) {// 国内
			sqlBFt.append("   and s.rsjid like '37%' ");
			sqlBFt.append("	  and s.rsjid not like '71%' ");
			sqlBFt.append("   and s.rsjid not like '81%'  ");
			sqlBFt.append("   and s.rsjid not like '82%' ");
		} else if ("000003".equals(jbjgid)) {// 港澳台
			sqlBFt.append("  and (s.rsjid like '71%' ");
			sqlBFt.append("	  or s.rsjid like '81%' ");
			sqlBFt.append("	  or s.rsjid like '82%') ");
		} else if ("000004".equals(jbjgid)) {
			sqlBFt.append(" and s.rsjid like '00%' ");
		}

		sqlBF.setLength(0);
		sqlBF.append("select a.dwbh  ");
		sqlBF.append("  from si3u.orgn_reg a , ");
		sqlBF.append("       ad3u.emp_info e , ");
		sqlBF.append("		 ad3u.per_info p, ");
		sqlBF.append("	     be3u.street_natl s ");
		sqlBF.append(" where a.dwdjid = e.dwdjid ");
		sqlBF.append("	 and p.ryid = e.ryid ");
		sqlBF.append("   and p.jdid = s.jdid ");
		sqlBF.append("	 and a.jbjgid like ? ");
		sqlBF.append(" 	 and p.dyspbz = '1' ");
		sqlBF.append("   and p.dyffzt in ('1','2') ");
		sqlBF.append(sqlBFt.toString());
		sqlBF.append("   and e.cjgzrq  between ? and ? ");

		sqlBF.append(" union ");

		sqlBF.append("select a.dwbh  ");
		sqlBF.append("  from si3u.orgn_reg a ,");
		sqlBF.append("	     ad3u.supp_info e, ");
		sqlBF.append("		 ad3u.per_info p, ");
		sqlBF.append("		 be3u.street_natl s ");
		sqlBF.append(" where a.dwdjid = e.dwdjid ");
		sqlBF.append("	 and p.ryid = e.ryid");
		sqlBF.append("	 and p.jdid = s.jdid ");
		sqlBF.append("	 and a.jbjgid like ? ");
		sqlBF.append(" 	 and p.dyspbz = '1' ");
		sqlBF.append("   and p.dyffzt in ('1','2') ");
		sqlBF.append("	 and p.sszfrq = 'B' ");
		sqlBF.append(sqlBFt.toString());
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgidtemp + "%");
		this.sql.setString(2, cjgzqssj);
		this.sql.setString(3, cjgzzzsj);
		this.sql.setString(4, jbjgidtemp + "%");
		DataStore vds = this.sql.executeQuery();
		DataStore ltxrys = new DataStore();
		for (int i = 0; i < vds.rowCount(); i++) {
			String dwbh = vds.getString(i, "dwbh");
			if (dwbh == null || "".equals(dwbh)) {
				dwbh = "%";
			}
			sqlBF.setLength(0);
			sqlBF.append("select c.sqbh, p.dfjglb , o.dwbh, o.cbdwmc, p.shbzhm,  ");
			sqlBF.append("		 p.xm, p.xb, e.ltxlb, r.zglb, p.dfjgid, ");
			sqlBF.append("		 yhzh, p.csrq, e.cjgzrq, e.ltxrq, b.jtzz, ");
			sqlBF.append("		 b.lxrxm, b.lxrdh, b.yzbm, b.txdz, b.hkszd, ");
			sqlBF.append("		 c.sqmc, s.jdbh, s.jdmc , p.ryid  ");
			sqlBF.append(" from si3u.orgn_reg o , ");
			sqlBF.append("		ad3u.emp_info e , ");
			sqlBF.append("      biuv.person b, ");
			sqlBF.append("		ad3u.per_info p, ");
			sqlBF.append("		be3u.community_natl c, ");
			sqlBF.append("		be3u.street_natl s, ");
			sqlBF.append("      si3u.per_reg r ");
			sqlBF.append(" where b.ryid = p.ryid ");
			sqlBF.append("	 and e.ryid = p.ryid ");
			sqlBF.append("	 and o.dwdjid = e.dwdjid ");
			sqlBF.append("	 and p.jdid = s.jdid ");
			sqlBF.append("	 and p.sqid = c.sqid ");
			sqlBF.append("	 and p.ryid = r.ryid ");
			sqlBF.append(" 	 and p.dyspbz = '1' ");
			sqlBF.append("	 and r.bljyrq is null ");
			sqlBF.append(sqlBFt.toString());
			if (!"%".equals(cjgzqssj) && !"%".equals(cjgzzzsj)) {
				sqlBF.append("   and e.cjgzrq between " + cjgzqssj + " and  "
						+ cjgzzzsj);
			}
			if (jdid.length() > 0 && jdid != null) {
				sqlBF.append("  and s.jdid =  '" + jdid+"'");
			}
			if (sqid.length() > 0 && sqid != null) {
				sqlBF.append("	and c.sqid =  '" + sqid+"'");
			}
			sqlBF.append("	and o.dwbh = ? ");

			sqlBF.append("union ");

			sqlBF.append("select c.sqbh, o.dwbh, o.cbdwmc, p.dfjglb,p.shbzhm,  ");
			sqlBF.append("		 p.xm, p.xb, '' ltxlb, r.zglb, p.dfjgid, ");
			sqlBF.append("		 yhzh, p.csrq, r.cjgzrq, '' ltxrq, b.jtzz, ");
			sqlBF.append("		 b.lxrxm, b.lxrdh, b.yzbm, b.txdz, b.hkszd, ");
			sqlBF.append("		 c.sqmc, s.jdbh, s.jdmc , p.ryid   ");
			sqlBF.append(" from si3u.orgn_reg o , ");
			sqlBF.append("		ad3u.supp_info e , ");
			sqlBF.append("      biuv.person b, ");
			sqlBF.append("		ad3u.per_info p, ");
			sqlBF.append("		be3u.community_natl c, ");
			sqlBF.append("		be3u.street_natl s, ");
			sqlBF.append("      si3u.per_reg r ");
			sqlBF.append(" where b.ryid = p.ryid ");
			sqlBF.append("	 and e.ryid = p.ryid ");
			sqlBF.append("	 and o.dwdjid = e.dwdjid ");
			sqlBF.append("	 and p.jdid = s.jdid ");
			sqlBF.append("	 and p.sqid = c.sqid ");
			sqlBF.append("	 and p.ryid = r.ryid ");
			sqlBF.append(" 	 and p.dyspbz = '1' ");
			sqlBF.append("	 and r.bljyrq is null ");
			sqlBF.append("	 and p.sszfrq = 'B' ");
			if (jdid.length() > 0 && jdid != null) {
				sqlBF.append("  and s.jdid =  '" + jdid + "'");
			}
			if (sqid.length() > 0 && sqid != null) {
				sqlBF.append("	and c.sqid =  '" + sqid + "'");
			}
			sqlBF.append("	and o.dwbh = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwbh);
			this.sql.setString(2, dwbh);

			DataStore ltxry = this.sql.executeQuery();
			if (ltxry.rowCount() < 1) {
				continue;
			}
			// 通过代发机构类别和代发机构ID查询代发机构编号、代发机构名称
			ltxry = AdTools.genFfztxxDataStore(ltxry, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

			for (int j = 0; j < ltxry.rowCount(); j++) {
				String ryid = ltxry.getString(j, "ryid");
				if (ryid == null || ryid.length() <= 0) {
					this.bizException("人员信息查询出错");
				}
				sqlBF.setLength(0);
				sqlBF.append("select nvl(sum(btje),0)txj ");
				sqlBF.append("   from ad3u.per_giv_month_std m ");
				sqlBF.append(" where ryid = ? ");
				sqlBF.append("    and to_char(sysdate,'yyyyMM') between qsny and nvl(zzny,'205012')");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore txjs = this.sql.executeQuery();
				Double txj = txjs.getDouble(0, "txj");
				txjs.getDouble(0, "txj");
				ltxry.put(j, "txj", txj);
			}
			ltxrys.combineDatastore(ltxry);
		}
		DataObject vdo = new DataObject();
		vdo.put("ltxperinfo", ltxrys);
		
		QueryLogTool.updateQueryLog(querylogid, ltxrys.rowCount());
		
		return vdo;
	}

	/**
	 * 方法简介.报盘导入
	 * 
	 * @author blp
	 * @date 创建时间 2016-8-16
	 * @since V1.0
	 */
	public DataObject chkBpsjUpload(DataObject para) throws Exception {
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore();
		DataStore dsRight = new DataStore();
		String errTest, xm, xb, shbzhm, jtzz;
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "xm", "姓名", "String");
		setTableInfo(tableInfo, 1, "xb", "性别", "String");
		setTableInfo(tableInfo, 2, "shbzhm", "身份证号码", "String");
		setTableInfo(tableInfo, 3, "jtzz", "家庭住址", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}
		for (int i = 0; i < ds.rowCount(); i++) {
			errTest = "";
			shbzhm = StringUtil.trim(ds.getString(i, "shbzhm"));
			xm = StringUtil.trim(ds.getString(i, "xm"));
			xb = StringUtil.trim(ds.getString(i, "xb"));
			jtzz = StringUtil.trim(ds.getString(i, "jtzz"));
			if (xm == null || "".equals(xm) || xm.length() == 0) {
				errTest = errTest + "姓名不完整    ";
			}
			if (xb == null || "".equals(xb)) {
				errTest = errTest + "性别不完整    ";
			} else if ("男".equals(xb) == false && "女".equals(xb) == false) {
				errTest = errTest + "性别[" + xb + "]不正确    ";
			}
			if (shbzhm == null || "".equals(shbzhm)) {
				errTest = errTest + "身份证号码的长度不正确    ";
			} else if (shbzhm.length() > 0 && shbzhm.length() != 18
					&& shbzhm.length() != 15) {
				errTest = errTest + "身份证号码的长度不正确    ";
			}

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "shbzhm", shbzhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "xb", xb);
				dsError.put(row, "bz", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "shbzhm", shbzhm);
				dsRight.put(rowR, "xm", xm);
				dsRight.put(rowR, "xb", xb);
				dsRight.put(rowR, "jtzz", jtzz);
			}
		}
		rdo.clear();
		rdo.put("perinfo", dsRight);
		rdo.put("errinfo", dsError);
		return rdo;
	}

	/**
	 * 设置Excel每一列的格式
	 * 
	 * @author blp
	 * @date 创建时间 2016-8-16
	 * @since V1.0
	 */
	private void setTableInfo(DataStore tableInfo, int num, String name,
			String columnName, String type) throws Exception {
		tableInfo.addRow();
		tableInfo.put(num, "name", name);
		tableInfo.put(num, "columnName", columnName);
		tableInfo.put(num, "type", type);
	}

	/**
	 * 方法简介.认证比对
	 * 
	 * @author bulingpan
	 * @date 2016-08-17
	 */
	public DataObject scrzSjbd(DataObject para) throws Exception {
		DataStore ds = para.getDataStore("dwBatStdPause");
		DataStore rzbdjg = new DataStore();
		DataStore rzbdjgs = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String xm, shbzhm, shbzhmtemp, xb, jtzz;

		sqlBF.setLength(0);
		sqlBF.append(" select o.jbjgid, o.dwid, o.cbdwmc, p.ryid, p.xm,");
		sqlBF.append("	      p.xb, p.shbzhm, b.lxrdh, c.sqmc, b.jtzz, ");
		sqlBF.append("		  b.txdz, b.hkszd ");
		sqlBF.append(" from si3u.orgn_reg o ,");
		sqlBF.append("		ad3u.per_info p, ");
		sqlBF.append("		biuv.person b, ");
		sqlBF.append("      be3u.community_natl c ");
		sqlBF.append("	where p.dwdjid = o.dwdjid ");
		sqlBF.append("	  and p.ryid = b.ryid ");
		sqlBF.append("	  and p.sqid = c.sqid(+) ");
		sqlBF.append("	  and nvl(p.dyspbz,0) = '1' ");
		sqlBF.append("	  and p.dyffzt = '1' ");
		sqlBF.append("    and decode (p.xb, '1' ,'男', '2', '女') = ? ");
		sqlBF.append("	  and trim(p.xm )= ?");
		sqlBF.append("    and (p.shbzhm  = ?  ");
		sqlBF.append("	        or p.shbzhm = ? ) ");

		for (int i = 0; i < ds.rowCount(); i++) {
			xm = ds.getString(i, "xm");
			shbzhm = ds.getString(i, "shbzhm");
			xb = ds.getString(i, "xb");
			jtzz = ds.getString(i, "jtzz");
			shbzhmtemp = SiTools.fixPersonIDCode(shbzhm);//解决15位的就会报错问题，用公用方法转换mod mxh 20160901
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, xb);
			this.sql.setString(2, xm);
			this.sql.setString(3, shbzhm);
			this.sql.setString(4, shbzhmtemp);
			rzbdjg = this.sql.executeQuery();
			if (rzbdjg.rowCount() > 0) {
				rzbdjg.put(0, "wjxm", xm);
				rzbdjg.put(0, "wjshbzhm", shbzhm);
				rzbdjg.put(0, "wjxb", xb);
				rzbdjg.put(0, "wjjtzz", jtzz);
				rzbdjgs.combineDatastore(rzbdjg);
			}
		}
		DataObject vdo = new DataObject();
		vdo.put("rzbdjgs", rzbdjgs);
		return vdo;
	}
	
	/**
	 * 认证比对
	 * 
	 * @author cjj
	 * @date 创建时间 2018-7-26
	 * @since V1.0
	 */
	public DataObject scrzSjbd_3706(DataObject para) throws Exception {
		DataStore ds = para.getDataStore("dwBatStdPause");
		DataStore rzbdjg = new DataStore();
		DataStore rzbdjgs = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String xm, shbzhm, shbzhmtemp, xb, jtzz;

		sqlBF.setLength(0);
		sqlBF.append(" select o.jbjgid, o.dwid, o.cbdwmc, p.ryid, p.xm,");
		sqlBF.append("	      p.xb, p.shbzhm, b.lxrdh, c.sqmc, b.jtzz, ");
		sqlBF.append("		  b.txdz, b.hkszd, p.dyffzt, p.zfrylb ");
		sqlBF.append("   from si3u.orgn_reg o ,");
		sqlBF.append("	      ad3u.per_info p, ");
		sqlBF.append("		  biuv.person b, ");
		sqlBF.append("        be3u.community_natl c ");
		sqlBF.append("	where p.dwdjid = o.dwdjid ");
		sqlBF.append("	  and p.ryid = b.ryid ");
		sqlBF.append("	  and p.sqid = c.sqid(+) ");
		sqlBF.append("	  and nvl(p.dyspbz,0) = '1' ");
		sqlBF.append("	  and nvl(p.dyffzt, '*') <> '3' ");
		sqlBF.append("    and decode (p.xb, '1' ,'男', '2', '女') = ? ");
		sqlBF.append("	  and trim(p.xm )= ?");
		sqlBF.append("    and (p.shbzhm  = ?  ");
		sqlBF.append("	        or p.shbzhm = ? ) ");

		for (int i = 0; i < ds.rowCount(); i++) {
			xm = ds.getString(i, "xm");
			shbzhm = ds.getString(i, "shbzhm");
			xb = ds.getString(i, "xb");
			jtzz = ds.getString(i, "jtzz");
			shbzhmtemp = SiTools.fixPersonIDCode(shbzhm);//解决15位的就会报错问题，用公用方法转换mod mxh 20160901
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, xb);
			this.sql.setString(2, xm);
			this.sql.setString(3, shbzhm);
			this.sql.setString(4, shbzhmtemp);
			rzbdjg = this.sql.executeQuery();
			if (rzbdjg.rowCount() > 0) {
				rzbdjg.put(0, "wjxm", xm);
				rzbdjg.put(0, "wjshbzhm", shbzhm);
				rzbdjg.put(0, "wjxb", xb);
				rzbdjg.put(0, "wjjtzz", jtzz);
				rzbdjgs.combineDatastore(rzbdjg);
			}
		}
		DataObject vdo = new DataObject();
		vdo.put("rzbdjgs", rzbdjgs);
		return vdo;
	}
	
	/**
	 * 
	 * 方法简介.退休人员社会查询
	 * 
	 * @author 高智慧 2016-9-21
	 */
	public DataObject queryTxryshqk(DataObject para) throws Exception {

		String qsrq, zzrq, sqdjqsrq, sqdjzzrq, jbjgid;
		DataStore ds, dsTmp;
		DataStore dsJd = new DataStore();
		DataStore dsSq = new DataStore();
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		int row;
		
		String querylogid = QueryLogTool.saveQueryLog("退休人员社会查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		sqdjqsrq = para.getDateToString("sqdjqsrq", "yyyyMMdd");
		sqdjzzrq = para.getDateToString("sqdjzzrq", "yyyyMMdd");
		jbjgid = para.getString("jbjgid");

		// 检查日期合法性
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构id为空！");
		}
		if (sqdjqsrq == null || "".equals(sqdjqsrq)) {
			this.bizException("传入的社区登记起始日期为空！");
		}
		if (sqdjzzrq == null || "".equals(sqdjzzrq)) {
			this.bizException("传入的社区登记终止日期为空！");
		}
		if (sqdjqsrq.compareTo(sqdjzzrq) > 0) {
			this.bizException("传入的社区登记起始日期大于终止日期！");
		}
		if (qsrq == null || "".equals(qsrq)) {
			this.bizException("传入的离退休起始日期为空！");
		}
		if (zzrq == null || "".equals(zzrq)) {
			this.bizException("传入的离退休终止日期为空！");
		}
		if (qsrq.compareTo(zzrq) > 0) {
			this.bizException("传入的离退休起始日期大于终止日期！");
		}

		sqlBF.append("select  a.dydjid,e.ryid,c.yxzjhm sfzhm, e.xm,e.xb,d.cjgzrq, ");
		sqlBF.append("		  d.ltxrq,e.dyxsksny,e.zfrylb,e.nrsqglrq,  ");
		sqlBF.append("        e.jdid,e.sqid,e.dwdjid,c.jtzz,c.sjhm, b.bcxmz sqdjrq ");
		sqlBF.append("  from  ad3u.per_reg a , ");
		sqlBF.append("        ad3u.per_cmpl b, ");
		sqlBF.append("        biuv.person c, ");
		sqlBF.append("        ad3u.emp_info d, ");
		sqlBF.append("        ad3u.per_info e ");
		sqlBF.append(" where d.ltxrq between ? and ?  ");
		sqlBF.append("	 and a.jbjgid = ? ");
		sqlBF.append("	 and a.ryid = b.ryid ");
		sqlBF.append("	 and b.bcxmbh = 'SQDJRQ' ");
		sqlBF.append("	 and b.bcxmz between ? and ? ");
		sqlBF.append("	 and a.ryid = c.ryid ");
		sqlBF.append("	 and a.ryid = d.ryid ");
		sqlBF.append("	 and a.ryid = e.ryid ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		this.sql.setString(3, jbjgid);
		this.sql.setString(4, sqdjqsrq);
		this.sql.setString(5, sqdjzzrq);
		ds = this.sql.executeQuery();

		// 循环取街道信息
		for (int i = 0; i < ds.rowCount(); i++) {
			row = dsJd.find("jdid == " + ds.getString(i, "jdid"));
			if (row >= 0) {
				ds.put(i, "jdbh", dsJd.getString(row, "jdbh"));
				ds.put(i, "jdmc", dsJd.getString(row, "jdmc"));
			} else {
				this.sql.setSql("select jdid, jdbh, jdmc  from be3u.street_natl where jdid = ? ");
				this.sql.setString(1, ds.getString(i, "jdid"));
				dsTmp = this.sql.executeQuery();

				if (dsTmp.rowCount() > 0) {
					ds.put(i, "jdbh", dsTmp.getString(0, "jdbh"));
					ds.put(i, "jdmc", dsTmp.getString(0, "jdmc"));
					dsJd.addRow();
					dsJd.put(dsJd.rowCount() - 1, "jdbh", dsTmp.getString(0, "jdbh"));
					dsJd.put(dsJd.rowCount() - 1, "jdmc", dsTmp.getString(0, "jdmc"));
					dsJd.put(dsJd.rowCount() - 1, "jdid", dsTmp.getString(0, "jdid"));
				} else {
					ds.put(i, "jdbh", "");
					ds.put(i, "jdmc", "");
				}
			}

			row = dsSq.find("sqid == " + ds.getString(i, "sqid"));
			if (row >= 0) {
				ds.put(i, "sqbh", dsSq.getString(row, "sqbh"));
				ds.put(i, "sqmc", dsSq.getString(row, "sqmc"));
			} else {
				this.sql.setSql("select sqid, sqbh, sqmc  from be3u.community_natl where sqid = ? ");
				this.sql.setString(1, ds.getString(i, "sqid"));
				dsTmp = this.sql.executeQuery();

				if (dsTmp.rowCount() > 0) {
					ds.put(i, "sqbh", dsTmp.getString(0, "sqbh"));
					ds.put(i, "sqmc", dsTmp.getString(0, "sqmc"));
					dsSq.addRow();
					dsSq.put(dsSq.rowCount() - 1, "sqbh", dsTmp.getString(0, "sqbh"));
					dsSq.put(dsSq.rowCount() - 1, "sqmc", dsTmp.getString(0, "sqmc"));
					dsSq.put(dsSq.rowCount() - 1, "sqid", dsTmp.getString(0, "sqid"));
				} else {
					ds.put(i, "sqbh", "");
					ds.put(i, "sqmc", "");
				}
				// 取补充信息
				ds.put(i, "dabh", AdTools.getPerCmpl(ds.getString(i, "ryid"), "TXDAH", ""));
				ds.put(i, "shhfwbz", AdTools.getPerCmpl(ds.getString(i, "ryid"), "SHHFWBZ", ""));
			}
			this.sql.setSql(" select dwbh, cbdwmc from si3u.orgn_reg where dwdjid = ? ");
			this.sql.setString(1, ds.getString(i, "dwdjid"));
			dsTmp = this.sql.executeQuery();
			if (dsTmp.rowCount() > 0) {
				ds.put(i, "dwbh", dsTmp.getString(0, "dwbh"));
				ds.put(i, "cbdwmc", dsTmp.getString(0, "cbdwmc"));
			} else {
				ds.put(i, "dwbh", "");
				ds.put(i, "cbdwmc", "");
			}
		}
		rdo.put("dwTxryshinfo", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
		
		return rdo;
	
	}

	/**
	 * 方法简介.检测参保人员状态查询信息
	 * 
	 * @author 韦超 2016-9-30
	 */
	public final DataObject chkCbryztBpdr(DataObject para) throws Exception {
		String shbzhm, xm, xb, err;
		DataObject rdo = new DataObject();
		DataStore dsErr = new DataStore(), dsPer = new DataStore();
		DataStore dsUp, hbInfo = new DataStore();
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String dfjglb, bgyy, blzyyy, dyzzyy, dfjgid;
		String dwbh, vxm, dyffzt, dwmc, zfrylb, ryid;
		
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "xm", "姓名", "String");
		setTableInfo(tableInfo, 1, "shbzhm", "身份证号码", "String");

		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		dsUp = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		dsUp = ExcelTool.removeBlankRowWithTrim(dsUp); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		// 循环导入人员
		for (int i = 0; i < dsUp.rowCount(); i++) {
			err = "";
			shbzhm = dsUp.getString(i, "shbzhm");
			xm = dsUp.getString(i, "xm");

			hbInfo.clear();

			sqlBF.setLength(0);
			sqlBF.append("select b.dwbh, b.cbdwmc,a.dyffzt,a.sqid,a.xm,   ");
			sqlBF.append("       a.zfrylb, a.xb, b.jbjgid, a.dfjglb, a.dfjgid, ");
			sqlBF.append("       a.yhzh, c.jyrq, c.bljysj, c.blzyyy,  ");
			sqlBF.append("       c.bljyyy, a.ryid ");
			sqlBF.append("  from ad3u.per_info a,                          ");
			sqlBF.append("       si3u.orgn_reg b, ");
			sqlBF.append("       ad3u.per_reg c                          ");
			sqlBF.append(" where a.dwdjid=b.dwdjid  ");
			sqlBF.append("   and a.dqdydjid = c.dydjid                     ");
			sqlBF.append("   and a.shbzhm = ?                              ");
			sqlBF.append("   and a.sszfrq in('A','B') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, shbzhm);
			DataStore dsTemp = this.sql.executeQuery();

			// 使用身份证号码查询
			if ("".equals(shbzhm) || null == shbzhm) {
				err = err + "传入的身份证号码为空!";
			} else {
				if (dsTemp.rowCount() <= 0) {
					err = err + "人员[" + shbzhm + "]在数据库中不存在!";
				}
			}

			for (int j = 0; j < dsTemp.rowCount(); j++) {
				dyffzt = dsTemp.getString(j, "dyffzt");
				dwbh = dsTemp.getString(j, "dwbh");
				dwmc = dsTemp.getString(j, "cbdwmc");
				xb = dsTemp.getString(j, "xb");
				vxm = dsTemp.getString(j, "xm");
				zfrylb = dsTemp.getString(j, "zfrylb");
				ryid = dsTemp.getString(j, "ryid");
				dfjglb = dsTemp.getString(j, "dfjglb");
				dfjgid = dsTemp.getString(j, "dfjgid");
				blzyyy = dsTemp.getString(j, "blzyyy");
				dyzzyy = dsTemp.getString(j, "bljyyy");

				if (!xm.equals(vxm)) {
					err = err + "职工姓名[" + xm + "]与数据库中[" + vxm + "]不一致!;";
					continue;
				}

				// 处理变更原因
				if ("1".equals(dyffzt)) {
					bgyy = blzyyy;
					sqlBF.setLength(0);
					sqlBF.append(" select hfyy ");
					sqlBF.append("   from ad3u.per_pause a ");
					sqlBF.append("  where a.ryid = ? ");
					sqlBF.append("    and a.hfsj is not null ");
					sqlBF.append("  order by a.hfsj desc ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, ryid);
					DataStore ds = this.sql.executeQuery();
					if (ds.rowCount() > 0) {
						bgyy = ds.getString(0, "hfyy");
					}
				} else if ("3".equals(dyffzt)) {
					bgyy = dyzzyy;
				} else if ("2".equals(dyffzt)) {
					sqlBF.setLength(0);
					sqlBF.append(" select ztyy ");
					sqlBF.append("   from ad3u.per_pause a ");
					sqlBF.append("  where a.ryid = ? ");
					sqlBF.append("    and a.hfsj is null ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, ryid);
					DataStore ds = this.sql.executeQuery();
					if (ds.rowCount() > 0) {
						bgyy = ds.getString(0, "ztyy");
					} else {
						bgyy = "";
					}
				} else {
					bgyy = "";
				}

				bgyy = HsuTools.discode("YLZFBGYY", bgyy, "");

				hbInfo.addRow();
				int rownum = hbInfo.rowCount() - 1;
				
				hbInfo.put(rownum, "jbjgid", dsTemp.getString(j, "jbjgid"));
				hbInfo.put(rownum, "dwbh", dwbh);
				hbInfo.put(rownum, "dwmc", dwmc);
				hbInfo.put(rownum, "xm", vxm);
				hbInfo.put(rownum, "xb", xb);
				hbInfo.put(rownum, "shbzhm", shbzhm);
				hbInfo.put(rownum, "zfrylb", zfrylb);
				hbInfo.put(rownum, "dyffzt", dyffzt);
				hbInfo.put(rownum, "dfjglb", dfjglb);
				hbInfo.put(rownum, "dfjgid", dfjgid);
				hbInfo.put(rownum, "yhzh", dsTemp.getString(j, "yhzh"));
				hbInfo.put(rownum, "jyrq", dsTemp.getString(j, "jyrq"));
				hbInfo.put(rownum, "bljysj", dsTemp.getDateToString(j, "bljysj", "yyyyMMdd"));
				hbInfo.put(rownum, "bgyy", bgyy);	
			}

			if ("".equals(err)) {
				// 放入合法数据
				dsPer.combineDatastore(hbInfo);
			} else {
				// 放入不合法数据
				dsErr.addRow(dsUp.getRow(i));
				dsErr.put(dsErr.rowCount() - 1, "err", err);
			}

		}

		dsPer = AdTools.genDfjgxxDataStore(dsPer, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsPer = HsuTools.genJbjgxxDataStore(dsPer, "jbjgid", "jbjgbh", "jbjgmc");
		rdo.put("dsper", dsPer);
		rdo.put("dserr", dsErr);

		return rdo;
	}
	
	/**
	 * 方法简介.检测参保人员状态查询信息(滨州客户化)
	 * 增加勾选对比民政数据的查询,对比民政数据查询结果增加死亡时间列
	 * @author 张先哲 20170802
	 */
	public final DataObject chkCbryztBpdr_3716(DataObject para) throws Exception {
		String shbzhm, xm, xb, err;
		DataObject rdo = new DataObject();
		DataStore dsErr = new DataStore(), dsPer = new DataStore();
		DataStore dsUp, hbInfo = new DataStore();
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String dfjglb, bgyy, blzyyy, dyzzyy, dfjgid;
		String dwbh, vxm, dyffzt, dwmc, zfrylb, ryid;
		String dbmzsj;

		dbmzsj = para.getString("dbmzsj", "");

		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "xm", "姓名", "String");
		setTableInfo(tableInfo, 1, "shbzhm", "身份证号码", "String");

		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		dsUp = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		dsUp = ExcelTool.removeBlankRowWithTrim(dsUp); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		// 循环导入人员
		for (int i = 0; i < dsUp.rowCount(); i++) {
			err = "";
			shbzhm = dsUp.getString(i, "shbzhm");
			xm = dsUp.getString(i, "xm");

			hbInfo.clear();

			sqlBF.setLength(0);
			sqlBF.append("select b.dwbh, b.cbdwmc,a.dyffzt,a.sqid,a.xm,   ");
			sqlBF.append("       a.zfrylb, a.xb, b.jbjgid, a.dfjglb, a.dfjgid, ");
			sqlBF.append("       a.yhzh, c.jyrq, c.bljysj, c.blzyyy,  ");
			sqlBF.append("       c.bljyyy, a.ryid ");
			sqlBF.append("  from ad3u.per_info a,                          ");
			sqlBF.append("       si3u.orgn_reg b, ");
			sqlBF.append("       ad3u.per_reg c                          ");
			sqlBF.append(" where a.dwdjid=b.dwdjid  ");
			sqlBF.append("   and a.dqdydjid = c.dydjid                     ");
			sqlBF.append("   and a.shbzhm = ?                              ");
			sqlBF.append("   and a.sszfrq in('A','B') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, shbzhm);
			DataStore dsTemp = this.sql.executeQuery();

			// 使用身份证号码查询
			if ("".equals(shbzhm) || null == shbzhm) {
				err = err + "传入的身份证号码为空!";
			} else {
				if (dsTemp.rowCount() <= 0) {
					err = err + "人员[" + shbzhm + "]在数据库中不存在!";
				}
			}

			for (int j = 0; j < dsTemp.rowCount(); j++) {
				dyffzt = dsTemp.getString(j, "dyffzt");
				dwbh = dsTemp.getString(j, "dwbh");
				dwmc = dsTemp.getString(j, "cbdwmc");
				xb = dsTemp.getString(j, "xb");
				vxm = dsTemp.getString(j, "xm");
				zfrylb = dsTemp.getString(j, "zfrylb");
				ryid = dsTemp.getString(j, "ryid");
				dfjglb = dsTemp.getString(j, "dfjglb");
				dfjgid = dsTemp.getString(j, "dfjgid");
				blzyyy = dsTemp.getString(j, "blzyyy");
				dyzzyy = dsTemp.getString(j, "bljyyy");

				if (!xm.equals(vxm)) {
					err = err + "职工姓名[" + xm + "]与数据库中[" + vxm + "]不一致!;";
					continue;
				}

				// 处理变更原因
				if ("1".equals(dyffzt)) {
					bgyy = blzyyy;
					sqlBF.setLength(0);
					sqlBF.append(" select hfyy ");
					sqlBF.append("   from ad3u.per_pause a ");
					sqlBF.append("  where a.ryid = ? ");
					sqlBF.append("    and a.hfsj is not null ");
					sqlBF.append("  order by a.hfsj desc ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, ryid);
					DataStore ds = this.sql.executeQuery();
					if (ds.rowCount() > 0) {
						bgyy = ds.getString(0, "hfyy");
					}
				} else if ("3".equals(dyffzt)) {
					bgyy = dyzzyy;
				} else if ("2".equals(dyffzt)) {
					sqlBF.setLength(0);
					sqlBF.append(" select ztyy ");
					sqlBF.append("   from ad3u.per_pause a ");
					sqlBF.append("  where a.ryid = ? ");
					sqlBF.append("    and a.hfsj is null ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, ryid);
					DataStore ds = this.sql.executeQuery();
					if (ds.rowCount() > 0) {
						bgyy = ds.getString(0, "ztyy");
					} else {
						bgyy = "";
					}
				} else {
					bgyy = "";
				}

				bgyy = HsuTools.discode("YLZFBGYY", bgyy, "");

				// 增加查询死亡时间 add.zxz.20170802
				String swsj = "";
				if ("1".equals(dbmzsj)) {
					sqlBF.setLength(0);
					sqlBF.append("select nvl(a.swrq, to_char(a.hhsj,'yyyyMMdd')) swsj ");
					sqlBF.append("  from si3u.mz_swryxx a ");
					sqlBF.append(" where a.sfzhm = ? ");
					sqlBF.append("   and a.deleteflag = '0' ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, shbzhm);
					DataStore vds = this.sql.executeQuery();
					if (vds.rowCount() > 0) {
						swsj = vds.getString(0, "swsj");
					}
				}
				// add.zxz.20170802.end

				hbInfo.addRow();
				int rownum = hbInfo.rowCount() - 1;

				hbInfo.put(rownum, "jbjgid", dsTemp.getString(j, "jbjgid"));
				hbInfo.put(rownum, "dwbh", dwbh);
				hbInfo.put(rownum, "dwmc", dwmc);
				hbInfo.put(rownum, "xm", vxm);
				hbInfo.put(rownum, "xb", xb);
				hbInfo.put(rownum, "shbzhm", shbzhm);
				hbInfo.put(rownum, "zfrylb", zfrylb);
				hbInfo.put(rownum, "dyffzt", dyffzt);
				hbInfo.put(rownum, "dfjglb", dfjglb);
				hbInfo.put(rownum, "dfjgid", dfjgid);
				hbInfo.put(rownum, "yhzh", dsTemp.getString(j, "yhzh"));
				hbInfo.put(rownum, "jyrq", dsTemp.getString(j, "jyrq"));
				hbInfo.put(rownum, "bljysj", dsTemp.getDateToString(j, "bljysj", "yyyyMMdd"));
				hbInfo.put(rownum, "bgyy", bgyy);
				if ("1".equals(dbmzsj)) {
					hbInfo.put(rownum, "bdxxly", "民政");// 增加比对信息来源 add.zxz.20170802
					hbInfo.put(rownum, "swsj", swsj);// 增加死亡日期 add.zxz.20170802
				}
			}

			if ("".equals(err)) {
				// 放入合法数据
				dsPer.combineDatastore(hbInfo);
			} else {
				// 放入不合法数据
				dsErr.addRow(dsUp.getRow(i));
				dsErr.put(dsErr.rowCount() - 1, "err", err);
			}

		}

		dsPer = AdTools.genDfjgxxDataStore(dsPer, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsPer = HsuTools.genJbjgxxDataStore(dsPer, "jbjgid", "jbjgbh", "jbjgmc");
		rdo.put("dsper", dsPer);
		rdo.put("dserr", dsErr);

		return rdo;
	}
	
	/**
	 * 方法简介.检测参保人员状态查询信息
	 * 
	 * 济宁客户化：报盘列增加疑似死亡时间及家庭住址
	 * 
	 * @author guanll 2017.04.20
	 */
	public final DataObject chkCbryztBpdr_3708(DataObject para) throws Exception {
		String shbzhm, xm, xb, err;
		DataObject rdo = new DataObject();
		DataStore dsErr = new DataStore(), dsPer = new DataStore();
		DataStore dsUp, hbInfo = new DataStore();
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore(), ds;
		StringBuffer sqlBF = new StringBuffer();
		String dfjglb, bgyy, blzyyy, dyzzyy, dfjgid;
		String dwbh, vxm, dyffzt, dwmc, zfrylb, ryid, ysswsj, jtzz;
		double yffbz;
		
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "xm", "姓名", "String");
		setTableInfo(tableInfo, 1, "shbzhm", "身份证号码", "String");
		setTableInfoRequired(tableInfo, 2, "ysswsj", "疑似死亡时间", "String", "false");//add.cjj.20150721济宁增加
		setTableInfoRequired(tableInfo, 3, "jtzz", "家庭住址", "String", "false");//add.cjj.20150807济宁增加

		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		dsUp = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		dsUp = ExcelTool.removeBlankRowWithTrim(dsUp); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		// 循环导入人员
		for (int i = 0; i < dsUp.rowCount(); i++) {
			err = "";
			shbzhm = dsUp.getString(i, "shbzhm");
			xm = dsUp.getString(i, "xm");
			// add.cjj.20150714增加疑似死亡时间
			if (dsUp.containsItem(i, "ysswsj")) {
				ysswsj = dsUp.getString(i, "ysswsj");
			} else {
				ysswsj = "";
			}
			// end.cjj.20150714
			// add.cjj.20150807家庭住址
			if (dsUp.containsItem(i, "jtzz")) {
				jtzz = dsUp.getString(i, "jtzz");
			} else {
				jtzz = "";
			}
			// end.cjj.20150807
						
			hbInfo.clear();

			sqlBF.setLength(0);
			sqlBF.append("select b.dwbh, b.cbdwmc,a.dyffzt,a.sqid,a.xm,   ");
			sqlBF.append("       a.zfrylb, a.xb, b.jbjgid, a.dfjglb, a.dfjgid, ");
			sqlBF.append("       a.yhzh, c.jyrq, c.bljysj, c.blzyyy,  ");
			sqlBF.append("       c.bljyyy, a.ryid, a.dyxsksny ");//add.gxl.20190225 增加dyxsksny字段
			sqlBF.append("  from ad3u.per_info a,                          ");
			sqlBF.append("       si3u.orgn_reg b, ");
			sqlBF.append("       ad3u.per_reg c                          ");
			sqlBF.append(" where a.dwdjid=b.dwdjid  ");
			sqlBF.append("   and a.dqdydjid = c.dydjid                     ");
			sqlBF.append("   and a.shbzhm = ?                              ");
			sqlBF.append("   and a.sszfrq in('A','B') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, shbzhm);
			DataStore dsTemp = this.sql.executeQuery();

			// 使用身份证号码查询
			if ("".equals(shbzhm) || null == shbzhm) {
				err = err + "传入的身份证号码为空!";
			} else {
				if (dsTemp.rowCount() <= 0) {
					err = err + "人员[" + shbzhm + "]在数据库中不存在!";
				}
			}

			for (int j = 0; j < dsTemp.rowCount(); j++) {
				dyffzt = dsTemp.getString(j, "dyffzt");
				dwbh = dsTemp.getString(j, "dwbh");
				dwmc = dsTemp.getString(j, "cbdwmc");
				xb = dsTemp.getString(j, "xb");
				vxm = dsTemp.getString(j, "xm");
				zfrylb = dsTemp.getString(j, "zfrylb");
				ryid = dsTemp.getString(j, "ryid");
				dfjglb = dsTemp.getString(j, "dfjglb");
				dfjgid = dsTemp.getString(j, "dfjgid");
				blzyyy = dsTemp.getString(j, "blzyyy");
				dyzzyy = dsTemp.getString(j, "bljyyy");

				if (!xm.equals(vxm)) {
					err = err + "职工姓名[" + xm + "]与数据库中[" + vxm + "]不一致!;";
					continue;
				}

				// add.cjj.20150714济宁增加月发放标准
				sqlBF.setLength(0);
				sqlBF.append(" select sum(btje) yffbz ");
				sqlBF.append("   from ad3u.per_giv_month_std ");
				sqlBF.append("  where ryid = ? ");
				sqlBF.append("    and ? between qsny and nvl(zzny, '205012') ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				this.sql.setString(2, DateUtil.dateToString(DateUtil.getDBTime(), "yyyyMM"));
				ds = this.sql.executeQuery();

				yffbz = ds.getDouble(0, "yffbz");
				// end.cjj.20150714
				
				// 处理变更原因
				if ("1".equals(dyffzt)) {
					bgyy = blzyyy;
					sqlBF.setLength(0);
					sqlBF.append(" select hfyy ");
					sqlBF.append("   from ad3u.per_pause a ");
					sqlBF.append("  where a.ryid = ? ");
					sqlBF.append("    and a.hfsj is not null ");
					sqlBF.append("  order by a.hfsj desc ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, ryid);
					ds = this.sql.executeQuery();
					if (ds.rowCount() > 0) {
						bgyy = ds.getString(0, "hfyy");
					}
				} else if ("3".equals(dyffzt)) {
					bgyy = dyzzyy;
				} else if ("2".equals(dyffzt)) {
					sqlBF.setLength(0);
					sqlBF.append(" select ztyy ");
					sqlBF.append("   from ad3u.per_pause a ");
					sqlBF.append("  where a.ryid = ? ");
					sqlBF.append("    and a.hfsj is null ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, ryid);
					ds = this.sql.executeQuery();
					if (ds.rowCount() > 0) {
						bgyy = ds.getString(0, "ztyy");
					} else {
						bgyy = "";
					}
				} else {
					bgyy = "";
				}

				bgyy = HsuTools.discode("YLZFBGYY", bgyy, "");

				hbInfo.addRow();
				int rownum = hbInfo.rowCount() - 1;
				
				hbInfo.put(rownum, "jbjgid", dsTemp.getString(j, "jbjgid"));
				hbInfo.put(rownum, "dwbh", dwbh);
				hbInfo.put(rownum, "dwmc", dwmc);
				hbInfo.put(rownum, "xm", vxm);
				hbInfo.put(rownum, "xb", xb);
				hbInfo.put(rownum, "shbzhm", shbzhm);
				hbInfo.put(rownum, "zfrylb", zfrylb);
				hbInfo.put(rownum, "dyffzt", dyffzt);
				hbInfo.put(rownum, "dfjglb", dfjglb);
				hbInfo.put(rownum, "dfjgid", dfjgid);
				hbInfo.put(rownum, "yhzh", dsTemp.getString(j, "yhzh"));
				hbInfo.put(rownum, "jyrq", dsTemp.getString(j, "jyrq"));
				hbInfo.put(rownum, "bljysj", dsTemp.getDateToString(j, "bljysj", "yyyyMMdd"));
				hbInfo.put(rownum, "bgyy", bgyy);	
				hbInfo.put(rownum, "yffbz", yffbz);//add.cjj/20150714增加月发放标准，疑似死亡时间,jbjgid
				hbInfo.put(rownum, "ysswsj", ysswsj);
				hbInfo.put(rownum, "jtzz", jtzz);//add.cjj.20150807家庭住址
				hbInfo.put(rownum, "dyxsksny", dsTemp.getDateToString(j, "dyxsksny", "yyyyMM"));//add.gxl.20190225 待遇享受开始年月
			}

			if ("".equals(err)) {
				// 放入合法数据
				dsPer.combineDatastore(hbInfo);
			} else {
				// 放入不合法数据
				dsErr.addRow(dsUp.getRow(i));
				dsErr.put(dsErr.rowCount() - 1, "err", err);
			}

		}

		dsPer = AdTools.genDfjgxxDataStore(dsPer, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		dsPer = HsuTools.genJbjgxxDataStore(dsPer, "jbjgid", "jbjgbh", "jbjgmc");
		rdo.put("dsper", dsPer);
		rdo.put("dserr", dsErr);

		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.生存查询
	 * 
	 * @author 韦超 2016-11-25
	 */
	public DataObject fwdScQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		DataObject rdo = new DataObject();
		
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.生存查询
	 * 
	 * @author 韦超 2016-11-25
	 */
	public final DataObject queryScInfo(DataObject para) throws Exception {
		
		String querylogid = QueryLogTool.saveQueryLog("生存查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		SPrompt prompt = SPromptUtil.getSPrompt();
		prompt.prompt("正在查询...");
		StringBuffer sqlBF = new StringBuffer();
		String qsdwbh = para.getString("qsdwbh");
		String zzdwbh = para.getString("zzdwbh");
		String zglb = para.getString("zglb");
		String jjlxmx = para.getString("jjlxmx");
		String qscbdwmc = para.getString("qscbdwmc");
		String zzcbdwmc = para.getString("zzcbdwmc");
		String jbjgid = para.getString("jbjgid");
		
		//返回前台填充form
		DataStore formInfo = new DataStore();
		formInfo.addRow();
		formInfo.put(0, "qsdwbh", qsdwbh);
		formInfo.put(0, "qscbdwmc", qscbdwmc);
		formInfo.put(0, "zzdwbh", zzdwbh);
		formInfo.put(0, "zzcbdwmc", zzcbdwmc);
		formInfo.put(0, "zglb", zglb);
		formInfo.put(0, "jjlxmx", jjlxmx);
		formInfo.put(0, "jbjgid", jbjgid);
		
		if (qsdwbh == null) {
			qsdwbh = "";
		}
		if (zzdwbh == null) {
			zzdwbh = "";
		}
		if (jjlxmx == null) {
			jjlxmx = "";
		}
		
		zglb = HsuTools.replaceC2QCQ(zglb);
		jjlxmx = HsuTools.replaceC2QCQ(jjlxmx);
		
		//判断是否查询遗属
		String ysdwbz = "0";
		if (zglb.indexOf("A0H") > 0) {
			ysdwbz = "1";
		}
		
		//先查询单位
		sqlBF.setLength(0);
		sqlBF.append("select distinct dwbh, jjlxmx ");
		sqlBF.append("  from si3u.orgn_reg a, ");
		sqlBF.append("       biuv.orgn b, ");
		sqlBF.append("       si3u.per_reg c ");
		sqlBF.append(" where a.dwid = b.dwid ");
		sqlBF.append("   and c.hdbz= '1' ");
		sqlBF.append("   and c.zglb in (" + zglb + ") ");
		if (!"".equals(jjlxmx)) {
			sqlBF.append("   and b.jjlxmx in (" + jjlxmx + ") ");
		}
		if (!"".equals(qsdwbh)) {
			sqlBF.append("   and a.dwbh >= '" + qsdwbh + "' ");
		}
		if (!"".equals(zzdwbh)) {
			sqlBF.append("   and a.dwbh <= '" + zzdwbh + "' ");
		}
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("                 from ad3u.per_info d ");
		sqlBF.append("                where c.dwdjid = d.dwdjid ");
		sqlBF.append("                  and d.dyffzt <> '3' ");
		sqlBF.append("                  and d.sszfrq = 'A') ");
		sqlBF.append("   and a.jbjgid = '" + jbjgid + "' ");
		if ("1".equals(ysdwbz)) {
			sqlBF.append(" union ");
			sqlBF.append("select distinct dwbh, jjlxmx ");
			sqlBF.append("  from si3u.orgn_reg a, ");
			sqlBF.append("       biuv.orgn b, ");
			sqlBF.append("       ad3u.per_info c ");
			sqlBF.append(" where a.dwid = b.dwid ");
			sqlBF.append("   and a.dwdjid = c.dwdjid ");
			if (!"".equals(jjlxmx)) {
				sqlBF.append("   and b.jjlxmx in (" + jjlxmx + ") ");
			}
			if (!"".equals(qsdwbh)) {
				sqlBF.append("   and a.dwbh >= '" + qsdwbh + "' ");
			}
			if (!"".equals(zzdwbh)) {
				sqlBF.append("   and a.dwbh <= '" + zzdwbh + "' ");
			}
			sqlBF.append("   and c.sszfrq = 'B' ");
			sqlBF.append("   and c.dyffzt <> '3' ");
			sqlBF.append("   and a.jbjgid = '" + jbjgid + "' ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsOrgn = this.sql.executeQuery();

		prompt.setTotalSteps(dsOrgn.rowCount() + 1); // 设置步数
		// 循环外写查询sql
		//1:职工，不包含遗属
		sqlBF.setLength(0);
		sqlBF.append("select a.shbzhm ysshbzhm, a.csrq, a.sqid, b.dwbh, b.cbdwmc, ");
		sqlBF.append("       a.xm, a.xb, '' shbzhm, '' szxm, '' gygx, c.cjgzrq, ");
		sqlBF.append("       d.zglb, a.zfrylb, a.jdid, f.lxrdh, f.txdz, c.ltxrq, a.ryid, ? jjlxmx ");
		sqlBF.append("  from ad3u.per_info a, ");
		sqlBF.append("       si3u.orgn_reg b, ");
		sqlBF.append("       ad3u.emp_info c, ");
		sqlBF.append("       si3u.per_reg d, ");
		sqlBF.append("       biuv.person f ");
		sqlBF.append(" where a.dwdjid = b.dwdjid ");
		sqlBF.append("   and a.ryid = d.ryid ");
		sqlBF.append("   and a.ryid = c.ryid ");
		sqlBF.append("   and a.ryid = f.ryid ");
		sqlBF.append("   and d.hdbz = '1' ");
		sqlBF.append("   and a.sszfrq = 'A' ");
		sqlBF.append("   and d.zglb in (" + zglb + ") ");
		sqlBF.append("   and b.dwbh = ? ");
		sqlBF.append("   and a.dyffzt <> '3' ");
		String strZg = sqlBF.toString();
		
		//2:遗属
		sqlBF.setLength(0);
		sqlBF.append("select b.dwbh, b.cbdwmc, a.shbzhm ysshbzhm, a.xm, a.xb, ");
		sqlBF.append("       d.xm szxm, d.shbzhm, d.csrq, a.sqid, c.gygx, ");
		sqlBF.append("       '' cjgzrq, 'A0H' zglb, '' ltxlb, a.jdid, e.lxrdh, ");
		sqlBF.append("       e.txdz, a.dyxsksny || '01' ltxrq, a.ryid, a.zfrylb, ? jjlxmx   ");
		sqlBF.append("  from ad3u.per_info a, ");
		sqlBF.append("       si3u.orgn_reg b, ");
		sqlBF.append("       ad3u.supp_info c, ");
		sqlBF.append("       biuv.person d, ");
		sqlBF.append("       biuv.person e ");
		sqlBF.append(" where a.dwdjid = b.dwdjid ");
		sqlBF.append("   and a.ryid = c.ryid ");
		sqlBF.append("   and c.swryid = d.ryid ");
		sqlBF.append("   and a.ryid = e.ryid ");
		sqlBF.append("   and b.dwbh = ? ");
		sqlBF.append("   and a.dyffzt <> '3' ");
		String strYs = sqlBF.toString();
		
		DataStore dsPerinfo = new DataStore();
		if ("1".equals(ysdwbz)) {
			for (int i = 0; i < dsOrgn.rowCount(); i++) {
				String dwbh = dsOrgn.getString(i, "dwbh");
				String vjjlxmx = dsOrgn.getString(i, "jjlxmx");
				
				prompt.prompt("正在查询单位编号为【" + dwbh + "】的人员...");
				//查询职工
				this.sql.setSql(strZg);
				this.sql.setString(1, vjjlxmx);
				this.sql.setString(2, dwbh);
				DataStore ds = this.sql.executeQuery();
				
				dsPerinfo.combineDatastore(ds.clone());
				
				//查询遗属
				this.sql.setSql(strYs);
				this.sql.setString(1, vjjlxmx);
				this.sql.setString(2, dwbh);
				ds = this.sql.executeQuery();
				
				dsPerinfo.combineDatastore(ds.clone());
				prompt.moveForword(1);
			}
		} else {
			for (int i = 0; i < dsOrgn.rowCount(); i++) {
				String dwbh = dsOrgn.getString(i, "dwbh");
				String vjjlxmx = dsOrgn.getString(i, "jjlxmx");
				
				prompt.prompt("正在查询单位编号为【" + dwbh + "】的人员...");
				//查询职工
				this.sql.setSql(strZg);
				this.sql.setString(1, vjjlxmx);
				this.sql.setString(2, dwbh);
				DataStore ds = this.sql.executeQuery();
				
				dsPerinfo.combineDatastore(ds.clone());
				prompt.moveForword(1);
			}
		}
		
		sqlBF.setLength(0);
		sqlBF.append("select sum(a.btje) zje ");
		sqlBF.append("  from ad3u.per_giv_month_std a ");
		sqlBF.append(" where ? between a.qsny and nvl(a.zzny, '205012')  ");
		sqlBF.append("   and a.ryid = ? ");
		String strYlj = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append("select 1 ");
		sqlBF.append("  from si3u.per_decl b ");
		sqlBF.append(" where b.sbfsyy = 'A152' ");
		sqlBF.append("   and b.zdlsh is not null ");
		sqlBF.append("   and b.jfrq is not null ");
		sqlBF.append("   and b.ryid = ? ");
		String str29h = sqlBF.toString();
		
		String dqny = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		
		prompt.prompt("开始查询退休金...");
		for (int i = 0; i < dsPerinfo.rowCount(); i++) {
			String ryid = dsPerinfo.getString(i, "ryid");
			String zfrylb = dsPerinfo.getString(i, "zfrylb");
			
			this.sql.setSql(strYlj);
			this.sql.setString(1, dqny);
			this.sql.setString(2, ryid);
			DataStore ds = this.sql.executeQuery();
			double zje = ds.getDouble(0, "zje");
			
			String c64h = "0";//64号文
			if ("A2K".equals(zfrylb)) {
				c64h = "1";
			}
			
			this.sql.setSql(str29h);
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			String c29h = "0";//29号文
			if (ds.rowCount() > 0) {
				c29h = "1";
			}
			dsPerinfo.put(i, "zje", zje);
			dsPerinfo.put(i, "sytxbz",  AdTools.getPerCmpl(ryid, "SGQZGXX", "0"));//事改企
			dsPerinfo.put(i, "jzgbz", AdTools.getPerCmpl(ryid, "QTSF", "0"));//军专干
			dsPerinfo.put(i, "c64h", c64h);
			dsPerinfo.put(i, "c29h", c29h);
		}
		dsPerinfo = HsuTools.genJdxxDataStore(dsPerinfo, "jdid", "jdbh", "jdmc");
		dsPerinfo = HsuTools.genSqxxDataStore(dsPerinfo, "sqid", "sqbh", "sqmc");
		
		dsPerinfo.sort("dwbh,zglb");
		
		prompt.complete(); // 进度条任务完成
		prompt.close(); // 指示关闭进度条UI
		DataStore dsJbjg = new DataStore();
		
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			dsJbjg = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			dsJbjg = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		
		DataObject rdo = new DataObject();
		rdo.put("dsperinfo", dsPerinfo);
		rdo.put("ysdwbz", ysdwbz);
		rdo.put("queryinfo", formInfo);
		rdo.put("dsjbjg", dsJbjg);
		
		QueryLogTool.updateQueryLog(querylogid, dsPerinfo.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.网上退休申报查询——打开页面
	 * 
	 * @author 李琪 2017-1-3
	 */
	public DataObject fwdWstxsbQuery(final DataObject para) throws Exception {

		// 获取经办机构信息
		DataStore dsJbjg = SiTools.getQueryJbjgidByUserId(this.getUser()
			.getUserid());

		String jbjgid = "";
		if (dsJbjg.rowCount() == 1) {
			jbjgid = dsJbjg.getString(0, "value");
		}

		// 起始终止日期
		String zzrq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM-dd");
		String qsrq = StringUtil.chnSubstring(zzrq, 0, 7) + "-01";

		DataObject rdo = new DataObject();
		rdo.put("dsjbjg", dsJbjg);
		rdo.put("jbjgid", jbjgid);
		rdo.put("zzrq", zzrq);
		rdo.put("qsrq", qsrq);

		return rdo;
	}

	/**
	 * 方法简介.网上退休申报查询
	 * 
	 * @author 李琪 2017-1-3
	 */
	public DataObject queryRetireDeclareNatl(DataObject para) throws Exception {

		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("网上退休申报查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		String jbjgid = StringUtil.trim(para.getString("jbjgid"));// 经办机构
		String dwdjid = StringUtil.trim(para.getString("dwdjid"));// 单位登记ID
		String vsbzt = StringUtil.trim(para.getString("sbzt"));// 申报状态
		String qsrq = StringUtil.trim(para.getDateToString("qsrq", "yyyyMMdd"));// 起始日期
		String zzrq = StringUtil.trim(para.getDateToString("zzrq", "yyyyMMdd"));// 终止日期

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空!");
		}
		if (qsrq == null || "".equals(qsrq)) {
			this.bizException("请输入起始日期!");
		}
		if (zzrq == null || "".equals(zzrq)) {
			this.bizException("请输入终止日期!");
		}
		if (qsrq.compareTo(zzrq) > 0) {
			this.bizException("起始日期不能大于终止日期!");
		}

		// 查询申报信息
		sqlBF.setLength(0);
		sqlBF.append(" select c.dwbh,c.cbdwmc,c.jbjgid,b.jysm fkxx,b.jyzt sbzt, ");
		sqlBF.append("        a.slsj tjsj,b.spjbr,b.spjbsj,b.tsid sblsh,c.dwdjid, ");
		sqlBF.append("        a.dwjbr,a.dwjbsj,a.piid,a.ryid ");
		sqlBF.append("   from sicp3uws.adtxdyhd a, ");
		sqlBF.append("        tsu.trading_info b,  ");
		sqlBF.append("        si3u.orgn_reg c ");
		sqlBF.append("  where a.tsid is not null ");
		sqlBF.append("    and a.tsid = b.tsid ");
		sqlBF.append("    and c.dwdjid = b.dwdjid ");
		sqlBF.append("    and to_char(a.slsj, 'yyyymmdd') between ? and ? "); // 网上退休申报交易表tsu.trading_info未存入经办时间，暂用sicp3uws.adtxdyhd表中的受理时间查询
		sqlBF.append("    and c.jbjgid in (")
			.append(HsuTools.replaceC2QCQ(jbjgid))
			.append(") ");
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("    and c.dwdjid = '").append(dwdjid).append("'");
		}
		if (vsbzt != null && !"".equals(vsbzt)) {
			sqlBF.append(" and nvl(b.jyzt, '0') in (")
				.append(HsuTools.replaceC2QCQ(vsbzt))
				.append(") ");
		}

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		DataStore declareInfo = this.sql.executeQuery();

		declareInfo.sortdesc("sblsh");

		// 查询人员信息
		SPrompt prompt = SPromptUtil.getSPrompt();// 进度条对象
		prompt.setTotalSteps(declareInfo.rowCount());// 初始化进度条长度
		boolean isComplete = true;
		for (int i = 0; i < declareInfo.rowCount(); i++) {
			if (prompt.isTerminating()) { // 这里负责判定是否点击了【终止】按钮
				isComplete = false;
				prompt.terminate("查询任务已终止!");
				prompt.close();
				break;
			}
			prompt.prompt("正在查询第" + (i + 1) + "条记录...");// 进度条刷新的内容
			prompt.moveForword(1);// 进度条增量

			String ryid = declareInfo.getString(i, "ryid");
			//mod.cjj.20180522增加审核后查询结果
			sqlBF.setLength(0);
			sqlBF.append(" select a.grsf, b.zfrylb, c.cjgzrq, c.ltxrq, b.dyfhsj,  ");
			sqlBF.append("        c.dacsrq, a.shbzhm, a.xm, a.xb ");
			sqlBF.append("   from biuv.person a, ad3u.per_info b, ad3u.emp_info c ");
			sqlBF.append("  where a.ryid = b.ryid(+) ");
			sqlBF.append("    and a.ryid = c.ryid(+) ");
			sqlBF.append("    and a.ryid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			DataStore dsPer = this.sql.executeQuery();
			if (dsPer.rowCount() > 0) {
				String shbzhm = dsPer.getString(0, "shbzhm");
				String xm = dsPer.getString(0, "xm");
				declareInfo.put(i, "xm", xm);
				declareInfo.put(i, "shbzhm", shbzhm);
				// add.cjj.20180522
				declareInfo.put(i, "xb", dsPer.getString(0, "xb"));
				declareInfo.put(i, "grsf", dsPer.getString(0, "grsf"));
				declareInfo.put(i, "zfrylb", dsPer.getString(0, "zfrylb"));
				declareInfo.put(i, "cjgzrq", dsPer.getString(0, "cjgzrq"));
				declareInfo.put(i, "ltxrq", dsPer.getString(0, "ltxrq"));
				declareInfo.put(i, "dyfhsj", dsPer.getDate(0, "dyfhsj"));
				declareInfo.put(i, "dacsrq", dsPer.getString(0, "dacsrq"));
				// end.cjj.20180522
			}

		}

		if (isComplete) {
			// 进度条任务完成
			prompt.complete("任务完成！");
			// 指示关闭进度条UI【如果想手动关闭，可以不写】
			prompt.close();
		}
		
		DataObject rdo = new DataObject();
		rdo.put("declareInfo", declareInfo);
		
		QueryLogTool.updateQueryLog(querylogid, declareInfo.rowCount());
		
		return rdo;
	}

	/**
	 * 方法简介.网上退休申报明细查询
	 * 
	 * @author 李琪 2017-1-3
	 */
	public DataObject queryRetireDeclareDetailNatl(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsPer = new DataStore();
		DataStore dsSp = new DataStore();

		// 接参数
		String piid = para.getString("piid");
		String ryid = para.getString("ryid");

		if (piid == null || "".equals(piid)) {
			this.bizException("RyxxCxtjBPO.queryRetireDeclareDetailNatl调用时，传入的piid为空!");
		}
		if (ryid == null || "".equals(ryid)) {
			this.bizException("RyxxCxtjBPO.queryRetireDeclareDetailNatl调用时，传入的ryid为空!");
		}

		// 查询人员信息
		sqlBF.setLength(0);
		sqlBF.append("select d.shbzhm,d.xm,d.xb from biuv.person d where d.ryid = ? ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		dsPer = this.sql.executeQuery();

		if (dsPer.rowCount() > 0) {
			// 查询审批信息
			sqlBF.setLength(0);
			sqlBF.append("select e.spr, e.sprq, e.splbdm ");
			sqlBF.append("  from sicp3uws.approve_history e ");
			sqlBF.append(" where piid = ? ");
			sqlBF.append("   and nvl(dqbz, '1') = '1' ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, piid);
			dsSp = this.sql.executeQuery();

			String csspr = "", splbdm = "", fsspr = "", fsspbspr = "", ylkcsspr = "";
			Date cssprq, fssprq, fsspbsprq, ylkcssprq;
			for (int i = 0; i < dsSp.rowCount(); i++) {
				splbdm = dsSp.getString(i, "splbdm");
				if ("cs".equals(splbdm)) {
					csspr = dsSp.getString(i, "spr");
					cssprq = dsSp.getDate(i, "sprq");
					dsPer.put(0, "csspr", csspr);
					dsPer.put(0, "cssprq", cssprq);
				}
				if ("fs".equals(splbdm)) {
					fsspr = dsSp.getString(i, "spr");
					fssprq = dsSp.getDate(i, "sprq");
					dsPer.put(0, "fsspr", fsspr);
					dsPer.put(0, "fssprq", fssprq);
				}
				if ("fsspb".equals(splbdm)) {
					fsspbspr = dsSp.getString(i, "spr");
					fsspbsprq = dsSp.getDate(i, "sprq");
					dsPer.put(0, "fsspbspr", fsspbspr);
					dsPer.put(0, "fsspbsprq", fsspbsprq);
				}
				if ("ylkcs".equals(splbdm)) {
					ylkcsspr = dsSp.getString(i, "spr");
					ylkcssprq = dsSp.getDate(i, "sprq");
					dsPer.put(0, "ylkcsspr", ylkcsspr);
					dsPer.put(0, "ylkcssprq", ylkcssprq);

				}
			}
		}
		DataObject rdo = new DataObject();
		rdo.put("dsPer", dsPer);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.单位月增退休人员查询
	 * 
	 * @author 路国 2017-3-8
	 */
	public DataObject queryAdDwyztxry(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("单位月增退休人员查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String cxny = para.getDateToString("cxny", "yyyyMM");
		String jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));
		String dwxz = para.getString("dwxz");
		//增加查询本年度当月入库（退休、退职、特殊工种、病退）人数、本年度当月入库（退休、退职、特殊工种、病退）人数  gzh mod 20170515
		sqlBF.setLength(0);
		sqlBF.append("select dwdjid,cbdwxz,dwbh,cbdwmc, "); 
		sqlBF.append("       sum(bnddyrs) bnddyrs, ");//本年度当月入库当月人数
		sqlBF.append("       sum(bnddytx) bnddytx, ");//本年度当月入库当月人数（退休）
		sqlBF.append("       sum(bnddytz) bnddytz, ");//本年度当月入库当月人数（退职）
		sqlBF.append("       sum(bnddytsgz) bnddytsgz, ");//本年度当月入库当月人数（特殊工种）
		sqlBF.append("       sum(bnddybt) bnddybt, ");//本年度当月入库当月人数（病退）
		
		sqlBF.append("       sum(bndbnrs) bndbnrs, ");//本年度当月入库本年人数
		sqlBF.append("       sum(bndbntx) bndbntx, ");//本年度当月入库本年人数（退休）
		sqlBF.append("       sum(bndbntz) bndbntz, ");//本年度当月入库本年人数（退职）
		sqlBF.append("       sum(bndbntsgz) bndbntsgz, ");//本年度当月入库本年人数（特殊工种）
		sqlBF.append("       sum(bndbnbt) bndbnbt, ");//本年度当月入库本年人数（病退）
		
		sqlBF.append("       sum(fbndrs) fbndrs, ");
		sqlBF.append("       sum(fbndtx) fbndtx, ");//非本年度当月入库人数（退休）
		sqlBF.append("       sum(fbndtz) fbndtz, ");//非本年度当月入库人数（退职）
		sqlBF.append("       sum(fbndtsgz) fbndtsgz, ");//非本年度当月入库人数（特殊工种）
		sqlBF.append("       sum(fbndbt) fbndbt, ");//非本年度当月入库人数（特殊工种）
		sqlBF.append("       sum(bndyfrs) bndyfrs, ");
		sqlBF.append("       sum(yfje) yfje, ");
		sqlBF.append("       sum(fbndhdrs) fbndhdrs, ");
		sqlBF.append("       sum(fbndhdje) fbndhdje ");
		sqlBF.append("  from (select b.dwdjid, b.cbdwxz,b.dwbh,b.cbdwmc, ");//判断是本年还是当月使用补充信息里的离退休日期判断
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 6),?,1,0)) bnddyrs, ");
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 6),?,decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A21',1,0),0)) bnddytx, ");//本年度当月入库当月人数（退休）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 6),?,decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A31',1,0),0)) bnddytz, ");//本年度当月入库当月人数（退职）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 6),?,decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A25',1,0),0)) bnddytsgz, ");//本年度当月入库当月人数（特殊工种）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 6),?,decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A24',1,0),0)) bnddybt, ");//本年度当月入库当月人数（病退）
		
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?,1,0)) bndbnrs, ");
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?,decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A21',1,0),0)) bndbntx, ");//本年度当月入库本年人数（退休）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?,decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A31',1,0),0)) bndbntz, ");//本年度当月入库本年人数（退职）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?,decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A25',1,0),0)) bndbntsgz, ");//本年度当月入库本年人数（特殊工种）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?,decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A24',1,0),0)) bndbnbt, ");//本年度当月入库本年人数（病退）
		
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?, 0, 1)) fbndrs, ");
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?, 0, decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A21',1,0))) fbndtx, ");//非本年度当月入库人数（退休）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?, 0, decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A31',1,0))) fbndtz, ");//非本年度当月入库人数（退职）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?, 0, decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A25',1,0))) fbndtsgz, ");//非本年度当月入库人数（特殊工种）
		sqlBF.append("               sum(decode(substr(nvl(h.bcxmz, '20501231'), 0, 4),?, 0, decode((select m.bcxmz from si3u.per_natl_cmpl m where a.ryid=m.ryid and m.bcxmbh='LTXLB'),'A24',1,0))) fbndbt, ");//非本年度当月入库人数（特殊工种）
		sqlBF.append("               0 bndyfrs,0 yfje,0 fbndhdrs,0 fbndhdje ");
		sqlBF.append("          from si3u.per_reg a, si3u.orgn_reg b, si3u.per_natl_cmpl h ");
		sqlBF.append("         where a.dwdjid = b.dwdjid ");
		sqlBF.append("           and a.ryid = h.ryid     ");
		sqlBF.append("           and h.bcxmbh = 'LTXRQ'      ");
		sqlBF.append("           and b.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("           and a.hdbz = '1'        ");
		if (dwxz != null && "1".equals(dwxz)) {
			sqlBF.append("       and substr(b.cbdwxz,0,1) ='1' ");
		}
		if (dwxz != null && "2".equals(dwxz)) {
			sqlBF.append("       and substr(b.cbdwxz,0,1) <>'1' ");
		}
		sqlBF.append("           and exists (select 1 ");
		sqlBF.append("                  from si3u.per_natl_cmpl e ");
		sqlBF.append("                 where a.ryid = e.ryid ");
		sqlBF.append("                   and e.bcxmbh = 'TXZGYSSJ' ");
		sqlBF.append("                   and substr(e.bcxmz,0,6) = ?)     ");//查询退休资格预审初审时间为查询的月份 gzh mod 20170519
		sqlBF.append("           and exists (select 1 ");
		sqlBF.append("                  from si3u.per_natl_cmpl q ");
		sqlBF.append("                 where a.ryid = q.ryid ");
		sqlBF.append("                   and q.bcxmbh = 'TXZGYSBZ' ");
		sqlBF.append("                   and q.bcxmz = '1') ");
		sqlBF.append("         group by b.dwdjid, b.cbdwxz, b.dwbh, b.cbdwmc ");
		sqlBF.append("        union all ");
		sqlBF.append("        select b.dwdjid, b.cbdwxz,b.dwbh,b.cbdwmc, ");
		sqlBF.append("               0 bnddyrs, 0 fbndrs, 0 bnddytx, 0 bnddytz, 0 bnddytsgz, ");
		sqlBF.append("               0 bnddybt, 0 fbndtx, 0 fbndtz, 0 fbndtsgz, 0 fbndbt,    ");
		sqlBF.append("               0 bndbnrs, 0 bndbntx, 0 bnddytz, 0 bnddytsgz, 0 bnddybt,   ");
		sqlBF.append("               sum(decode(substr(nvl(ltxrq, '20501231'), 0, 4), ?, 1, 0)) bndyfrs, ");
		sqlBF.append("               sum(decode(substr(nvl(ltxrq, '20501231'), 0, 4), ?, btje, 0)) yfje, ");
		sqlBF.append("               0 fbndhdrs,0 fbndhdje ");
		sqlBF.append("          from ad3u.emp_info          a, ");
		sqlBF.append("               si3u.orgn_reg          b, ");
		sqlBF.append("               ad3u.per_giv_month_std c, ");
		sqlBF.append("               ad3u.per_info          d ");
		sqlBF.append("         where a.dwdjid = b.dwdjid ");
		sqlBF.append("           and b.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("           and a.ryid = d.ryid ");
		sqlBF.append("           and d.ryid = c.ryid(+) ");
		sqlBF.append("           and c.btbh(+) = 'A1L2' ");
		sqlBF.append("           and ? between c.qsny(+) and nvl(c.zzny(+), '205012') ");
		if (dwxz != null && "1".equals(dwxz)) {
			sqlBF.append("       and substr(b.cbdwxz,0,1) ='1' ");
		}
		if (dwxz != null && "2".equals(dwxz)) {
			sqlBF.append("       and substr(b.cbdwxz,0,1) <>'1' ");
		}
		sqlBF.append("           and exists (select 1 ");
		sqlBF.append("                  from ad3u.per_reg e ");
		sqlBF.append("                 where e.dydjid = d.dqdydjid ");
		sqlBF.append("                   and e.ryid = d.ryid ");
		sqlBF.append("                   and to_char(e.blzysj, 'yyyymm') = ?) ");
		sqlBF.append("           and exists (select 1 ");
		sqlBF.append("                  from ad3u.per_cmpl f ");
		sqlBF.append("                 where a.ryid = f.ryid ");
		sqlBF.append("                   and f.bcxmbh = 'LSDYBZ' ");
		sqlBF.append("                   and f.bcxmz = '1') ");
		sqlBF.append("         group by b.dwdjid, b.cbdwxz, b.dwbh, b.cbdwmc ");
		sqlBF.append("        union all ");
		sqlBF.append("        select dwdjid,cbdwxz,dwbh,cbdwmc,0 bnddyrs, ");
		sqlBF.append("               0 fbndrs,0 bndyfrs,0 yfje, 0 bnddytx, 0 bnddytz,   ");
		sqlBF.append("               0 bnddytsgz, 0 bnddybt, 0 fbndtx, 0 fbndtz, 0 fbndtsgz,");
		sqlBF.append("               0 bndbnrs, 0 bndbntx, 0 bnddytz, 0 bnddytsgz, 0 bnddybt,   ");
		sqlBF.append("               0 fbndbt, ");
		sqlBF.append("               sum(decode(substr(ltxrq, 0, 4), ?, 0, 1)) fbndhdrs, ");
		sqlBF.append("               sum(decode(substr(ltxrq, 0, 4), ?, 0, btje)) fbndhdje ");
		sqlBF.append("          from (select b.dwdjid, b.cbdwxz,b.dwbh,b.cbdwmc,d.ryid, ");
		sqlBF.append("                       a.ltxrq,sum(btje) btje ");
		sqlBF.append("                  from ad3u.emp_info          a, ");
		sqlBF.append("                       si3u.orgn_reg          b, ");
		sqlBF.append("                       ad3u.per_info          d, ");
		sqlBF.append("                       ad3u.per_giv_month_std c ");
		sqlBF.append("                 where a.dwdjid = b.dwdjid ");
		sqlBF.append("                   and b.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("                   and a.ryid = d.ryid ");
		sqlBF.append("                   and a.ryid = c.ryid(+) ");
		sqlBF.append("                   and nvl(d.dyspbz, '0') = '1' ");
		sqlBF.append("                   and d.dyfhsj is not null ");
		if (dwxz != null && "1".equals(dwxz)) {
			sqlBF.append("       		 and substr(b.cbdwxz,0,1) ='1' ");
		}
		if (dwxz != null && "2".equals(dwxz)) {
			sqlBF.append("               and substr(b.cbdwxz,0,1) <>'1' ");
		}
		sqlBF.append("                   and exists ");
		sqlBF.append("                 (select 1 ");
		sqlBF.append("                          from ad3u.per_reg e ");
		sqlBF.append("                         where e.dydjid = d.dqdydjid ");
		sqlBF.append("                           and e.ryid = d.ryid ");
		sqlBF.append("                           and to_char(e.blzysj, 'yyyymm') = ?) ");
		sqlBF.append("                   and not exists (select 1 ");
		sqlBF.append("                          from ad3u.per_cmpl f ");
		sqlBF.append("                         where a.ryid = f.ryid ");
		sqlBF.append("                           and f.bcxmbh = 'LSDYBZ' ");
		sqlBF.append("                           and f.bcxmz = '1') ");
		sqlBF.append("                   and c.qsny = d.dyxsksny ");
		sqlBF.append("                 group by b.dwdjid,b.cbdwxz,b.dwbh,b.cbdwmc,d.ryid,a.ltxrq) ");
		sqlBF.append("         group by dwdjid, cbdwxz, dwbh, cbdwmc) ");
		sqlBF.append(" group by dwdjid, cbdwxz, dwbh, cbdwmc ");
		sqlBF.append(" having sum(bnddyrs) + sum(bndbnrs) + sum(fbndrs) + sum(bndyfrs) + sum(yfje) + sum(fbndhdrs) + sum(fbndhdje) > 0 ");

		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, cxny);
		this.readonlysql.setString(2, cxny);
		this.readonlysql.setString(3, cxny);
		this.readonlysql.setString(4, cxny);
		this.readonlysql.setString(5, cxny);
		
		this.readonlysql.setString(6, cxny.substring(0,4));
		this.readonlysql.setString(7, cxny.substring(0,4));
		this.readonlysql.setString(8, cxny.substring(0,4));
		this.readonlysql.setString(9, cxny.substring(0,4));
		this.readonlysql.setString(10, cxny.substring(0,4));
		
		this.readonlysql.setString(11, cxny.substring(0, 4));
		this.readonlysql.setString(12, cxny.substring(0, 4));
		this.readonlysql.setString(13, cxny.substring(0, 4));
		this.readonlysql.setString(14, cxny.substring(0, 4));
		this.readonlysql.setString(15, cxny.substring(0, 4));
		
		this.readonlysql.setString(16, cxny);
		this.readonlysql.setString(17, cxny.substring(0, 4));
		this.readonlysql.setString(18, cxny.substring(0, 4));
		this.readonlysql.setString(19, cxny);
		this.readonlysql.setString(20, cxny);
		
		this.readonlysql.setString(21, cxny.substring(0, 4));
		this.readonlysql.setString(22, cxny.substring(0, 4));
		this.readonlysql.setString(23, cxny);
		DataStore ds = this.readonlysql.executeQuery();
		DataObject rdo = new DataObject();
		ds.sort("dwbh").sort("dwxz");
		rdo.put("ds", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());		
		
		return rdo;
	}
	
	/**
	 * 
	 * excel导入文件 可设置required属性
	 * @author guanll
	 * @date 创建时间 2017.04.20
	 * @since V1.0
	 */
	private void setTableInfoRequired(final DataStore tableInfo, final int num,
			final String name, final String columnName, final String type,
			final String required) throws Exception {
		tableInfo.addRow();
		tableInfo.put(num, "name", name);
		tableInfo.put(num, "columnName", columnName);
		tableInfo.put(num, "type", type);
		tableInfo.put(num, "required", required);
	}
	
	/**
	 * 获取经办机构
	 * 
	 * @author cjj
	 * @date 创建时间 2017-6-14
	 * @since V1.0
	 */
	public final DataObject getJbjgDs(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 人员状态对比实时查询
	 * 
	 * @author cjj
	 * @date 创建时间 2017-6-14
	 * @since V1.0
	 */
	public DataObject queryRyztdbxx(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		String querylogid = QueryLogTool.saveQueryLog("人员状态对比实时查询", "职工养老支付-人员状态对比实时查询", this.getUser()
			.getUserid(), para);

		String jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		String dwdjid = para.getString("dwdjid");
		String zfrylb = para.getString("zfrylb");
		String ryzt = para.getString("ryzt");
		String dyffzt = para.getString("dyffzt");
		String zyqsrq = para.getDateToString("zyqsrq", "yyyyMMdd");
		String zyzzrq = para.getDateToString("zyzzrq", "yyyyMMdd");
		//人员状态对比实时查询添加身份证号码  add wjq 20190225
		String sszfrq = para.getString("sszfrq", "");
		String yxzjhm = para.getString("yxzjhm", "");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空");
		}
		if (zyqsrq == null || "".equals(zyqsrq)) {
			zyqsrq = "19000101";
		}
		if (zyzzrq == null || "".equals(zyzzrq)) {
			zyzzrq = "20501231";
		}
		if (zyqsrq.compareTo(zyzzrq) > 0) {
			this.bizException("传入的增员起始日期不能晚于增员终止日期");
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");
		
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.cbdwmc ");
		sqlBF.append("   from si3u.orgn_reg a ");
		sqlBF.append("  where a.jbjgid in (" + jbjgid + ")");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid ");
		if (yxzjhm != null && !"".equals(yxzjhm)){
			sqlBF.append("and b.shbzhm = '" + yxzjhm + "' ");
		}
		sqlBF.append(")    and a.jbjgid in (" + jbjgid + ")");

		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("and a.dwdjid = '" + dwdjid + "' ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsOrgn = this.sql.executeQuery();

		String perstr = "";
		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数
		if ("B".equals(sszfrq)){
			sqlBF.setLength(0);
			sqlBF.append(" select a.xm, a.xb, a.csrq, a.zfrylb, e.dwbh,  ");
			sqlBF.append("        e.cbdwmc, a.dyxsksny, a.dyffzt, '' ryzt, '' ltxrq, ");
			sqlBF.append("        a.shbzhm, c.rydjid, e.dwdjid ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_reg c, ");
			sqlBF.append("        si3u.orgn_reg e ");
			sqlBF.append("  where a.dqdydjid = c.dydjid ");
			sqlBF.append("    and c.dwdjid = e.dwdjid ");
			sqlBF.append("    and a.sszfrq = 'B' ");
			sqlBF.append("    and a.dyspbz = '1' ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and to_char(c.blzysj,  'yyyyMMdd')  between  ?  and  ? ");
			
			if (dyffzt != null && !"".equals(dyffzt)) {
				sqlBF.append("and a.dyffzt = '" + dyffzt + "' ");
			}
			if (zfrylb != null && !"".equals(zfrylb)) {
				sqlBF.append("and a.zfrylb = '" + zfrylb + "' ");
			}
			if (yxzjhm != null && !"".equals(yxzjhm)){
				sqlBF.append("and a.shbzhm = '" + yxzjhm + "' ");
			}
			perstr = sqlBF.toString();
		}else{
			sqlBF.setLength(0);
			sqlBF.append(" select a.xm, a.xb, a.csrq, a.zfrylb, e.dwbh,  ");
			sqlBF.append("        e.cbdwmc, a.dyxsksny, a.dyffzt, b.ryzt, d.ltxrq, ");
			sqlBF.append("        a.shbzhm, c.rydjid, e.dwdjid ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        si3u.per_natl b, ");
			sqlBF.append("        ad3u.per_reg c, ");
			sqlBF.append("        ad3u.emp_info d, ");
			sqlBF.append("        si3u.orgn_reg e ");
			sqlBF.append("  where a.dqdydjid = c.dydjid ");
			sqlBF.append("    and c.dwdjid = e.dwdjid ");
			sqlBF.append("    and a.sszfrq = 'A' ");
			sqlBF.append("    and a.ryid  =  d.ryid ");
			sqlBF.append("    and a.ryid = b.ryid ");
			sqlBF.append("    and a.dyspbz = '1' ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and to_char(c.blzysj,  'yyyyMMdd')  between  ?  and  ? ");
			
			if (ryzt != null && !"".equals(ryzt)) {
				sqlBF.append("and b.ryzt = '" + ryzt + "' ");
			}
			if (dyffzt != null && !"".equals(dyffzt)) {
				sqlBF.append("and a.dyffzt = '" + dyffzt + "' ");
			}
			if (zfrylb != null && !"".equals(zfrylb)) {
				sqlBF.append("and a.zfrylb = '" + zfrylb + "' ");
			}
			if (yxzjhm != null && !"".equals(yxzjhm)){
				sqlBF.append("and b.shbzhm = '" + yxzjhm + "' ");
			}
			perstr = sqlBF.toString();
		}
		// 开始循环单位
		DataStore dsPerMx = new DataStore();
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String perdwdjid = dsOrgn.getString(i, "dwdjid");
			String dwmc = dsOrgn.getString(i, "cbdwmc");

			prompt.prompt("正在查询单位【" + dwmc + "】的人员信息...");

			this.sql.setSql(perstr);
			this.sql.setString(1, perdwdjid);
			this.sql.setString(2, zyqsrq);
			this.sql.setString(3, zyzzrq);
			DataStore ds = this.sql.executeQuery();

			dsPerMx.combineDatastore(ds);

			prompt.moveForword(1);
		}

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		DataObject vdo = new DataObject();
		vdo.put("ds", dsPerMx);

		QueryLogTool.updateQueryLog(querylogid, dsPerMx.rowCount());

		return vdo;
	}

	/**
	 * 待遇状态对比
	 * 
	 * @author cjj
	 * @date 创建时间 2017-6-15
	 * @since V1.0
	 */
	public DataObject fwdDyztdbInfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dyffztcode, xzqhdmcode, xzbzcode, bzcode;
		StringBuffer sqlBF = new StringBuffer();
		String shbzhm, xm, ryzt, dyffzt, rydjid, dwdjid, dyhidden, gnbsbh;

		shbzhm = para.getString("shbzhm");
		xm = para.getString("xm");
		rydjid = para.getString("rydjid");
		dyffzt = para.getString("dyffzt");
		ryzt = para.getString("ryzt");
		dwdjid = para.getString("dwdjid");
		gnbsbh = para.getString("gnbsbh");
		dyhidden = para.getString("dyhidden");

		// 组织待遇发放状态code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'DYFFZT' ");
		this.sql.setSql(sqlBF.toString());
		dyffztcode = this.sql.executeQuery();

		// 组织行政区划code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.xzqhdm value, a.xzqhmc content from be3u.district_natl a ");
		this.sql.setSql(sqlBF.toString());
		xzqhdmcode = this.sql.executeQuery();

		// 组织险种类型code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'XZBZ' ");
		this.sql.setSql(sqlBF.toString());
		xzbzcode = this.sql.executeQuery();

		// 组织备注code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'BZ' ");
		this.sql.setSql(sqlBF.toString());
		bzcode = this.sql.executeQuery();

		rdo.clear();
		rdo.put("dyffztcode", dyffztcode);
		rdo.put("xzqhdmcode", xzqhdmcode);
		rdo.put("xzbzcode", xzbzcode);
		rdo.put("bzcode", bzcode);
		rdo.put("shbzhm", shbzhm);
		rdo.put("xm", xm);
		rdo.put("rydjid", rydjid);
		rdo.put("dyffzt", dyffzt);
		rdo.put("ryzt", ryzt);
		rdo.put("dwdjid", dwdjid);
		rdo.put("gnbsbh", gnbsbh);
		rdo.put("dyhidden", dyhidden);

		return rdo;
	}

	/**
	 * 待遇状态对比
	 * 
	 * @author cjj
	 * @date 创建时间 2017-6-15
	 * @since V1.0
	 */
	public DataObject queryDyztdbInfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject(), pdo = new DataObject();
		DataStore dsTemp, dsPerInfo;
		StringBuffer sqlBF = new StringBuffer();
		String sfzhm, cxxm, gnbsbh, xzqhdm, xzbz, rydjid, dwdjid;

		sfzhm = para.getString("shbzhm");
		cxxm = para.getString("xm");
		rydjid = para.getString("rydjid");
		dwdjid = para.getString("dwdjid");
		gnbsbh = para.getString("gnbsbh");

		sqlBF.setLength(0);
		sqlBF.append(" select xzbz ");
		sqlBF.append("   from si3u.per_reg_join ");
		sqlBF.append("  where xzbz in ('101', '102')  ");
		sqlBF.append("    and zzrq is null ");
		sqlBF.append("    and rydjid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, rydjid);
		dsTemp = this.sql.executeQuery();

		if (dsTemp.rowCount() <= 0) {
			this.bizException("该人员没有正常参保的养老险种!");
		}
		xzbz = dsTemp.getString(0, "xzbz");

		if ("101".equals(xzbz)) {
			xzbz = "110";
		} else {
			xzbz = "120";
		}

		sqlBF.setLength(0);
		sqlBF.append(" select distinct a.xzqhdm ");
		sqlBF.append("   from be3u.bureau_natl a, ");
		sqlBF.append("        be3u.agency_natl b, ");
		sqlBF.append("        si3u.orgn_reg c ");
		sqlBF.append("  where a.rsjid = b.rsjid ");
		sqlBF.append("    and b.jbjgid=c.jbjgid ");
		sqlBF.append("    and c.dwdjid = ? ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		dsTemp = this.sql.executeQuery();

		if (dsTemp.rowCount() <= 0) {
			this.bizException("未取到该人员所属行政区划信息!");
		}
		xzqhdm = dsTemp.getString(0, "xzqhdm");

		pdo.clear();
		pdo.put("sfzhm", sfzhm);
		pdo.put("cxxm", cxxm);
		pdo.put("gnbsbh", gnbsbh);
		pdo.put("xzbz", xzbz);
		pdo.put("xzqhdm", xzqhdm);
		pdo = this.getOisiProxy(pdo);
		dsPerInfo = pdo.getDataStore("dsPerInfo");

		rdo.clear();
		rdo.put("ds", dsPerInfo);

		return rdo;
	}
	
	/**
	 * 批量查询人员待遇状态对比信息
	 * 
	 * @author 王文博
	 * @date 创建时间 2018-9-30
	 * @since V1.0
	 */
	public DataObject queryPldyztdbInfo(DataObject para) throws Exception {
		// 初始化变量
		DataObject rdo = new DataObject(), pdo = new DataObject();
		DataStore dsTemp = new DataStore();
		DataObject doTemp = new DataObject();
		DataStore dsPerInfo = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String ryid, sfzhm, cxxm, xzqhdm, xzbz, dwdjid;

		// 获取参数
		String piid = para.getString("piid");
		String gridName = para.getString("gridName");
		DataStore pds = para.getDataStore(gridName);
		String gnbsbh = para.getString("gnbsbh");

		if ("".equals(piid) || null == piid) {
			this.bizException("传入的流程实例编号为空！");
		}		
		dwdjid = (String) ProcessUtil.getEVarByEid(piid, "dwdjid"); 
		
		// 先取险种标志
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, b.xzbz ");
		sqlBF.append("   from si3u.per_reg a, ");
		sqlBF.append("        si3u.per_reg_join b ");
		sqlBF.append("  where a.rydjid = b.rydjid ");
		sqlBF.append("    and a.hdbz = '1' ");
		sqlBF.append("    and a.zzny is null ");
		sqlBF.append("    and b.zzrq is null ");
		sqlBF.append("    and b.xzbz in ('101', '102') ");
		sqlBF.append("    and a.ryid = ? ");
		String sqlGrXzbz = sqlBF.toString();
		
		// 单位险种标志
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.xzbz ");
		sqlBF.append("   from si3u.orgn_reg_join a ");
		sqlBF.append("  where a.xzbz in ('101', '102') ");
		sqlBF.append("    and a.zzny is null ");
		sqlBF.append("    and a.dwdjid = ? ");
		String sqlDwXzbz = sqlBF.toString();
		
		// 再取行政区划
		sqlBF.setLength(0);
		sqlBF.append(" select distinct a.xzqhdm ");
		sqlBF.append("   from be3u.bureau_natl a, ");
		sqlBF.append("        be3u.agency_natl b, ");
		sqlBF.append("        si3u.orgn_reg c ");
		sqlBF.append("  where a.rsjid = b.rsjid ");
		sqlBF.append("    and b.jbjgid=c.jbjgid ");
		sqlBF.append("    and c.dwdjid = ? ");
		String sqlXzqh = sqlBF.toString();

		// 循环查询
		for (int i = 0; i < pds.rowCount(); i++) {
			doTemp = pds.getRow(i);
			sfzhm = doTemp.getString( "shbzhm",doTemp.getString("sfzhm",doTemp.getString("yxzjhm","")));
			ryid = doTemp.getString( "ryid","");
			cxxm = doTemp.getString( "xm");
			
			// 先取个人xzbz，dwdjid
			this.sql.setSql(sqlGrXzbz);
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() <= 0) {
				// 取不到就取单位的xzbz，dwdjid
				this.sql.setSql(sqlDwXzbz);
				this.sql.setString(1, dwdjid);
				dsTemp = this.sql.executeQuery();
				
				if (dsTemp.rowCount() <= 0) {
					this.bizException("该人员没有正常参保的养老险种!");
				}
			}
			dwdjid = dsTemp.getString(0, "dwdjid");
			xzbz = dsTemp.getString(0, "xzbz");

			if ("101".equals(xzbz)) {
				xzbz = "110";
			} else {
				xzbz = "120";
			}
			
			// 取xzqhdm
			this.sql.setSql(sqlXzqh);
			this.sql.setString(1, dwdjid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() <= 0) {
				this.bizException("未取到该人员所属行政区划信息!");
			}
			xzqhdm = dsTemp.getString(0, "xzqhdm");
			
			// 调用接口，调用失败直接报错
			pdo.clear();
			pdo.put("sfzhm", sfzhm);
			pdo.put("cxxm", cxxm);
			pdo.put("gnbsbh", gnbsbh);
			pdo.put("xzbz", xzbz);
			pdo.put("xzqhdm", xzqhdm);
			pdo = this.getOisiProxy(pdo);
			dsPerInfo.combineDatastore(pdo.getDataStore("dsPerInfo"));
		}
		
		rdo.clear();
		rdo.put("ds", dsPerInfo);

		return rdo;
	}	
	
	/**
	 * 加载dsCode的方法
	 * 
	 * @author 王文博
	 * @date 创建时间 2018-9-30
	 * @since V1.0
	 */
	public DataObject loadDscode(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 组织待遇发放状态code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'DYFFZT' ");
		this.sql.setSql(sqlBF.toString());
		DataStore dyffztcode = this.sql.executeQuery();

		// 组织行政区划code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.xzqhdm value, a.xzqhmc content from be3u.district_natl a ");
		this.sql.setSql(sqlBF.toString());
		DataStore xzqhdmcode = this.sql.executeQuery();

		// 组织险种类型code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'XZBZ' ");
		this.sql.setSql(sqlBF.toString());
		DataStore xzbzcode = this.sql.executeQuery();

		// 组织备注code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'BZ' ");
		this.sql.setSql(sqlBF.toString());
		DataStore bzcode = this.sql.executeQuery();

		DataObject rdo = new DataObject();
		rdo.put("dyffztcode", dyffztcode);
		rdo.put("xzqhdmcode", xzqhdmcode);
		rdo.put("xzbzcode", xzbzcode);
		rdo.put("bzcode", bzcode);

		return rdo;
	}
	
	/**
	 * 调用服务
	 * 
	 * @author cjj
	 * @date 创建时间 2017-6-15
	 * @since V1.0
	 */
	public DataObject getOisiProxy(DataObject para) throws Exception {
		DataObject pdo = new DataObject();

		String sfzhm = para.getString("sfzhm");
		String cxxm = para.getString("cxxm");
		String gnbsbh = para.getString("gnbsbh");
		String xzbz = para.getString("xzbz");
		String xzqhdm = para.getString("xzqhdm");

		pdo.clear();
		pdo.put("sfzhm", sfzhm);
		pdo.put("cxxm", cxxm);
		pdo.put("gnbsbh", gnbsbh);
		pdo.put("xzbz", xzbz);
		pdo.put("xzqhdm", xzqhdm);
		String clbz = "", clxx = "";
		try {
			pdo = LocalServiceClient.invokeService("Pa3SitsService", "oisiProxy", pdo); //gzh mod 20170707
			clbz = pdo.getString("clbz");
			clxx = pdo.getString("clxx");
		} catch (Exception e) {
			this.bizException("调用接口失败:" + e.getMessage());
		}

		if (clbz == null || "".equals(clbz)) {
			this.bizException("请求关系转移前置系统服务时，返回的处理标志值不正确，请联系地纬公司予以解决！");
		}
		if (!"0".equals(clbz)) {
			this.bizException(clxx);
		}
		
		return pdo;
	}

	/**
	 * 方法简介.根据上传的报盘查询出人员信息
	 * 
	 * @author 高智慧 2017-7-5
	 */
	public DataObject chkBpPerInfoQueryUpload(DataObject para) throws Exception {

		DataObject rdo = new DataObject();
		DataStore ds = new DataStore(), uploadInfo, tableInfo = new DataStore(), err = new DataStore(), dsTemp = new DataStore();
		DataStore dsperinfo = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		CommonsMultipartFile file;

		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");

		if (null == file) {
			this.bizException("chkBpPerInfoQueryUpload 传入的参数file为空!");
		}

		setTableInfo(tableInfo, 1, "jnshbzhm", "济南市社会保障号", "String");
		setTableInfo(tableInfo, 2, "jnxm", "济南市姓名", "String");
		setTableInfo(tableInfo, 3, "jnxb", "济南市性别", "String");

		// 上传文件中的数据
		uploadInfo = HsuTools.getDsFromExcelFile(file, tableInfo);
		uploadInfo = ExcelTool.removeBlankRowWithTrim(uploadInfo);

		if (null == uploadInfo || uploadInfo.rowCount() <= 0) {
			this.bizException("导入的文件中没有数据!请检查!");
		}

		// 查询人员信息
		sqlBF.setLength(0);
		sqlBF.append("select a.ryid, a.xm, a.shbzhm, a.xb, a.cjgzrq, ");
		sqlBF.append("       b.bcxmz dacsrq, c.ltxrq ,c.dyqsny       ");
		sqlBF.append("   from si3u.per_reg a, si3u.per_natl_cmpl b, ad3u.emp_info c ");
		sqlBF.append("  where a.shbzhm = ? ");
		sqlBF.append("    and a.hdbz = '1' ");
		sqlBF.append("    and a.tblb like '%101%' ");
		sqlBF.append("    and a.bljyrq is null ");
		sqlBF.append("    and a.ryid = b.ryid(+) ");
		sqlBF.append("    and b.bcxmbh = 'DACSRQ' ");
		sqlBF.append("    and a.ryid = c.ryid(+) ");
		String perSql = sqlBF.toString();

		// 查询缴费年限
		sqlBF.setLength(0);
		sqlBF.append(" select sum(months_between(to_date(least(zzny, '202012'), 'yyyymm'), ");
		sqlBF.append("                          to_date(qsny, 'yyyymm')) + 1) jfnx ");
		sqlBF.append("  from si3u.per_rec ");
		sqlBF.append(" where nvl(glzdlb, '0') not in ('1', '2') ");
		sqlBF.append("   and length(qsny) = 6 ");
		sqlBF.append("   and length(zzny) = 6 ");
		sqlBF.append("   and ryid = ? ");
		String jfnxSql = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append("select sum(months_between(to_date(least(zzny, '200412'), 'yyyymm'), ");
		sqlBF.append("                          to_date(qsny, 'yyyymm')) + 1) jfnx ");
		sqlBF.append("  from si3u.per_rec ");
		sqlBF.append(" where nvl(glzdlb, '0') not in ('1', '2') ");
		sqlBF.append("   and length(qsny) = 6 ");
		sqlBF.append("   and length(zzny) = 6 ");
		sqlBF.append("   and qsny <= '200412' ");
		sqlBF.append("   and ryid = ? ");
		String jfnxSql1 = sqlBF.toString();

		for (int i = 0; i < uploadInfo.rowCount(); i++) {
			String jnshbzhm = uploadInfo.getString(i, "jnshbzhm");
			String jnxm = uploadInfo.getString(i, "jnxm");
			String jnxb = uploadInfo.getString(i, "jnxb");
			String cwxx = "";
			// 根据jnshbzhm 查询省直的相关信息
			this.sql.setSql(perSql);
			this.sql.setString(1, jnshbzhm);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() <= 0) {
				cwxx = "找不到该人员的信息!";
			}

			if (!"".equals(cwxx)) {
				err.addRow();
				err.put(err.rowCount() - 1, "jnshbzhm", jnshbzhm);
				err.put(err.rowCount() - 1, "jnxm", jnxm);
				err.put(err.rowCount() - 1, "cwxx", cwxx);
			} else {
				dsTemp.put(0, "jnxm", jnxm);
				dsTemp.put(0, "jnxb", jnxb);
				dsTemp.put(0, "jnshbzhm", jnshbzhm);

				String ltxrq = dsTemp.getString(0, "ltxrq");
				String ryid = dsTemp.getString(0, "ryid");
				String dyqsny = dsTemp.getString(0, "dyqsny");
				int jfnx, jfnx1;
				if (null == ltxrq || "".equals(ltxrq) || "null".equals(ltxrq)) {
					ltxrq = SiTools.getPerNatlCmpl(ryid, "LTXRQ", "");
					dsTemp.put(0, "ltxrq", ltxrq);
				}
				if (null == dyqsny || "".equals(dyqsny)
						|| "null".equals(dyqsny)) {
					if (null != ltxrq && !"".equals(ltxrq)
							&& !"null".equals(ltxrq)) {
						dsTemp.put(0, "dyqsny", DateUtil.addMonthToString(ltxrq, "yyyyMMdd", 1)
							.substring(0, 6));
					}
				}

				// 查询缴费月数
				this.sql.setSql(jfnxSql);
				this.sql.setString(1, ryid);
				ds = this.sql.executeQuery();
				if (ds.rowCount() > 0) {
					jfnx = ds.getInt(0, "jfnx");
				} else {
					jfnx = 0;
				}
				dsTemp.put(0, "ljjfys", jfnx);

				this.sql.setSql(jfnxSql1);
				this.sql.setString(1, ryid);
				ds = this.sql.executeQuery();
				if (ds.rowCount() > 0) {
					jfnx1 = ds.getInt(0, "jfnx");
				} else {
					jfnx1 = 0;
				}
				dsTemp.put(0, "ljjfys_200412", jfnx1);

				// 查询是否预发
				String sfyf = AdTools.getPerCmpl(ryid, "LSDYBZ", "0");
				dsTemp.put(0, "sfyf", sfyf);

				dsperinfo.combineDatastore(dsTemp);
			}

		}

		rdo.clear();
		rdo.put("dsperinfo", dsperinfo);
		rdo.put("dserrinfo", err);

		return rdo;

	}
	
	/**
	 * 按单位查询退休增员情况
	 * <p>
	 * 查询起始日期和终止日期之间办理增员的人员，按单位进行汇总。
	 * </p>
	 * 
	 * @param zfrylb 离退休类别
	 * @param qsrq\zzrq 起始终止日期
	 * @param blzyyy 办理增员原因
	 * @return txzyInfo 增员信息
	 * @author guanll
	 * @date 创建时间2017.07.25
	 * @since V1.0
	 */
	public DataObject queryTxzyInfoByOrgn(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, blzyyy, zfrylb, fhqsrq, fhzzrq, fhr, fhrSql;
		DataStore dsTxzyInfo = new DataStore();
		boolean flag;
		String jbjgid;

		// 接参数
		blzyyy = para.getString("blzyyy");
		zfrylb = para.getString("zfrylb");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		fhr = para.getString("fhr", "");
		String querylogid = QueryLogTool.saveQueryLog("退休增员情况", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		flag = true;
		blzyyy = HsuTools.replaceC2QCQ(blzyyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		
		// add by hyp 2012-11-08 新增经办机构id
		jbjgid = para.getString("jbjgid", "");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		// -------hyp end

		fhrSql = ""; 
		if (fhr != null && !"".equals(fhr)){
			fhrSql = " and a.fhr = '" + fhr + "' ";
		}
		
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "20491231";
		}

		// 如果复核日期为空，就不加复核日期的限制，这样可以查出未复核的人员
		if ((fhqsrq == null || "".equals(fhqsrq))
				&& (fhzzrq == null || "".equals(fhzzrq))) {
			flag = false;
		}

		if (fhqsrq == null || "".equals(fhqsrq)) {
			fhqsrq = "19500101";
		}
		if (fhzzrq == null || "".equals(fhzzrq)) {
			fhzzrq = "20491231";
		}

		// 取经办机构下起始终止日期之间有新增人员的单位，查询增员人数
		// wz 20100913 modify 代发机构类型为单位时 代发机构id为单位登记id
		sqlBF.append(" select r.dwdjid, r.dwbh, r.cbdwmc dwmc, b.jjlx, r.cbdwxz dwxz,");
		sqlBF.append("   	  count(distinct a.ryid) zyrs ");
		sqlBF.append("   from si3u.orgn_reg r, ");
		sqlBF.append("        ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg x, ");
		sqlBF.append("        biuv.orgn b ");
		sqlBF.append("  where ");
		 // modify by hyp 20121108
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("    r.jbjgid in (" + jbjgid + ") ");
		} 
		// hyp end
		sqlBF.append("	  and a.dwdjid = r.dwdjid ");
		sqlBF.append("	  and a.dqdydjid = x.dydjid ");
		sqlBF.append("	  and r.dwid = b.dwid ");
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and x.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and a.zfrylb in (").append(zfrylb).append(") ");
		}
		
		sqlBF.append("	  and to_char(x.blzysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ?  ");
		if (flag) {
			sqlBF.append("    and to_char(a.dyspsj,'yyyyMMdd') ");
			sqlBF.append("          between ? and ? ");
		}
		sqlBF.append(fhrSql);// 增加对复核人的判断 zz 20110722 add
		sqlBF.append("	group by r.dwdjid, r.dwbh, r.cbdwmc, b.jjlx, r.cbdwxz ");
		// wz 20100913 end

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		if (flag) {
			this.sql.setString(3, fhqsrq);
			this.sql.setString(4, fhzzrq);
		}

		dsTxzyInfo = this.sql.executeQuery();
		
		rdo.put("txzyinfo", dsTxzyInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsTxzyInfo.rowCount());

		return rdo;
	}
	
	/**
	 * 查询选定单位的新增人员信息
	 * <p>
	 * 查询选定单位的新增人员信息
	 * </p>
	 * 
	 * @param dfjg, dfjglb, qsrq, zzrq
	 * @param zfrylb, blzyyy
	 * @return txzyInfo 新增人员信息
	 * @author guanll
	 * @date 创建时间2017.07.25
	 * @since V1.0
	 */
	public DataObject queryTxzyXxByOrgn(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore ds, xzbzDs, dsTxzyInfo = new DataStore();
		DataStore ds_bf, dsStd, dsBase = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, blzyyy, zfrylb, ryid, cjgzrq, fhqsrq, fhzzrq;
		String fhr, fhrSql, dacsrq, qsny;
		String cxyfhbz, dwdjid, xzbz;
		double sjjfnx, stjfnx, zjfnx, txj, zfbt;
		boolean flag;

		// 接参数
		dwdjid = para.getString("dwdjid");
		zfrylb = para.getString("zfrylb");
		blzyyy = para.getString("blzyyy");
		cxyfhbz = para.getString("cxyfhbz", "0");// 查询已复核发放信息标志
		fhr = para.getString("fhr", "");// 增加复核人查询条件 zz 20110723 add
		// 为“1”时表示只查询已复核的发放信息
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		blzyyy = HsuTools.replaceC2QCQ(blzyyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		xzbzDs = getBillXzbzDs().getDataStore("xzbzds");
		dacsrq = "";
		sjjfnx = 0;
		stjfnx = 0;
		zjfnx = 0;
		cjgzrq = null;
		flag = true;

		if (dwdjid == null || "".equals(dwdjid)) {
			this.bizException("传入单位登记ID为空！");
		}
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		// 如果复核日期为空，就不加复核日期的限制，这样可以查出未复核的人员
		if ((fhqsrq == null || "".equals(fhqsrq))
				&& (fhzzrq == null || "".equals(fhzzrq))) {
			flag = false;
		}

		if (fhqsrq == null || "".equals(fhqsrq)) {
			fhqsrq = "19500101";
		}
		if (fhzzrq == null || "".equals(fhzzrq)) {
			fhzzrq = "25001231";
		}

		fhrSql = "";
		if (fhr != null && !"".equals(fhr)) {
			fhrSql = " and a.fhr = '" + fhr + "' ";
		}

		// 查询符合条件的新增养老人员登记信息(职工)
		sqlBF.setLength(0);
		sqlBF.append("select a.ryid, a.shbzhm, a.zfrylb, e.ltxrq, a.dyffzt,  ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz,  ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq,  ");
		sqlBF.append("        o.dwbh, o.cbdwmc, o.cbdwxz, a.dyxsksny, a.yhzh,  ");
		sqlBF.append("        e.sjjfnx, e.stjfnx, e.cjgzrq, a.dylqlb,  ");
		sqlBF.append("        a.dfjglb, 0 bfje, dyspr, dyspsj ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid(+) ");// 遗属不存在ad3u.emp_info表
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
//		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and o.dwdjid = ? ");
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and a.zfrylb in (").append(zfrylb).append(") ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append(" and a.dyspbz = '1' ");
		}

		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (flag) {
			sqlBF.append("and to_char(a.dyspsj, 'yyyyMMdd') between ? and ? ");
		}
		sqlBF.append(fhrSql);

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		this.sql.setString(2, qsrq);
		this.sql.setString(3, zzrq);
		if (flag) {
			this.sql.setString(4, fhqsrq);
			this.sql.setString(5, fhzzrq);
		}

		dsTxzyInfo = this.sql.executeQuery();

		for (int i = 0; i < dsTxzyInfo.rowCount(); i++) {
			ryid = dsTxzyInfo.getString(i, "ryid");
			stjfnx = dsTxzyInfo.getDouble(i, "stjfnx");
			sjjfnx = dsTxzyInfo.getDouble(i, "sjjfnx");
			// wz 20110315 add
			// 由于存在四舍五入的问题，故总的年限如果等于视同实际缴费年限保留两位小数之后的和，那么和实际上的总年限就会有误差。所有对这个地方进行了更改
			zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);
			dsTxzyInfo.put(i, "zjfnx", zjfnx);
			txj = 0;

			// 查询待遇最小年月
			sqlBF.setLength(0);
			sqlBF.append(" select min(a.qsny) qsny ");
			sqlBF.append("           from ad3u.per_giv_month_std a ");
			sqlBF.append("          where a.ryid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			qsny = ds.getString(0, "qsny");

			// 正常发放的已复核人员
			sqlBF.setLength(0);
			sqlBF.append(" select   ");
			for (int m = 0, len = xzbzDs.rowCount(); m < len; m++) {
				xzbz = xzbzDs.getString(m, "code");
				sqlBF.append("    nvl(sum(decode(xzbz,'" + xzbz
						+ "', btje, 0)), 0)  txj" + xzbz + ",");
			}
			sqlBF.append("        nvl(sum(btje), 0) txj, ");
			sqlBF.append("        nvl(sum(decode(btbh, 'B1F3', btje, 'A1F3', btje, 0)),0) zfbt ");// add.yxt.20140620.增加查询住房补贴。威海需求【WHXM-606】

			sqlBF.append("   from ad3u.per_giv_month_std ");
			sqlBF.append("	where ryid = ? ");
			sqlBF.append("	  and ? between qsny and nvl(zzny, '205012') ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, qsny);

			dsStd = this.sql.executeQuery();
			txj = dsStd.getDouble(0, "txj");
			zfbt = dsStd.getDouble(0, "zfbt");

			dsTxzyInfo.put(i, "txj", txj);
			dsTxzyInfo.put(i, "zfbt", zfbt);
			dsTxzyInfo.put(i, "txjsbff", txj - zfbt);

			// 查询人员基本信息
			sqlBF.setLength(0);
			sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
			sqlBF.append("		  a.zyjszwjb, b.xzzw, a.gjzyzgdj, b.ygxs, a.lxrdh, ");
			sqlBF.append("        a.txdz ");
			sqlBF.append("   from biuv.person a ,");
			sqlBF.append("        ad3u.per_info b ");
			sqlBF.append("	where a.ryid = ? ");
			sqlBF.append("	  and a.ryid = b.ryid ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBase = this.sql.executeQuery();
			if (dsBase.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}

			dsTxzyInfo.put(i, "xm", dsBase.getString(0, "xm"));
			dsTxzyInfo.put(i, "shbzhm", dsBase.getString(0, "shbzhm"));
			dsTxzyInfo.put(i, "xb", dsBase.getString(0, "xb"));
			dsTxzyInfo.put(i, "grsf", dsBase.getString(0, "grsf"));
			dsTxzyInfo.put(i, "csrq", dsBase.getString(0, "csrq"));
			dsTxzyInfo.put(i, "zyjszwjb", dsBase.getString(0, "zyjszwjb"));
			dsTxzyInfo.put(i, "xzzw", dsBase.getString(0, "xzzw"));
			dsTxzyInfo.put(i, "gjzyzgdj", dsBase.getString(0, "gjzyzgdj"));
			dsTxzyInfo.put(i, "ygxs", dsBase.getString(0, "ygxs"));
			dsTxzyInfo.put(i, "lxdh", dsBase.getString(0, "lxrdh"));
			dsTxzyInfo.put(i, "txdz", dsBase.getString(0, "txdz"));

			if (ryid != null && !"".equals(ryid)) {
				this.sql.setSql(" select cjgzrq, dacsrq from ad3u.emp_info where ryid = ? ");
				this.sql.setString(1, ryid);
				ds = this.sql.executeQuery();
				if (ds.rowCount() > 0) {
					cjgzrq = ds.getString(0, "cjgzrq");
					dacsrq = ds.getString(0, "dacsrq");
				}
			}
			dsTxzyInfo.put(i, "cjgzrq", cjgzrq);
			dsTxzyInfo.put(i, "dacsrq", dacsrq);

			stjfnx = dsTxzyInfo.getDouble(i, "stjfnx");
			sjjfnx = dsTxzyInfo.getDouble(i, "sjjfnx");
			// 由于存在四舍五入的问题，故总的年限如果等于视同实际缴费年限保留两位小数之后的和，那么和实际上的总年限就会有误差。所有对这个地方进行了更改
			zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);

			// 补发
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(p.btje), 0) bfje ");
			sqlBF.append("   from ad3u.per_giv_detl p  ");
			// modify 修改获取补发的条件 韦超 20151103
			sqlBF.append("  where p.fsyy = '2' ");
			sqlBF.append("    and p.fflb = 'A'  ");
			sqlBF.append("    and p.ryid = ?");
			// modify 修改获取补发的条件 end
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds_bf = this.sql.executeQuery();

			dsTxzyInfo.put(i, "bfje", ds_bf.getDouble(0, "bfje"));
			dsTxzyInfo.put(i, "zjfnx", zjfnx);

			// 重算标志
			sqlBF.setLength(0);
			sqlBF.append("   select 1  ");
			sqlBF.append("     from ad3u.per_cal_his h  ");
			sqlBF.append("    where ryid = ?  ");
			sqlBF.append("      and h.xh > 1  ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dsTxzyInfo.put(i, "csbz", "1");
			} else {
				dsTxzyInfo.put(i, "csbz", "0");
			}
		}
		// wz 20110304 end

		dsTxzyInfo = dsTxzyInfo.sortdesc("blzyrq");

		ds = new DataStore();
		ds.addRow(para);

		rdo.put("txzyinfo", dsTxzyInfo);
		rdo.put("orgninfo", ds);

		return rdo;
	}
	
	/**
	 * 按单位查询退休减员情况
	 * <p>
	 * 查询起始日期和终止日期之间办理减员的人员，按单位进行汇总。
	 * </p>
	 * 
	 * @param zfrylb 离退休类别
	 * @param qsrq\zzrq 减员起始终止日期
	 * @param dyzzyy 待遇终止原因
	 * @return txjyInfo 减员信息
	 * @author guanll
	 * @date 创建时间2017.07.25
	 * @since V1.0
	 */
	public DataObject queryTxjyInfoByOrgn(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, dyzzyy, zfrylb;
		DataStore dsTxjyInfo = new DataStore();
		String jbjgid;

		// 接参数
		dyzzyy = para.getString("dyzzyy");
		zfrylb = para.getString("zfrylb");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		dyzzyy = HsuTools.replaceC2QCQ(dyzzyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		// add by hyp 2012-11-08
		jbjgid = para.getString("jbjgid", "");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}
		String querylogid = QueryLogTool.saveQueryLog("退休减员情况", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 取经办机构下起始终止日期之间有减少人员的单位，查询减员人数
		// wz 20100913 modify 代发机构类型为单位时 代发机构id为单位登记id
		sqlBF.append(" select r.dwdjid, r.dwbh, r.cbdwmc dwmc,b.jjlx, r.cbdwxz dwxz,");
		sqlBF.append("   	  count(distinct a.ryid) jyrs ");
		sqlBF.append("   from si3u.orgn_reg r, ");
		sqlBF.append("        ad3u.per_reg a, ");
		sqlBF.append("        ad3u.per_info x, ");
		sqlBF.append("        biuv.orgn b ");
		sqlBF.append("  where ");
		// modify by hyp 20121108
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("    r.jbjgid in (" + jbjgid + ") ");
		}
		
		// hyp end
		sqlBF.append("	  and a.dwdjid = r.dwdjid ");
		sqlBF.append("	  and a.ryid = x.ryid ");
		sqlBF.append("	  and b.dwid = r.dwid ");
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and a.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and x.zfrylb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and to_char(a.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ?  ");
		sqlBF.append("	group by r.dwdjid, r.dwbh, r.cbdwmc, b.jjlx, r.cbdwxz ");
		// wz 20100913 end

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);

		dsTxjyInfo = this.sql.executeQuery();

		rdo.put("dsTxjyInfo", dsTxjyInfo);

		QueryLogTool.updateQueryLog(querylogid, dsTxjyInfo.rowCount());

		return rdo;
	}

	/**
	 * 查询选定单位的减少人员信息
	 * <p>
	 * 查询选定单位的减少人员信息
	 * </p>
	 * 
	 * @param dfjg, dfjglb, qsrq, zzrq
	 * @param zfrylb, dyzzyy
	 * @return txjyInfo 减少人员信息
	 * @author guanll
	 * @date 创建时间2017.07.25
	 * @since V1.0
	 */
	public DataObject queryTxjyXxByOrgn(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, dyzzyy, zfrylb, ryid, jyrq, maxNy;
		DataStore ds = new DataStore(), dsTxjyInfo = new DataStore();
		String sqlNatl, sqlMaxNy, sqlTxj, sqlKj, sqlSzfx;
		double txj, ddwff, kjje, zhfh, szf, fxj;
		String dwdjid;
		double stjfnx, sjjfnx, zjfnx;

		// 接参数
		dwdjid = para.getString("dwdjid");
		dyzzyy = para.getString("dyzzyy");
		zfrylb = para.getString("zfrylb");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		dyzzyy = HsuTools.replaceC2QCQ(dyzzyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		if (dwdjid == null || "".equals(dwdjid)) {
			this.bizException("传入代发机构ID为空！");
		}
	
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		// 查询符合条件的办理减员的养老人员登记信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.shbzhm, a.ryid, a.zfrylb, e.ltxrq, b.jyrq, ");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, '' xm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszw, a.xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, a.yhzh, a.dylqlb, "); // kxsh-add-@20111125:新增查询dwxz、yhzh、dylqlb
		sqlBF.append("        a.ygxs, e.cjgzrq, e.sjjfnx, e.stjfnx, e.dacsrq "); 
		sqlBF.append("	 from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and b.bljyyy in (").append(dyzzyy).append(") ");// modify by zt 2017.11.29
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and a.zfrylb in (").append(zfrylb).append(") ");
		}
		
		sqlBF.append("	  and b.dwdjid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') between ? and ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		this.sql.setString(2, qsrq);
		this.sql.setString(3, zzrq);

		dsTxjyInfo = this.sql.executeQuery();

		// 取人员基本信息的sql（职工）
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, a.gjzyzgdj, a.lxrdh, a.txdz ");
		sqlBF.append("   from biuv.person a ");
		sqlBF.append("	where a.ryid = ? ");
		sqlNatl = sqlBF.toString();

		// 取最大拨付年月的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(max(zzny), '204912') maxny ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlMaxNy = sqlBF.toString();

		// 查询退休金的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) txj, ");
		sqlBF.append(" 	      nvl(sum(decode(b.btlb, '901', a.btje, 0)), 0) ddwff ");
		sqlBF.append("   from ad3u.per_giv_month_std a,  ");
		sqlBF.append(" 	      ad3u.giv_item b ");
		sqlBF.append("  where a.btbh = b.btbh ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and ? between a.qsny and nvl(a.zzny,'204912') ");
		sqlTxj = sqlBF.toString();

		// 扣减金额
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) kjje ");
		sqlBF.append("   from ad3u.per_giv_detl a, ");
		sqlBF.append("        ad3u.per_info b ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.bz = '养老待遇追回补发' ");
		sqlBF.append("    and a.fsyy = '2' ");
		sqlBF.append("    and a.fflb in('A','D') ");
		sqlBF.append("    and a.ryid = ? ");
		sqlKj = sqlBF.toString();

		// 丧葬费、抚恤金、个人账户返还
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(a.btbh, 'A1D1', a.btje, 'B1D1', a.btje, 0)), 0) szf, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A1D2', a.btje, 'B1D2', a.btje, 0)), 0) fxj, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A107', a.btje, 'A10R', a.btje, 0)), 0) zhfh ");
		sqlBF.append("   from ad3u.per_giv_detl a ");
		sqlBF.append("  where ryid = ? ");
		sqlSzfx = sqlBF.toString();

		// 查询人员基本信息,待遇信息
		for (int i = 0; i < dsTxjyInfo.rowCount(); i++) {
			ryid = dsTxjyInfo.getString(i, "ryid");
			jyrq = dsTxjyInfo.getString(i, "jyrq");
			stjfnx = dsTxjyInfo.getDouble(i, "stjfnx");
			sjjfnx = dsTxjyInfo.getDouble(i, "sjjfnx");
			zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);

			this.sql.setSql(sqlNatl);
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}
			dsTxjyInfo.put(i, "xm", ds.getString(0, "xm"));
			dsTxjyInfo.put(i, "xb", ds.getString(0, "xb"));
			dsTxjyInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsTxjyInfo.put(i, "csrq", ds.getString(0, "csrq"));
			dsTxjyInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsTxjyInfo.put(i, "zyjszwjb", ds.getString(0, "zyjszwjb"));
			dsTxjyInfo.put(i, "gjzyzgdj", ds.getString(0, "gjzyzgdj"));
			dsTxjyInfo.put(i, "lxrdh", ds.getString(0, "lxrdh"));
			dsTxjyInfo.put(i, "txdz", ds.getString(0, "txdz"));

			dsTxjyInfo.put(i, "zjfnx", zjfnx);
			// kxsh-add-end

			// 退休金 取最大发放年月的待遇金额，如果取不到则取死亡当月待遇金额
			this.sql.setSql(sqlMaxNy);
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			maxNy = ds.getString(0, "maxny");
			if ("204912".equals(maxNy) && (jyrq != null && !"".equals(jyrq))) {
				maxNy = jyrq.substring(0, 6);
			}

			// 退休金
			this.sql.setSql(sqlTxj);
			this.sql.setString(1, ryid);
			this.sql.setString(2, maxNy);// 把前面查询的最大年月作为查询条件 modi by zz
			// 20110516
			ds = this.sql.executeQuery();
			txj = ds.getDouble(0, "txj");
			ddwff = ds.getDouble(0, "ddwff");

			// 扣减
			this.sql.setSql(sqlKj);
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			kjje = ds.getDouble(0, "kjje");

			// 丧葬费、抚恤金、个人账户返还
			this.sql.setSql(sqlSzfx);
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			szf = ds.getDouble(0, "szf");
			fxj = ds.getDouble(0, "fxj");
			zhfh = ds.getDouble(0, "zhfh");

			dsTxjyInfo.put(i, "txj", txj);
			dsTxjyInfo.put(i, "ddwff", ddwff);
			dsTxjyInfo.put(i, "kjje", kjje);
			dsTxjyInfo.put(i, "szf", szf);
			dsTxjyInfo.put(i, "fxj", fxj);
			dsTxjyInfo.put(i, "zhfh", zhfh);
		}

		dsTxjyInfo = dsTxjyInfo.sortdesc("bljyrq");
		ds = new DataStore();
		ds.addRow(para);

		rdo.put("txjyinfo", dsTxjyInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}
	
	/**
	 * 方法简介.报盘导入 核三版本
	 * 
	 * @author guanll
	 * @date 创建时间 2017.07.24
	 * @since V1.0
	 */
	public DataObject chkBpsjUpload_common(DataObject para) throws Exception {
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore();
		DataStore dsRight = new DataStore();
		String errTest, xm, shbzhm;
		int beginNum;
		
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "xm", "姓名", "String");
		setTableInfo(tableInfo, 1, "shbzhm", "身份证号码", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}
		for (int i = 0; i < ds.rowCount(); i++) {
			errTest = "";
			shbzhm = StringUtil.trim(ds.getString(i, "shbzhm"));
			xm = StringUtil.trim(ds.getString(i, "xm"));
			if (xm == null || "".equals(xm) || xm.length() == 0) {
				errTest = errTest + "姓名不能为空！";
			}
			
			if (shbzhm == null || "".equals(shbzhm)) {
				errTest = errTest + "身份证号码不能为空！";
			} 

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "shbzhm", shbzhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "bz", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "shbzhm", shbzhm);
				dsRight.put(rowR, "xm", xm);
			}
			
		}

		// 对正确的数据进行重复性检验
		beginNum = -1;
		shbzhm = "";
		dsRight = dsRight.sort("sfzhm");
		if (dsRight.rowCount() > 0) {
			shbzhm = StringUtil.trim(dsRight.getString(0, "shbzhm"));
		}

		for (int i = 1, n = dsRight.rowCount(); i < n; i++) {

			if (shbzhm.equals(StringUtil.trim(dsRight.getString(i, "shbzhm")))) {

				dsError.addRow(dsRight.getRow(i));
				dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复");

				dsRight.delRow(i);

				n--;
				i--;
				beginNum = i;
			} else {
				shbzhm = StringUtil.trim(dsRight.getString(i, "shbzhm"));

				if (beginNum >= 0) {

					dsError.addRow(dsRight.getRow(beginNum));
					dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复");

					dsRight.delRow(beginNum);

					n--;
					i--;
					beginNum = -1;
				}
			}
		}
		if (beginNum >= 0) {

			dsError.addRow(dsRight.getRow(beginNum));
			dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复");

			dsRight.delRow(beginNum);
		}
		
		rdo.clear();
		rdo.put("perinfo", dsRight);
		rdo.put("errinfo", dsError);
		return rdo;
	}
	
	/**
	 * 方法简介.报盘导入，日照客户化
	 * 
	 * @author 房绍旖 2018.12.29
	 */
	public DataObject chkBpsjUpload_3711(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore();
		DataStore dsRight = new DataStore();
		DataStore dsPer = new DataStore();
		String errTest, xm, xb, shbzhm, hhrq, sqlPer, shbzhmtemp;
		int beginNum;
		
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "xm", "姓名", "String");
		setTableInfo(tableInfo, 1, "xb", "性别", "String");
		setTableInfo(tableInfo, 2, "shbzhm", "身份证号码", "String");
		setTableInfo(tableInfo, 3, "hhrq", "火化日期", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}
		
		sqlBF.setLength(0);
		sqlBF.append(" select xm, shbzhm ");
		sqlBF.append("	 from biuv.person ");
		sqlBF.append("  where (shbzhm  = ? or shbzhm = ? ) ");
		sqlPer = sqlBF.toString();
		
		for (int i = 0; i < ds.rowCount(); i++) {
			errTest = "";
			shbzhm = StringUtil.trim(ds.getString(i, "shbzhm"));
			xm = StringUtil.trim(ds.getString(i, "xm"));
			xb = StringUtil.trim(ds.getString(i, "xb"));
			hhrq = StringUtil.trim(ds.getString(i, "hhrq"));
			if (xm == null || "".equals(xm) || xm.length() == 0) {
				errTest = errTest + "姓名不能为空！";
			}
			
			if (shbzhm == null || "".equals(shbzhm)) {
				errTest = errTest + "身份证号码不能为空！";
			} 
			shbzhmtemp = SiTools.fixPersonIDCode(shbzhm);//解决15位的就会报错问题，用公用方法转换mod mxh 20160901
			
			this.sql.setSql(sqlPer);
			this.sql.setString(1, shbzhm);
			this.sql.setString(2, shbzhmtemp);
			dsPer = this.sql.executeQuery();

			if (dsPer.rowCount() == 0) {
				errTest = errTest + "系统中不存在身份证号码为[" + shbzhm + "]" + "的人员！";
			} else if (dsPer.rowCount() > 1) {
				errTest = errTest + "系统中存在多条身份证号码为[" + shbzhm + "]" + "的人员！";
			} else {
				if (xm != null && !xm.equals(dsPer.getString(0, "xm"))) {
					errTest = errTest + "该人员姓名与系统中的姓名["
							+ dsPer.getString(0, "xm") + "]不一致！";
				}
			}
			
			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "shbzhm", shbzhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "xb", xb);
				dsError.put(row, "bz", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "shbzhm", shbzhm);
				dsRight.put(rowR, "xm", xm);
				dsRight.put(rowR, "xb", xb);
				dsRight.put(rowR, "hhrq", hhrq);
			}
			
		}

		// 对正确的数据进行重复性检验
		beginNum = -1;
		shbzhm = "";
		dsRight = dsRight.sort("sfzhm");
		if (dsRight.rowCount() > 0) {
			shbzhm = StringUtil.trim(dsRight.getString(0, "shbzhm"));
		}

		for (int i = 1, n = dsRight.rowCount(); i < n; i++) {

			if (shbzhm.equals(StringUtil.trim(dsRight.getString(i, "shbzhm")))) {

				dsError.addRow(dsRight.getRow(i));
				dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复");

				dsRight.delRow(i);

				n--;
				i--;
				beginNum = i;
			} else {
				shbzhm = StringUtil.trim(dsRight.getString(i, "shbzhm"));

				if (beginNum >= 0) {

					dsError.addRow(dsRight.getRow(beginNum));
					dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复");

					dsRight.delRow(beginNum);

					n--;
					i--;
					beginNum = -1;
				}
			}
		}
		if (beginNum >= 0) {

			dsError.addRow(dsRight.getRow(beginNum));
			dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复");

			dsRight.delRow(beginNum);
		}
		
		rdo.clear();
		rdo.put("perinfo", dsRight);
		rdo.put("errinfo", dsError);
		return rdo;
	}
	
	/**
	 * 方法简介.认证比对 核三版本
	 * 
	 * @author guanll
	 * @date 2017.07.24
	 */
	public DataObject scrzSjbd_common(DataObject para) throws Exception {
		DataStore rzbdjg = new DataStore();
		DataStore rzbdjgs = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String xm, shbzhm, shbzhmtemp, jbjgid, sqid,dfjgid,dfjgmc;
		String jbjgbh, jbjgmc, sqbh, sqmc;
		
		DataStore ds = para.getDataStore("dwBatStdPause");
		DataStore dsTemp;// add by zt 2017.11.20

		if(ds.rowCount() <= 0){
			this.bizException("传入的死亡人员信息为空！");
		}
		
		sqlBF.setLength(0);
		sqlBF.append(" select o.jbjgid, o.dwid, o.dwbh, o.cbdwmc, p.ryid, ");
		sqlBF.append("	      p.xm, p.xb, p.shbzhm, b.lxrdh, b.jtzz, ");
		sqlBF.append("		  b.txdz, b.hkszd, p.sqid, p.dyffzt, b.swrq, ");//增加查询字段dyffzt,hmf-2018-9-5
		sqlBF.append("		  p.zfrylb ltxlb, p.yhzh, p.dfjgid ");
		sqlBF.append(" from si3u.orgn_reg o ,");
		sqlBF.append("		ad3u.per_info p, ");
		sqlBF.append("		biuv.person b ");
		sqlBF.append("	where p.dwdjid = o.dwdjid ");
		sqlBF.append("	  and p.ryid = b.ryid ");
		sqlBF.append("	  and nvl(p.dyspbz,0) = '1' ");//去掉dyffzt<>'3'的限制，hmf-2018-9-5
		sqlBF.append("    and p.sszfrq in ('A', 'B') ");
		sqlBF.append("	  and trim(p.xm )= ?");
		sqlBF.append("    and (p.shbzhm  = ?  ");
		sqlBF.append("	        or p.shbzhm = ? ) ");

		for (int i = 0; i < ds.rowCount(); i++) {
			xm = ds.getString(i, "xm");
			shbzhm = ds.getString(i, "shbzhm");
			shbzhmtemp = SiTools.fixPersonIDCode(shbzhm);//解决15位的就会报错问题，用公用方法转换mod mxh 20160901
			
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, xm);
			this.sql.setString(2, shbzhm);
			this.sql.setString(3, shbzhmtemp);
			rzbdjg = this.sql.executeQuery();
			
			for(int j = 0, n = rzbdjg.rowCount(); j < n; j ++){
				jbjgid = rzbdjg.getString(j, "jbjgid");
				sqid = rzbdjg.getString(j, "sqid");
				dfjgid = rzbdjg.getString(j, "dfjgid");
				dfjgmc = HsuTools.getDfjgmc(dfjgid);
				
				this.sql.setSql(" select jbjgbh, jbjgmc from be3u.agency_natl where jbjgid = ? ");
				this.sql.setString(1, jbjgid);
				dsTemp = this.sql.executeQuery();
				if(dsTemp.rowCount() > 0){
					jbjgbh = dsTemp.getString(0, "jbjgbh");
					jbjgmc = dsTemp.getString(0, "jbjgmc");
				}else{
					jbjgmc = "";
					jbjgbh = "";
				}
				// 社区信息
				this.sql.setSql(" select sqbh, sqmc from be3u.community_natl where sqid = ? ");
				this.sql.setString(1, sqid);
				dsTemp = this.sql.executeQuery();
				if(dsTemp.rowCount() > 0){
					sqmc = dsTemp.getString(0, "sqmc");
					sqbh = dsTemp.getString(0, "sqbh");
				}else{
					sqbh = "";
					sqmc = "";
				}
				rzbdjgs.addRow(rzbdjg.getRow(j));
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "wjxm", xm);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "wjshbzhm", shbzhm);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "jbjgbh", jbjgbh);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "jbjgmc", jbjgmc);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "sqbh", sqbh);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "sqmc", sqmc);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "dfjgmc", dfjgmc);
			}
		}
		DataObject vdo = new DataObject();
		vdo.put("rzbdjgs", rzbdjgs);
		return vdo;
	}
	
	/**
	 * 方法简介.认证比对，日照客户化
	 * 
	 * @author 房绍旖 2018.12.29
	 */
	public DataObject scrzSjbd_3711(DataObject para) throws Exception {
		DataStore rzbdjg = new DataStore();
		DataStore rzbdjgs = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		String xm, shbzhm, shbzhmtemp, xb, hhrq, jbjgid, sqid;
		String jbjgbh, jbjgmc, sqbh, sqmc;
		
		DataStore ds = para.getDataStore("dwBatStdPause");
		DataStore dsTemp;// add by zt 2017.11.20

		if(ds.rowCount() <= 0){
			this.bizException("传入的死亡人员信息为空！");
		}
		
		sqlBF.setLength(0);
		sqlBF.append(" select o.jbjgid, o.dwid, o.dwbh, o.cbdwmc, p.ryid, ");
		sqlBF.append("	      p.xm, p.xb, p.shbzhm, b.lxrdh, b.jtzz, ");
		sqlBF.append("		  b.txdz, b.hkszd, p.sqid, p.dyffzt ");//增加查询字段dyffzt,hmf-2018-9-5
		sqlBF.append(" from si3u.orgn_reg o ,");
		sqlBF.append("		ad3u.per_info p, ");
		sqlBF.append("		biuv.person b ");
		sqlBF.append("	where p.dwdjid = o.dwdjid ");
		sqlBF.append("	  and p.ryid = b.ryid ");
		sqlBF.append("	  and nvl(p.dyspbz,0) = '1' ");//去掉dyffzt<>'3'的限制，hmf-2018-9-5
		sqlBF.append("    and p.sszfrq in ('A', 'B') ");
		sqlBF.append("	  and trim(p.xm )= ?");
		sqlBF.append("    and (p.shbzhm  = ?  ");
		sqlBF.append("	        or p.shbzhm = ? ) ");

		for (int i = 0; i < ds.rowCount(); i++) {
			xm = ds.getString(i, "xm");
			shbzhm = ds.getString(i, "shbzhm");
			xb = ds.getString(i, "xb");
			hhrq = ds.getRow(i).getDateToString("hhrq", "yyyyMMdd");
			shbzhmtemp = SiTools.fixPersonIDCode(shbzhm);//解决15位的就会报错问题，用公用方法转换mod mxh 20160901
			
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, xm);
			this.sql.setString(2, shbzhm);
			this.sql.setString(3, shbzhmtemp);
			rzbdjg = this.sql.executeQuery();
			
			for(int j = 0, n = rzbdjg.rowCount(); j < n; j ++){
				jbjgid = rzbdjg.getString(j, "jbjgid");
				sqid = rzbdjg.getString(j, "sqid");
				
				this.sql.setSql(" select jbjgbh, jbjgmc from be3u.agency_natl where jbjgid = ? ");
				this.sql.setString(1, jbjgid);
				dsTemp = this.sql.executeQuery();
				if(dsTemp.rowCount() > 0){
					jbjgbh = dsTemp.getString(0, "jbjgbh");
					jbjgmc = dsTemp.getString(0, "jbjgmc");
				}else{
					jbjgmc = "";
					jbjgbh = "";
				}
				// 社区信息
				this.sql.setSql(" select sqbh, sqmc from be3u.community_natl where sqid = ? ");
				this.sql.setString(1, sqid);
				dsTemp = this.sql.executeQuery();
				if(dsTemp.rowCount() > 0){
					sqmc = dsTemp.getString(0, "sqmc");
					sqbh = dsTemp.getString(0, "sqbh");
				}else{
					sqbh = "";
					sqmc = "";
				}
				rzbdjgs.addRow(rzbdjg.getRow(j));
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "wjxm", xm);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "wjshbzhm", shbzhm);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "wjxb", xb);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "hhrq", hhrq);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "jbjgbh", jbjgbh);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "jbjgmc", jbjgmc);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "sqbh", sqbh);
				rzbdjgs.put(rzbdjgs.rowCount() - 1, "sqmc", sqmc);
			}
		}
		DataObject vdo = new DataObject();
		vdo.put("rzbdjgs", rzbdjgs);
		return vdo;
	}
	
	/**
	 * 查询离退休基本信息
	 * 
	 * @author guanll
	 * @date 创建时间2017.08.02
	 * @since V1.0
	 */
	public final DataObject queryBfryInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		String jbjgid, ffny, dfjglb, dfjgid, dwdjid, jdid, sqid, zfrylb, csrqQsrq, csrqZzrq, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq,btlb,dyffzt;
		StringBuffer sqlBF = new StringBuffer();
		String queryJe, queryDfjg, queryDw, queryJbxx, queryJd, querySq, dfjgbh, dfjgmc, ryid;
		DataStore dsPer, dsTemp;

		// 接参数
		jbjgid = StringUtil.trim(para.getString("jbjgid"));
		ffny = StringUtil.trim(para.getString("ffny"));
		dfjglb = StringUtil.trim(para.getString("ffztlb"));
		dfjgid = StringUtil.trim(para.getString("ffztid"));
		dwdjid = StringUtil.trim(para.getString("dwdjid"));
		jdid = StringUtil.trim(para.getString("jdid"));
		sqid = StringUtil.trim(para.getString("sqid"));
		zfrylb = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("zfrylb")));
		csrqQsrq = StringUtil.trim(para.getDateToString("csrqQsrq", "yyyyMMdd"));
		csrqZzrq = StringUtil.trim(para.getDateToString("csrqZzrq", "yyyyMMdd"));
		cjgzQsrq = StringUtil.trim(para.getDateToString("cjgzQsrq", "yyyyMMdd"));
		cjgzZzrq = StringUtil.trim(para.getDateToString("cjgzZzrq", "yyyyMMdd"));
		ltxQsrq = StringUtil.trim(para.getDateToString("ltxQsrq", "yyyyMMdd"));
		ltxZzrq = StringUtil.trim(para.getDateToString("ltxZzrq", "yyyyMMdd"));
		ffny = StringUtil.trim(para.getDateToString("ffny", "yyyyMM"));
		btlb = StringUtil.trim(para.getString("btlb",""));
		dyffzt = StringUtil.trim(para.getString("dyffzt","")); //待遇发放状态 - xrg 20190409

		String querylogid = QueryLogTool.saveQueryLog("拨付人员基本信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 对参数进行处理
		// 出生日期
		if (csrqQsrq != null && !"".equals(csrqQsrq) && csrqZzrq != null
				&& !"".equals(csrqZzrq)) {
			if (csrqQsrq.compareTo(csrqZzrq) > 0) {
				this.bizException("输入的出生日期起始日期大于终止日期！");
			}
		}
		// 参加工作日期
		if (cjgzQsrq != null && !"".equals(cjgzQsrq) && cjgzZzrq != null
				&& !"".equals(cjgzZzrq)) {
			if (cjgzQsrq.compareTo(cjgzZzrq) > 0) {
				this.bizException("输入的参加工作起始日期大于终止日期！");
			}
		}
		// 离退休日期
		if (ltxQsrq != null && !"".equals(ltxQsrq) && ltxZzrq != null
				&& !"".equals(ltxZzrq)) {
			if (ltxQsrq.compareTo(ltxZzrq) > 0) {
				this.bizException("输入的离退休日期起始日期大于终止日期！");
			}
		}
		// 发放年月，用于取退休金
		if (ffny == null || "".equals(ffny)) {
			this.bizException("传入发放年月为空!");
		}
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入经办机构id为空!");
		}

		sqlBF.append("select a.ryid, a.shbzhm, a.xm, ");
		sqlBF.append("       a.xb, a.csrq, c.ltxrq, a.zfrylb, ");
		sqlBF.append("       a.dfjglb, a.dyxsksny, a.yhzh, a.dfjgid, d.cjgzrq, ");
		sqlBF.append("       a.dwdjid, a.jdid, a.sqid, a.dyffzt ");
		sqlBF.append("  from ad3u.per_info a, ");
		sqlBF.append("       si3u.per_reg d, ");
		sqlBF.append("       ad3u.emp_info c ");
		sqlBF.append(" where a.ryid = d.ryid(+) ");
		sqlBF.append("   and a.ryid = c.ryid ");
		sqlBF.append("   and a.dyspbz = '1' ");
		sqlBF.append("   and d.hdbz(+) = '1' ");
		// 经办机构
		sqlBF.append(" and exists( select 1 ");
		sqlBF.append("       from ad3u.per_reg  ");
		sqlBF.append("      where a.dqdydjid = dydjid ");
		sqlBF.append("        and jbjgid = ?) ");
		
		sqlBF.append(" and a.dyffzt <> '3' ");
		// 代发机构
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and a.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and a.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		// 单位
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("    and a.dwdjid = '");
			sqlBF.append(dwdjid);
			sqlBF.append("'");
		}
		// 增加对街道和社区的查询 zz add 2012-9-25
		if (jdid != null && !"".equals(jdid)) {
			sqlBF.append("    and a.jdid = '");
			sqlBF.append(jdid);
			sqlBF.append("'");
		}
		if (sqid != null && !"".equals(sqid)) {
			sqlBF.append("    and a.sqid = '");
			sqlBF.append(sqid);
			sqlBF.append("'");
		}
		// 退休人员类别
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append(" and a.zfrylb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		// 改成拼串的方式进行查询，防止查询不出csrq等非法的人员信息-----zky modify 20111006
		if (csrqQsrq != null && !"".equals(csrqQsrq)) {
			sqlBF.append(" and nvl(a.csrq, '" + csrqQsrq + "') >= '" + csrqQsrq
					+ "' ");
		}
		if (csrqZzrq != null && !"".equals(csrqZzrq)) {
			sqlBF.append(" and nvl(a.csrq, '" + csrqZzrq + "') <= '" + csrqZzrq
					+ "' ");
		}
		if (ltxQsrq != null && !"".equals(ltxQsrq)) {
			sqlBF.append(" and nvl(c.ltxrq, '" + ltxQsrq + "') >= '" + ltxQsrq
					+ "' ");
		}
		if (ltxZzrq != null && !"".equals(ltxZzrq)) {
			sqlBF.append(" and nvl(c.ltxrq, '" + ltxZzrq + "') <= '" + ltxZzrq
					+ "' ");
		}
		if (cjgzQsrq != null && !"".equals(cjgzQsrq)) {
			sqlBF.append(" and nvl(d.cjgzrq, '" + cjgzQsrq + "') >= '" + cjgzQsrq
					+ "' ");
		}
		if (cjgzZzrq != null && !"".equals(cjgzZzrq)) {
			sqlBF.append(" and nvl(d.cjgzrq, '" + cjgzZzrq + "') <= '" + cjgzZzrq
					+ "' ");
		}
		if(dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and a.dyffzt = '");
			sqlBF.append(dyffzt);
			sqlBF.append("'");
		}
		
		sqlBF.append(" union all ");
		sqlBF.append(" select a.ryid, a.shbzhm, a.xm, a.xb, a.csrq,  ");
		sqlBF.append("        '' ltxrq, a.zfrylb, a.dfjglb, a.dyxsksny, a.yhzh,  ");
		sqlBF.append("        a.dfjgid, '' cjgzrq, a.dwdjid, a.jdid, a.sqid, a.dyffzt ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.supp_info b ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.dyspbz = '1' ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.per_reg ");
		sqlBF.append("          where a.dqdydjid = dydjid ");
		sqlBF.append("            and jbjgid = ?) ");
		sqlBF.append("    and a.dyffzt <> '3' ");
		// 代发机构
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and a.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and a.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		// 单位
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("    and a.dwdjid = '");
			sqlBF.append(dwdjid);
			sqlBF.append("'");
		}
		// 增加对街道和社区的查询
		if (jdid != null && !"".equals(jdid)) {
			sqlBF.append("    and a.jdid = '");
			sqlBF.append(jdid);
			sqlBF.append("'");
		}
		if (sqid != null && !"".equals(sqid)) {
			sqlBF.append("    and a.sqid = '");
			sqlBF.append(sqid);
			sqlBF.append("'");
		}
		// 退休人员类别
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append(" and a.zfrylb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		// 改成拼串的方式进行查询，防止查询不出csrq等非法的人员信息
		if (csrqQsrq != null && !"".equals(csrqQsrq)) {
			sqlBF.append(" and nvl(a.csrq, '" + csrqQsrq + "') >= '" + csrqQsrq
					+ "' ");
		}
		if (csrqZzrq != null && !"".equals(csrqZzrq)) {
			sqlBF.append(" and nvl(a.csrq, '" + csrqZzrq + "') <= '" + csrqZzrq
					+ "' ");
		}
		if(dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and a.dyffzt = '");
			sqlBF.append(dyffzt);
			sqlBF.append("'");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, jbjgid);
		
		dsPer = this.sql.executeQuery();
		// 查询待遇信息
		sqlBF.setLength(0);
		sqlBF.append("select nvl(sum(btje), 0) btje ");
		sqlBF.append("  from ad3u.per_giv_month_std ");
		sqlBF.append(" where ryid = ? ");
		sqlBF.append("   and ? between qsny and nvl(zzny,'204912') ");
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and btbh = 'A187' ");
			}
		}
		queryJe = sqlBF.toString();

		// 查询代发机构编号名称
		sqlBF.setLength(0);
		sqlBF.append(" select dfjgbh, dfjgmc ");
		sqlBF.append("   from be3u.provide_natl ");
		sqlBF.append("  where dfjgid = ? ");
		queryDfjg = sqlBF.toString();

		// 查询单位编号名称
		sqlBF.setLength(0);
		sqlBF.append(" select dwbh, cbdwmc dwmc ");
		sqlBF.append("   from si3u.orgn_reg ");
		sqlBF.append("  where dwdjid = ? ");
		queryDw = sqlBF.toString();

		// 查询人员基本信息
		sqlBF.setLength(0);
		sqlBF.append("select c.mz, n.ygxs, c.zyjszwjb, c.gjzyzgdj, c.grsf, ");
		sqlBF.append("       c.zzmm, n.xzzw, c.whcd, c.cym, c.jtzz, ");
		sqlBF.append("       c.yzbm, c.lxrxm, c.lxrdh lxdh, c.hkszd, c.txdz ");
		sqlBF.append("  from biuv.person c, si3u.per_natl n ");
		sqlBF.append(" where c.ryid = ? ");
		sqlBF.append("   and c.ryid = n.ryid ");
		queryJbxx = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select jdbh, jdmc ");
		sqlBF.append("   from be3u.street_natl ");
		sqlBF.append("  where jdid = ? ");
		queryJd = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select sqbh, sqmc ");
		sqlBF.append("   from be3u.community_natl ");
		sqlBF.append("  where sqid = ? ");
		querySq = sqlBF.toString();
		

		for (int i = 0, row = dsPer.rowCount(); i < row; i++) {
			dfjgid = dsPer.getString(i, "dfjgid");
			dfjglb = dsPer.getString(i, "dfjglb");
			ryid = dsPer.getString(i, "ryid");
			dwdjid = dsPer.getString(i, "dwdjid");
			jdid = dsPer.getString(i, "jdid");
			sqid = dsPer.getString(i, "sqid");

			// 查询单位
			this.sql.setSql(queryDw);
			this.sql.setString(1, dwdjid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				dsPer.put(i, "dwbh", dsTemp.getString(0, "dwbh"));
				dsPer.put(i, "dwmc", dsTemp.getString(0, "dwmc"));
			}
			
			this.sql.setSql(queryJd);
			this.sql.setString(1, jdid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				dsPer.put(i, "jdbh", dsTemp.getString(0, "jdbh"));
				dsPer.put(i, "jdmc", dsTemp.getString(0, "jdmc"));
			}
			
			this.sql.setSql(querySq);
			this.sql.setString(1, sqid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				dsPer.put(i, "sqbh", dsTemp.getString(0, "sqbh"));
				dsPer.put(i, "sqmc", dsTemp.getString(0, "sqmc"));
			}

			// 查询人员基本信息
			this.sql.setSql(queryJbxx);
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				dsPer.put(i, "mz", dsTemp.getString(0, "mz"));
				dsPer.put(i, "ygxs", dsTemp.getString(0, "ygxs"));
				dsPer.put(i, "zyjszw", dsTemp.getString(0, "zyjszwjb"));
				dsPer.put(i, "gjzyzgdj", dsTemp.getString(0, "gjzyzgdj"));
				dsPer.put(i, "grsf", dsTemp.getString(0, "grsf"));
				dsPer.put(i, "zzmm", dsTemp.getString(0, "zzmm"));
				dsPer.put(i, "xzzw", dsTemp.getString(0, "xzzw"));
				dsPer.put(i, "whcd", dsTemp.getString(0, "whcd"));
				dsPer.put(i, "cym", dsTemp.getString(0, "cym"));
				dsPer.put(i, "jtzz", dsTemp.getString(0, "jtzz"));
				dsPer.put(i, "yzbm", dsTemp.getString(0, "yzbm"));
				dsPer.put(i, "lxrxm", dsTemp.getString(0, "lxrxm"));
				dsPer.put(i, "lxdh", dsTemp.getString(0, "lxdh"));
				dsPer.put(i, "hkszd", dsTemp.getString(0, "hkszd"));
				dsPer.put(i, "txdz", dsTemp.getString(0, "txdz"));
			}

			// 查询补贴金额
			this.sql.setSql(queryJe);
			this.sql.setString(1, ryid);
			this.sql.setString(2, ffny);
			dsTemp = this.sql.executeQuery();
			dsPer.put(i, "btje", dsTemp.getDouble(0, "btje"));

			dfjgbh = "";
			dfjgmc = "";
			// 查询代发机构编号和名称
			if (dfjglb != null && !"".equals(dfjglb)) {
				if ("G".equals(dfjglb)) {
					this.sql.setSql(queryDfjg);
					this.sql.setString(1, dfjgid);
					dsTemp = this.sql.executeQuery();
					if (dsTemp.rowCount() > 0) {
						dfjgbh = dsTemp.getString(0, "dfjgbh");
						dfjgmc = dsTemp.getString(0, "dfjgmc");
					}
				} else if ("B".equals(dfjglb)) {
					this.sql.setSql(queryDw);
					this.sql.setString(1, dfjgid);
					dsTemp = this.sql.executeQuery();
					if (dsTemp.rowCount() > 0) {
						dfjgbh = dsTemp.getString(0, "dwbh");
						dfjgmc = dsTemp.getString(0, "dwmc");
					}
				}
			}

			dsPer.put(i, "dfjgbh", dfjgbh);
			dsPer.put(i, "dfjgmc", dfjgmc);
		}
		dsPer = dsPer.sort("zfrylb").sort("dwdjid");
		dsPer.setTypeList(dsPer.getTypeList()
				+ ",dwbh:s,dwmc:s,mz:s,ygxs:s,zyjszw:s,gjzyzgdj:s,grsf:s,zzmm:s,xzzw:s,whcd:s,cym:s,jtzz:s,yzbm:s,lxrxm:s,lxdh:s,hkszd:s,txdz:s,btje:n,dfjgbh:s,dfjgmc:s");
		
		QueryLogTool.updateQueryLog(querylogid, dsPer.rowCount());
		
		rdo.put("dsbfryinfo", dsPer);
		return rdo;
	}
	
	/**
	 * 银行账号变动历史查询.
	 * 
	 * @author guanll
	 * @date 创建时间 2017.08.03
	 * @since V1.0
	 */
	public final DataObject queryAccountChngHis(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dsHis_temp = new DataStore();
		DataStore dsHis, ds_temp;
		StringBuffer sqlBF = new StringBuffer();
		StringBuffer sqlStr = new StringBuffer();
		StringBuffer sqlDw = new StringBuffer();
		String qsrq, zzrq, jbjgid, ydfjgid = "", xxbgid, ydfjglb = "", xdfjglb = "", xdfjgid = "";
		String dfjgid_cr, dfjglb_cr, xdfjgid_temp, xdfjglb_temp, shbzhm;
		int row = 0, hh, find;

		jbjgid = para.getString("jbjgid");
		qsrq = para.getDateToString("qsrq", "yyyymmdd");
		zzrq = para.getDateToString("zzrq", "yyyymmdd");
		dfjgid_cr = para.getString("ffztid", "");
		dfjglb_cr = para.getString("ffztlb", "");
		String querylogid = QueryLogTool.saveQueryLog("银行账号变动历史查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		if (jbjgid == null || "".equals("jbjgid")) {
			this.bizException("经办机构ID为空，请检查！");
		}
		if (qsrq == null || "".equals("qsrq")) {
			this.bizException("起始日期为空，请检查！");
		}
		if (zzrq == null || "".equals("zzrq")) {
			this.bizException("终止日期为空，请检查！");
		}
		
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		SiTools.checkQsZzrq(qsrq, zzrq, 12);
		// 查询银行账号、代发机构类别、代发机构Id的详细变更信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.shbzhm, a.xm, c.bgqxx, c.bghxx, '' ydfjglb, c.bgxm, ");
		sqlBF.append("        b.jbr, b.jbsj, '' ydfjgid, '' xdfjgid, b.xxbgid, '' xdfjglb, ");
		sqlBF.append("        a.dfjgid, a.dfjglb ");
		sqlBF.append("   from ad3u.per_info a, ad3u.per_chng b, ad3u.per_chng_detl c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.xxbgid = c.xxbgid ");
		sqlBF.append("    and c.bgxm in ( 'yhzh', 'dfjgid', 'dfjglb') ");
		sqlBF.append("    and to_char(b.jbsj,'yyyymmdd') between ? and ? ");
		sqlBF.append("    and a.sszfrq in ('A','B') ");
		sqlBF.append("    and nvl(c.bgqxx,'$') <>  nvl(c.bghxx,'$') ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("          from ad3u.per_reg ");
		sqlBF.append("         where dydjid = a.dqdydjid ");
		sqlBF.append("           and jbjgid in (" + jbjgid + ")) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);

		dsHis = this.sql.executeQuery();
		dsHis.sort("xxbgid");
		if (dsHis.rowCount() <= 0) {
			this.bizException("查询的变更信息不存在！");
		}
		// 将查询到的变更记录中有相同xxbgid的银行账号、代发机构类别、打发机构ID合并进一条记录。
		for (int i = 0, n = dsHis.rowCount(); i < n; i++) {
			xxbgid = dsHis.getString(i, "xxbgid");

			find = dsHis_temp.find(" xxbgid == " + xxbgid);
			if (find < 0) {
				dsHis_temp.addRow();
				row = dsHis_temp.rowCount() - 1;
				dsHis_temp.put(row, "xxbgid", dsHis.getString(i, "xxbgid"));
				dsHis_temp.put(row, "shbzhm", dsHis.getString(i, "shbzhm"));
				dsHis_temp.put(row, "xm", dsHis.getString(i, "xm"));
				dsHis_temp.put(row, "zxdfjgid", dsHis.getString(i, "dfjgid"));// 将最新的
				// dfjglb和dfjgid也放入
				dsHis_temp.put(row, "zxdfjglb", dsHis.getString(i, "dfjglb"));
				if ("yhzh".equals(dsHis.getString(i, "bgxm"))) {
					dsHis_temp.put(row, "bgqxx", dsHis.getString(i, "bgqxx"));// 变更前银行账号
					dsHis_temp.put(row, "bghxx", dsHis.getString(i, "bghxx"));// 变更后银行账号
				} else {
					dsHis_temp.put(row, "bgqxx", "");// 变更前银行账号
					dsHis_temp.put(row, "bghxx", "");// 变更后银行账号
				}
				dsHis_temp.put(row, "jbr", dsHis.getString(i, "jbr"));
				dsHis_temp.put(row, "jbsj", dsHis.getDate(i, "jbsj"));
				if ("dfjgid".equals(dsHis.getString(i, "bgxm"))) {
					dsHis_temp.put(row, "ydfjgid", dsHis.getString(i, "bgqxx"));
					dsHis_temp.put(row, "xdfjgid", dsHis.getString(i, "bghxx"));
				} else {
					dsHis_temp.put(row, "ydfjgid", "");
					dsHis_temp.put(row, "xdfjgid", "");
				}
				if ("dfjglb".equals(dsHis.getString(i, "bgxm"))) {
					dsHis_temp.put(row, "ydfjglb", dsHis.getString(i, "bgqxx"));
					dsHis_temp.put(row, "xdfjglb", dsHis.getString(i, "bghxx"));
				} else {
					dsHis_temp.put(row, "ydfjglb", "");
					dsHis_temp.put(row, "xdfjglb", "");
				}
			} else {
				row = dsHis_temp.rowCount() - 1;
				if ("yhzh".equals(dsHis.getString(i, "bgxm"))) {
					dsHis_temp.put(row, "bgqxx", dsHis.getString(i, "bgqxx"));// 变更前银行账号
					dsHis_temp.put(row, "bghxx", dsHis.getString(i, "bghxx"));// 变更后银行账号
				}
				if ("dfjgid".equals(dsHis.getString(i, "bgxm"))) {
					dsHis_temp.put(row, "ydfjgid", dsHis.getString(i, "bgqxx"));
					dsHis_temp.put(row, "xdfjgid", dsHis.getString(i, "bghxx"));
				}
				if ("dfjglb".equals(dsHis.getString(i, "bgxm"))) {
					dsHis_temp.put(row, "ydfjglb", dsHis.getString(i, "bgqxx"));
					dsHis_temp.put(row, "xdfjglb", dsHis.getString(i, "bghxx"));
				}
			}
		}

		sqlStr.setLength(0);
		sqlStr.append(" select dfjgmc, dfjgid from be3u.provide_natl where dfjgid = ? ");
		sqlDw.setLength(0);
		sqlDw.append(" select dwbh, cbdwmc dfjgmc from si3u.orgn_reg where dwdjid = ? ");

		sqlBF.setLength(0);
		sqlBF.append(" select bgqxx dfjgxx  ");
		sqlBF.append("   from ad3u.per_chng_detl ");
		sqlBF.append("  where bgxm = ? ");
		sqlBF.append("    and xxbgid in (select min(c.xxbgid) xxbgid ");
		sqlBF.append("                     from ad3u.per_chng_detl c,ad3u.per_info a, ad3u.per_chng b ");
		sqlBF.append("                    where c.bgxm = ? ");
		sqlBF.append("                      and  a.ryid = b.ryid  and b.xxbgid = c.xxbgid ");
		sqlBF.append("                      and c.bgqxx is not null ");
		sqlBF.append("                      and c.xxbgid > ? ");
		sqlBF.append("                      and nvl(c.bgqxx, '$') <> nvl(c.bghxx, '$')");
		sqlBF.append("                      and a.shbzhm = ? and a.sszfrq in ('A', 'B') ) ");

		if (dsHis_temp.rowCount() <= 0) {
			rdo.put("yhzhbgxx", dsHis_temp);
			return rdo;
		}
		// 对查询到的记录中没有dfjgid、dfjglb的情况进行处理；
		// 通过找每个人的最新一条记录，反向回推，用后一条的ydfjglb、dfjgid来作为前一条的xdfjgid、xdfjglb；
		// 1）对于最新一条记录中的dfjgid、dfjglb都不存在就查找xxbgid大于本条记录的最小xxbgid的记录的dfjgid、dfjglb，
		// 2）对于dfjgid存在dfjglb不存在的就查找xxbgid大于本条记录的最小xxbgid的记录的dfjglb，
		// 对于1）、2）情况查找中不存在最小xxbgid的记录时的就用当前per_reg的dfjgid 和dfjglb
		dsHis_temp.sort("shbzhm,xxbgid");
		shbzhm = "";
		for (hh = dsHis_temp.rowCount() - 1; hh >= 0; hh--) {

			if (shbzhm.equals(dsHis_temp.getString(hh, "shbzhm"))) {
				// 处理每个人的剩余行，对于不存在的dfjgid、dfjglb 就用下一条记录的ydfjgid、ydfjglb
				ydfjglb = dsHis_temp.getString(hh, "ydfjglb");
				xdfjglb = dsHis_temp.getString(hh, "xdfjglb");
				ydfjgid = dsHis_temp.getString(hh, "ydfjgid");
				xdfjgid = dsHis_temp.getString(hh, "xdfjgid");

				if ((ydfjgid == null || "".equals(ydfjgid))
						&& (xdfjgid == null || "".equals(xdfjgid))) {
					dsHis_temp.put(hh, "ydfjgid", dsHis_temp.getString(hh + 1, "ydfjgid"));
					dsHis_temp.put(hh, "xdfjgid", dsHis_temp.getString(hh + 1, "ydfjgid"));
					dsHis_temp.put(hh, "ydfjglb", dsHis_temp.getString(hh + 1, "ydfjglb"));
					dsHis_temp.put(hh, "xdfjglb", dsHis_temp.getString(hh + 1, "ydfjglb"));
				} else {
					if ((ydfjglb == null || "".equals(ydfjglb))
							&& (xdfjglb == null || "".equals(xdfjglb))) {
						dsHis_temp.put(hh, "ydfjglb", dsHis_temp.getString(hh + 1, "ydfjglb"));
						dsHis_temp.put(hh, "xdfjglb", dsHis_temp.getString(hh + 1, "ydfjglb"));
					}
				}

			} else {
				// 先处理最后一行 ，通过最后一行逆回去；先确定最后一行的代发机构id和代发机构lb
				shbzhm = dsHis_temp.getString(hh, "shbzhm");
				ydfjglb = dsHis_temp.getString(hh, "ydfjglb");
				xdfjglb = dsHis_temp.getString(hh, "xdfjglb");
				ydfjgid = dsHis_temp.getString(hh, "ydfjgid");
				xdfjgid = dsHis_temp.getString(hh, "xdfjgid");
				xxbgid = dsHis_temp.getString(hh, "xxbgid");

				if ((ydfjgid == null || "".equals(ydfjgid))
						&& (xdfjgid == null || "".equals(xdfjgid))) {
					// 获取代发机构id
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, "dfjgid");
					this.sql.setString(2, "dfjgid");
					this.sql.setString(3, xxbgid);
					this.sql.setString(4, shbzhm);
					ds_temp = this.sql.executeQuery();
					if (ds_temp.rowCount() > 0) {
						dsHis_temp.put(hh, "ydfjgid", ds_temp.getString(0, "dfjgxx"));
						dsHis_temp.put(hh, "xdfjgid", ds_temp.getString(0, "dfjgxx"));
					} else {
						dsHis_temp.put(hh, "ydfjgid", dsHis_temp.getString(hh, "zxdfjgid"));// 取当前的dfjgid和dfjglb
						dsHis_temp.put(hh, "xdfjgid", dsHis_temp.getString(hh, "zxdfjgid"));
					}
					// 获取代发机构lb
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, "dfjglb");
					this.sql.setString(2, "dfjglb");
					this.sql.setString(3, xxbgid);
					this.sql.setString(4, shbzhm);
					ds_temp = this.sql.executeQuery();
					if (ds_temp.rowCount() > 0) {
						dsHis_temp.put(hh, "ydfjglb", ds_temp.getString(0, "dfjgxx"));
						dsHis_temp.put(hh, "xdfjglb", ds_temp.getString(0, "dfjgxx"));
					} else {
						dsHis_temp.put(hh, "ydfjglb", dsHis_temp.getString(hh, "zxdfjglb"));
						dsHis_temp.put(hh, "xdfjglb", dsHis_temp.getString(hh, "zxdfjglb"));
					}
				} else {
					// 获取代发机构lb
					if ((ydfjglb == null || "".equals(ydfjglb))
							&& (xdfjglb == null || "".equals(xdfjglb))) {
						this.sql.setSql(sqlBF.toString());
						this.sql.setString(1, "dfjglb");
						this.sql.setString(2, "dfjglb");
						this.sql.setString(3, xxbgid);
						this.sql.setString(4, shbzhm);
						ds_temp = this.sql.executeQuery();
						if (ds_temp.rowCount() > 0) {
							dsHis_temp.put(hh, "ydfjglb", ds_temp.getString(0, "dfjgxx"));
							dsHis_temp.put(hh, "xdfjglb", ds_temp.getString(0, "dfjgxx"));
						} else {
							dsHis_temp.put(hh, "ydfjglb", dsHis_temp.getString(hh, "zxdfjglb"));// 取当前的dfjgid和dfjglb
							dsHis_temp.put(hh, "xdfjglb", dsHis_temp.getString(hh, "zxdfjglb"));
						}
					}
				}
			}
		}

		// 将查询到的信息中的原代发机构和新代发机构的名称查出放入。
		AdTools.genDfjgxxDataStore(dsHis_temp, "ydfjglb", "ydfjgid", "ydfjgbh", "ydfjgmc");
		AdTools.genDfjgxxDataStore(dsHis_temp, "xdfjglb", "xdfjgid", "xdfjgbh", "xdfjgmc");
   
		for (int i = dsHis_temp.rowCount() - 1; i >= 0; i--) {
			xdfjgid_temp = dsHis_temp.getString(i, "xdfjgid");
			xdfjglb_temp = dsHis_temp.getString(i, "xdfjglb");

			if ((dfjgid_cr != null && !"".equals(dfjgid_cr))
					&& (dfjglb_cr != null && !"".equals(dfjglb_cr))) {
				if (!(xdfjglb_temp.equals(dfjglb_cr) && xdfjgid_temp.equals(dfjgid_cr))) {
					dsHis_temp.delRow(i);
					continue;
				}
			}
		}
		dsHis_temp.setTypeList("shbzhm:s,xm:s,bgqxx:s,bqhxx:s,jbr:s,jbsj:d,ydfjgid:s,xdfjgid:s,ydfjglb:s,xdfjglb:s,xxbgid:s,ydfjgmc:s,xdfjgmc:s");
		
		HsuTools.genSysUserDataStore(dsHis_temp, "jbr", "jbrbh", "jbrname");
		dsHis_temp.sort("shbzhm,xxbgid");
		
		QueryLogTool.updateQueryLog(querylogid, dsHis_temp.rowCount());
		
		rdo.put("yhzhbgxx", dsHis_temp);
		return rdo;
	}

	/**
	 * 进入支出日报表查询的查询页面
	 * 
	 * @author lan
	 * @date 创建时间 2017-10-26
	 * @since V1.0
	 */
	public final DataObject fwdZcrbbQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		ds = SiTools.getQueryJbjgidByUserId(this.getUser().getUserid());
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 支出日报表查询
	 * 
	 * @author lan
	 * @date 创建时间 2017-10-26
	 * @since V1.0
	 */
	public DataObject queryZcrbb(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore ds = new DataStore();
		String qsrq, zzrq, jbjgid, rqlx, querylogid;
		StringBuffer sqlBF = new StringBuffer();
		double hj, jfje102, jfje106;
		double zhj, zjfje102, zjfje106, szf;
		int zjfrs102, zjfrs106, swrs;

		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		jbjgid = StringUtil.trim(para.getString("jbjgid"));
		rqlx = para.getString("rqlx");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的单据经办机构为空！");
		}
		if (qsrq == null || "".equals(qsrq)) {
			this.bizException("传入的单据确认起始日期为空！");
		}
		if (zzrq == null || "".equals(zzrq)) {
			this.bizException("传入的单据确认终止日期为空！");
		}
		if (qsrq.compareTo(zzrq) > 0) {
			this.bizException("确认起始日期不能大于确认终止日期！");
		}
		if (DateUtil.getMonthDifferenceBetweenTwoStringDate(qsrq, zzrq) > 11) {
			this.bizException("查询的经办日期跨度不能超过一年！");
		}

		jbjgid = HsuTools.replaceC2QCQ(jbjgid);

		sqlBF.append(" select dfjgmc, dfjgbh, jfrs102, jfje102, jfrs106, jfje106, swrs, szf ");
		sqlBF.append("   from (select r.cbdwmc dfjgmc, ");
		sqlBF.append("                r.dwbh dfjgbh, ");
		sqlBF.append("                nvl(count(distinct decode(d.xzbz, '102', d.ryid, null)), 0) jfrs102, ");// 机关事业人数
		sqlBF.append("                nvl(sum(decode(d.xzbz, '102', d.btje, 0)), 0) jfje102, ");// 机关事业金额
		sqlBF.append("                nvl(count(distinct decode(d.xzbz, '106',d.ryid, null)), 0) jfrs106, ");//津贴补贴人数
		sqlBF.append("                nvl(sum(decode(d.xzbz, '106', d.btje, 0)), 0) jfje106, ");// 津贴补贴金额
		sqlBF.append("                nvl(count(distinct decode(d.btbh, 'B1D1',d.ryid, null)), 0) swrs, ");//死亡人数
		sqlBF.append("                nvl(sum(decode(d.btbh, 'B1D1', d.btje, 0)), 0) szf ");// 丧葬费
		sqlBF.append("           from ad3u.per_giv_detl d, ad3u.bill_genl g, si3u.orgn_reg r ");
		sqlBF.append("          where d.zdlsh = g.zdlsh ");
		sqlBF.append("            and g.ffztlb = 'B' ");
		sqlBF.append("            and g.ffztid = r.dwdjid ");
		sqlBF.append("            and g.djzt in ('0', '1') ");
		sqlBF.append("            and g.gljgid is null ");
//		sqlBF.append("            and to_char(g.qrjbsj, 'yyyyMMdd') between ? and ? ");
		//查询日期类型可选 add by cyy 20121220
		if ("3".equals(rqlx)) {
			sqlBF.append("    and to_char(g.qrjbsj, 'yyyyMMdd') between ? and ? ");
		} else if ("2".equals(rqlx)) {
			sqlBF.append("    and to_char(g.qrsj, 'yyyyMMdd') between ? and ? ");
		} else if ("1".equals(rqlx)) {
			sqlBF.append("    and to_char(g.txsj, 'yyyyMMdd') between ? and ? ");
		} else {
			this.bizException("请选择日期类型");
		}
		sqlBF.append("            and g.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("            and d.xzbz in ('102', '106') ");
		sqlBF.append("          group by r.cbdwmc, r.dwbh ");
		sqlBF.append("         union all ");
		sqlBF.append("         select r.dfjgmc dfjgmc, ");
		sqlBF.append("                r.dfjgbh dfjgbh, ");
		sqlBF.append("                nvl(count(distinct decode(d.xzbz, '102', d.ryid, null)), 0) jfrs102, ");// 机关事业人数
		sqlBF.append("                nvl(sum(decode(d.xzbz, '102', d.btje, 0)), 0) jfje102, ");// 机关事业金额
		sqlBF.append("                nvl(count(distinct decode(d.xzbz, '106',d.ryid, null)), 0) jfrs106, ");//津贴补贴人数
		sqlBF.append("                nvl(sum(decode(d.xzbz, '106', d.btje, 0)), 0) jfje106, ");// 津贴补贴金额
		sqlBF.append("                nvl(count(distinct decode(d.btbh, 'B1D1',d.ryid, null)), 0) swrs, ");//死亡人数
		sqlBF.append("                nvl(sum(decode(d.btbh, 'B1D1', d.btje, 0)), 0) szf ");// 丧葬费
		sqlBF.append("           from ad3u.per_giv_detl d, ad3u.bill_genl g, be3u.provide_natl r ");
		sqlBF.append("          where d.zdlsh = g.zdlsh ");
		sqlBF.append("            and g.ffztlb = 'G' ");
		sqlBF.append("            and g.ffztid = r.dfjgid ");
		sqlBF.append("            and g.djzt in ('0', '1') ");
		sqlBF.append("            and g.gljgid is null ");
//		sqlBF.append("            and to_char(g.qrjbsj, 'yyyyMMdd') between ? and ? ");
		//查询日期类型可选 add by cyy 20121220
		if ("3".equals(rqlx)) {
			sqlBF.append("    and to_char(g.qrjbsj, 'yyyyMMdd') between ? and ? ");
		} else if ("2".equals(rqlx)) {
			sqlBF.append("    and to_char(g.qrsj, 'yyyyMMdd') between ? and ? ");
		} else if ("1".equals(rqlx)) {
			sqlBF.append("    and to_char(g.txsj, 'yyyyMMdd') between ? and ? ");
		} else {
			this.bizException("请选择日期类型");
		}
		sqlBF.append("            and g.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("            and d.xzbz in ('102', '106') ");
		sqlBF.append("          group by r.dfjgmc, r.dfjgbh ");
		// --------add by yjc 2013.07.03增加支持FFZTLB='H'个人数据的查询。
		sqlBF.append("         union all ");
		sqlBF.append("         select r.xm dfjgmc, ");
		sqlBF.append("                r.shbzhm dfjgbh, ");
		sqlBF.append("                nvl(count(distinct decode(d.xzbz, '102', d.ryid, null)), 0) jfrs102, ");
		sqlBF.append("                nvl(sum(decode(d.xzbz, '102', d.btje, 0)), 0) jfje102, ");
		sqlBF.append("                nvl(count(distinct decode(d.xzbz, '106', d.ryid, null)), 0) jfrs106, ");
		sqlBF.append("                nvl(sum(decode(d.xzbz, '106', d.btje, 0)), 0) jfje106, ");
		sqlBF.append("                nvl(count(distinct decode(d.btbh, 'B1D1', d.ryid, null)), 0) swrs, ");
		sqlBF.append("                nvl(sum(decode(d.btbh, 'B1D1', d.btje, 0)), 0) szf ");
		sqlBF.append("           from ad3u.per_giv_detl d, ad3u.bill_genl g, si3u.per_reg r ");
		sqlBF.append("          where d.zdlsh = g.zdlsh ");
		sqlBF.append("            and g.ffztlb = 'H' ");
		sqlBF.append("            and g.ffztid = r.ryid ");
		sqlBF.append("            and g.djzt in ('0', '1') ");
		sqlBF.append("            and g.gljgid is null ");
		if ("3".equals(rqlx)) {
			sqlBF.append("    and to_char(g.qrjbsj, 'yyyyMMdd') between ? and ? ");
		} else if ("2".equals(rqlx)) {
			sqlBF.append("    and to_char(g.qrsj, 'yyyyMMdd') between ? and ? ");
		} else if ("1".equals(rqlx)) {
			sqlBF.append("    and to_char(g.txsj, 'yyyyMMdd') between ? and ? ");
		} else {
			this.bizException("请选择日期类型");
		}
		sqlBF.append("            and g.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("            and d.xzbz in ('102', '106') ");
		sqlBF.append("          group by r.xm, r.shbzhm ");
		// --------add end yjc 2013.07.03
		sqlBF.append("         union all ");
		sqlBF.append("         select r.cbdwmc dfjgmc, ");
		sqlBF.append("                r.dwbh dfjgbh, ");
		sqlBF.append("                nvl(count(distinct decode(d.xzbz, '102', d.ryid, null)), 0) jfrs102, ");// 机关事业人数
		sqlBF.append("                nvl(sum(decode(d.xzbz, '102', d.btje, 0)), 0) jfje102, ");// 机关事业金额
		sqlBF.append("                nvl(count(distinct decode(d.xzbz, '106',d.ryid, null)), 0) jfrs106, ");//津贴补贴人数
		sqlBF.append("                nvl(sum(decode(d.xzbz, '106', d.btje, 0)), 0) jfje106, ");// 津贴补贴金额
		sqlBF.append("                nvl(count(distinct decode(d.btbh, 'B1D1',d.ryid, null)), 0) swrs, ");//死亡人数
		sqlBF.append("                nvl(sum(decode(d.btbh, 'B1D1', d.btje, 0)), 0) szf ");// 丧葬费
		sqlBF.append("           from ad3u.per_giv_detl d, ad3u.bill_genl g, si3u.orgn_reg r ");
		sqlBF.append("          where d.zdlsh = g.zdlsh ");
		sqlBF.append("            and g.gljglb = '2' ");
		sqlBF.append("            and g.gljgid = r.dwdjid ");
		sqlBF.append("            and g.djzt in ('0', '1') ");
		sqlBF.append("            and g.ffztid is null ");
//		sqlBF.append("            and to_char(g.qrjbsj, 'yyyyMMdd') between ? and ? ");
		//查询日期类型可选 add by cyy 20121220
		if ("3".equals(rqlx)) {
			sqlBF.append("    and to_char(g.qrjbsj, 'yyyyMMdd') between ? and ? ");
		} else if ("2".equals(rqlx)) {
			sqlBF.append("    and to_char(g.qrsj, 'yyyyMMdd') between ? and ? ");
		} else if ("1".equals(rqlx)) {
			sqlBF.append("    and to_char(g.txsj, 'yyyyMMdd') between ? and ? ");
		} else {
			this.bizException("请选择日期类型");
		}
		sqlBF.append("            and g.jbjgid in (" + jbjgid + ") ");
		sqlBF.append("            and d.xzbz in ('102', '106') ");
		sqlBF.append("          group by r.cbdwmc, r.dwbh )");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		this.sql.setString(3, qsrq);
		this.sql.setString(4, zzrq);
		this.sql.setString(5, qsrq);
		this.sql.setString(6, zzrq);
		this.sql.setString(7, qsrq);
		this.sql.setString(8, zzrq);
		ds = this.sql.executeQuery();

		// 计算合计
		if (ds != null && ds.rowCount() > 0) {
			for (int i = 0, m = ds.rowCount(); i < m; i++) {
				jfje102 = ds.getDouble(i, "jfje102");
				jfje106 = ds.getDouble(i, "jfje106");
				hj = jfje102 + jfje106;
				ds.put(i, "hj", hj);
			}
		}

		rdo.put("dszcrbb", ds);

		// 记日志
		querylogid = QueryLogTool.saveQueryLog("支出日报表查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(), para);
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());

		ds = null;
		sqlBF = null;

		return rdo;
	}
	
	/**
	 * 查询养老离退休人数变动表
	 * 
	 * @author blp
	 * @date 创建时间 20171102
	 * @since V1.0
	 */
	public DataObject queryYlltxrsbdb(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		String querylogid;
		StringBuffer sqlBF = new StringBuffer();
		String cxny = para.getDateToString("cxny", "yyyyMM");
		if ("".equals(cxny) || cxny == null) {
			this.bizException("传入的查询年月不能为空");
		}

		//由于ffny改为确认单据时打上，此时就比较查询年月和查询上月是否发放待遇即可  add by lmx 20190305 
		String cxsy = DateUtil.addMonthToString(cxny, "yyyyMM", -1);

		String ad3u1021 = SiTools.getPara(this.getBizInstitution(), "ad3u1021", "0");// 是否启用职工发放台账新模式
		// 判断数据存在哪个表中
		HashMap<String, String> mapTableName = new HashMap<String, String>();
		if ("1".equals(ad3u1021)) {
			String cxys = SiTools.getPara(this.getBizInstitution(), "ad3u1025");
			String dqny = DateUtil.getCurrentDateToString("yyyyMM");

			int ys = DateUtil.getMonthDifferenceBetweenTwoStringDate(cxny, dqny);
			if (ys > Integer.parseInt(cxys)) {// 转数据月份外
				mapTableName.put(cxny, "ad3u.per_giv_detl_gived_his");
			} else if (ys <= Integer.parseInt(cxys)) {// 转数据月份内
				mapTableName.put(cxny, "ad3u.per_giv_detl_gived");
			}

			ys = DateUtil.getMonthDifferenceBetweenTwoStringDate(cxsy, dqny);
			if (ys > Integer.parseInt(cxys)) {// 转数据月份外
				mapTableName.put(cxsy, "ad3u.per_giv_detl_gived_his");
			} else if (ys <= Integer.parseInt(cxys)) {// 转数据月份内
				mapTableName.put(cxsy, "ad3u.per_giv_detl_gived");
			}
		} else {
			mapTableName.put(cxny, "ad3u.per_giv_detl");
			mapTableName.put(cxsy, "ad3u.per_giv_detl");
		}

		// 期初离退休人数
		sqlBF.setLength(0);
		sqlBF.append(" select qcqyhj, qcgy, qcjt, qcgt, qywz, qcjghj,  ");
		sqlBF.append("              qcqyhj - qcgy - qcjt - qcgt - qywz qckm  ");
		sqlBF.append("         from (  ");
		sqlBF.append("               select sum(decode(dylqlb, '101', count(distinct b.ryid), 0)) qcqyhj,  ");
		sqlBF.append("              sum(decode(dylqlb, '101',decode(jjlxmx, '110', count(distinct b.ryid), 0))) qcgy,  ");
		sqlBF.append("              sum(decode(dylqlb,'101',decode(jjlxmx, '120', count(distinct b.ryid), 0))) qcjt,  ");
		sqlBF.append("              sum(decode(dylqlb, '101',decode(dwxz, '60', count(distinct b.ryid), 0))) qcgt,  ");
		sqlBF.append("              sum(decode(dylqlb,'101',decode(jjlxmx,'200',count(distinct b.ryid),'210',count(distinct b.ryid),  ");
		sqlBF.append("                                '220',count(distinct b.ryid),'230',count(distinct b.ryid),'240',count(distinct b.ryid),  ");
		sqlBF.append("                                '290',count(distinct b.ryid),'300',count(distinct b.ryid),'310',count(distinct b.ryid),  ");
		sqlBF.append("                                '320',count(distinct b.ryid),'330',count(distinct b.ryid),'340',count(distinct b.ryid),  ");
		sqlBF.append("                                '390',count(distinct b.ryid),0))) qywz,  ");
		sqlBF.append("              sum(decode(dylqlb, '102', count(distinct b.ryid), 0)) qcjghj  ");
		sqlBF.append("         from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c  ");
		sqlBF.append("        where a.dwid = c.dwid  ");
		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
		sqlBF.append("          and exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxsy) + " d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ?  ");
		sqlBF.append("                  and rownum = 1)  ");
		sqlBF.append("           group by dylqlb, jjlxmx, dwxz ) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, cxsy);
		DataStore dsQcrs = this.sql.executeQuery();

		DataObject pdo = new DataObject();

		// 退休人员新增
		sqlBF.setLength(0);
		sqlBF.append(" select '企业合计' dwlx,  ");
		sqlBF.append("              sum(count(distinct b.ryid)) dyzj,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',0,'A14',0,'A15',0,'A16',0,'A24',0,'A25',0,'A23',0,'A2P',0,count(distinct b.ryid)))zctxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',count(distinct b.ryid),'A14',count(distinct b.ryid),'A15',count(distinct b.ryid),'A16',count(distinct b.ryid),0))ltxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A24',count(distinct b.ryid),0))ybtxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A25',count(distinct b.ryid),0))tstxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A23',count(distinct b.ryid),0))sytxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A2P',count(distinct b.ryid),0))jgtxxz ");
		sqlBF.append("         from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c ");
		sqlBF.append("        where a.dwid = c.dwid  ");
		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
		sqlBF.append("          and b.dylqlb = '101'  ");
		sqlBF.append("          and exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxsy) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1 ");
		sqlBF.append("           from ad3u.per_pause e         ");
		sqlBF.append("                where b.ryid = e.ryid ");
		sqlBF.append("                  and to_char(e.hfsj,'yyyyMM') = ?  )");
		sqlBF.append("          group by zfrylb  ");
		sqlBF.append("        union all  ");
		sqlBF.append("        select '国有企业' dwlx,   ");
		sqlBF.append("             sum(count(distinct b.ryid)) dyzj,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',0,'A14',0,'A15',0,'A16',0,'A24',0,'A25',0,'A23',0,'A2P',0,count(distinct b.ryid)))zctxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',count(distinct b.ryid),'A14',count(distinct b.ryid),'A15',count(distinct b.ryid),'A16',count(distinct b.ryid),0))ltxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A24',count(distinct b.ryid),0))ybtxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A25',count(distinct b.ryid),0))tstxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A23',count(distinct b.ryid),0))sytxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A2P',count(distinct b.ryid),0))jgtxxz  ");
		sqlBF.append("         from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c  ");
		sqlBF.append("        where a.dwid = c.dwid  ");
		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
		sqlBF.append("          and a.jjlxmx = '110'  ");
		sqlBF.append("          and b.dylqlb = '101'  ");
		sqlBF.append("          and exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxsy) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("           from ad3u.per_pause e         ");
		sqlBF.append("                where b.ryid = e.ryid ");
		sqlBF.append("                  and to_char(e.hfsj,'yyyyMM') = ?   )");
		sqlBF.append("          group by zfrylb  ");
		sqlBF.append("          union all  ");
		sqlBF.append("          select '集体企业' dwlx,   ");
		sqlBF.append("              sum(count(distinct b.ryid)) dyzj,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',0,'A14',0,'A15',0,'A16',0,'A24',0,'A25',0,'A23',0,'A2P',0,count(distinct b.ryid)))zctxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',count(distinct b.ryid),'A14',count(distinct b.ryid),'A15',count(distinct b.ryid),'A16',count(distinct b.ryid),0))ltxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A24',count(distinct b.ryid),0))ybtxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A25',count(distinct b.ryid),0))tstxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A23',count(distinct b.ryid),0))sytxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A2P',count(distinct b.ryid),0))jgtxxz  ");
		sqlBF.append("          from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c  ");
		sqlBF.append("        where a.dwid = c.dwid  ");
		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
		sqlBF.append("          and a.jjlxmx = '120'  ");
		sqlBF.append("          and b.dylqlb = '101'  ");
		sqlBF.append("          and exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxsy) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1)  ");
		sqlBF.append("          and not exists (select 1       ");
		sqlBF.append("           from ad3u.per_pause e         ");
		sqlBF.append("                where b.ryid = e.ryid ");
		sqlBF.append("                  and to_char(e.hfsj,'yyyyMM') = ?   )");
		sqlBF.append("          group by zfrylb  ");
		sqlBF.append("          union all  ");
		sqlBF.append("          select '企业个体'dwlx,   ");
		sqlBF.append("              sum(count(distinct b.ryid)) dyzj,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',0,'A14',0,'A15',0,'A16',0,'A24',0,'A25',0,'A23',0,'A2P',0,count(distinct b.ryid)))zctxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',count(distinct b.ryid),'A14',count(distinct b.ryid),'A15',count(distinct b.ryid),'A16',count(distinct b.ryid),0))ltxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A24',count(distinct b.ryid),0))ybtxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A25',count(distinct b.ryid),0))tstxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A23',count(distinct b.ryid),0))sytxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A2P',count(distinct b.ryid),0))jgtxxz ");
		sqlBF.append("          from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c ");
		sqlBF.append("        where a.dwid = c.dwid  ");
		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
		sqlBF.append("          and a.dwxz = '60'  ");
		sqlBF.append("          and b.dylqlb = '101'  ");
		sqlBF.append("          and exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxsy) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1   ");
		sqlBF.append("           from ad3u.per_pause e         ");
		sqlBF.append("                where b.ryid = e.ryid ");
		sqlBF.append("                  and to_char(e.hfsj,'yyyyMM') = ?   )");
		sqlBF.append("          group by zfrylb  ");
		sqlBF.append("           union all  ");
		sqlBF.append("           select '外企企业'dwlx,   ");
		sqlBF.append("              sum(count(distinct b.ryid)) dyzj,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',0,'A14',0,'A15',0,'A16',0,'A24',0,'A25',0,'A23',0,'A2P',0,count(distinct b.ryid)))zctxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',count(distinct b.ryid),'A14',count(distinct b.ryid),'A15',count(distinct b.ryid),'A16',count(distinct b.ryid),0))ltxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A24',count(distinct b.ryid),0))ybtxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A25',count(distinct b.ryid),0))tstxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A23',count(distinct b.ryid),0))sytxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A2P',count(distinct b.ryid),0))jgtxxz  ");
		sqlBF.append("        from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c  ");
		sqlBF.append("        where a.dwid = c.dwid  ");
		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
		sqlBF.append("          and a.jjlxmx in('200','210','220','230','240','290','300','310','320','330','340','390')  ");
		sqlBF.append("          and b.dylqlb = '101'  ");
		sqlBF.append("          and exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxsy) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1)  ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("           from ad3u.per_pause e         ");
		sqlBF.append("                where b.ryid = e.ryid ");
		sqlBF.append("                  and to_char(e.hfsj,'yyyyMM') = ?   )");
		sqlBF.append("          group by zfrylb  ");
		sqlBF.append("           union all  ");
		sqlBF.append("           select '机关合计'dwlx,   ");
		sqlBF.append("              sum(count(distinct b.ryid)) dyzj,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',0,'A14',0,'A15',0,'A16',0,'A24',0,'A25',0,'A23',0,'A2P',0,count(distinct b.ryid)))zctxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A11',count(distinct b.ryid),'A14',count(distinct b.ryid),'A15',count(distinct b.ryid),'A16',count(distinct b.ryid),0))ltxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A24',count(distinct b.ryid),0))ybtxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A25',count(distinct b.ryid),0))tstxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A23',count(distinct b.ryid),0))sytxxz,  ");
		sqlBF.append("              sum(decode(zfrylb,'A2P',count(distinct b.ryid),0))jgtxxz  ");
		sqlBF.append("         from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c ");
		sqlBF.append("        where a.dwid = c.dwid  ");
		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
		sqlBF.append("          and b.dylqlb = '102'  ");
		sqlBF.append("          and exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1) ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("                 from " + mapTableName.get(cxsy) +" d  ");
		sqlBF.append("                where b.ryid = d.ryid  ");
		sqlBF.append("                  and d.ffny = ? ");
		sqlBF.append("                  and rownum = 1)  ");
		sqlBF.append("          and not exists (select 1  ");
		sqlBF.append("           from ad3u.per_pause e         ");
		sqlBF.append("                where b.ryid = e.ryid ");
		sqlBF.append("                  and to_char(e.hfsj,'yyyyMM') = ?  )");
		sqlBF.append("          group by zfrylb  ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, cxny);
		this.sql.setString(2, cxsy);
		this.sql.setString(3, cxny);
		this.sql.setString(4, cxny);
		this.sql.setString(5, cxsy);
		this.sql.setString(6, cxny);
		this.sql.setString(7, cxny);
		this.sql.setString(8, cxsy);
		this.sql.setString(9, cxny);
		this.sql.setString(10, cxny);
		this.sql.setString(11, cxsy);
		this.sql.setString(12, cxny);
		this.sql.setString(13, cxny);
		this.sql.setString(14, cxsy);
		this.sql.setString(15, cxny);
		this.sql.setString(16, cxny);
		this.sql.setString(17, cxsy);
		this.sql.setString(18, cxny);
		DataStore dsDyzj = this.sql.executeQuery();

		// 计算扩面企业
		int zjhj = dsDyzj.getInt(0, "dyzj");
		int zchj = dsDyzj.getInt(0, "zctxxz");
		int lxxzhj = dsDyzj.getInt(0, "ltxxz");
		int ybhj = dsDyzj.getInt(0, "ybtxxz");
		int tshj = dsDyzj.getInt(0, "tstxxz");
		int syhj = dsDyzj.getInt(0, "sytxxz");
		int jghj = dsDyzj.getInt(0, "jgtxxz");

		for (int i = 1; i < dsDyzj.rowCount(); i++) {
			int zjhjtemp = dsDyzj.getInt(i, "dyzj");
			int zchjtemp = dsDyzj.getInt(i, "zctxxz");
			int lxhjtemp = dsDyzj.getInt(i, "ltxxz");
			int ybhjtemp = dsDyzj.getInt(i, "ybtxxz");
			int tshjtemp = dsDyzj.getInt(i, "tstxxz");
			int syhjtemp = dsDyzj.getInt(i, "sytxxz");
			int jghjtemp = dsDyzj.getInt(i, "jgtxxz");
			if (i < dsDyzj.rowCount() - 1) {
				zjhj = zjhj - zjhjtemp;
				zchj = zchj - zchjtemp;
				lxxzhj = lxxzhj - lxhjtemp;
				ybhj = ybhj - ybhjtemp;
				tshj = tshj - tshjtemp;
				syhj = syhj - syhjtemp;
				jghj = jghj - jghjtemp;
			}
		}
		dsDyzj.insertRow(3);
		dsDyzj.put(3, "dyzj", zjhj);
		dsDyzj.put(3, "zctxxz", zchj);
		dsDyzj.put(3, "ltxxz", lxxzhj);
		dsDyzj.put(3, "ybtxxz", ybhj);
		dsDyzj.put(3, "tstxxz", tshj);
		dsDyzj.put(3, "sytxxz", syhj);
		dsDyzj.put(3, "jgtxxz", jghj);

		// 退休单位调入
//		sqlBF.setLength(0);
//		sqlBF.append(" select txdrhj, txdrgy, txdrjt, txdrgt, txdrwz, txdrjghj,  ");
//		sqlBF.append("              txdrhj - txdrgy - txdrjt - txdrgt - txdrwz txdrkm  ");
//		sqlBF.append("         from (  ");
//		sqlBF.append("               select sum(decode(dylqlb, '101', count(distinct b.ryid), 0)) txdrhj,  ");
//		sqlBF.append("              sum(decode(dylqlb, '101',decode(jjlxmx, '110', count(distinct b.ryid), 0))) txdrgy,  ");
//		sqlBF.append("              sum(decode(dylqlb,'101',decode(jjlxmx, '120', count(distinct b.ryid), 0))) txdrjt,  ");
//		sqlBF.append("              sum(decode(dylqlb, '101',decode(dwxz, '60', count(distinct b.ryid), 0))) txdrgt,  ");
//		sqlBF.append("              sum(decode(dylqlb,'101',decode(jjlxmx,'200',count(distinct b.ryid),'210',count(distinct b.ryid),  ");
//		sqlBF.append("                                '220',count(distinct b.ryid),'230',count(distinct b.ryid),'240',count(distinct b.ryid),  ");
//		sqlBF.append("                                '290',count(distinct b.ryid),'300',count(distinct b.ryid),'310',count(distinct b.ryid),  ");
//		sqlBF.append("                                '320',count(distinct b.ryid),'330',count(distinct b.ryid),'340',count(distinct b.ryid),  ");
//		sqlBF.append("                                '390',count(distinct b.ryid),0))) txdrwz,  ");
//		sqlBF.append("              sum(decode(dylqlb, '102', count(distinct b.ryid), 0)) txdrjghj  ");
//		sqlBF.append("         from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c, ad3u.per_reg d, si3u.per_reg e   ");
//		sqlBF.append("        where a.dwid = c.dwid  ");
//		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
//		sqlBF.append("          and b.dqdydjid = d.dydjid ");
//		sqlBF.append("			and d.rydjid = e.rydjid ");
//		sqlBF.append("          and e.zyyy = 'A417' ");
//		sqlBF.append("          and to_char(d.blzysj,'yyyyMM')= ? ");
//		sqlBF.append("          group by jjlxmx, dylqlb,dwxz) ");
//
//		this.sql.setSql(sqlBF.toString());
//		this.sql.setString(1, cxny);
//		DataStore dsDwdr = this.sql.executeQuery();

		// 退休单位调出
//		sqlBF.setLength(0);
//		sqlBF.append(" select txdchj, txdcgy, txdcjt, txdcgt, txdcwz, txdcjghj,  ");
//		sqlBF.append("              txdchj - txdcgy - txdcjt - txdcgt - txdcwz txdckm  ");
//		sqlBF.append("         from (  ");
//		sqlBF.append("               select sum(decode(dylqlb, '101', count(distinct b.ryid), 0)) txdchj,  ");
//		sqlBF.append("              sum(decode(dylqlb, '101',decode(jjlxmx, '110', count(distinct b.ryid), 0))) txdcgy,  ");
//		sqlBF.append("              sum(decode(dylqlb,'101',decode(jjlxmx, '120', count(distinct b.ryid), 0))) txdcjt,  ");
//		sqlBF.append("              sum(decode(dylqlb, '101',decode(dwxz, '60', count(distinct b.ryid), 0))) txdcgt,  ");
//		sqlBF.append("              sum(decode(dylqlb,'101',decode(jjlxmx,'200',count(distinct b.ryid),'210',count(distinct b.ryid),  ");
//		sqlBF.append("                                '220',count(distinct b.ryid),'230',count(distinct b.ryid),'240',count(distinct b.ryid),  ");
//		sqlBF.append("                                '290',count(distinct b.ryid),'300',count(distinct b.ryid),'310',count(distinct b.ryid),  ");
//		sqlBF.append("                                '320',count(distinct b.ryid),'330',count(distinct b.ryid),'340',count(distinct b.ryid),  ");
//		sqlBF.append("                                '390',count(distinct b.ryid),0))) txdcwz,  ");
//		sqlBF.append("              sum(decode(dylqlb, '102', count(distinct b.ryid), 0)) txdcjghj  ");
//		sqlBF.append("         from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c, ad3u.per_reg d, si3u.per_reg e   ");
//		sqlBF.append("        where a.dwid = c.dwid  ");
//		sqlBF.append("          and b.dwdjid = c.dwdjid  ");
//		sqlBF.append("          and b.dqdydjid = d.dydjid ");
//		sqlBF.append("	        and d.rydjid = e.rydjid ");
//		sqlBF.append("          and e.zyyy = 'A417' ");
//		sqlBF.append("          and to_char(d.bljysj,'yyyyMM')= ? ");
//		sqlBF.append("			and d.bljyyy in ('401','208') ");
//		sqlBF.append("          group by jjlxmx, dylqlb,dwxz ");
//		sqlBF.append("          ) ");
//
//		this.sql.setSql(sqlBF.toString());
//		this.sql.setString(1, cxny);
//
//		DataStore dsDwdc = this.sql.executeQuery();

		// 退休死亡
		sqlBF.setLength(0);
		sqlBF.append(" select txswhj, txswgy, txswjt, txswgt, txswwz, txswjghj,   ");
		sqlBF.append("       txswhj - txswgy - txswjt - txswgt - txswwz txswkm   ");
		sqlBF.append("  from (   ");
		sqlBF.append("        select sum(decode(dylqlb, '101', count(distinct b.ryid), 0)) txswhj,   ");
		sqlBF.append("       sum(decode(dylqlb, '101',decode(jjlxmx, '110', count(distinct b.ryid), 0))) txswgy,   ");
		sqlBF.append("       sum(decode(dylqlb,'101',decode(jjlxmx, '120', count(distinct b.ryid), 0))) txswjt,   ");
		sqlBF.append("       sum(decode(dylqlb, '101',decode(dwxz, '60', count(distinct b.ryid), 0))) txswgt,   ");
		sqlBF.append("       sum(decode(dylqlb,'101',decode(jjlxmx,'200',count(distinct b.ryid),'210',count(distinct b.ryid),   ");
		sqlBF.append("                         '220',count(distinct b.ryid),'230',count(distinct b.ryid),'240',count(distinct b.ryid),   ");
		sqlBF.append("                         '290',count(distinct b.ryid),'300',count(distinct b.ryid),'310',count(distinct b.ryid),   ");
		sqlBF.append("                         '320',count(distinct b.ryid),'330',count(distinct b.ryid),'340',count(distinct b.ryid),   ");
		sqlBF.append("                         '390',count(distinct b.ryid),0))) txswwz,   ");
		sqlBF.append("       sum(decode(dylqlb, '102', count(distinct b.ryid), 0)) txswjghj   ");
		sqlBF.append("  from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c    ");
		sqlBF.append(" where a.dwid = c.dwid   ");
		sqlBF.append("   and b.dwdjid = c.dwdjid   ");
		sqlBF.append("   and exists (select 1  ");
		sqlBF.append("     from " + mapTableName.get(cxsy) + " d  ");
		sqlBF.append("    where b.ryid = d.ryid  ");
		sqlBF.append("      and d.ffny = ? ");
		sqlBF.append("      and rownum = 1) ");
		sqlBF.append("   and not exists (select 1  ");
		sqlBF.append("     from " + mapTableName.get(cxny) + " d  ");
		sqlBF.append("    where b.ryid = d.ryid  ");
		sqlBF.append("      and d.ffny = ? ");
		sqlBF.append("      and rownum = 1)  ");
		sqlBF.append("   and exists(select 1  ");
		sqlBF.append("        from ad3u.per_reg d ");
		sqlBF.append("       where b.dqdydjid = d.dydjid ");
		sqlBF.append("        and d.bljyyy in ('401','208') ");
		sqlBF.append("        and d.bljysj is not null) ");
		sqlBF.append("   and not exists (select 1  ");
		sqlBF.append("          from ad3u.per_pause e         ");
		sqlBF.append("          where b.ryid = e.ryid ");
		sqlBF.append("            and to_char(e.ztsj,'yyyyMM')= ? ) ");
		sqlBF.append("   group by jjlxmx, dylqlb,dwxz) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, cxsy);
		this.sql.setString(2, cxny);
		this.sql.setString(3, cxny);
		DataStore dsTxsw = this.sql.executeQuery();
		
		
		// 退休减少
		sqlBF.setLength(0);
		sqlBF.append(" select txjyhj, txjygy, txjyjt, txjygt, txjywz, txjyjghj,   ");
		sqlBF.append("       txjyhj - txjygy - txjyjt - txjygt - txjywz txjykm   ");
		sqlBF.append("  from (   ");
		sqlBF.append("        select sum(decode(dylqlb, '101', count(distinct b.ryid), 0)) txjyhj,   ");
		sqlBF.append("       sum(decode(dylqlb, '101',decode(jjlxmx, '110', count(distinct b.ryid), 0))) txjygy,   ");
		sqlBF.append("       sum(decode(dylqlb,'101',decode(jjlxmx, '120', count(distinct b.ryid), 0))) txjyjt,   ");
		sqlBF.append("       sum(decode(dylqlb, '101',decode(dwxz, '60', count(distinct b.ryid), 0))) txjygt,   ");
		sqlBF.append("       sum(decode(dylqlb,'101',decode(jjlxmx,'200',count(distinct b.ryid),'210',count(distinct b.ryid),   ");
		sqlBF.append("                         '220',count(distinct b.ryid),'230',count(distinct b.ryid),'240',count(distinct b.ryid),   ");
		sqlBF.append("                         '290',count(distinct b.ryid),'300',count(distinct b.ryid),'310',count(distinct b.ryid),   ");
		sqlBF.append("                         '320',count(distinct b.ryid),'330',count(distinct b.ryid),'340',count(distinct b.ryid),   ");
		sqlBF.append("                         '390',count(distinct b.ryid),0))) txjywz,   ");
		sqlBF.append("       sum(decode(dylqlb, '102', count(distinct b.ryid), 0)) txjyjghj   ");
		sqlBF.append("  from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c  ");
		sqlBF.append(" where a.dwid = c.dwid   ");
		sqlBF.append("   and b.dwdjid = c.dwdjid   ");
		sqlBF.append("   and exists (select 1  ");
		sqlBF.append("     from " + mapTableName.get(cxsy) + " d  ");
		sqlBF.append("    where b.ryid = d.ryid  ");
		sqlBF.append("      and d.ffny = ? ");
		sqlBF.append("      and rownum = 1) ");
		sqlBF.append("   and not exists (select 1  ");
		sqlBF.append("     from " + mapTableName.get(cxny) + " d  ");
		sqlBF.append("    where b.ryid = d.ryid  ");
		sqlBF.append("      and d.ffny = ? ");
		sqlBF.append("      and rownum = 1)    ");
		sqlBF.append("   and not exists (select 1 ");
		sqlBF.append("     from ad3u.per_pause e         ");
		sqlBF.append("     where b.ryid = e.ryid ");
		sqlBF.append("       and to_char(e.ztsj,'yyyyMM')= ? ) ");
		sqlBF.append("   group by jjlxmx, dylqlb, dwxz)  ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, cxsy);
		this.sql.setString(2, cxny);
		this.sql.setString(3, cxny);
		System.out.println(sql.getSqlString());
		DataStore dsTxjy = this.sql.executeQuery();

		// 待遇恢复
		sqlBF.setLength(0);
		sqlBF.append(" select txhfhj, txhfgy, txhfjt, txhfgt, txhfwz, txhfjghj,   ");
		sqlBF.append("       txhfhj - txhfgy - txhfjt - txhfgt - txhfwz txhfkm   ");
		sqlBF.append("  from (   ");
		sqlBF.append("        select sum(decode(dylqlb, '101', count(distinct b.ryid), 0)) txhfhj,   ");
		sqlBF.append("       sum(decode(dylqlb, '101',decode(jjlxmx, '110', count(distinct b.ryid), 0))) txhfgy,   ");
		sqlBF.append("       sum(decode(dylqlb,'101',decode(jjlxmx, '120', count(distinct b.ryid), 0))) txhfjt,   ");
		sqlBF.append("       sum(decode(dylqlb, '101',decode(dwxz, '60', count(distinct b.ryid), 0))) txhfgt,   ");
		sqlBF.append("       sum(decode(dylqlb,'101',decode(jjlxmx,'200',count(distinct b.ryid),'210',count(distinct b.ryid),   ");
		sqlBF.append("                         '220',count(distinct b.ryid),'230',count(distinct b.ryid),'240',count(distinct b.ryid),   ");
		sqlBF.append("                         '290',count(distinct b.ryid),'300',count(distinct b.ryid),'310',count(distinct b.ryid),   ");
		sqlBF.append("                         '320',count(distinct b.ryid),'330',count(distinct b.ryid),'340',count(distinct b.ryid),   ");
		sqlBF.append("                         '390',count(distinct b.ryid),0))) txhfwz,   ");
		sqlBF.append("       sum(decode(dylqlb, '102', count(distinct b.ryid), 0)) txhfjghj   ");
		sqlBF.append("  from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c ");
		sqlBF.append(" where a.dwid = c.dwid   ");
		sqlBF.append("   and b.dwdjid = c.dwdjid   ");
		sqlBF.append("   and exists (select 1  ");
		sqlBF.append("           from " + mapTableName.get(cxny) + " d  ");
		sqlBF.append("          where b.ryid = d.ryid  ");
		sqlBF.append("            and d.ffny = ? ");
		sqlBF.append("            and rownum = 1) ");
		sqlBF.append("         and not exists (select 1  ");
		sqlBF.append("           from " + mapTableName.get(cxsy) + " d  ");
		sqlBF.append("          where b.ryid = d.ryid  ");
		sqlBF.append("            and d.ffny = ? ");
		sqlBF.append("            and rownum = 1) ");
		sqlBF.append("   and exists (select 1  ");
		sqlBF.append("     from ad3u.per_pause e         ");
		sqlBF.append("          where b.ryid = e.ryid ");
		sqlBF.append("            and to_char(e.hfsj,'yyyyMM') = ? )    ");
		sqlBF.append("   group by jjlxmx, dylqlb,dwxz) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, cxny);
		this.sql.setString(2, cxsy);
		this.sql.setString(3, cxny);
		DataStore dsTxhf = this.sql.executeQuery();

		// 待遇暂停
		sqlBF.setLength(0);
		sqlBF.append(" select txzthj, txztgy, txztjt, txztgt, txztwz, txztjghj,   ");
		sqlBF.append("       txzthj - txztgy - txztjt - txztgt - txztwz txztkm   ");
		sqlBF.append("  from (   ");
		sqlBF.append("        select sum(decode(dylqlb, '101', count(distinct b.ryid), 0)) txzthj,   ");
		sqlBF.append("       sum(decode(dylqlb, '101',decode(jjlxmx, '110', count(distinct b.ryid), 0))) txztgy,   ");
		sqlBF.append("       sum(decode(dylqlb,'101',decode(jjlxmx, '120', count(distinct b.ryid), 0))) txztjt,   ");
		sqlBF.append("       sum(decode(dylqlb, '101',decode(dwxz, '60', count(distinct b.ryid), 0))) txztgt,   ");
		sqlBF.append("       sum(decode(dylqlb,'101',decode(jjlxmx,'200',count(distinct b.ryid),'210',count(distinct b.ryid),   ");
		sqlBF.append("                         '220',count(distinct b.ryid),'230',count(distinct b.ryid),'240',count(distinct b.ryid),   ");
		sqlBF.append("                         '290',count(distinct b.ryid),'300',count(distinct b.ryid),'310',count(distinct b.ryid),   ");
		sqlBF.append("                         '320',count(distinct b.ryid),'330',count(distinct b.ryid),'340',count(distinct b.ryid),   ");
		sqlBF.append("                         '390',count(distinct b.ryid),0))) txztwz,   ");
		sqlBF.append("       sum(decode(dylqlb, '102', count(distinct b.ryid), 0)) txztjghj   ");
		sqlBF.append("  from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c  ");
		sqlBF.append(" where a.dwid = c.dwid   ");
		sqlBF.append("   and b.dwdjid = c.dwdjid  ");
		sqlBF.append("   and exists (select 1  ");
		sqlBF.append("           from " + mapTableName.get(cxsy) + " d  ");
		sqlBF.append("          where b.ryid = d.ryid  ");
		sqlBF.append("            and d.ffny = ? ");
		sqlBF.append("            and rownum = 1) ");
		sqlBF.append("         and not exists (select 1  ");
		sqlBF.append("           from " + mapTableName.get(cxny) + " d  ");
		sqlBF.append("          where b.ryid = d.ryid  ");
		sqlBF.append("            and d.ffny = ? ");
		sqlBF.append("            and rownum = 1)  ");
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("          from ad3u.per_pause e         ");
		sqlBF.append("          where b.ryid = e.ryid ");
		sqlBF.append("            and to_char(e.ztsj,'yyyyMM')= ?)  ");
		sqlBF.append("   group by jjlxmx, dylqlb, dwxz)  ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, cxsy);
		this.sql.setString(2, cxny);
		this.sql.setString(3, cxny);
		DataStore dsTxzt = this.sql.executeQuery();

		//本月末
		sqlBF.setLength(0);
		sqlBF.append(" select '企业合计'dwlx,    ");
		sqlBF.append("        sum(count(distinct b.ryid)) xszj,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',0,'A3',0,count(distinct b.ryid)),0))lxxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',count(distinct b.ryid),0),0))txxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A3',count(distinct b.ryid),0),0))tzxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'B',count(distinct b.ryid)，0))gxxs  ");
		sqlBF.append("   from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c   ");
		sqlBF.append("  where a.dwid = c.dwid   ");
		sqlBF.append("    and b.dwdjid = c.dwdjid     ");
		sqlBF.append("    and b.dylqlb = '101'  ");
		sqlBF.append("    and exists (select 1  ");
		sqlBF.append("             from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("            where b.ryid = d.ryid  ");
		sqlBF.append("              and d.ffny = ? ");
		sqlBF.append("              and rownum = 1) ");
		sqlBF.append("    group by zfrylb,sszfrq   ");
		sqlBF.append("  union all   ");
		sqlBF.append("  select '国有企业'dwlx,    ");
		sqlBF.append("        sum(count(distinct b.ryid)) xszj,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',0,'A3',0,count(distinct b.ryid)),0))lxxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',count(distinct b.ryid),0),0))txxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A3',count(distinct b.ryid),0),0))tzxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'B',count(distinct b.ryid)，0))gxxs  ");
		sqlBF.append("   from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c ");
		sqlBF.append("  where a.dwid = c.dwid   ");
		sqlBF.append("    and b.dwdjid = c.dwdjid   ");
		sqlBF.append("    and a.jjlxmx = '110'   ");
		sqlBF.append("    and b.dylqlb = '101'  ");
		sqlBF.append("    and exists (select 1  ");
		sqlBF.append("             from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("            where b.ryid = d.ryid  ");
		sqlBF.append("              and d.ffny = ? ");
		sqlBF.append("              and rownum = 1)  ");
		sqlBF.append("    group by zfrylb,sszfrq   ");
		sqlBF.append("  union all   ");
		sqlBF.append("  select '集体企业'dwlx,    ");
		sqlBF.append("        sum(count(distinct b.ryid)) xszj,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',0,'A3',0,count(distinct b.ryid)),0))lxxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',count(distinct b.ryid),0),0))txxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A3',count(distinct b.ryid),0),0))tzxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'B',count(distinct b.ryid)，0))gxxs  ");
		sqlBF.append("   from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c ");
		sqlBF.append("  where a.dwid = c.dwid   ");
		sqlBF.append("    and b.dwdjid = c.dwdjid   ");
		sqlBF.append("    and a.jjlxmx = '120'   ");
		sqlBF.append("    and b.dylqlb = '101'  ");
		sqlBF.append("    and exists (select 1  ");
		sqlBF.append("             from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("            where b.ryid = d.ryid  ");
		sqlBF.append("              and d.ffny = ? ");
		sqlBF.append("              and rownum = 1)  ");
		sqlBF.append("    group by zfrylb,sszfrq   ");
		sqlBF.append("    union all   ");
		sqlBF.append("  select '企业个体'dwlx,    ");
		sqlBF.append("        sum(count(distinct b.ryid)) xszj,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',0,'A3',0,count(distinct b.ryid)),0))lxxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',count(distinct b.ryid),0),0))txxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A3',count(distinct b.ryid),0),0))tzxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'B',count(distinct b.ryid)，0))gxxs  ");
		sqlBF.append("   from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c ");
		sqlBF.append("  where a.dwid = c.dwid   ");
		sqlBF.append("    and b.dwdjid = c.dwdjid   ");
		sqlBF.append("    and a.dwxz = '60'   ");
		sqlBF.append("    and b.dylqlb = '101'  ");
		sqlBF.append("    and exists (select 1  ");
		sqlBF.append("             from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("            where b.ryid = d.ryid  ");
		sqlBF.append("              and d.ffny = ? ");
		sqlBF.append("              and rownum = 1)  ");
		sqlBF.append("    group by zfrylb,sszfrq   ");
		sqlBF.append("     union all   ");
		sqlBF.append("  select '外企企业'dwlx,    ");
		sqlBF.append("        sum(count(distinct b.ryid)) xszj,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',0,'A3',0,count(distinct b.ryid)),0))lxxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',count(distinct b.ryid),0),0))txxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A3',count(distinct b.ryid),0),0))tzxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'B',count(distinct b.ryid)，0))gxxs  ");
		sqlBF.append("   from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c  ");
		sqlBF.append("  where a.dwid = c.dwid   ");
		sqlBF.append("    and b.dwdjid = c.dwdjid   ");
		sqlBF.append("    and a.jjlxmx in('200','210','220','230','240','290','300','310','320','330','340','390')   ");
		sqlBF.append("    and b.dylqlb = '101'  ");
		sqlBF.append("    and exists (select 1  ");
		sqlBF.append("             from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("            where b.ryid = d.ryid  ");
		sqlBF.append("              and d.ffny = ? ");
		sqlBF.append("              and rownum = 1)  ");
		sqlBF.append("    group by zfrylb,sszfrq   ");
		sqlBF.append("     union all   ");
		sqlBF.append("  select '机关合计'dwlx,    ");
		sqlBF.append("        sum(count(distinct b.ryid)) xszj,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',0,'A3',0,count(distinct b.ryid)),0))lxxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A2',count(distinct b.ryid),0),0))txxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'A',decode(substr(zfrylb,0,2),'A3',count(distinct b.ryid),0),0))tzxs,   ");
		sqlBF.append("        sum(decode(sszfrq,'B',count(distinct b.ryid)，0))gxxs  ");
		sqlBF.append("   from biu.orgn a, ad3u.per_info b, si3u.orgn_reg c ");
		sqlBF.append("  where a.dwid = c.dwid   ");
		sqlBF.append("    and b.dwdjid = c.dwdjid   ");
		sqlBF.append("    and b.dylqlb = '102'  ");
		sqlBF.append("    and exists (select 1  ");
		sqlBF.append("             from " + mapTableName.get(cxny) +" d  ");
		sqlBF.append("            where b.ryid = d.ryid  ");
		sqlBF.append("              and d.ffny = ? ");
		sqlBF.append("              and rownum = 1)  ");
		sqlBF.append("    group by zfrylb,sszfrq ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, cxny);
		this.sql.setString(2, cxny);
		this.sql.setString(3, cxny);
		this.sql.setString(4, cxny);
		this.sql.setString(5, cxny);
		this.sql.setString(6, cxny);
		DataStore dsTxxs = this.sql.executeQuery();

		// 计算扩面企业
		int xshj = dsTxxs.getInt(0, "xszj");
		int lxhj = dsTxxs.getInt(0, "lxxs");
		int txhj = dsTxxs.getInt(0, "txxs");
		int tzhj = dsTxxs.getInt(0, "tzxs");
		int gzhj = dsTxxs.getInt(0, "gxxs");
		for (int i = 1; i < dsTxxs.rowCount(); i++) {
			int xstemp = dsTxxs.getInt(i, "xszj");
			int lxtemp = dsTxxs.getInt(i, "lxxs");
			int txtemp = dsTxxs.getInt(i, "txxs");
			int tztemp = dsTxxs.getInt(i, "tzxs");
			int gztemp = dsTxxs.getInt(i, "gxxs");
			if (i < dsTxxs.rowCount() - 1) {
				xshj = xshj - xstemp;
				lxhj = lxhj - lxtemp;
				txhj = txhj - txtemp;
				tzhj = tzhj - tztemp;
				gzhj = gzhj - gztemp;
			}
		}
		dsTxxs.insertRow(3);
		dsTxxs.put(3, "xszj", xshj);
		dsTxxs.put(3, "lxxs", lxhj);
		dsTxxs.put(3, "txxs", txhj);
		dsTxxs.put(3, "tzxs", tzhj);
		dsTxxs.put(3, "gxxs", gzhj);

		DataStore dsTxBd = new DataStore();
		// 庞大的合并。。。

		// 期初离退休人数行专列
		pdo.clear();
		pdo.put("dsOld", dsQcrs);
		pdo.put("hmstr", "qcqyhj;qcgy;qcjt;qckm;qcgt;qywz;qcjghj");
		pdo.put("lmstr", "qcqyhj");
		dsQcrs = this.changeLineToRow(pdo);

		// 退休单位调入
//		pdo.clear();
//		pdo.put("dsOld", dsDwdr);
//		pdo.put("hmstr", "txdrhj;txdrgy;txdrjt;txdrkm;txdrgt;txdrwz;txdrjghj");
//		pdo.put("lmstr", "dwdr");
//		dsDwdr = this.changeLineToRow(pdo);

		// 退休恢复
		pdo.clear();
		pdo.put("dsOld", dsTxhf);
		pdo.put("hmstr", "txhfhj;txhfgy;txhfjt;txhfkm;txhfgt;txhfwz;txhfjghj");
		pdo.put("lmstr", "txhf");
		dsTxhf = this.changeLineToRow(pdo);

		// 退休减员
		pdo.clear();
		pdo.put("dsOld", dsTxjy);
		pdo.put("hmstr", "txjyhj;txjygy;txjyjt;txjykm;txjygt;txjywz;txjyjghj");
		pdo.put("lmstr", "txjy");
		dsTxjy = this.changeLineToRow(pdo);

		// 退休死亡
		pdo.clear();
		pdo.put("dsOld", dsTxsw);
		pdo.put("hmstr", "txswhj;txswgy;txswjt;txswkm;txswgt;txswwz;txswjghj");
		pdo.put("lmstr", "txsw");
		dsTxsw = this.changeLineToRow(pdo);

		// 单位调出
//		pdo.clear();
//		pdo.put("dsOld", dsDwdc);
//		pdo.put("hmstr", "txdchj;txdcgy;txdcjt;txdckm;txdcgt;txdcwz;txdcjghj");
//		pdo.put("lmstr", "dwdc");
//		dsDwdc = this.changeLineToRow(pdo);

		// 单位暂停
		pdo.clear();
		pdo.put("dsOld", dsTxzt);
		pdo.put("hmstr", "txzthj;txztgy;txztjt;txztkm;txztgt;txztwz;txztjghj");
		pdo.put("lmstr", "txzt");
		dsTxzt = this.changeLineToRow(pdo);

		for (int i = 0; i < 7; i++) {
			dsTxBd.addRow();
			if (i == 0) {
				dsTxBd.put(i, "dwlx", "一、企业合计");
			} else if (i == 1) {
				dsTxBd.put(i, "dwlx", "    1、国有企业 ");
			} else if (i == 2) {
				dsTxBd.put(i, "dwlx", "    2、集体企业 ");
			} else if (i == 3) {
				dsTxBd.put(i, "dwlx", "    3、扩面企业 ");
			} else if (i == 4) {
				dsTxBd.put(4, "dwlx", "    4、企业个体");
			} else if (i == 5) {
				dsTxBd.put(5, "dwlx", "5、港、澳、台及外资企业");
			} else if (i == 6) {
				dsTxBd.put(6, "dwlx", "二、机关事业社会团体");
			}
			
			dsTxBd.put(i, "qcltxrs", dsQcrs.getInt(i, "qcqyhj")+"");// 待行专列
			dsTxBd.put(i, "dyzjtx", (dsDyzj.getInt(i, "dyzj") + dsTxhf.getInt(i, "txhf")) +"");
			dsTxBd.put(i, "zctxzj", dsDyzj.getInt(i, "zctxxz")+"");
			dsTxBd.put(i, "ltxzj", dsDyzj.getInt(i, "ltxxz")+"");
			dsTxBd.put(i, "ybtqtx", dsDyzj.getInt(i, "ybtxxz")+"");
			
			dsTxBd.put(i, "tsgztqtx", dsDyzj.getInt(i, "tstxxz")+"");
			dsTxBd.put(i, "sytxxz", dsDyzj.getInt(i, "sytxxz")+"");
			dsTxBd.put(i, "jgtxxz", dsDyzj.getInt(i, "jgtxxz")+"");
			dsTxBd.put(i, "txdwdr", 0+"");
			dsTxBd.put(i, "txxb", dsTxhf.getInt(i, "txhf")+"");
			
			dsTxBd.put(i, "dyjsltxrs", (dsTxjy.getInt(i, "txjy") + dsTxzt.getInt(i, "txzt")) +"");
			dsTxBd.put(i, "txsw", dsTxsw.getInt(i, "txsw")+"");
			dsTxBd.put(i, "txdwdc", 0+"");
			dsTxBd.put(i, "txzt", dsTxzt.getInt(i, "txzt")+"");
			dsTxBd.put(i, "qmltxxsrs", dsTxxs.getInt(i, "xszj")+"");
			
			dsTxBd.put(i, "lxrs", dsTxxs.getInt(i, "lxxs")+"");
			dsTxBd.put(i, "txrs", dsTxxs.getInt(i, "txxs")+"");
			dsTxBd.put(i, "tzrs", dsTxxs.getInt(i, "tzxs")+"");
			dsTxBd.put(i, "gyrs", dsTxxs.getInt(i, "gxxs")+"");
		}
		
		// 居民ds合并
		String jbjgid = this.getBizInstitution();
		if(jbjgid.length() >= 6){
			 jbjgid = jbjgid.substring(0, 6) + "05";
		}

		sqlBF.setLength(0);
		sqlBF.append(" select count(distinct a.dydjid) dyzjtx   ");
		sqlBF.append("   from rg3u.per_reg a   ");
		sqlBF.append("  where a.xzbz = ? ");
		sqlBF.append("    and jbjgid = ?   ");
		sqlBF.append("    and to_char(a.jbsj, 'yyyymm') = ?   ");
		String dyzjtxStr = sqlBF.toString();

		this.sql.setSql(dyzjtxStr);
		this.sql.setString(1, "111");
		this.sql.setString(2, jbjgid);
		this.sql.setString(3, cxny);
		DataStore bzdDyzjtxDs = this.sql.executeQuery(); // 被征地当月增加退休人数 、被征地当月退休新增

		this.sql.setSql(dyzjtxStr);
		this.sql.setString(1, "114");
		this.sql.setString(2, jbjgid);
		this.sql.setString(3, cxny);
		DataStore lnbDyzjtxDs = this.sql.executeQuery(); // 老农保当月增加退休人数 、老农保当月退休新增

		sqlBF.setLength(0);
		sqlBF.append(" select count(distinct a.dydjid) dyjsltxrs   ");
		sqlBF.append("   from rg3u.per_term_exam a, rg3u.per_reg b  ");
		sqlBF.append("  where a.dydjid = b.dydjid  ");
		sqlBF.append("    and a.xzbz = ? ");
		sqlBF.append("    and b.jbjgid = ?   ");
		sqlBF.append("    and to_char(a.jbsj, 'yyyymm') = ?   ");
		String dyjsltxrsStr = sqlBF.toString();

		this.sql.setSql(dyjsltxrsStr);
		this.sql.setString(1, "111");
		this.sql.setString(2, jbjgid);
		this.sql.setString(3, cxny);
		DataStore bzdDyjsltxrsDs = this.sql.executeQuery(); // 被征地当月减少退休人数

		this.sql.setSql(dyjsltxrsStr);
		this.sql.setString(1, "114");
		this.sql.setString(2, jbjgid);
		this.sql.setString(3, cxny);
		DataStore lnbDyjsltxrsDs = this.sql.executeQuery(); // 老农保当月减少退休人数

		sqlBF.setLength(0);
		sqlBF.append(" select count(distinct a.dydjid) txsw   ");
		sqlBF.append("   from rg3u.per_term_exam a, rg3u.per_reg b   ");
		sqlBF.append("  where a.dydjid = b.dydjid  ");
		sqlBF.append("    and a.xzbz = ? ");
		sqlBF.append("    and a.bgyy = ? " );
		sqlBF.append("    and b.jbjgid = ?   ");
		sqlBF.append("    and to_char(a.jbsj, 'yyyymm') = ?   ");
		String txswStr = sqlBF.toString();

		this.sql.setSql(txswStr);
		this.sql.setString(1, "111");
		this.sql.setString(2, "F411");
		this.sql.setString(3, jbjgid);
		this.sql.setString(4, cxny);
		DataStore bzdTxswDs = this.sql.executeQuery(); // 被征地退休死亡

		this.sql.setSql(txswStr);
		this.sql.setString(1, "114");
		this.sql.setString(2, "L411");
		this.sql.setString(3, jbjgid);
		this.sql.setString(4, cxny);
		DataStore lnbTxswDs = this.sql.executeQuery(); // 老农保退休死亡

		sqlBF.setLength(0);
		sqlBF.append(" select count(distinct a.dydjid) txzt   ");
		sqlBF.append("   from rg3u.per_pause a,rg3u.per_reg b  ");
		sqlBF.append("  where a.dydjid = b.dydjid  ");
		sqlBF.append("    and a.xzbz = ? ");
		sqlBF.append("    and a.hfny is null   ");
		sqlBF.append("    and b.jbjgid = ?   ");
		sqlBF.append("    and to_char(a.ztsj, 'yyyymm') = ?   ");
		String txztStr = sqlBF.toString();

		this.sql.setSql(txztStr);
		this.sql.setString(1, "111");
		this.sql.setString(2, jbjgid);
		this.sql.setString(3, cxny);
		DataStore bzdTxztDs = this.sql.executeQuery(); // 被征地退休暂停

		this.sql.setSql(txztStr);
		this.sql.setString(1, "114");
		this.sql.setString(2, jbjgid);
		this.sql.setString(3, cxny);
		DataStore lnbTxztDs = this.sql.executeQuery(); // 老农保退休暂停

		sqlBF.setLength(0);
		sqlBF.append(" select count(distinct a.dydjid) qmltxxsrs   ");
		sqlBF.append("   from rg3u.per_reg a   ");
		sqlBF.append("  where a.xzbz = ? ");
		sqlBF.append("    and a.dyffzt = '1'   ");
		sqlBF.append("    and a.jbjgid = ?   ");
		String qmltxxsrsStr = sqlBF.toString();

		this.sql.setSql(qmltxxsrsStr);
		this.sql.setString(1, "111");
		this.sql.setString(2, jbjgid);
		DataStore bzdQmltxxsrsDs = this.sql.executeQuery(); // 被征地期末离退休享受人数
															// 、被征地退休人数

		this.sql.setSql(qmltxxsrsStr);
		this.sql.setString(1, "114");
		this.sql.setString(2, jbjgid);
		DataStore lnbQmltxxsrsDs = this.sql.executeQuery(); // 老农保期末离退休享受人数、老农保退休人数

		dsTxBd.addRow();
		dsTxBd.put(dsTxBd.rowCount() - 1, "dwlx", "被征地");
		dsTxBd.put(dsTxBd.rowCount() - 1, "qcltxrs", (bzdQmltxxsrsDs.getInt(0, "qmltxxsrs")
				+ bzdDyjsltxrsDs.getInt(0, "dyjsltxrs")
				- bzdDyzjtxDs.getInt(0, "dyzjtx"))+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "dyzjtx", bzdDyzjtxDs.getInt(0, "dyzjtx")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "zctxzj", bzdDyzjtxDs.getInt(0, "dyzjtx")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "ltxzj", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "ybtqtx", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "tsgztqtx", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "sytxxz", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "jgtxxz", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txdwdr", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txxb", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "dyjsltxrs", bzdDyjsltxrsDs.getInt(0, "dyjsltxrs")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txsw", bzdTxswDs.getInt(0, "txsw")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txdwdc", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txzt", bzdTxztDs.getInt(0, "txzt")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "qmltxxsrs", bzdQmltxxsrsDs.getInt(0, "qmltxxsrs")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "lxrs", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txrs", bzdQmltxxsrsDs.getInt(0, "qmltxxsrs")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "tzrs", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "gyrs", 0+"");

		dsTxBd.addRow();
		dsTxBd.put(dsTxBd.rowCount() - 1, "dwlx", "老农保");
		dsTxBd.put(dsTxBd.rowCount() - 1, "qcltxrs", (lnbQmltxxsrsDs.getInt(0, "qmltxxsrs")
				+ lnbDyjsltxrsDs.getInt(0, "dyjsltxrs")
				- lnbDyzjtxDs.getInt(0, "dyzjtx"))+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "dyzjtx", lnbDyzjtxDs.getInt(0, "dyzjtx")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "zctxzj", lnbDyzjtxDs.getInt(0, "dyzjtx")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "ltxzj", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "ybtqtx", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "tsgztqtx", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "sytxxz", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "jgtxxz", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txdwdr", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txxb", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "dyjsltxrs", lnbDyjsltxrsDs.getInt(0, "dyjsltxrs")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txsw", lnbTxswDs.getInt(0, "txsw")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txdwdc", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txzt", lnbTxztDs.getInt(0, "txzt")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "qmltxxsrs", lnbQmltxxsrsDs.getInt(0, "qmltxxsrs")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "lxrs", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "txrs", lnbQmltxxsrsDs.getInt(0, "qmltxxsrs")+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "tzrs", 0+"");
		dsTxBd.put(dsTxBd.rowCount() - 1, "gyrs", 0+"");

		// 记日志
		querylogid = QueryLogTool.saveQueryLog("养老离退休人数变动表查询", "职工养老支付-离退休人员及遗属情况", this.getUser()
			.getUserid(), para);
		QueryLogTool.updateQueryLog(querylogid, dsTxBd.rowCount());
		
		rdo.put("dsltxbd", dsTxBd);
		// 增加打印字符串的返回 -- zkj modify 2018/01/31
		// 重新组装ds,原来ds种字段名太长，打印格式装不下
		DataStore dsTemp = new DataStore();
		for (int i = 0; i < dsTxBd.rowCount(); i++) {
			dsTemp.addRow();
			dsTemp.put(dsTemp.rowCount() - 1, "qclx",
					dsTxBd.getString(i, "qcltxrs"));
			dsTemp.put(dsTemp.rowCount() - 1, "dyzj",
					dsTxBd.getString(i, "dyzjtx"));
			dsTemp.put(dsTemp.rowCount() - 1, "zctx",
					dsTxBd.getString(i, "zctxzj"));
			dsTemp.put(dsTemp.rowCount() - 1, "ltxz",
					dsTxBd.getString(i, "ltxzj"));
			dsTemp.put(dsTemp.rowCount() - 1, "ybt",
					dsTxBd.getString(i, "ybtqtx"));
			dsTemp.put(dsTemp.rowCount() - 1, "tsg",
					dsTxBd.getString(i, "tsgztqtx"));
			dsTemp.put(dsTemp.rowCount() - 1, "syt",
					dsTxBd.getString(i, "sytxxz"));
			dsTemp.put(dsTemp.rowCount() - 1, "jgt",
					dsTxBd.getString(i, "jgtxxz"));
			dsTemp.put(dsTemp.rowCount() - 1, "txd",
					dsTxBd.getString(i, "txdwdr"));
			dsTemp.put(dsTemp.rowCount() - 1, "txx",
					dsTxBd.getString(i, "txxb"));
			dsTemp.put(dsTemp.rowCount() - 1, "dyj",
					dsTxBd.getString(i, "dyjsltxrs"));
			dsTemp.put(dsTemp.rowCount() - 1, "txsw",
					dsTxBd.getString(i, "txsw"));
			dsTemp.put(dsTemp.rowCount() - 1, "txdw",
					dsTxBd.getString(i, "txdwdc"));
			dsTemp.put(dsTemp.rowCount() - 1, "txzt",
					dsTxBd.getString(i, "txzt"));
			dsTemp.put(dsTemp.rowCount() - 1, "qmltx",
					dsTxBd.getString(i, "qmltxxsrs"));
			dsTemp.put(dsTemp.rowCount() - 1, "lxrs",
					dsTxBd.getString(i, "lxrs"));
			dsTemp.put(dsTemp.rowCount() - 1, "txrs",
					dsTxBd.getString(i, "txrs"));
			dsTemp.put(dsTemp.rowCount() - 1, "tzrs",
					dsTxBd.getString(i, "tzrs"));
			dsTemp.put(dsTemp.rowCount() - 1, "gyrs",
					dsTxBd.getString(i, "gyrs"));
			dsTemp.put(dsTemp.rowCount() - 1, "dwlx",
					dsTxBd.getString(i, "dwlx"));
		}
		SPrinter sprinter = new SPrinter();
		sprinter.putDataStore(dsTemp);
		// 去查询月份如果是10月份以前不取0
		String yf = "";
		if ("0".equals(cxny.substring(4, 5))) {
			yf = cxny.substring(5);
		} else {
			yf = cxny.substring(4);
		}
		sprinter.putPara("yf", yf + "月");
		String printHtml = sprinter.print(this.getBizInstitution(),
				"SiYllxrsbdb");
		rdo.put("printHtml", printHtml);
		// end
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.行转列(仅支持单行转单列)
	 * @author blp
	 * @date 创建时间 2017-11-3
	 * @since V1.0
	 */
	public DataStore changeLineToRow(DataObject para) throws Exception {
		DataStore dsOld = para.getDataStore("dsOld");
		String lmstr = para.getString("lmstr");
		String hmstr = para.getString("hmstr");
		String lmarr[] = lmstr.split(";");
		String hmarr[] = hmstr.split(";");
		
		DataStore dsNew = new DataStore();
		for (int i = 0; i < dsOld.rowCount(); i++) {
			for (int j = 0; j < 7; j++) {
				int temp = dsOld.getInt(i, hmarr[j]);
				String lm = lmarr[i];
				if (dsNew.rowCount() < j + 1) {
					dsNew.addRow();
				}
				dsNew.put(j, lm, temp);
			}
		}
		return dsNew;
	}
	
	/**
	 * 方法简介. 查询退休死亡人员人数
	 * 
     * @author cjy
	 * @创建时间 2017.11.06
	 * @since V1.0 
	 * */
	public DataObject queryTxswrsInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq;
		DataStore dsswryInfo = new DataStore();
		String dwxz,jbjgid;
		
		// 记日志
		String querylogid = QueryLogTool.saveQueryLog("退休死亡人员查询", "职工养老支付-退休死亡人员查询", this.getUser().getUserid(),para);

		// 接参数
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		dwxz = para.getString("dwxz","");
		dwxz = HsuTools.replaceC2QCQ(dwxz);
		jbjgid = para.getString("jbjgid");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		sqlBF.setLength(0);

		sqlBF.append("    select  r.dwdjid,r.cbdwxz dwxz,r.dwbh,r.cbdwmc dwmc,count(a.ryid) swrs ");
		sqlBF.append("      from  si3u.orgn_reg  r,  ad3u.per_info  a,  ad3u.per_reg  x ");
		sqlBF.append("     where  a.ryid  =  x.ryid ");
		sqlBF.append("       and  a.dwdjid  =  r.dwdjid ");
		sqlBF.append("       and  x.bljyyy  =  '401' ");
		sqlBF.append("       and  x.jbjgid  in ( " + jbjgid + " ) ");
		sqlBF.append("       and  to_char(x.bljysj,  'yyyyMMdd')  between  ?  and  ? ");
		if (!"".equals(dwxz)){
			sqlBF.append("   and  r.cbdwxz  in ( " + dwxz + " ) ");
		}
		sqlBF.append("     group  by r.dwdjid,r.cbdwxz,r.dwbh,r.cbdwmc ");
		sqlBF.append("     order  by r.cbdwxz ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);

		dsswryInfo = this.sql.executeQuery();

		rdo.put("dsswryinfo", dsswryInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsswryInfo.rowCount());

		return rdo;
	}
	
	/**
	 * 方法简介. 退休减员明细查询
	 * 
	 * @author cjy
	 * @创建时间 2017.11.06
	 * @since V1.0
	 */
	public DataObject queryTxswryInfoByOrgn(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, ryid, jyrq, maxNy;
		DataStore ds = new DataStore(), dsTxjyInfo = new DataStore();
		String sqlNatl, sqlMaxNy, sqlTxj, sqlKj, sqlSzfx, sqlNatl_ys, sszfrq;
		double txj, ddwff, kjje, zhfh, szf, fxj, jtbt, txj2;
		String jbjgid, dwdjid;
		double stjfnx, sjjfnx, zjfnx;
		double ycxjjf;// 一次性救济费。

		// 接参数
		dwdjid = para.getString("dwdjid");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		jbjgid = para.getString("jbjgid");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		// 查询符合条件的办理减员的养老人员登记信息(职工)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, '' xm, '' shbzhm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszwjb, '' xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, a.shbzhm, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  e.stjfnx, e.sjjfnx, e.dacsrq");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and b.jbjgid in (" + jbjgid + ") ");
        sqlBF.append("	  and b.bljyyy = '401' ");
        sqlBF.append("	  and o.dwdjid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, dwdjid);
		this.readonlysql.setString(2, qsrq);
		this.readonlysql.setString(3, zzrq);

		DataStore dsTxjyInfo_zg = this.readonlysql.executeQuery();

		// 查询符合条件的办理减员的养老人员登记信息(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, s.yslb zfrylb,  b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, '' xm, '' shbzhm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszwjb, '' xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, a.shbzhm, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  '' stjfnx, '' sjjfnx, '' dacsrq");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info s, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = s.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'B' ");
        sqlBF.append("    and  b.jbjgid in (" + jbjgid + ") ");
        sqlBF.append("	  and b.bljyyy = '401' ");
        sqlBF.append("	  and o.dwdjid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, dwdjid);
		this.readonlysql.setString(2, qsrq);
		this.readonlysql.setString(3, zzrq);

		DataStore dsTxjyInfo_ys = this.readonlysql.executeQuery();

		// 取人员基本信息的sql（职工）
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz, e.cjgzrq ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlNatl = sqlBF.toString();

		// 取人员基本信息的sql(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlNatl_ys = sqlBF.toString();

		// 取最大拨付年月的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(max(zzny), '204912') maxny ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlMaxNy = sqlBF.toString();

		// 查询退休金的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) txj, ");
		sqlBF.append(" 	      nvl(sum(decode(b.btlb, '901', a.btje, 0)), 0) ddwff, ");
		sqlBF.append("        nvl(sum(decode(a.xzbz, '106', a.btje, 0)), 0) jtbt ");
		sqlBF.append("   from ad3u.per_giv_month_std a,  ");
		sqlBF.append(" 	      ad3u.giv_item b ");
		sqlBF.append("  where a.btbh = b.btbh ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and ? between a.qsny and nvl(a.zzny,'204912') ");
		sqlTxj = sqlBF.toString();

		// 扣减金额
		// 修正因录入发放月份有负数而产生了正数扣减而导致的计算错误 modify.zxz.20170726
		sqlBF.setLength(0);
		sqlBF.append("select nvl(sum(btje), 0) kjje ");
		sqlBF.append("  from (select nvl(a.btje, 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje < 0 ");
		sqlBF.append("           and a.fflb in ('A', 'D') ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("        union all ");
		sqlBF.append("        select nvl((a.btje * 2), 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje > 0 ");
		sqlBF.append("           and a.fflb = 'A' ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("           and exists ");
		sqlBF.append("         (select 1 ");
		sqlBF.append("                  from ad3u.per_giv_month_std c ");
		sqlBF.append("                 where c.ryid = a.ryid ");
		sqlBF.append("                   and a.btbh = c.btbh ");
		sqlBF.append("                   and a.xzbz = c.xzbz ");
		sqlBF.append("                   and c.btje < 0 ");
		sqlBF.append("                   and a.btje = - (c.btje) ");
		sqlBF.append("                   and c.zzny = ? )) ");
		//modify.zxz.20170726.end
		sqlKj = sqlBF.toString();

		// 丧葬费、抚恤金、个人账户返还
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(a.btbh, 'A1D1', a.btje, 'B1D1', a.btje, 0)), 0) szf, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A1D2', a.btje, 'B1D2', a.btje, 0)), 0) fxj, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A186', a.btje, 'B186', a.btje, 0)), 0) ycxjjf, ");
		sqlBF.append(" 	      nvl(sum(decode(a.btbh, 'A107', a.btje, 'A10R', a.btje, 0)), 0) zhfh ");
		sqlBF.append("   from ad3u.per_giv_detl a ");
		sqlBF.append("  where ryid = ? ");
		sqlSzfx = sqlBF.toString();

		dsTxjyInfo = dsTxjyInfo_zg.combineDatastore(dsTxjyInfo_ys);

		// 查询人员基本信息,待遇信息
		for (int i = 0; i < dsTxjyInfo.rowCount(); i++) {
			ryid = dsTxjyInfo.getString(i, "ryid");
			jyrq = dsTxjyInfo.getString(i, "jyrq");
			sszfrq = dsTxjyInfo.getString(i, "sszfrq");
			stjfnx = dsTxjyInfo.getDouble(i, "stjfnx");
			sjjfnx = dsTxjyInfo.getDouble(i, "sjjfnx");
			zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);

			dsTxjyInfo.put(i, "zjfnx", zjfnx);

			if ("A".equals(sszfrq)) {
				this.readonlysql.setSql(sqlNatl);
			}
			if ("B".equals(sszfrq)) {
				this.readonlysql.setSql(sqlNatl_ys);
			}

			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}
			dsTxjyInfo.put(i, "xm", ds.getString(0, "xm"));
			dsTxjyInfo.put(i, "shbzhm", ds.getString(0, "shbzhm"));
			dsTxjyInfo.put(i, "xb", ds.getString(0, "xb"));
			dsTxjyInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsTxjyInfo.put(i, "csrq", ds.getString(0, "csrq"));
			dsTxjyInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsTxjyInfo.put(i, "zyjszwjb", ds.getString(0, "zyjszwjb"));
			dsTxjyInfo.put(i, "xzzw", ds.getString(0, "xzzw"));
			dsTxjyInfo.put(i, "gjzyzgdj", ds.getString(0, "gjzyzgdj"));
			dsTxjyInfo.put(i, "ygxs", ds.getString(0, "ygxs"));
			dsTxjyInfo.put(i, "lxrdh", ds.getString(0, "lxrdh"));
			dsTxjyInfo.put(i, "txdz", ds.getString(0, "txdz"));
			if ("A".equals(sszfrq)) {
				dsTxjyInfo.put(i, "cjgzrq", ds.getString(0, "cjgzrq"));
			}

			// 退休金 取最大发放年月的待遇金额，如果取不到则取死亡当月待遇金额
			this.readonlysql.setSql(sqlMaxNy);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			maxNy = ds.getString(0, "maxny");
			if ("204912".equals(maxNy) && (jyrq != null && !"".equals(jyrq))) {
				maxNy = jyrq.substring(0, 6);
			}

			// 退休金
			this.readonlysql.setSql(sqlTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			// 20110516
			ds = this.readonlysql.executeQuery();
			txj = ds.getDouble(0, "txj");
			ddwff = ds.getDouble(0, "ddwff");
			jtbt = ds.getDouble(0, "jtbt");
			txj2 = txj - jtbt;

			// 多发扣回
			this.readonlysql.setSql(sqlKj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, ryid);
			this.readonlysql.setString(3, maxNy);
			ds = this.readonlysql.executeQuery();
			kjje = ds.getDouble(0, "kjje");

			// 丧葬费、抚恤金、个人账户返还
			this.readonlysql.setSql(sqlSzfx);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			szf = ds.getDouble(0, "szf");
			fxj = ds.getDouble(0, "fxj");
			zhfh = ds.getDouble(0, "zhfh");
			ycxjjf = ds.getDouble(0, "ycxjjf");

			dsTxjyInfo.put(i, "txj", txj);
			dsTxjyInfo.put(i, "ddwff", ddwff);
			dsTxjyInfo.put(i, "jtbt", jtbt);
			dsTxjyInfo.put(i, "txj2", txj2);
			dsTxjyInfo.put(i, "kjje", kjje);
			dsTxjyInfo.put(i, "szf", szf);
			dsTxjyInfo.put(i, "fxj", fxj);
			dsTxjyInfo.put(i, "zhfh", zhfh);
			dsTxjyInfo.put(i, "ycxjjf", ycxjjf);
		}

		dsTxjyInfo = dsTxjyInfo.sortdesc("bljyrq");
		ds = new DataStore();
		ds.addRow(para);

		rdo.put("swryinfo", dsTxjyInfo);
		rdo.put("dwinfo", ds);

		return rdo;
	}

	/**
	 * 跳转到企业重复领取养老待遇协助抵扣人员查询界面
	 * 
	 * @author 刘佳广
	 * @date 创建时间 2018年1月16日
	 * @since V1.0
	 */
	public final DataObject fwdQycflqyldyxzdkrycxQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		ds = SiTools.getQueryJbjgidByUserId(this.getUser().getUserid());
		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 企业重复领取养老待遇协助抵扣人员查询
	 * 
	 * @author 刘佳广
	 * @date 创建时间 2018年1月16日
	 * @since V1.0
	 */
	public final DataObject queryQycflqyldyxzdkry(final DataObject para)
			throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		// 初始化参数
		String jbjgid = para.getString("jbjgid");
		String qsny = para.getDateToString("qsny", "yyyyMM");
		String zzny = para.getDateToString("zzny", "yyyyMM");
		String dwdjid = para.getString("dwdjid");
		String dkzt = para.getString("dkzt"); // 抵扣状态(0:未抵扣完毕,1:已抵扣完毕,空查全部)

		// 起始年月或终止年月有一个为空时，默认取当前年月
		String dqny = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		if (qsny == null || "".equals(qsny) || zzny == null || "".equals(zzny)) {
			qsny = dqny;
			zzny = dqny;
		}

		// 设置比较状态
		if ("1".equals(dkzt)) {
			dkzt = "=";
		} else if ("0".equals(dkzt)) {
			dkzt = "<";
		}

		// 取每个人的代扣总金额
		sqlBF.setLength(0);
		sqlBF.append(" select b.ryid, b.shbzhm sfzhm, b.xm, b.xb, c.dwbh, ");
		sqlBF.append("        c.cbdwmc, decode(max(a.ffny),'','',max(a.yfny)) dqdkny,");
		sqlBF.append("		decode(max(a.ffny),'','',0 - nvl(sum(a.btje), 0)) ydkje, ");
		sqlBF.append("        (select 0 - nvl(sum(d.btje), 0) zdkje ");
		sqlBF.append("           from ad3u.per_giv_detl d ");
		sqlBF.append("          where b.ryid = d.ryid ");
		sqlBF.append("           and d.btbh = 'H314') zdkje ");// 查询此人需要抵消的总金额
		sqlBF.append("   from ad3u.per_giv_detl a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        si3u.orgn_reg c ");
		sqlBF.append("  where a.btbh = 'H314' "); // 默认补贴
		sqlBF.append("    and a.ffny is not null ");
		sqlBF.append("    and a.zdlsh is not null ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and b.dwdjid = c.dwdjid ");
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append(" 	 and c.dwdjid = '" + dwdjid + "'");
		}
		sqlBF.append(" 	 and c.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid)
				+ ")");
		sqlBF.append(" 	 group by b.ryid,b.shbzhm,b.xm,b.xb,c.dwbh,c.cbdwmc ");
		sqlBF.append(" 	 having max(a.yfny) between ? and ? ");
		if (dkzt != null && !"".equals(dkzt)) {
			sqlBF.append("and (0 - nvl(sum(a.btje), 0))  ");
			sqlBF.append(dkzt);
			sqlBF.append("  (select 0 - nvl(sum(d.btje), 0) zdkje ");
			sqlBF.append("      from ad3u.per_giv_detl d ");
			sqlBF.append("    where b.ryid = d.ryid ");
			sqlBF.append("      and d.btbh = 'H314') ");
		} else {
			// 查询已经有协助抵扣养老金待遇，但是还没开始抵扣的人员信息
			sqlBF.append(" union all ");
			sqlBF.append(" select b.ryid, b.shbzhm sfzhm, b.xm, b.xb, c.dwbh, ");
			sqlBF.append("        c.cbdwmc, '' dqdkny, '' ydkje,");
			sqlBF.append("        (select 0 - nvl(sum(d.btje), 0) zdkje ");
			sqlBF.append("           from ad3u.per_giv_detl d ");
			sqlBF.append("          where b.ryid = d.ryid ");
			sqlBF.append("           and d.btbh = 'H314') zdkje ");
			sqlBF.append("   from ad3u.per_giv_detl a, ");
			sqlBF.append("        ad3u.per_info b, ");
			sqlBF.append("        si3u.orgn_reg c ");
			sqlBF.append("  where a.btbh = 'H314' ");
			sqlBF.append("    and a.ffny is null ");
			sqlBF.append("    and a.zdlsh is null ");
			sqlBF.append("    and a.ryid = b.ryid ");
			sqlBF.append("    and b.dwdjid = c.dwdjid ");
			if (dwdjid != null && !"".equals(dwdjid)) {
				sqlBF.append(" 	 and c.dwdjid = '" + dwdjid + "'");
			}
			sqlBF.append("     and c.jbjgid in ("
					+ HsuTools.replaceC2QCQ(jbjgid) + ")");
			sqlBF.append("     and not exists ( "); // 如果已经待遇已发放，则不查
			sqlBF.append("       select 1  ");
			sqlBF.append("      from ad3u.per_giv_detl d  ");
			sqlBF.append("       where a.ryid=d.ryid  ");
			sqlBF.append("       and d.ffny is not null  ");
			sqlBF.append("       and d.btbh='H314' ) ");
			sqlBF.append("   group by b.ryid,b.shbzhm,b.xm,b.xb,c.dwbh,c.cbdwmc ");
		}

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsny);
		this.sql.setString(2, zzny);
		DataStore dsDkxx = this.sql.executeQuery();

		dsDkxx.sort("dwbh, ryid");
		DataObject rdo = new DataObject();
		rdo.put("dsdkxx", dsDkxx);

		return rdo;
	}

	/**
	 * 基本养老保险基金拨付情况
	 * <p>
	 * 方法详述
	 * </p>
	 * 
	 * @author wbj
	 * @date 创建时间 2018-2-27
	 * @since V1.0
	 */
	public final DataObject fwdJbYlbxJjbfqkQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		ds = SiTools.getQueryJbjgidByUserId(this.getUser().getUserid());

		rdo.put("dsjbjg", ds);

		ds = null;
		return rdo;
	}

	/**
	 * 基本养老保险基金拨付情况
	 * <p>
	 * 方法详述
	 * </p>
	 * 
	 * @author wbj
	 * @date 创建时间 2018-2-27
	 * @since V1.0
	 */
	public final DataObject queryJbylbxJjbfqk(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		DataStore ds, dsOrgn, dsReturn = new DataStore();
		String jbjgid, qsny, zzny, rateFlag, dwdjid, dwxz, jjlx;
		String stdSql, jgqStdSql, ysStdSql, swSql, bfrsSql, ltxfSql, bfjeSql;
		int rowCount, find, ltxzs;
		double rate, ltxjehj;

		jbjgid = para.getString("jbjgid");
		qsny = para.getDateToString("qsny", "yyyyMM");
		zzny = para.getDateToString("zzny", "yyyyMM");
		rateFlag = para.getString("rateflag");
		rate = para.getDouble("rate");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空！");
		}
		if (qsny == null || "".equals(qsny)) {
			this.bizException("传入的起始年月为空！");
		}
		if (zzny == null || "".equals(zzny)) {
			this.bizException("传入的终止年月为空！");
		}
		if (rateFlag != null && "1".equals(rateFlag)) {
			if (rate < 0 || rate > 1) {
				this.bizException("输入的缴费总比例不合法！请检查。");
			}
		}

		SiTools.checkQsZZnyInfo(qsny, zzny);
		// 检测是否超过一年
		int ys = DateUtil.getMonthDifferenceBetweenTwoStringDate(qsny, zzny) + 1;
		if(ys > 12){
			LanePromptUtil.end();
			this.bizException("起始年月和终止年月不能超过一年！");
		}

		// 记日志
		String querylogid = QueryLogTool.saveQueryLog("基本养老保险基金拨付情况", "职工养老支付-基本养老保险基金拨付情况", this.getUser()
			.getUserid(), para);

		LanePromptUtil.promptToTip("开始查询时间：" + DateUtil.getDBTime());

		// 取符合条件的单位信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, b.dwxz, b.jjlx, a.dwbh, b.dwmc ");
		sqlBF.append("   from si3u.orgn_reg a, biu.orgn b ");
		sqlBF.append("  where a.dwid = b.dwid ");
		sqlBF.append("    and a.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid)
				+ ")");
		sqlBF.append("    and a.cbdjzt = '1' ");
		sqlBF.append("    and exists (select 1 from ad3u.per_info c where a.dwdjid = c.dwdjid) ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from si3u.orgn_reg_join c ");
		sqlBF.append("          where a.dwdjid = c.dwdjid ");
		sqlBF.append("            and c.xzbz in ('101', '102') ");
		sqlBF.append("            and c.zzny is null) ");

		if (rateFlag != null && "1".equals(rateFlag)) {
			sqlBF.append("    and exists ");
			sqlBF.append("  (select 1 ");
			sqlBF.append("           from si3u.orgn_rate c ");
			sqlBF.append("          where a.dwdjid = c.dwdjid ");
			sqlBF.append("            and c.xzbz in ('101', '102') ");
			sqlBF.append("            and ? between qsny and nvl(zzny, '205012') ");
			sqlBF.append("            and c.jfrylb = 'A' || c.xzbz || '01' ");
			sqlBF.append("            and nvl(c.dwjfbl, 0) + nvl(c.grjfbl, 0) = ?) ");
		}

		this.sql.setSql(sqlBF.toString());
		if (rateFlag != null && "1".equals(rateFlag)) {
			this.sql.setString(1, qsny);
			this.sql.setDouble(2, rate);
		}
		dsOrgn = this.sql.executeQuery();

		rowCount = dsOrgn.rowCount();
		LanePromptUtil.promptToTip("共需要查询" + rowCount + "个单位！");
		LanePromptUtil.setTerminable(true);
		LanePromptUtil.setTotalSteps(rowCount);

		// 取离休、退休、退职人员std人数、金额
		sqlBF.setLength(0);
		sqlBF.append(" select zglb, count(1) rs, nvl(sum(bfje), 0) je ");
		sqlBF.append("   from (select a.ryid, b.zglb, ");
		sqlBF.append("                 nvl(sum((months_between(to_date(least(nvl(c.zzny, '205012'), ");
		sqlBF.append("                                                        ?), ");
		sqlBF.append("                                                  'yyyymm'), ");
		sqlBF.append("                                          to_date(greatest(c.qsny, ?), 'yyyymm')) + 1) * ");
		sqlBF.append("                          nvl(c.btje, 0)), ");
		sqlBF.append("                      0) bfje ");
		sqlBF.append("            from ad3u.per_info a, ad3u.per_reg e, si3u.per_reg b, ");
		sqlBF.append("                 ad3u.per_giv_month_std c ");
		sqlBF.append("           where a.dqdydjid = e.dydjid ");
		sqlBF.append("             and e.rydjid = b.rydjid ");
		sqlBF.append("             and a.ryid = c.ryid ");
		sqlBF.append("             and a.dwdjid = ? ");
		sqlBF.append("             and b.dwdjid = ? ");
		sqlBF.append("             and e.dwdjid = ? ");
		sqlBF.append("             and c.qsny <= ? ");
		sqlBF.append("             and nvl(c.zzny, '205012') >= ? ");
		sqlBF.append("             and b.zglb in ('A0B', 'A0C', 'A0D') ");
		// sqlBF.append("             and b.hdbz = '1' ");
		sqlBF.append("             and exists (select 1 ");
		sqlBF.append("                    from si3u.per_reg_join d ");
		sqlBF.append("                   where b.rydjid = d.rydjid ");
		sqlBF.append("                     and d.xzbz in ('101', '102')) ");
		sqlBF.append("             and exists (select 1 ");
		sqlBF.append("                    from si3u.per_natl d ");
		sqlBF.append("                   where a.ryid = d.ryid ");
		sqlBF.append("                     and d.ryzt = '1') ");
		sqlBF.append("           group by a.ryid, b.zglb ");
		sqlBF.append("          having nvl(sum((months_between(to_date(least(nvl(c.zzny, '205012'), ?), 'yyyymm'), to_date(greatest(c.qsny, ?), 'yyyymm')) + 1) * nvl(c.btje, 0)), 0) > 0) ");
		sqlBF.append("  group by zglb ");
		stdSql = sqlBF.toString();

		// 取参保人员类别为离休的建国前退休人数、金额，这部人算到退休头上
		sqlBF.setLength(0);
		sqlBF.append(" select zglb, count(1) rs, nvl(sum(bfje), 0) je ");
		sqlBF.append("   from (select a.ryid, b.zglb, ");
		sqlBF.append("                 nvl(sum((months_between(to_date(least(nvl(c.zzny, '205012'), ");
		sqlBF.append("                                                        ?), ");
		sqlBF.append("                                                  'yyyymm'), ");
		sqlBF.append("                                          to_date(greatest(c.qsny, ?), 'yyyymm')) + 1) * ");
		sqlBF.append("                          nvl(c.btje, 0)), ");
		sqlBF.append("                      0) bfje ");
		sqlBF.append("            from ad3u.per_info a, ad3u.per_reg e, si3u.per_reg b, ");
		sqlBF.append("                 ad3u.per_giv_month_std c ");
		sqlBF.append("           where a.dqdydjid = e.dydjid ");
		sqlBF.append("             and e.rydjid = b.rydjid ");
		sqlBF.append("             and a.ryid = c.ryid ");
		sqlBF.append("             and a.ryid = e.ryid ");
		sqlBF.append("             and a.dwdjid = ? ");
		sqlBF.append("             and b.dwdjid = ? ");
		sqlBF.append("             and e.dwdjid = ? ");
		sqlBF.append("             and c.qsny <= ? ");
		sqlBF.append("             and nvl(c.zzny, '205012') >= ? ");
		sqlBF.append("             and b.zglb = 'A0B' ");
		// sqlBF.append("             and b.hdbz = '1' ");
		sqlBF.append("             and a.zfrylb = 'A15' ");
		sqlBF.append("             and exists (select 1 ");
		sqlBF.append("                    from si3u.per_reg_join d ");
		sqlBF.append("                   where e.rydjid = d.rydjid ");
		sqlBF.append("                     and d.xzbz in ('101', '102')) ");
		sqlBF.append("             and exists (select 1 ");
		sqlBF.append("                    from si3u.per_natl d ");
		sqlBF.append("                   where a.ryid = d.ryid ");
		sqlBF.append("                     and d.ryzt = '1') ");
		sqlBF.append("           group by a.ryid, b.zglb ");
		sqlBF.append("          having nvl(sum((months_between(to_date(least(nvl(c.zzny, '205012'), ?), 'yyyymm'), to_date(greatest(c.qsny, ?), 'yyyymm')) + 1) * nvl(c.btje, 0)), 0) > 0) ");
		sqlBF.append("  group by zglb ");
		jgqStdSql = sqlBF.toString();

		// 取遗属std人数、金额
		sqlBF.setLength(0);
		sqlBF.append(" select count(distinct a.ryid) rs, ");
		sqlBF.append("        nvl(sum((months_between(to_date(least(nvl(c.zzny, '205012'), ?), ");
		sqlBF.append("                                         'yyyymm'), ");
		sqlBF.append("                                 to_date(greatest(c.qsny, ?), 'yyyymm')) + 1) * ");
		sqlBF.append("                 nvl(c.btje, 0)), ");
		sqlBF.append("             0) je ");
		sqlBF.append("   from ad3u.per_info a,ad3u.per_reg b, ad3u.per_giv_month_std c ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.sszfrq = 'B' ");
		sqlBF.append("    and a.dwdjid = ? ");
		sqlBF.append("    and c.qsny <= ? ");
		sqlBF.append("    and nvl(c.zzny, '205012') >= ? ");
		ysStdSql = sqlBF.toString();

		// 取死亡人员
		sqlBF.setLength(0);
		sqlBF.append(" select count(distinct a.ryid) rs ");
		sqlBF.append("   from ad3u.per_info a, ad3u.per_Reg b ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.dwdjid = ? ");
		sqlBF.append("    and nvl(a.dyspbz, '0') = '1' ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and to_char(b.bljysj, 'yyyymm') between ? and ? ");
		sqlBF.append("    and nvl(b.bljyyy, '400') <> '404' ");
		swSql = sqlBF.toString();

		// 取社会化定期发放人数
		sqlBF.setLength(0);
		sqlBF.append(" select count(distinct ryid) rs ");
		sqlBF.append("   from (select a.ryid ");
		sqlBF.append("            from ad3u.per_info a, ad3u.per_reg b, ad3u.per_giv_detl_ungiv c, ");
		sqlBF.append("                 ad3u.bill_genl d ");
		sqlBF.append("           where a.dqdydjid = b.dydjid ");
		sqlBF.append("             and a.ryid = c.ryid ");
		sqlBF.append("             and d.zdlsh = c.zdlsh ");
		sqlBF.append("             and c.fflb = 'A' ");
		sqlBF.append("             and a.sszfrq = 'A' ");
		sqlBF.append("             and d.ffztlb = 'G' ");
		sqlBF.append("             and d.ffztid is not null ");
		sqlBF.append("             and a.dwdjid = ? ");
		sqlBF.append("             and c.yfny between ? and ? ");
		sqlBF.append("          union all ");
		sqlBF.append("          select a.ryid ");
		sqlBF.append("            from ad3u.per_info a, ad3u.per_reg b, ad3u.per_giv_detl_gived c, ");
		sqlBF.append("                 ad3u.bill_genl d ");
		sqlBF.append("           where a.dqdydjid = b.dydjid ");
		sqlBF.append("             and a.ryid = c.ryid ");
		sqlBF.append("             and d.zdlsh = c.zdlsh ");
		sqlBF.append("             and c.fflb = 'A' ");
		sqlBF.append("             and a.sszfrq = 'A' ");
		sqlBF.append("             and d.ffztlb = 'G' ");
		sqlBF.append("             and d.ffztid is not null ");
		sqlBF.append("             and a.dwdjid = ? ");
		sqlBF.append("             and c.yfny between ? and ? ");
//		sqlBF.append("          union all ");
//		sqlBF.append("          select a.ryid ");
//		sqlBF.append("            from ad3u.per_info a, ad3u.per_reg b, ad3u.per_giv_detl_gived_his c, ");
//		sqlBF.append("                 ad3u.bill_genl d ");
//		sqlBF.append("           where a.dqdydjid = b.dydjid ");
//		sqlBF.append("             and a.ryid = c.ryid ");
//		sqlBF.append("             and d.zdlsh = c.zdlsh ");
//		sqlBF.append("             and c.fflb = 'A' ");
//		sqlBF.append("             and a.sszfrq = 'A' ");
//		sqlBF.append("             and d.ffztlb = 'G' ");
//		sqlBF.append("             and d.ffztid is not null ");
//		sqlBF.append("             and a.dwdjid = ? ");
//		sqlBF.append("             and c.yfny between ? and ? ");
		sqlBF.append("             ) ");
		bfrsSql = sqlBF.toString();

		// 取离退休人员定期发放金额
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) je ");
		sqlBF.append("   from (select b.btje ");
		sqlBF.append("            from ad3u.per_info a, ad3u.per_giv_detl_ungiv b, ad3u.bill_genl c ");
		sqlBF.append("           where a.ryid = b.ryid ");
		sqlBF.append("             and b.zdlsh = c.zdlsh ");
		sqlBF.append("             and c.djzt = '1' ");
		sqlBF.append("             and a.dwdjid = ? ");
		sqlBF.append("             and b.fflb = 'A'   ");
		sqlBF.append("             and a.sszfrq = 'A' ");
		sqlBF.append("             and b.yfny between ? and ?  ");
		sqlBF.append("          union all ");
		sqlBF.append("          select b.btje ");
		sqlBF.append("            from ad3u.per_info a, ad3u.per_giv_detl_gived b, ad3u.bill_genl c ");
		sqlBF.append("           where a.ryid = b.ryid ");
		sqlBF.append("             and b.zdlsh = c.zdlsh ");
		sqlBF.append("             and c.djzt = '1' ");
		sqlBF.append("             and a.dwdjid = ? ");
		sqlBF.append("             and b.fflb = 'A'   ");
		sqlBF.append("             and a.sszfrq = 'A' ");
		sqlBF.append("             and b.yfny between ? and ? ");
//		sqlBF.append("          union all ");
//		sqlBF.append("          select b.btje ");
//		sqlBF.append("            from ad3u.per_info a, ad3u.per_giv_detl_gived_his b, ");
//		sqlBF.append("                 ad3u.bill_genl c ");
//		sqlBF.append("           where a.ryid = b.ryid ");
//		sqlBF.append("             and b.zdlsh = c.zdlsh ");
//		sqlBF.append("             and c.djzt = '1' ");
//		sqlBF.append("             and a.dwdjid = ? ");
//		sqlBF.append("             and b.fflb = 'A'   ");
//		sqlBF.append("             and a.sszfrq = 'A' ");
//		sqlBF.append("             and b.yfny between ? and ?) ");
		sqlBF.append("             ) ");
		ltxfSql = sqlBF.toString();

		// 取所有的养老拨付金额，其中定期按照年月取，其他按照发放年月取
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) je ");
		sqlBF.append("   from (select b.btje ");
		sqlBF.append("            from ad3u.per_info a, ad3u.per_giv_detl_ungiv b, ad3u.bill_genl c ");
		sqlBF.append("           where a.ryid = b.ryid ");
		sqlBF.append("             and b.zdlsh = c.zdlsh ");
		sqlBF.append("             and c.djzt = '1' ");
		sqlBF.append("             and a.dwdjid = ? ");
		sqlBF.append("             and ((b.fflb = 'A' and b.yfny between ? and ?) or ");
		sqlBF.append("                 b.ffny between ? and ?) ");
		sqlBF.append("          union all ");
		sqlBF.append("          select b.btje ");
		sqlBF.append("            from ad3u.per_info a, ad3u.per_giv_detl_gived b, ad3u.bill_genl c ");
		sqlBF.append("           where a.ryid = b.ryid ");
		sqlBF.append("             and b.zdlsh = c.zdlsh ");
		sqlBF.append("             and c.djzt = '1' ");
		sqlBF.append("             and a.dwdjid = ? ");
		sqlBF.append("             and ((b.fflb = 'A' and b.yfny between ? and ?) or ");
		sqlBF.append("                 b.ffny between ? and ?) ");
//		sqlBF.append("          union all ");
//		sqlBF.append("          select b.btje ");
//		sqlBF.append("            from ad3u.per_info a, ad3u.per_giv_detl_gived_his b, ");
//		sqlBF.append("                 ad3u.bill_genl c ");
//		sqlBF.append("           where a.ryid = b.ryid ");
//		sqlBF.append("             and b.zdlsh = c.zdlsh ");
//		sqlBF.append("             and c.djzt = '1' ");
//		sqlBF.append("             and a.dwdjid = ? ");
//		sqlBF.append("             and ((b.fflb = 'A' and b.yfny between ? and ?) or ");
//		sqlBF.append("                 b.ffny between ? and ?)");
		sqlBF.append("             ) ");

		bfjeSql = sqlBF.toString();

		int step = 100;

		for (int i = 0, n = rowCount; i < n; i++) {
			dwdjid = dsOrgn.getString(i, "dwdjid");
			dwxz = dsOrgn.getString(i, "dwxz");
			jjlx = dsOrgn.getString(i, "jjlx");

			if (i % step == 0 || i == 0) {
				LanePromptUtil.promptToTrace("基本养老保险基金拨付情况查询：共" + n
						+ "个单位，正在查询第" + (i + 1) + "到第"
						+ (((i + step) <= n) ? (i + step) : n) + "个单位！");
			}

			if (LanePromptUtil.isTerminateRequest()) {// 如果进度终止，标记
				LanePromptUtil.terminate();
				break;
			}

			this.sql.setSql(stdSql);
			this.sql.setString(1, zzny);
			this.sql.setString(2, qsny);
			this.sql.setString(3, dwdjid);
			this.sql.setString(4, dwdjid);
			this.sql.setString(5, dwdjid);
			this.sql.setString(6, zzny);
			this.sql.setString(7, qsny);

			this.sql.setString(8, zzny);
			this.sql.setString(9, qsny);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {

				// 确定所属行号
				find = dsReturn.find("dwxz == " + dwxz + " and jjlx == " + jjlx);

				if (find < 0) {
					dsReturn.addRow();
					find = dsReturn.rowCount() - 1;
					dsReturn.put(find, "dwxz", dwxz);
					dsReturn.put(find, "jjlx", jjlx);
					dsReturn.put(find, "lxrs", 0);
					dsReturn.put(find, "txrs", 0);
					dsReturn.put(find, "tzrs", 0);
					dsReturn.put(find, "ltxzs", 0);
					dsReturn.put(find, "lxje", 0.00);
					dsReturn.put(find, "txje", 0.00);
					dsReturn.put(find, "tzje", 0.00);
					dsReturn.put(find, "ysrs", 0);
					dsReturn.put(find, "ysje", 0.00);
					dsReturn.put(find, "bqblswrs", 0);
					dsReturn.put(find, "shhffrs", 0);
					dsReturn.put(find, "bfje", 0.00);
					dsReturn.put(find, "ltxf", 0.00);
					dsReturn.put(find, "ltxjehj", 0.00);
				}

				// add.by.lb.2014109.增加统计离退休总人数和离退休金额合计，修改获取doule类型数据方式
				ltxzs = 0;
				ltxjehj = 0.0;
				for (int j = 0, m = ds.rowCount(); j < m; j++) {
					if ("A0B".equals(ds.getString(j, "zglb"))) {
						dsReturn.put(find, "lxrs", dsReturn.getInt(find, "lxrs")
								+ ds.getInt(j, "rs"));
						dsReturn.put(find, "lxje", MathUtil.round(dsReturn.getDouble(find, "lxje")
								+ ds.getDouble(j, "je"), 2));
					} else if ("A0D".equals(ds.getString(j, "zglb"))) {
						dsReturn.put(find, "tzrs", dsReturn.getInt(find, "tzrs")
								+ ds.getInt(j, "rs"));
						dsReturn.put(find, "tzje", MathUtil.round(dsReturn.getDouble(find, "tzje")
								+ ds.getDouble(j, "je"), 2));
					} else {
						dsReturn.put(find, "txrs", dsReturn.getInt(find, "txrs")
								+ ds.getInt(j, "rs"));
						dsReturn.put(find, "txje", MathUtil.round(dsReturn.getDouble(find, "txje")
								+ ds.getDouble(j, "je"), 2));
					}

					ltxzs += ds.getInt(j, "rs");
					ltxjehj += ds.getDouble(j, "je");
				}

				dsReturn.put(find, "ltxzs", MathUtil.round(dsReturn.getDouble(find, "ltxzs")
						+ ltxzs, 2));
				dsReturn.put(find, "ltxjehj", MathUtil.round(dsReturn.getDouble(find, "ltxjehj")
						+ ltxjehj, 2));

			} else {
				continue;
			}

			this.sql.setSql(jgqStdSql);
			this.sql.setString(1, zzny);
			this.sql.setString(2, qsny);
			this.sql.setString(3, dwdjid);
			this.sql.setString(4, dwdjid);
			this.sql.setString(5, dwdjid);
			this.sql.setString(6, zzny);
			this.sql.setString(7, qsny);

			this.sql.setString(8, zzny);
			this.sql.setString(9, qsny);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dsReturn.put(find, "lxrs", dsReturn.getInt(find, "lxrs")
						- ds.getInt(0, "rs"));
				dsReturn.put(find, "lxje", MathUtil.round(dsReturn.getDouble(find, "lxje")
						- ds.getDouble(0, "je"), 2));
				dsReturn.put(find, "txrs", dsReturn.getInt(find, "txrs")
						+ ds.getInt(0, "rs"));
				dsReturn.put(find, "txje", MathUtil.round(dsReturn.getDouble(find, "txje")
						+ ds.getDouble(0, "je"), 2));
			}

			this.sql.setSql(ysStdSql);
			this.sql.setString(1, zzny);
			this.sql.setString(2, qsny);
			this.sql.setString(3, dwdjid);
			this.sql.setString(4, zzny);
			this.sql.setString(5, qsny);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dsReturn.put(find, "ysrs", dsReturn.getInt(find, "ysrs")
						+ ds.getInt(0, "rs"));
				dsReturn.put(find, "ysje", MathUtil.round(dsReturn.getDouble(find, "ysje")
						+ ds.getDouble(0, "je"), 2));
			}

			this.sql.setSql(swSql);
			this.sql.setString(1, dwdjid);
			this.sql.setString(2, qsny);
			this.sql.setString(3, zzny);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dsReturn.put(find, "bqblswrs", dsReturn.getInt(find, "bqblswrs")
						+ ds.getInt(0, "rs"));
			}

			this.sql.setSql(bfrsSql);
			this.sql.setString(1, dwdjid);
			this.sql.setString(2, qsny);
			this.sql.setString(3, zzny);

			this.sql.setString(4, dwdjid);
			this.sql.setString(5, qsny);
			this.sql.setString(6, zzny);

//			this.sql.setString(7, dwdjid);
//			this.sql.setString(8, qsny);
//			this.sql.setString(9, zzny);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dsReturn.put(find, "shhffrs", dsReturn.getInt(find, "shhffrs")
						+ ds.getInt(0, "rs"));
			}

			this.sql.setSql(ltxfSql);
			this.sql.setString(1, dwdjid);
			this.sql.setString(2, qsny);
			this.sql.setString(3, zzny);
			
			this.sql.setString(4, dwdjid);
			this.sql.setString(5, qsny);
			this.sql.setString(6, zzny);
			
//			this.sql.setString(7, dwdjid);
//			this.sql.setString(8, qsny);
//			this.sql.setString(9, zzny);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dsReturn.put(find, "ltxf", dsReturn.getInt(find, "ltxf")
						+ ds.getInt(0, "je"));
			}

			this.sql.setSql(bfjeSql);
			this.sql.setString(1, dwdjid);
			this.sql.setString(2, qsny);
			this.sql.setString(3, zzny);
			this.sql.setString(4, qsny);
			this.sql.setString(5, zzny);
			
			this.sql.setString(6, dwdjid);
			this.sql.setString(7, qsny);
			this.sql.setString(8, zzny);
			this.sql.setString(9, qsny);
			this.sql.setString(10, zzny);
			
//			this.sql.setString(11, dwdjid);
//			this.sql.setString(12, qsny);
//			this.sql.setString(13, zzny);
//			this.sql.setString(14, qsny);
//			this.sql.setString(15, zzny);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dsReturn.put(find, "bfje", dsReturn.getDouble(find, "bfje")
						+ ds.getDouble(0, "je"));
			}

			LanePromptUtil.moveForward(1);

			if (LanePromptUtil.isTerminateRequest()) {// 如果进度终止，标记
				LanePromptUtil.terminate();
				break;
			}
		}

		QueryLogTool.updateQueryLog(querylogid, dsReturn.rowCount());
		LanePromptUtil.promptToTip("结束查询时间：" + DateUtil.getDBTime());
		LanePromptUtil.complete();
		LanePromptUtil.end();

		dsReturn = dsReturn.sort("dwxz");

		rdo.clear();
		rdo.put("dsgivdetl", dsReturn);

		ds = null;
		sqlBF = null;

		return rdo;
	}
	
	/**
	 * 导出拨付人员明细查询信息 （滨州客户化） 方法简介.
	 * 
	 * 与标准件差异：gjzyzgdj展示为机关工勤人员技术等级，增加sydwgrgw事业单位工人岗位
	 * 
	 * @author 苏亚琦 2018-3-23
	 */
	public DataObject genBfrymxExportFile_3716(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryBfryMxInfo(para);// 修改调用的查询方法，支持先查询单位，再循环查询个人，支持进度条提示--ywj--20161215
		DataStore dsBtbh = pdo.getDataStore("dsbtbh");
		fileDs = pdo.getDataStore("mxinfo");// 修改为对应的DataStore--ywj--20161215
		// modify 将code更改为汉字 weichao 20160112
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ygxs", HsuTools.discode("YGXS", fileDs.getString(i, "ygxs"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "jgsydwgzrylb", HsuTools.discode("JGSYDWGZRYLB", fileDs.getString(i, "jgsydwgzrylb"), ""));//add by nx 181016
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			fileDs.put(i, "sydwgrgw", HsuTools.discode("SYDWGRGW", fileDs.getString(i, "sydwgrgw"), ""));
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));// 增加单位性质--ywj--20161216
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
		}
		// end
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "shbzhm", "社会保障号码", "String", "", 20);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "yxzjhm", "身份证号码", "String", "", 18);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ygxs", "用工形式", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 10);
		addTableInfo4Write(tableInfo, "jfnx", "连续工龄", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "pjzs", "平均指数", "number", "#######0.000", 9);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 10);
		addTableInfo4Write(tableInfo, "jgsydwgzrylb", "机关事业单位工作人员类别", "String", "", 10);// add by nx 181016																			// nx
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "机关工勤人员技术等级", "String", "", 10);
		addTableInfo4Write(tableInfo, "sydwgrgw", "事业单位工人岗位", "String", "", 10);
		addTableInfo4Write(tableInfo, "lxrxm", "联系人", "String", "", 50);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "yzbm", "邮政编码", "String", "", 6);
		addTableInfo4Write(tableInfo, "txdz", "通讯地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "jtzz", "家庭住址", "String", "", 200);
		addTableInfo4Write(tableInfo, "hj", "合计", "number", "#######0.00", 9);
		
		//增加居住地行政区划的导出  刘欣 modify 20170112
		if(fileDs.getRow(0).containsKey("JZDXZQH")){
			addTableInfo4Write(tableInfo, "JZDXZQH", "居住地行政区划", "String", "", 200);
		}
		
		String btmc,btbh;
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh");
			btmc = dsBtbh.getString(i, "btmc");
			addTableInfo4Write(tableInfo, btbh, btmc, "number", "#######0.00", 9);
		}
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "string", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		// 数据大于60000条时，分为多个sheet页展示数据--add.yxt.20160317
		int count = fileDs.rowCount();// 获取数据行数
		int num = count / 60000;
		int remainder = count % 60000;
		if (remainder > 0) {
			num++;
		}
		for (int i = 0; i < num; i++) {
			int hhmax = (i + 1) * 60000;
			int hhmin = i * 60000;
			if (hhmax > count) {
				hhmax = count;
			}
			DataStore dsTemp = fileDs.subDataStore(hhmin, hhmax);

			sheet = ExcelTool.createSheet(workbook, "报盘文件" + (i + 1), i);
			ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
			ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, dsTemp);
		}
		//--add.yxt.20160317。end

		// 生成excel文件
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		return rdo;
	}
	
	/**
	 * 机关退休人员待遇计算信息查询
	 * 
	 * @author cjj
	 * @date 创建时间 2018-6-15
	 * @since V1.0
	 */
	public DataObject queryJgtxrydyjsxx(final DataObject para) throws Exception {
		String zfrylb, ltxQsrq, ltxZzrq, jbjgid, dyffzt, fdfjgid;
		DataStore ds = new DataStore(), dsTemp, dsOrgn, dsPer = new DataStore();
		DataObject rdo = new DataObject(), pdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();

		String querylogid = QueryLogTool.saveQueryLog("机关退休人员待遇计算信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser()
			.getUserid(), para);

		jbjgid = para.getString("jbjgid");
		fdfjgid = para.getString("fdfjgid");
		zfrylb = para.getString("zfrylb");
		dyffzt = para.getString("dyffzt");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");

		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		dyffzt = HsuTools.replaceC2QCQ(dyffzt);

		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "20141001";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (ltxQsrq.compareTo(ltxZzrq) > 0) {
			this.bizException("传入的离退休起始日期大于离退休终止日期！");
		}
		if (ltxQsrq.compareTo("20141001") < 0) {
			this.bizException("传入的离退休起始日期小于2014年10月1日！");
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		sqlBF.setLength(0);
		sqlBF.append(" select dwdjid, dwbh, cbdwmc dwmc, cbdwxz  dwxz");
		sqlBF.append("   from si3u.orgn_reg a ");
		sqlBF.append("  where a.jbjgid = ? ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid ");
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("        and b.zfrylb in ( ");
			sqlBF.append(zfrylb + " ) ");

		}
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("        and b.dyffzt in ( ");
			sqlBF.append(dyffzt + " ) ");

		}
		if (fdfjgid != null && !"".equals(fdfjgid)) {
			sqlBF.append("        and b.dfjgid = '");
			sqlBF.append(fdfjgid + "' ");

		}
		sqlBF.append("            and b.sszfrq = 'A' ) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		dsOrgn = this.sql.executeQuery();

		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数

		// 查询人员基本信息和养老登记信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid,a.shbzhm ,a.xm, a.xb, a.shbzhm  sfzhm, ");
		sqlBF.append(" 	      a.csrq, a.sszfrq, a.zfrylb, b.ltxrq, a.dyxsksny, ");
		sqlBF.append(" 	      a.dylqlb, a.dyffzt, a.dyspbz, a.yhzh, b.cjgzrq, ");
		sqlBF.append(" 	      a.dfjglb, a.dfjgid, ? dwbh, ? dwmc, ? dwxz,  ");
		sqlBF.append(" 	      b.dacsrq, ");
		sqlBF.append("        g.ggqgwyzw, g.ggqgwyjb, g.ggqgwyjbdc, g.ggqldzwbz, g.gwyjbjsny,  ");
		sqlBF.append("        g.gwyjbdcjsny, g.ggqjggqryjsdj, g.ggqjggqrygw, g.jggqrygwjsny, g.ggqsydwzyjsrygw,  ");
		sqlBF.append("        g.ggqsydwzyjsryxj, g.ggqsydwglrygw, g.ggqsydwglryxj, g.ggqsydwgrgw, g.ggqsydwgrxj,  ");
		sqlBF.append("        g.ggqjgsydwgzrylb, n.gwyzw, n.gwyjb, n.gwyjbdc, n.gjzyzgdj,  ");
		sqlBF.append("        n.jggqrygw, n.sydwzyjsrygw, n.sydwzyjsryxj, n.sydwglrygw, n.sydwglryxj,  ");
		sqlBF.append("        n.sydwgrgw, n.sydwgrxj, n.jgsydwgzrylb ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.emp_info b, ");
		sqlBF.append("        si3u.per_natl_gov g, ");
		sqlBF.append("        si3u.per_natl n ");
		sqlBF.append("  where a.dwdjid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and g.ryid(+) = n.ryid ");
		sqlBF.append("    and n.ryid = a.ryid ");

		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and a.zfrylb in (");
			sqlBF.append(zfrylb + " ) ");

		}
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and a.dyffzt in (");
			sqlBF.append(dyffzt + " ) ");

		}
		if (fdfjgid != null && !"".equals(fdfjgid)) {
			sqlBF.append("    and a.dfjgid = '");
			sqlBF.append(fdfjgid + "' ");

		}
		if (ltxZzrq != null && !"".equals(ltxZzrq)) {
			sqlBF.append("    and b.ltxrq <= '");
			sqlBF.append(ltxZzrq + "' ");

		}
		if (ltxQsrq != null && !"".equals(ltxQsrq)) {
			sqlBF.append("    and b.ltxrq >= '");
			sqlBF.append(ltxQsrq + "' ");
		}

		String sqlPer = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append(" select sum(decode(a.dyxmbh, 'STJFZS', a.dyxmz, 0)) stjfzs, ");
		sqlBF.append("        sum(decode(a.dyxmbh, 'SJJFZS', a.dyxmz, 0)) sjjfzs, ");
		sqlBF.append("        sum(decode(a.dyxmbh, 'BRSJPJJFGZZS', a.dyxmz, 0)) pjzs, ");
		sqlBF.append("        sum(decode(a.dyxmbh, 'GRZHZE', a.dyxmz, 0)) grzhze, ");
		sqlBF.append("        sum(decode(a.dyxmbh, 'ZYNJZHZE', a.dyxmz, 0)) zynjzhze, ");
		sqlBF.append("        sum(decode(a.dyxmbh, 'LBFDYBZ', a.dyxmz, 0)) lbfdybz, ");
		sqlBF.append("        sum(decode(a.dyxmbh, 'SJJFNX', a.dyxmz, 0)) sjjfnx, ");
		sqlBF.append("        sum(decode(a.dyxmbh, 'STJFNX', a.dyxmz, 0)) stjfnx, ");
		sqlBF.append("        sum(decode(a.dyxmbh, 'JFYS', a.dyxmz, 0)) jfys, a.ryid ");
		sqlBF.append("   from ad3u.per_cal_his a ");
		sqlBF.append("  where a.xh = ");
		sqlBF.append("        (select max(b.xh) from ad3u.per_cal_his b where a.ryid = b.ryid) ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info c ");
		sqlBF.append("          where c.dwdjid = ? ");
		sqlBF.append("            and c.ryid = a.ryid) ");
		sqlBF.append("  group by a.ryid ");

		String sqlDyjsjg = sqlBF.toString();

		HashMap<String, DataObject> Map = new HashMap<String, DataObject>();

		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String dwmc = dsOrgn.getString(i, "dwmc");
			prompt.prompt("正在查询单位【" + dwmc + "】的人员信息...");

			Map.clear();

			this.sql.setSql(sqlPer);
			this.sql.setString(1, dsOrgn.getString(i, "dwbh"));
			this.sql.setString(2, dwmc);
			this.sql.setString(3, dsOrgn.getString(i, "dwxz"));
			this.sql.setString(4, dsOrgn.getString(i, "dwdjid"));
			dsPer = this.sql.executeQuery();

			this.sql.setSql(sqlDyjsjg);
			this.sql.setString(1, dsOrgn.getString(i, "dwdjid"));
			dsTemp = this.sql.executeQuery();

			Map = SiTools.ds2HashMapWithOneKey(dsTemp, "ryid");

			for (int j = 0, m = dsPer.rowCount(); j < m; j++) {
				String ryid = dsPer.getString(j, "ryid");

				if (Map.containsKey(ryid)) {
					pdo = Map.get(ryid);
					dsPer.put(j, "stjfzs", pdo.getDouble("stjfzs"));
					dsPer.put(j, "sjjfzs", pdo.getDouble("sjjfzs"));
					dsPer.put(j, "pjzs", pdo.getDouble("pjzs"));
					dsPer.put(j, "grzhze", pdo.getDouble("grzhze"));
					dsPer.put(j, "zynjzhze", pdo.getDouble("zynjzhze"));
					dsPer.put(j, "jfys", pdo.getDouble("jfys"));
					dsPer.put(j, "lbfdybz", pdo.getDouble("lbfdybz"));
					dsPer.put(j, "sjjfnx", pdo.getDouble("sjjfnx"));
					dsPer.put(j, "stjfnx", pdo.getDouble("stjfnx"));
				}

				String jgdylqlb = AdTools.getPerCmpl(ryid, "JGDYLQLB", "");// 机关待遇领取类别
				String qyjlbz = AdTools.getPerCmpl(ryid, "QYJLBZ", "");// 机关待遇领取类别
				String txbtlx = AdTools.getPerCmpl(ryid, "TXBTLX", "");// 退休补贴类型
				dsPer.put(j, "jgdylqlb", jgdylqlb);
				dsPer.put(j, "qyjlbz", qyjlbz);
				dsPer.put(j, "txbtlx", txbtlx);

			}

			if (dsPer.rowCount() > 0) {
				ds.combineDatastore(dsPer);
			}

			prompt.moveForword(1);
		}

		AdTools.genDfjgxxDataStore(ds, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());

		rdo.put("ds", ds);
		return rdo;
	}
	/**
	 * 方法简介.查询退休人员明细（淄博客户化）
	 * 
	 * @author ysf
	 * @date 创建时间 2018-7-23
	 * @since V1.0
	 */
	public DataObject queryTxrymxInfo_3703(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String spSql, jbjgSql, dwSql, ryztSql, dyffztSql,jyrqSql, ltxtjSql;//增加ad3u.per_reg 表中jyrq的限制sql   张超  modify 20161031
		DataStore dsTemp = new DataStore();            //增加离退休条件  add by blp  20161111  
		String jdSql,sqSql;        //增加社区、街道查询条件 add-李琪-20161118
		
		String querylogid = QueryLogTool.saveQueryLog("退休人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 接参数
		String jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		String dwdjid = para.getString("dwdjid");
		String zfrylb = para.getString("zfrylb");
		String zyqsrq = para.getDateToString("zyqsrq", "yyyyMMdd");
		String zyzzrq = para.getDateToString("zyzzrq", "yyyyMMdd");

		String spbz = para.getString("spbz");
		String spqsrq = para.getDateToString("spqsrq", "yyyyMMdd");
		String spzzrq = para.getDateToString("spzzrq", "yyyyMMdd");
		String dyxsqsny = para.getDateToString("dyxsqsny", "yyyyMM");
		String dyxszzny = para.getDateToString("dyxszzny", "yyyyMM");

		String ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		String ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		String csqsrq = para.getDateToString("csqsrq", "yyyyMMdd");
		String cszzrq = para.getDateToString("cszzrq", "yyyyMMdd");
		String cjgzqsrq = para.getDateToString("cjgzqsrq", "yyyyMMdd");

		String cjgzzzrq = para.getDateToString("cjgzzzrq", "yyyyMMdd");
		String ryzt = para.getString("ryzt");
		String dyffzt = para.getString("dyffzt");
		String spr = para.getString("yhid");

		// add 增加复核人、复核起始、终止时间 20151105
		String fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		String fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		String fhr = para.getString("fhid");
		String ltxtj = para.getString("ltxtj","");  // add by blp 20161111
		// add end
		String jdid = para.getString("jdid", ""); // add-李琪-20161118
		String sqid = para.getString("sqid", "");
		// 参数校验
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空");
		}
		if (zyqsrq == null || "".equals(zyqsrq)) {
			zyqsrq = "19000101";
		}
		if (zyzzrq == null || "".equals(zyzzrq)) {
			zyzzrq = "20501231";
		}
		if (zyqsrq.compareTo(zyzzrq) > 0) {
			this.bizException("传入的增员起始日期不能晚于增员终止日期");
		}
		// 审批日期
		if (spqsrq == null || "".equals(spqsrq)) {
			spqsrq = "19000101";
		}
		if (spzzrq == null || "".equals(spzzrq)) {
			spzzrq = "20501231";
		}

		// 复核日期
		if (fhqsrq == null || "".equals(fhqsrq)) {
			fhqsrq = "19000101";
		}
		if (fhzzrq == null || "".equals(fhzzrq)) {
			fhzzrq = "20501231";
		}

		if ("19000101".compareTo(spqsrq) > 0) {
			this.bizException("传入的审批起始日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(spqsrq) < 0) {
			this.bizException("传入的审批终止日期不能晚于2050年12月31日");
		}
		if (spqsrq.compareTo(spzzrq) > 0) {
			this.bizException("传入的审批起始日期不能晚于审批终止日期");
		}
		// 待遇享受开始年月
		if (dyxsqsny == null || "".equals(dyxsqsny)) {
			dyxsqsny = "190001";
		}
		if (dyxszzny == null || "".equals(dyxszzny)) {
			dyxszzny = "205012";
		}
		if ("190001".compareTo(dyxsqsny) > 0) {
			this.bizException("传入的待遇享受开始年月不能早于1900年1月");
		}
		if ("205012".compareTo(dyxszzny) < 0) {
			this.bizException("传入的待遇享受开始年月不能晚于2050年12月");
		}
		if (dyxsqsny.compareTo(dyxszzny) > 0) {
			this.bizException("传入的待遇享受开始年月起始年月不能晚于终止年月");
		}

		// 离退休日期
		if (ltxqsrq == null || "".equals(ltxqsrq)) {
			ltxqsrq = "19000101";
		}
		if (ltxzzrq == null || "".equals(ltxzzrq)) {
			ltxzzrq = "20501231";
		}
		if ("19000101".compareTo(ltxqsrq) > 0) {
			this.bizException("传入的离退休日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(ltxzzrq) < 0) {
			this.bizException("传入的离退休日期不能晚于2050年12月31日");
		}
		if (ltxqsrq.compareTo(ltxzzrq) > 0) {
			this.bizException("传入的离退休日期起始日期不能晚于终止日期");
		}

		// 出生日期
		if (csqsrq == null || "".equals(csqsrq)) {
			csqsrq = "19000101";
		}
		if (cszzrq == null || "".equals(cszzrq)) {
			cszzrq = "20501231";
		}
		if ("19000101".compareTo(csqsrq) > 0) {
			this.bizException("传入的出生日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(cszzrq) < 0) {
			this.bizException("传入的出生日期不能晚于2050年12月31日");
		}
		if (csqsrq.compareTo(cszzrq) > 0) {
			this.bizException("传入的出生日期起始日期不能晚于终止日期");
		}

		// 参加工作日期
		if (cjgzqsrq == null || "".equals(cjgzqsrq)) {
			cjgzqsrq = "19000101";
		}
		if (cjgzzzrq == null || "".equals(cjgzzzrq)) {
			cjgzzzrq = "20501231";
		}
		if ("19000101".compareTo(cjgzqsrq) > 0) {
			this.bizException("传入的参加工作日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(cjgzzzrq) < 0) {
			this.bizException("传入的参加工作日期不能晚于2050年12月31日");
		}
		if (cjgzqsrq.compareTo(cjgzzzrq) > 0) {
			this.bizException("传入的参加工作日期起始日期不能晚于终止日期");
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		// 先查单位，然后循环单位
		// 单位
		if (dwdjid == null || "".equals(dwdjid)) {
			dwSql = "";
		} else {
			dwSql = " and a.dwdjid = '" + dwdjid + "' ";
		}
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.cbdwmc ");
		sqlBF.append("   from si3u.orgn_reg a ");
		sqlBF.append("  where a.jbjgid in (" + jbjgid + ")");
		sqlBF.append(dwSql);
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid) ");
		this.readonlysql.setSql(sqlBF.toString());
		DataStore dsOrgn = this.readonlysql.executeQuery();
		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数
		// 审批标志
		if ("0".equals(spbz)) {
			spSql = " and nvl(a.dyspbz, '0') = '0' ";
		} else if ("1".equals(spbz)) {
			spSql = " and a.dyspbz = '1' and to_char(a.dyspsj, 'yyyymmdd') between '"
					+ spqsrq + "' and '" + spzzrq + "' ";
			if (spr != null && !"".equals(spr)) {
				spSql = spSql + " and a.dyspr = '" + spr + "' ";
			}
			// add 增加复核人、复核起始、终止时间 20151105
			spSql = spSql + " and to_char(a.dyfhsj, 'yyyymmdd') between '"
					+ fhqsrq + "' and '" + fhzzrq + "' ";
			if (fhr != null && !"".equals(fhr)) {
				spSql = spSql + " and a.dyfhr = '" + fhr + "' ";
			}
			// end
		} else {
			spSql = "";
		}
		// 经办机构
		jbjgSql = " and c.jbjgid in (" + jbjgid + ")";

		// 离退休类别
		if (zfrylb == null || "".equals(zfrylb)) {
			zfrylb = "%";
		}

		// 人员状态
		if (ryzt == null || "".equals(ryzt)) {
			ryztSql = "";
			jyrqSql = "";
		} else {
			ryztSql = " and b.ryzt = '" + ryzt + "' ";
			//如果是正常   张超   add   20161031
			if("1".equals(ryzt)){
				jyrqSql = " and c.jyrq is null  ";
			}
			//如果是死亡，出国或退休转外     张超   add   20161031
			else{
				jyrqSql = " and c.jyrq is not null  ";
			}
			
		}

		// 待遇发放状态
		if (dyffzt == null || "".equals(dyffzt)) {
			dyffztSql = "";
		} else {
			dyffztSql = " and a.dyffzt = '" + dyffzt + "' ";
		}
		
		// 离退休条件 add by blp  20161111
		if (ltxtj == null || "".equals(ltxtj)) {
			ltxtjSql = "";
		} else {
			ltxtjSql = " and d.ltxtj = '" + ltxtj + "'";
		}
		//街道、社区 add-李琪-20161118
		if (jdid == null || "".equals(jdid)) {
			jdSql = "";
		} else {
			jdSql = " and a.jdid = '" + jdid + "' ";
		}
		if (sqid == null || "".equals(sqid)) {
			sqSql = "";
		} else {
			sqSql = " and a.sqid = '" + sqid + "' ";
		}
		// 开始循环单位
		DataStore dsPerMx = new DataStore();
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String perdwdjid = dsOrgn.getString(i, "dwdjid");
			String dwmc = dsOrgn.getString(i, "cbdwmc");
			prompt.prompt("正在查询单位【" + dwmc + "】的人员信息...");
			sqlBF.setLength(0);
			sqlBF.append(" select  a.xm,a.ryid,a.xb,a.csrq,d.ltxlb  zfrylb, ");
			sqlBF.append("         d.ltxrq,c.blzyyy,e.dwbh,e.cbdwmc  dwmc,e.cbdwxz  dwxz, ");
			sqlBF.append("         a.dyspsj spsj,a.sszfrq,c.blzysj,a.yhzh,d.cjgzrq, ");
			sqlBF.append("         a.dyxsksny,a.ryid,a.dylqlb,a.dyspr spr,a.dfjglb, ");
			sqlBF.append("         a.dfjgid,a.dyffzt,a.xzzw,nvl(a.dyspbz,  '0')  spbz, ");
			sqlBF.append("         nvl(sum(p.btje),  0)  dqje, ");
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A111',  p.btje,  0)),  0)  jcxylj, ");// 基础性养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A112',  p.btje,  0)),  0)  gdxylj, ");// 过渡性养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,'A102',p.btje,'A103',p.btje,'A10D',p.btje,0)),0)  zhylj, ");// 账户养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A113',  p.btje,  0)),  0)  gdxtjj, ");// 过渡性调节金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A10B',  p.btje,  'A10E',  p.btje,  0)),  0)  ce, ");// 差额
			sqlBF.append("         nvl(sum(decode(p.btbh,'A111',0,'A112',0,'A102',0,'A103',0,'A10D',0,'A113',0,'A10B',0,'A10E',0,p.btje)),0)  qtylj, ");// 其他养老金
			sqlBF.append("         a.jdid, a.sqid,a.dyffzt,d.dacsrq,d.stjfnx, ");
			sqlBF.append("		   d.sjjfnx, d.sjjfnx+d.stjfnx zjfnx,c.rydjid,b.ryzt,d.jzgbz,");
			sqlBF.append("		   a.dyfhsj, a.dyfhr,'' ssjd,'' sssq");
			sqlBF.append("     from  ad3u.per_info  a, ");
			sqlBF.append("           si3u.per_natl   b, ");
			sqlBF.append("           ad3u.per_reg    c, ");
			sqlBF.append("           ad3u.emp_info  d, ");
			sqlBF.append("           si3u.orgn_reg  e, ");
			sqlBF.append("           ad3u.per_giv_month_std  p ");
			sqlBF.append("   where  a.dqdydjid  =  c.dydjid ");
			sqlBF.append("       and  c.dwdjid  =  e.dwdjid ");
			sqlBF.append("       and  a.ryid  =  d.ryid ");
			sqlBF.append("       and  a.sszfrq = 'A' ");
			sqlBF.append("       and  a.ryid  =  b.ryid(+) ");
			sqlBF.append("       and  a.ryid  =  p.ryid(+) ");
			sqlBF.append("       and  to_char(sysdate,  'yyyyMM')  between  p.qsny(+)  and ");
			sqlBF.append("               nvl(p.zzny(+),  '205012') ");
			sqlBF.append("       and  d.ltxlb  like  ? ");
			sqlBF.append("       and  to_char(c.blzysj,  'yyyyMMdd')  between  ?  and  ? ");
			sqlBF.append("       and  a.dyxsksny  between  ?  and  ? ");
			sqlBF.append("       and  d.ltxrq  between  ?  and  ? ");
			sqlBF.append("       and  a.csrq  between  ?  and  ? ");
			sqlBF.append("       and  d.cjgzrq  between  ?  and  ? ");
			sqlBF.append("       and  a.dwdjid ='" + perdwdjid + "' ");
			sqlBF.append(dyffztSql);
			sqlBF.append(ryztSql);
			sqlBF.append(jbjgSql);
			sqlBF.append(spSql);
			sqlBF.append(ltxtjSql);
			sqlBF.append(jdSql);
			sqlBF.append(sqSql);
			sqlBF.append("       and  p.btbh <> 'A187' ");//淄博增加不要40元补贴的限制
			sqlBF.append("   group  by  a.xm,a.ryid,a.xb,a.csrq,d.ltxlb, ");
			sqlBF.append("              d.ltxrq,c.blzyyy,  e.dwbh,e.cbdwmc,e.cbdwxz, ");
			sqlBF.append("              a.dyspsj,a.sszfrq,c.blzysj,a.yhzh,d.cjgzrq, ");
			sqlBF.append("              a.dyxsksny,a.ryid,a.dylqlb,a.dyspr,a.dfjglb, ");
			sqlBF.append("              a.dfjgid,a.dyffzt,a.xzzw,a.dyspbz,a.jdid, ");
			sqlBF.append("              a.sqid,a.dyffzt,d.dacsrq,d.stjfnx, d.sjjfnx, ");
			sqlBF.append("				c.rydjid,b.ryzt,d.jzgbz,a.dyfhr,a.dyfhsj");
			sqlBF.append(" union all");
			sqlBF.append(" select  a.xm,a.ryid,a.xb,a.csrq,d.yslb  zfrylb, ");
			sqlBF.append("         '' ltxrq,c.blzyyy,e.dwbh,e.cbdwmc  dwmc,e.cbdwxz  dwxz, ");
			sqlBF.append("         a.dyspsj spsj,a.sszfrq,c.blzysj,a.yhzh,'' cjgzrq, ");
			sqlBF.append("         a.dyxsksny,a.ryid,a.dylqlb,a.dyspr spr,a.dfjglb, ");
			sqlBF.append("         a.dfjgid,a.dyffzt,a.xzzw,nvl(a.dyspbz,  '0')  spbz, ");
			sqlBF.append("         nvl(sum(p.btje),  0)  dqje, ");
			sqlBF.append("         0  jcxylj, ");// 基础性养老金
			sqlBF.append("         0  gdxylj, ");// 过渡性养老金
			sqlBF.append("         0  zhylj, ");// 账户养老金
			sqlBF.append("         0  gdxtjj, ");// 过渡性调节金
			sqlBF.append("         0  ce, ");// 差额
			sqlBF.append("         nvl(sum(decode(p.btbh,'A111',0,'A112',0,'A102',0,'A103',0,'A10D',0,'A113',0,'A10B',0,'A10E',0,p.btje)),0)  qtylj, ");// 其他养老金
			sqlBF.append("         a.jdid, a.sqid,a.dyffzt,'' dacsrq,0 stjfnx, ");
			sqlBF.append("		   0 sjjfnx, 0 zjfnx,c.rydjid,'1' ryzt,'' jzgbz, ");
			sqlBF.append("		   a.dyfhsj, a.dyfhr,'' ssjd,'' sssq");
			sqlBF.append("     from  ad3u.per_info  a, ");
			sqlBF.append("           ad3u.per_reg    c, ");
			sqlBF.append("           ad3u.supp_info  d, ");
			sqlBF.append("           si3u.orgn_reg  e, ");
			sqlBF.append("           ad3u.per_giv_month_std  p ");
			sqlBF.append("   where  a.dqdydjid  =  c.dydjid ");
			sqlBF.append("       and  c.dwdjid  =  e.dwdjid ");
			sqlBF.append("       and  a.ryid  =  d.ryid ");
			sqlBF.append("       and  a.sszfrq = 'B' ");
			sqlBF.append("       and  a.ryid  =  p.ryid(+) ");
			sqlBF.append("       and  to_char(sysdate,  'yyyyMM')  between  p.qsny(+)  and ");
			sqlBF.append("               nvl(p.zzny(+),  '205012') ");
			sqlBF.append("       and  d.yslb  like  ? ");
			sqlBF.append("       and  to_char(c.blzysj,  'yyyyMMdd')  between  ?  and  ? ");
			sqlBF.append("       and  a.dyxsksny  between  ?  and  ? ");
			sqlBF.append("       and  d.dyqsny||'01'  between  ?  and  ? ");
			sqlBF.append("       and  a.csrq  between  ?  and  ? ");
			sqlBF.append("       and  a.dwdjid ='" + perdwdjid + "' ");
			sqlBF.append(dyffztSql);
			sqlBF.append(jyrqSql);//改为限制ad3u.per_reg 表中jyrq字段   张超   modify   20161031
			sqlBF.append(jbjgSql);
			sqlBF.append(spSql);
			sqlBF.append(jdSql);
			sqlBF.append(sqSql);
			sqlBF.append("       and  p.btbh <> 'A187' ");//淄博增加不要40元补贴的限制
			sqlBF.append("   group  by  a.xm,a.ryid,a.xb,a.csrq,d.yslb, d.dyqsny,");
			sqlBF.append("              c.blzyyy,  e.dwbh,e.cbdwmc,e.cbdwxz, ");
			sqlBF.append("              a.dyspsj,a.sszfrq,c.blzysj,a.yhzh, ");
			sqlBF.append("              a.dyxsksny,a.ryid,a.dylqlb,a.dyspr,a.dfjglb, ");
			sqlBF.append("              a.dfjgid,a.dyffzt,a.xzzw,a.dyspbz,a.jdid, ");
			sqlBF.append("              a.sqid,a.dyffzt, c.rydjid,a.dyfhr,a.dyfhsj");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, zfrylb);
			this.readonlysql.setString(2, zyqsrq);
			this.readonlysql.setString(3, zyzzrq);
			this.readonlysql.setString(4, dyxsqsny);
			this.readonlysql.setString(5, dyxszzny);
			this.readonlysql.setString(6, ltxqsrq);
			this.readonlysql.setString(7, ltxzzrq);
			this.readonlysql.setString(8, csqsrq);
			this.readonlysql.setString(9, cszzrq);
			this.readonlysql.setString(10, cjgzqsrq);
			this.readonlysql.setString(11, cjgzzzrq);
			this.readonlysql.setString(12, zfrylb);
			this.readonlysql.setString(13, zyqsrq);
			this.readonlysql.setString(14, zyzzrq);
			this.readonlysql.setString(15, dyxsqsny);
			this.readonlysql.setString(16, dyxszzny);
			this.readonlysql.setString(17, ltxqsrq);
			this.readonlysql.setString(18, ltxzzrq);
			this.readonlysql.setString(19, csqsrq);
			this.readonlysql.setString(20, cszzrq);

			DataStore ds = this.readonlysql.executeQuery();

			ds = ds.sort("shbzhm");
			for (int k = 0, n = ds.rowCount(); k < n; k++) {
				String ryid = ds.getString(k, "ryid");
				String sprbh = ds.getString(k, "spr");
				String fhrbh = ds.getString(k, "dyfhr");

				String yxzjhm = "", lxdh = "", zyjszwjb = "", jtzz = "", grsf = "";
				dsTemp.clear();
				this.readonlysql.setSql("select yxzjhm,lxrdh,zyjszwjb,jtzz,grsf from biuv.person where ryid = ?");
				this.readonlysql.setString(1, ryid);
				dsTemp = this.readonlysql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					yxzjhm = dsTemp.getString(0, "yxzjhm");
					lxdh = dsTemp.getString(0, "lxrdh");
					zyjszwjb = dsTemp.getString(0, "zyjszwjb");
					jtzz = dsTemp.getString(0, "jtzz");
					grsf = dsTemp.getString(0, "grsf");
				}
				// 审批人
				ds.put(k, "spr", HsuTools.getCzyxmByUserId(sprbh));
				ds.put(k, "fhr", HsuTools.getCzyxmByUserId(fhrbh));
				ds.put(k, "txdah", AdTools.getPerCmpl(ryid, "TXDAH", ""));
				ds.put(k, "sfzhm", yxzjhm);
				ds.put(k, "lxdh", lxdh);
				ds.put(k, "zyjszwjb", zyjszwjb);
				ds.put(k, "jtzz", jtzz);
				ds.put(k, "grsf", grsf);
				// 东营增加原单位信息-李琪-20161019
				String ydw = "";
				dsTemp.clear();
				sqlBF.setLength(0);
				sqlBF.append("select a.zglb, b.cbdwmc ");
				sqlBF.append("  from si3u.per_reg a,si3u.orgn_reg b ");
				sqlBF.append(" where a.ryid = ? ");
				sqlBF.append("    and a.dwdjid = b.dwdjid ");
				sqlBF.append("   order by a.qsny desc ");
				sql.setSql(sqlBF.toString());
				sql.setString(1, ryid);
				dsTemp = sql.executeQuery();
				if (dsTemp.rowCount() > 1) {
					String zglb = dsTemp.getString(0, "zglb");
					String zglbl = dsTemp.getString(1, "zglb");
					if (zglb != null && !"".equals(zglb)) {
						if (zglb.equals(zglbl)) {
							ydw = dsTemp.getString(1, "cbdwmc");
						}
					}
				}
				ds.put(k, "ydw", ydw); // end-李琪-20161019
			}
			dsPerMx.combineDatastore(ds);
			prompt.moveForword(1);
		}
		HsuTools.genJdxxDataStore(dsPerMx, "jdid", "jdbh", "ssjd");
		HsuTools.genSqxxDataStore(dsPerMx, "sqid", "sqbh", "sssq");
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}
		dsPerMx = AdTools.genDfjgxxDataStore(dsPerMx, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		DataObject vdo = new DataObject();
		vdo.put("dsperinfo", dsPerMx);
		
		QueryLogTool.updateQueryLog(querylogid, dsPerMx.rowCount());
		
		return vdo;
	}
	
	/**
	 * 社保卡银行发放养老金查询：解析并检测报盘数据
	 * 
	 * @author lan
	 * @date 创建时间 2018-08-15
	 * @since V1.0
	 */
	public DataObject chkAdSbkyhffyljcxUpload(final DataObject para) throws Exception {
		DataObject rdo = new DataObject(), pdo = new DataObject();
		DataStore uploadInfo, tableInfo = new DataStore(), err = new DataStore(), dsTemp = new DataStore(), ds = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		CommonsMultipartFile file;
		String xm, shbzhm, cwxx = "", zkyhmc = "", kctzh = "", errflag = "";
		
		String querylogid = QueryLogTool.saveQueryLog("社保卡银行发放养老金查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		file = (CommonsMultipartFile) para.getObject("file");
		
		if (null == file) {
			this.bizException("chkAdSbkyhffyljcxUpload传入的参数file为空！");
		}

		// 构建解析列
		setTableInfo(tableInfo, 0, "shbzhm", "社会保障号码", "String");
		setTableInfo(tableInfo, 1, "xm", "姓名", "String");
		
		// 上传文件中的数据
		uploadInfo = HsuTools.getDsFromExcelFile(file, tableInfo);
		uploadInfo = ExcelTool.removeBlankRowWithTrim(uploadInfo); // 去除空行

		if (null == uploadInfo || uploadInfo.rowCount() <= 0) {
			this.bizException("导入的文件中没有数据！请检查！");
		}
		
		for(int i = uploadInfo.rowCount() -1; i >= 0; i--){
			shbzhm = uploadInfo.getString(i, "shbzhm");
			xm = uploadInfo.getString(i, "xm");
			
			// 校验报盘数据
			cwxx = "";
			if (shbzhm == null || "".equals(shbzhm)) {
				cwxx += "社会保障号码不能为空;";
			}
			if (xm == null || "".equals(xm)) {
				cwxx += "姓名不能为空;";
			}
			
			if(cwxx != null && !"".equals(cwxx)){
				err.addRow();
				err.put(err.rowCount()-1, "cwyy", cwxx);
				err.put(err.rowCount() - 1, "shbzhm", shbzhm);
				err.put(err.rowCount() - 1, "xm", xm);
				uploadInfo.delRow(i);
				continue;
			}
			
			// 查询人员信息
			sqlBF.setLength(0);
			sqlBF.append(" select a.ryid, a.shbzhm, a.xm, a.dwdjid, b.cbdwmc dwmc, ");
			sqlBF.append("        b.jbjgid, a.dfjglb, a.dfjgid, a.yhzh ");
			sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg b ");
			sqlBF.append("  where a.dwdjid = b.dwdjid ");
			sqlBF.append("    and a.shbzhm = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, shbzhm);
			dsTemp = this.sql.executeQuery();
			dsTemp = AdTools.genDfjgxxDataStore(dsTemp, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
			
			if(dsTemp.rowCount() == 0){
				err.addRow();
				err.put(err.rowCount()-1, "cwyy", "系统中未查询到社会保障号码为【" + shbzhm + "】的养老待遇登记信息！");
				err.put(err.rowCount()-1, "shbzhm", shbzhm);
				err.put(err.rowCount()-1, "xm", xm);
				uploadInfo.delRow(i);
				continue;
			} else if (dsTemp.rowCount() > 1){
				err.addRow();
				err.put(err.rowCount()-1, "cwyy", "系统中存在多条社会保障号码为【" + shbzhm + "】的养老待遇登记信息！");
				err.put(err.rowCount() - 1, "shbzhm", shbzhm);
				err.put(err.rowCount() - 1, "xm", xm);
				uploadInfo.delRow(i);
				continue;
			}
			
			String ryid = dsTemp.getString(0, "ryid");
			String cxm = dsTemp.getString(0, "xm");
			String jbjgid = dsTemp.getString(0, "jbjgid");
			
			// 校验导入报盘中人员姓名与系统中是否一致
			if (!xm.equals(cxm)){
				err.addRow();
				err.put(err.rowCount()-1, "ryid", ryid);
				err.put(err.rowCount()-1, "cwyy", "报盘中的姓名【" + xm + "】与系统中姓名【" + cxm + "】不一致！");
				err.put(err.rowCount()-1, "shbzhm", shbzhm);
				err.put(err.rowCount()-1, "xm", xm);
				uploadInfo.delRow(i);
				continue;
			}

			uploadInfo.put(i, "ryid", ryid);
			uploadInfo.put(i, "dwdjid", dsTemp.getString(0, "dwdjid"));
			uploadInfo.put(i, "dwmc", dsTemp.getString(0, "dwmc"));
			uploadInfo.put(i, "dfjgid", dsTemp.getString(0, "dfjgid"));
			uploadInfo.put(i, "dfjgbh", dsTemp.getString(0, "dfjgbh"));
			uploadInfo.put(i, "dfjgmc", dsTemp.getString(0, "dfjgmc"));
			uploadInfo.put(i, "yhzh", dsTemp.getString(0, "yhzh"));
			
			// 查询人员制卡银行、社保卡银行账号
			pdo.clear();
			pdo.put("jbjgid", jbjgid);
			pdo.put("ryid", ryid);
			pdo.put("firstkztfw", "1");
			pdo = this.iGetCardInfoStdSACO.doEntry(pdo);
			
			errflag = pdo.getString("errflag");
			ds = pdo.getDataStore("cardds");
			
			if("-1".equals(errflag)){
				err.addRow();
				err.put(err.rowCount()-1, "cwyy", pdo.getString("errtext"));
				err.put(err.rowCount()-1, "shbzhm", shbzhm);
				err.put(err.rowCount()-1, "xm", xm);
				uploadInfo.delRow(i);
				continue;
			}
			
			zkyhmc = "";
			kctzh = "";
			if(ds.rowCount() > 0){
				zkyhmc = ds.getString(0, "yhmc");
				kctzh = ds.getString(0, "kctzh");
			}
			
			uploadInfo.put(i, "zkyhmc", zkyhmc); // 制卡银行名称
			uploadInfo.put(i, "kctzh", kctzh); // 社保卡银行账号/卡磁条账号
		}
		
		rdo.clear();
		rdo.put("dsperjfqk", uploadInfo);
		rdo.put("dserrinfo", err);
		
		QueryLogTool.updateQueryLog(querylogid, uploadInfo.rowCount());
		
		return rdo;
	}

	/**
	 * 查询死亡人员丧葬信息
	 * 
	 * @author 王文博
	 * @date 创建时间 2018-8-23
	 * @since V1.0
	 */
	public DataObject querySwryszxx(DataObject para) throws Exception {

		DataObject tempdo = new DataObject();
		DataObject temprdo = new DataObject();
		DataStore temprds = new DataStore();
		DataStore szxxpds = para.getDataStore("swryszxx");
		DataStore szxxrds = new DataStore();
		DataStore errds = para.getDataStore("dserrinfo");
		DataObject rdo = new DataObject();
		// queryFlag=0代表单个查询，1为报盘查询
		int queryFlag = 0;
		int szxxpdsRowCount = 0;
		int szxxrdsRowCount = 0;

		// 记日志
		String querylogid = QueryLogTool.saveQueryLog("死亡人员丧葬信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(), para);

		// 接参数
		String yxzjhm = para.getString("yxzjhm");
		String xm = para.getString("xm");
		String rsxtid = HsuTools.getRsxtidByJgid(this.getBizInstitution());
		String esbid = "";
		if (rsxtid != null && rsxtid.length() >= 4) {
			esbid = rsxtid.substring(0, 4);
		}
		// 判断查询类型--单个/报盘
		if (!"".equals(yxzjhm) && yxzjhm != null) {
			// yxzjhm非空，此次为单人查询
			szxxpds.clear();
			szxxpds.put(0, "yxzjhm", yxzjhm);
			szxxpds.put(0, "xm", xm);
		} else if (szxxpds.rowCount() < 1) {
			// 均空，关进度条，返回para即可
			LanePromptUtil.complete();
			LanePromptUtil.end();
			return para;
		} else {
			// 此次为报盘查询
			queryFlag = 1;

		}
		szxxpdsRowCount = szxxpds.rowCount();
		LanePromptUtil.setTotalSteps(szxxpdsRowCount);
		LanePromptUtil.promptToTrace("查询开始");
		for (int i = 0; i < szxxpdsRowCount; i++) {
			String yxzjhmTemp = szxxpds.getString(i, "yxzjhm");
			String xmTemp = szxxpds.getString(i, "xm");
			LanePromptUtil.promptToTrace("正在查询第" + (i + 1) + "条死亡人员丧葬信息，一共"
					+ szxxpdsRowCount + "条");
			LanePromptUtil.moveForward(1);
			try {
				tempdo.clear();
				tempdo.put("id_card", yxzjhm);
				tempdo.put("name", xm);
				tempdo.put("jbjgid", "3799");
				tempdo.put("userid", "dwhsu");
				tempdo.put("appid", "37000053");
				tempdo.put("operationName", "queryMzBzxxBySzf");//修改调用方式mod mxh 20191015
				temprdo = LocalServiceClient.invokeServiceOnRemoteESB(esbid, "InteplateService", "queryMzBzxxBySzf", tempdo);
			} catch (Exception e) {
				this.bizException("调用服务失败:" + e.getMessage());
			}
			temprds = temprdo.getDataStore("vds");
			if (temprds.rowCount() < 1) {
				if (queryFlag == 0) {
					// 单人查询且无结果，返回错误信息
					this.bizException("未查询到" + xmTemp + "的丧葬信息！");
				}
				continue;
			}
			// 结果非空，则放入rds,rdsRowCount+1
			String cremationTime = temprds.getDateToString(0, "crematio_time", "yyyyMMdd");
			String createOrganName = temprds.getString(0, "create_organ_name");
			String populaceName = temprds.getString(0, "populace_name");
			szxxrds.put(szxxrdsRowCount, "yxzjhm", yxzjhmTemp);
			szxxrds.put(szxxrdsRowCount, "xm", xmTemp);
			szxxrds.put(szxxrdsRowCount, "cremationTime", cremationTime);
			szxxrds.put(szxxrdsRowCount, "createOrganName", createOrganName);
			szxxrds.put(szxxrdsRowCount, "populaceName", populaceName);
			szxxrdsRowCount++;
		}
		// 指示进度条工作完成
		LanePromptUtil.complete();
		LanePromptUtil.end();
		rdo.clear();
		rdo.put("swryszxx", szxxrds);
		rdo.put("dserrinfo", errds);

		QueryLogTool.updateQueryLog(querylogid, szxxrdsRowCount);

		return rdo;
	}
	
	/** 
	  * 方法简介.跳转到批量人员状态对比实时查询页面
	  * @author wjq
	  * @date 创建时间   2019年7月19日
	  * @since V1.0
	  */
	public DataObject fwdPlRyztdbsscxUTC(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dyffztcode, xzqhdmcode, xzbzcode, bzcode;
		StringBuffer sqlBF = new StringBuffer();

		DataStore ds;

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		// 组织待遇发放状态code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'DYFFZT' ");
		this.sql.setSql(sqlBF.toString());
		dyffztcode = this.sql.executeQuery();

		// 组织行政区划code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.xzqhdm value, a.xzqhmc content from be3u.district_natl a ");
		this.sql.setSql(sqlBF.toString());
		xzqhdmcode = this.sql.executeQuery();

		// 组织险种类型code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'XZBZ' ");
		this.sql.setSql(sqlBF.toString());
		xzbzcode = this.sql.executeQuery();

		// 组织备注code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'BZ' ");
		this.sql.setSql(sqlBF.toString());
		bzcode = this.sql.executeQuery();

		rdo.clear();
		rdo.put("dyffztcode", dyffztcode);
		rdo.put("xzqhdmcode", xzqhdmcode);
		rdo.put("xzbzcode", xzbzcode);
		rdo.put("bzcode", bzcode);
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);

		return rdo;
	}
	
	/** 
	 * 方法简介.批量人员状态对比实时查询报盘检测
	 * 
	 * @author wjq 2019-3-6
	*/
	public DataObject chkPlRyztdbsscxbpUpload(DataObject para) throws Exception {
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore();
		DataStore dsRight = new DataStore();
		DataStore xmTempds = new DataStore();
		String errTest, xm, yxzjhm;
		StringBuffer sqlBF = new StringBuffer();
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "yxzjhm", "身份证号码", "String");
		setTableInfo(tableInfo, 1, "xm", "姓名", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}
		for (int i = 0; i < ds.rowCount(); i++) {
			errTest = "";
			yxzjhm = StringUtil.trim(ds.getString(i, "yxzjhm"));
			String yxzjhm_j;
			// 去重复,从前往后遍历，若重复，移除本条，直到保留最后一条
			for (int j = i + 1; j < ds.rowCount(); j++) {
				yxzjhm_j = StringUtil.trim(ds.getString(j, "yxzjhm"));
				if (yxzjhm_j.equals(yxzjhm)) {
					errTest = errTest + "身份证号码重复（保留最后一条）    ";
					break;
				}
			}
			xm = StringUtil.trim(ds.getString(i, "xm"));
			if (xm == null || "".equals(xm) || xm.length() == 0) {
				errTest = errTest + "姓名不完整    ";
			}
			if (yxzjhm == null || "".equals(yxzjhm)) {
				errTest = errTest + "身份证号码的长度不正确    ";
			} else if (yxzjhm.length() > 0 && yxzjhm.length() != 18
					&& yxzjhm.length() != 15) {
				errTest = errTest + "身份证号码的长度不正确    ";
			}

			// 在此校验身份证号码与姓名字段是否匹配
			sqlBF.setLength(0);
			sqlBF.append("select xm ");
			sqlBF.append("  from ad3u.per_info ");
			sqlBF.append(" where shbzhm = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, yxzjhm);
			xmTempds = this.sql.executeQuery();
			if (xmTempds.rowCount() < 1) {
				errTest = errTest + "系统中无此人员退休信息    ";
			} else {
				if (!xm.equals(xmTempds.getString(0, "xm"))) {
					errTest = errTest + "姓名与身份证号码不匹配    ";
				}
			}

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "yxzjhm", yxzjhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "cwxx", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "yxzjhm", yxzjhm);
				dsRight.put(rowR, "xm", xm);
			}
		}
		rdo.clear();
		rdo.put("dsperinfo", dsRight);
		rdo.put("dserrinfo", dsError);
		return rdo;
	}
	
	/** 
	 * 方法简介.批量人员状态对比实时查询
	 * 
	 * @author wjq 2019-3-6
	*/
	public DataObject queryPlRyztdbsscx(DataObject para) throws Exception {

		DataObject tempdo = new DataObject();
		DataStore dsperinfo = new DataStore();
		DataStore ryztpds = para.getDataStore("dsperinfo");
		DataStore errds = para.getDataStore("dserrinfo");
		DataObject rdo = new DataObject();
		DataStore dsTemp = new DataStore();
		StringBuffer sqlBF = new StringBuffer();
		int ryztpdsRowCount = 0;
		int ryztrdsRowCount = 0;

		// 记日志
		String querylogid = QueryLogTool.saveQueryLog("批量人员状态对比实时查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(), para);
		
		ryztpdsRowCount = ryztpds.rowCount(); 
		LanePromptUtil.setTotalSteps(ryztpdsRowCount);
		LanePromptUtil.promptToTrace("查询开始");
		String xzqhdm, dwdjid;
		for (int i = 0; i < ryztpds.rowCount(); i++) {
			String yxzjhmTemp = ryztpds.getString(i, "yxzjhm");
			String xmTemp = ryztpds.getString(i, "xm");
			LanePromptUtil.promptToTrace("正在查询第" + (i + 1) + "条人员["+xmTemp+"]的状态信息，一共"
					+ ryztpdsRowCount + "条");
			LanePromptUtil.moveForward(1);
			
			//获取人员id和单位登记id
			sqlBF.setLength(0);
			sqlBF.append("select dwdjid ");
			sqlBF.append("  from ad3u.per_info ");
			sqlBF.append(" where shbzhm = ? ");
			sqlBF.append("   and xm = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, yxzjhmTemp);
			this.sql.setString(2, xmTemp);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() <= 0){
				this.bizException("系统中未查到该人员信息！");
			}
			dwdjid = dsTemp.getString(0, "dwdjid");
			
			//获取行政区划代码
			sqlBF.setLength(0);
			sqlBF.append(" select distinct a.xzqhdm ");
			sqlBF.append("   from be3u.bureau_natl a, ");
			sqlBF.append("        be3u.agency_natl b, ");
			sqlBF.append("        si3u.orgn_reg c ");
			sqlBF.append("  where a.rsjid = b.rsjid ");
			sqlBF.append("    and b.jbjgid=c.jbjgid ");
			sqlBF.append("    and c.dwdjid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() <= 0) {
				this.bizException("未取到该人员所属行政区划信息!");
			}
			xzqhdm = dsTemp.getString(0, "xzqhdm");
			try {
				tempdo.clear();
				tempdo.put("sfzhm", yxzjhmTemp);
				tempdo.put("cxxm", xmTemp);
				tempdo.put("gnbsbh", "Q01022");
				tempdo.put("xzbz", "110");
				tempdo.put("xzqhdm", xzqhdm);
				tempdo = this.getOisiProxy(tempdo);
				dsperinfo.combineDatastore(tempdo.getDataStore("dsperinfo"));
			} catch (Exception e) {
				this.bizException("调用服务失败:" + e.getMessage());
			}
			ryztrdsRowCount++;
		}
		// 指示进度条工作完成
		LanePromptUtil.complete();
		LanePromptUtil.end();
		rdo.clear();
		rdo.put("dsperinfo", dsperinfo);
		rdo.put("dserrinfo", errds);

		QueryLogTool.updateQueryLog(querylogid, ryztrdsRowCount);

		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.查询民政部丧葬信息
	 *
	 * @author rzs
	 * @date 创建时间 2019-2-25
	 * @since V1.0
	 */
	public DataObject queryMzszxx(DataObject para) throws Exception {

		DataObject tempdo = new DataObject();
		DataObject temprdo = new DataObject();
		DataStore temprds = new DataStore();
		DataStore szxxpds = para.getDataStore("mzszxx");
		DataStore szxxmztpds = para.getDataStore("mztszxx");
		DataStore szxxrds = new DataStore();
		DataStore szxxmztrds = new DataStore();
		DataStore errds = para.getDataStore("dserrinfo");
		DataObject rdo = new DataObject();

		// queryFlag=0代表单个查询，1为报盘查询
		int queryFlag = 0;
		int szxxpdsRowCount = 0;
		int szxxmztpdsRowCount=0;
		int szxxrdsRowCount = 0;
		int szxxmztrdsRowCount = 0;
		// 记日志
		String querylogid = QueryLogTool.saveQueryLog("民政殡葬信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(), para);

		// 接参数
		String yxzjhm = para.getString("yxzjhm");
		String xm = para.getString("xm");
		// 判断查询类型--单个/报盘
		if (!"".equals(yxzjhm) && yxzjhm != null) {
			// yxzjhm非空，此次为单人查询
			szxxpds.clear();
			szxxpds.put(0, "yxzjhm", yxzjhm);
			szxxpds.put(0, "xm", xm);
			szxxmztpds.clear();
			szxxmztpds.put(0, "yxzjhm", yxzjhm);
			szxxmztpds.put(0, "xm", xm);
		} else if (szxxpds.rowCount() < 1 && szxxmztpds.rowCount() < 1 ) {
			// 均空，关进度条，返回para即可
			LanePromptUtil.complete();
			LanePromptUtil.end();
			return para;
		} else {
			// 此次为报盘查询
			queryFlag = 1;

		}
		//pspid,用于获取dwlesb.uddiaddress_pspid里面的地址和key，如：szpsp
		String pspid = HsuTools.getSystemPara("PSPID", "HSU", "");
		
		szxxpdsRowCount = szxxpds.rowCount();
		LanePromptUtil.setTotalSteps(szxxpdsRowCount);
		LanePromptUtil.promptToTrace("民政部殡葬信息查询开始");
		for (int i = 0; i < szxxpdsRowCount; i++) {
			String yxzjhmTemp = szxxpds.getString(i, "yxzjhm");
			String xmTemp = szxxpds.getString(i, "xm");
			LanePromptUtil.promptToTrace("正在查询第" + (i + 1) + "条民政部殡葬信息，一共"
					+ szxxpdsRowCount + "条");
			LanePromptUtil.moveForward(1);
			try {
				tempdo.clear();
				tempdo.put("id_card", yxzjhmTemp);
				tempdo.put("name", xmTemp);
				temprdo = LocalServiceClient.invokeServiceByPspid(pspid, "MZBService", "queryBBzxx", tempdo);

			} catch (Exception e) {
				this.bizException("调用民政部服务失败:" + e.getMessage());
			}
			if (temprdo.containsKey("output")) {
				temprds = temprdo.getDataStore("output");
			}

			if (temprds.rowCount() < 1) {
				continue;
			}
			szxxrds.combineDatastore(temprds);
			szxxrdsRowCount++;
		}
		// 指示进度条工作完成
		LanePromptUtil.complete();
		LanePromptUtil.end();
		QueryLogTool.updateQueryLog(querylogid, szxxrdsRowCount);

		szxxmztpdsRowCount = szxxmztpds.rowCount();
		LanePromptUtil.setTotalSteps(szxxmztpdsRowCount);
		LanePromptUtil.promptToTrace("民政厅殡葬信息查询开始");
		for (int i = 0; i < szxxmztpdsRowCount; i++) {
			String yxzjhmTemp = szxxmztpds.getString(i, "yxzjhm");
			String xmTemp = szxxmztpds.getString(i, "xm");
			LanePromptUtil.promptToTrace("正在查询第" + (i + 1) + "条民政厅殡葬信息，一共"
					+ szxxmztpdsRowCount + "条");
			LanePromptUtil.moveForward(1);
			try {
				tempdo.clear();
				tempdo.put("id_card", yxzjhmTemp);
				tempdo.put("name", xmTemp);
				temprdo = LocalServiceClient.invokeServiceByPspid(pspid, "SZMZService", "queryBzxx", tempdo);
			} catch (Exception e) {
				this.bizException("调用民政厅服务失败:" + e.getMessage());
			}
			if(temprdo.containsKey("output")){//增加校验是否存在回参
				temprds = temprdo.getDataStore("output");
			}
			if (temprds.rowCount() < 1) {
				continue;
			}
			szxxmztrds.combineDatastore(temprds);
			szxxmztrdsRowCount++;
		}
		// 指示进度条工作完成
		LanePromptUtil.complete();
		LanePromptUtil.end();
		QueryLogTool.updateQueryLog(querylogid, szxxmztrdsRowCount);
		rdo.clear();
		rdo.put("mzszxx", szxxrds);
		rdo.put("mztszxx", szxxmztrds);
		rdo.put("dserrinfo", errds);

		return rdo;
	}
	
	/**
	 * 方法简介： 查询监狱服刑人员信息
	 * 
	 * @author 黄本良 2019-6-12
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryJyfxryxx(DataObject para) throws Exception {

		DataObject tempdo = new DataObject();
		DataObject temprdo = new DataObject();
		DataStore temprds = new DataStore();
		DataStore jyfxryxxpds = para.getDataStore("jyfxryxx");
		DataStore jyfxryxxrds = new DataStore();
		DataStore errds = para.getDataStore("dserrinfo");
		DataObject rdo = new DataObject();

		// queryFlag=0代表单个查询，1为报盘查询
		int jyfxryxxpdsRowCount = 0;
		int jyfxryxxrdsRowCount = 0;
		// 记日志
		String querylogid = QueryLogTool.saveQueryLog("监狱服刑人员信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser()
			.getUserid(), para);

		// 接参数
		String yxzjhm = para.getString("yxzjhm");
		String xm = para.getString("xm");
		// 判断查询类型--单个/报盘
		if (!"".equals(yxzjhm) && yxzjhm != null) {
			// yxzjhm非空，此次为单人查询
			jyfxryxxpds.clear();
			jyfxryxxpds.put(0, "yxzjhm", yxzjhm);
			jyfxryxxpds.put(0, "xm", xm);
		} else if (jyfxryxxpds.rowCount() < 1) {
			// 均空，关进度条，返回para即可
			LanePromptUtil.complete();
			LanePromptUtil.end();
			return para;
		}
		// pspid,用于获取dwlesb.uddiaddress_pspid里面的地址和key，如：szpsp
		String pspid = HsuTools.getSystemPara("PSPID", "HSU", "");
		jyfxryxxpdsRowCount = jyfxryxxpds.rowCount();
		LanePromptUtil.setTotalSteps(jyfxryxxpdsRowCount);
		LanePromptUtil.promptToTrace("监狱服刑人员信息查询开始");
		for (int i = 0; i < jyfxryxxpdsRowCount; i++) {
			String yxzjhmTemp = jyfxryxxpds.getString(i, "yxzjhm");
			LanePromptUtil.promptToTrace("正在查询第" + (i + 1) + "条监狱服刑人员信息，一共"
					+ jyfxryxxpdsRowCount + "条");
			LanePromptUtil.moveForward(1);
			try {
				tempdo.clear();
				tempdo.put("zjhm", yxzjhmTemp);
				temprdo = LocalServiceClient.invokeServiceByPspid(pspid, "DseuService", "queryJyfxjbxx", tempdo);
			} catch (Exception e) {
				this.bizException("调用查询监狱服刑人员信息服务失败:" + e.getMessage());
			}

			temprds = temprdo.getDataStore("output");
			if (temprds.rowCount() < 1) {
				continue;
			}
			for (int j = 0; j < temprds.rowCount(); j++) {
				temprds.put(j, "sfzhm", yxzjhmTemp);
			}

			jyfxryxxrds.combineDatastore(temprds);
			jyfxryxxrdsRowCount++;
		}
		// 指示进度条工作完成
		LanePromptUtil.complete();
		LanePromptUtil.end();
		QueryLogTool.updateQueryLog(querylogid, jyfxryxxrdsRowCount);
		
		String pcrq = "", qr = "", zr = "";// 处理返回日期不符合要求的日期.mod.zcc.20191118
		for (int j = 0; j < jyfxryxxrds.rowCount(); j++) {
			pcrq = jyfxryxxrds.getString(j, "pcrq");
			if (pcrq != null && pcrq.length() > 8) {
				pcrq = pcrq.substring(0, 8);
			}
			qr = jyfxryxxrds.getString(j, "qr");
			if (qr != null && qr.length() > 8) {
				qr = qr.substring(0, 8);
			}
			zr = jyfxryxxrds.getString(j, "zr");
			if (zr != null && zr.length() > 8) {
				zr = zr.substring(0, 8);
			}
			jyfxryxxrds.put(j, "pcrq", pcrq);
			jyfxryxxrds.put(j, "qr", qr);
			jyfxryxxrds.put(j, "zr", zr);
		}
		
		rdo.clear();
		rdo.put("jyfxryxx", jyfxryxxrds);
		rdo.put("dserrinfo", errds);

		return rdo;
	}
	
/**
	 * 方法简介： 检查监狱服刑人员信息报盘文件
	 * 
	 * @author 黄本良 2019-6-13
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject chkJyfxryxxbpUpload(DataObject para) throws Exception {
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore();
		DataStore dsRight = new DataStore();
		DataStore xmTempds = new DataStore();
		String errTest, xm, yxzjhm;
		StringBuffer sqlBF = new StringBuffer();
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "yxzjhm", "身份证号码", "String");
		setTableInfo(tableInfo, 1, "xm", "姓名", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}
		for (int i = 0; i < ds.rowCount(); i++) {
			errTest = "";
			yxzjhm = StringUtil.trim(ds.getString(i, "yxzjhm"));
			String yxzjhm_j;
			// 去重复,从前往后遍历，若重复，移除本条，直到保留最后一条
			for (int j = i + 1; j < ds.rowCount(); j++) {
				yxzjhm_j = StringUtil.trim(ds.getString(j, "yxzjhm"));
				if (yxzjhm_j.equals(yxzjhm)) {
					errTest = errTest + "身份证号码重复（保留最后一条）    ";
					break;
				}
			}
			xm = StringUtil.trim(ds.getString(i, "xm"));
			if (xm == null || "".equals(xm) || xm.length() == 0) {
				errTest = errTest + "姓名不完整    ";
			}
			if (yxzjhm == null || "".equals(yxzjhm)) {
				errTest = errTest + "身份证号码的长度不正确    ";
			} else if (yxzjhm.length() > 0 && yxzjhm.length() != 18
					&& yxzjhm.length() != 15) {
				errTest = errTest + "身份证号码的长度不正确    ";
			}

			// 在此校验身份证号码与姓名字段是否匹配
			sqlBF.setLength(0);
			sqlBF.append("select xm ");
			sqlBF.append(" from ad3u.per_info ");
			sqlBF.append(" where shbzhm = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, yxzjhm);
			xmTempds = this.sql.executeQuery();
			if (xmTempds.rowCount() < 1) {
				errTest = errTest + "系统中无此职工信息    ";
			} else {

				if (!xm.equals(xmTempds.getString(0, "xm"))) {
					errTest = errTest + "姓名与身份证号码不匹配    ";
				}
			}

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "yxzjhm", yxzjhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "cwxx", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "yxzjhm", yxzjhm);
				dsRight.put(rowR, "xm", xm);
			}
		}
		rdo.clear();
		rdo.put("jyfxryxx", dsRight);
		rdo.put("dserrinfo", dsError);
		return rdo;
	}

	/**
	 * 检查死亡人员丧葬信息报盘文件
	 * 
	 * @author 王文博
	 * @date 创建时间 2018-8-23
	 * @since V1.0
	 */
	public DataObject chkSwrysfxxbpUpload(DataObject para) throws Exception {
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore();
		DataStore dsRight = new DataStore();
		DataStore xmTempds = new DataStore();
		String errTest, xm, yxzjhm;
		StringBuffer sqlBF = new StringBuffer();
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "yxzjhm", "身份证号码", "String");
		setTableInfo(tableInfo, 1, "xm", "姓名", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}
		for (int i = 0; i < ds.rowCount(); i++) {
			errTest = "";
			yxzjhm = StringUtil.trim(ds.getString(i, "yxzjhm"));
			String yxzjhm_j;
			// 去重复,从前往后遍历，若重复，移除本条，直到保留最后一条
			for (int j = i + 1; j < ds.rowCount(); j++) {
				yxzjhm_j = StringUtil.trim(ds.getString(j, "yxzjhm"));
				if (yxzjhm_j.equals(yxzjhm)) {
					errTest = errTest + "身份证号码重复（保留最后一条）    ";
					break;
				}
			}
			xm = StringUtil.trim(ds.getString(i, "xm"));
			if (xm == null || "".equals(xm) || xm.length() == 0) {
				errTest = errTest + "姓名不完整    ";
			}
			if (yxzjhm == null || "".equals(yxzjhm)) {
				errTest = errTest + "身份证号码的长度不正确    ";
			} else if (yxzjhm.length() > 0 && yxzjhm.length() != 18
					&& yxzjhm.length() != 15) {
				errTest = errTest + "身份证号码的长度不正确    ";
			}

			// 在此校验身份证号码与姓名字段是否匹配
			sqlBF.setLength(0);
			sqlBF.append("select xm ");
			sqlBF.append(" from si3u.per_reg ");
			sqlBF.append(" where hdbz = '1' ");
			sqlBF.append(" and shbzhm = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, yxzjhm);
			xmTempds = this.sql.executeQuery();
			if (xmTempds.rowCount() < 1) {
				errTest = errTest + "系统中无此职工信息    ";
			} else {

				if (!xm.equals(xmTempds.getString(0, "xm"))) {
					errTest = errTest + "姓名与身份证号码不匹配    ";
				}
			}

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "yxzjhm", yxzjhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "cwxx", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "yxzjhm", yxzjhm);
				dsRight.put(rowR, "xm", xm);
			}
		}
		rdo.clear();
		rdo.put("swryszxx", dsRight);
		rdo.put("dserrinfo", dsError);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.检查民政殡葬信息报盘文件
	 *
	 * @author rzs
	 * @date 创建时间 2019-3-2
	 * @since V1.0
	 */
	public DataObject chkMzbzxxbpUpload(DataObject para) throws Exception {
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore();
		DataStore dsRight = new DataStore();
		DataStore xmTempds = new DataStore();
		String errTest, xm, yxzjhm;
		StringBuffer sqlBF = new StringBuffer();
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "yxzjhm", "身份证号码", "String");
		setTableInfo(tableInfo, 1, "xm", "姓名", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}
		for (int i = 0; i < ds.rowCount(); i++) {
			errTest = "";
			yxzjhm = StringUtil.trim(ds.getString(i, "yxzjhm"));
			String yxzjhm_j;
			// 去重复,从前往后遍历，若重复，移除本条，直到保留最后一条
			for (int j = i + 1; j < ds.rowCount(); j++) {
				yxzjhm_j = StringUtil.trim(ds.getString(j, "yxzjhm"));
				if (yxzjhm_j.equals(yxzjhm)) {
					errTest = errTest + "身份证号码重复（保留最后一条）    ";
					break;
				}
			}
			xm = StringUtil.trim(ds.getString(i, "xm"));
			if (xm == null || "".equals(xm) || xm.length() == 0) {
				errTest = errTest + "姓名不完整    ";
			}
			if (yxzjhm == null || "".equals(yxzjhm)) {
				errTest = errTest + "身份证号码的长度不正确    ";
			} else if (yxzjhm.length() > 0 && yxzjhm.length() != 18
					&& yxzjhm.length() != 15) {
				errTest = errTest + "身份证号码的长度不正确    ";
			}

			// 在此校验身份证号码与姓名字段是否匹配
			sqlBF.setLength(0);
			sqlBF.append("select xm ");
			sqlBF.append("  from ad3u.per_info ");
			sqlBF.append(" where shbzhm = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, yxzjhm);
			xmTempds = this.sql.executeQuery();
			if (xmTempds.rowCount() < 1) {
				errTest = errTest + "系统中无此职工信息    ";
			} else {

				if (!xm.equals(xmTempds.getString(0, "xm"))) {
					errTest = errTest + "姓名与身份证号码不匹配    ";
				}
			}

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "yxzjhm", yxzjhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "cwxx", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "yxzjhm", yxzjhm);
				dsRight.put(rowR, "xm", xm);
			}
		}
		rdo.clear();
		rdo.put("mztszxx", dsRight);
		rdo.put("mzszxx", dsRight);
		rdo.put("dserrinfo", dsError);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.检查卫计委医学死亡证明信息报盘文件
	 *
	 * @author szh
	 * @date 创建时间 2019-6-20
	 * @since V1.0
	 */
	public DataObject chkWjwswyxzmxxbpUpload(DataObject para) throws Exception {
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore();
		DataStore dsRight = new DataStore();
		DataStore xmTempds = new DataStore();
		String errTest, xm, yxzjhm;
		StringBuffer sqlBF = new StringBuffer();
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "yxzjhm", "身份证号码", "String");
		setTableInfo(tableInfo, 1, "xm", "姓名", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}
		for (int i = 0; i < ds.rowCount(); i++) {
			errTest = "";
			yxzjhm = StringUtil.trim(ds.getString(i, "yxzjhm"));
			String yxzjhm_j;
			// 去重复,从前往后遍历，若重复，移除本条，直到保留最后一条
			for (int j = i + 1; j < ds.rowCount(); j++) {
				yxzjhm_j = StringUtil.trim(ds.getString(j, "yxzjhm"));
				if (yxzjhm_j.equals(yxzjhm)) {
					errTest = errTest + "身份证号码重复（保留最后一条）    ";
					break;
				}
			}
			xm = StringUtil.trim(ds.getString(i, "xm"));
			if (xm == null || "".equals(xm) || xm.length() == 0) {
				errTest = errTest + "姓名不完整    ";
			}
			if (yxzjhm == null || "".equals(yxzjhm)) {
				errTest = errTest + "身份证号码的长度不正确    ";
			} else if (yxzjhm.length() > 0 && yxzjhm.length() != 18
					&& yxzjhm.length() != 15) {
				errTest = errTest + "身份证号码的长度不正确    ";
			}

			// 在此校验身份证号码与姓名字段是否匹配
			sqlBF.setLength(0);
			sqlBF.append("select xm ");
			sqlBF.append("  from ad3u.per_info ");
			sqlBF.append(" where shbzhm = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, yxzjhm);
			xmTempds = this.sql.executeQuery();
			if (xmTempds.rowCount() < 1) {
				errTest = errTest + "系统中无此职工信息    ";
			} else {

				if (!xm.equals(xmTempds.getString(0, "xm"))) {
					errTest = errTest + "姓名与身份证号码不匹配    ";
				}
			}

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "yxzjhm", yxzjhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "cwxx", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "yxzjhm", yxzjhm);
				dsRight.put(rowR, "xm", xm);
			}
		}
		rdo.clear();
		rdo.put("mzszxx", dsRight);
		rdo.put("dserrinfo", dsError);
		return rdo;
	}
	/**
	 * 方法简介.跳转至提交稽核信息查询界面查询
	 * 
	 * @author 胡明锋 2018-8-30
	 */
	public final DataObject fwdTjjhxxQuery(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);//机构是否全部地区

		ds = null;
		return rdo;
	}
	

	/**
	 * 方法简介.查询提交稽核信息
	 * 
	 * @author 胡明锋 Aug 30, 2018
	 */
	public  DataObject queryTjjhxx(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String jbjgid, dyffzt, jhtjbs, jhtjqsrq, jhtjzzrq;
		double dyje;
		DataStore ds = new DataStore(), dsOrgn, dsPer;
		DataObject rdo = new DataObject(), do_per;
		StringBuffer sqlBF_bfje = new StringBuffer();
		StringBuffer sqlBF_ztny = new StringBuffer();
		StringBuffer sqlBF_jh = new StringBuffer();
		String ryid, ztny, jhbs, jhrq;

		// 接参
		jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		dyffzt = HsuTools.replaceC2QCQ(para.getString("dyffzt"));
		jhtjqsrq = para.getDateToString("jhtjqsrq", "yyyyMMdd");
		jhtjzzrq = para.getDateToString("jhtjzzrq", "yyyyMMdd");
		jhtjbs = para.getString("jhtjbs");

		if (jhtjqsrq != null && !"".equals(jhtjqsrq)
				&& (jhtjzzrq != null && !"".equals(jhtjzzrq))) {
			if (jhtjqsrq.compareTo(jhtjzzrq) > 0) {
				this.bizException("传入的稽核提交起始日期大于终止日期！");
			}
		}
		String querylogid = QueryLogTool.saveQueryLog("提交稽核信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser()
			.getUserid(), para);

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		sqlBF.setLength(0);
		sqlBF.append(" select dwdjid, dwbh, cbdwmc dwmc ");
		sqlBF.append("   from si3u.orgn_reg a ");
		sqlBF.append("  where a.jbjgid in (").append(jbjgid).append(")");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("                  from ad3u.per_info b ");
		sqlBF.append("                 where a.dwdjid = b.dwdjid )");
		this.sql.setSql(sqlBF.toString());
		dsOrgn = this.sql.executeQuery();

		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数

		// 查询人员基本信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.dwbh, a.cbdwmc, b.xm, b.shbzhm, ");
		sqlBF.append("        b.dyffzt, b.zfrylb ltxlb, b.ryid ");
		sqlBF.append(" 	 from si3u.orgn_reg a, ad3u.per_info b ");
		sqlBF.append(" 	where a.dwdjid = b.dwdjid ");
		sqlBF.append(" 	  and a.dwdjid = ? ");		
		sqlBF.append(" 	  and a.jbjgid in (").append(jbjgid).append(")");
	    sqlBF.append("    and exists(select 1 ");
		sqlBF.append("                 from ad3u.per_cmpl d ");
		sqlBF.append("                where b.ryid = d.ryid ");
		sqlBF.append("                  and d.bcxmbh = 'JHTJBS' ");
		sqlBF.append("                  and d.bcxmz = " + jhtjbs + ")");
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and b.dyffzt in (").append(dyffzt).append(")");

		}
		if (jhtjqsrq != null && !"".equals(jhtjqsrq)) {
			sqlBF.append("    and exists(select 1 ");
			sqlBF.append("                 from ad3u.per_cmpl d ");
			sqlBF.append("                where b.ryid = d.ryid ");
			sqlBF.append("                  and d.bcxmbh = 'JHTJRQ' ");
			sqlBF.append("                  and d.bcxmz  >=  " + jhtjqsrq + ")");
		}
		if (jhtjzzrq != null && !"".equals(jhtjzzrq)) {
			sqlBF.append("    and exists(select 1 ");
			sqlBF.append("                 from ad3u.per_cmpl d ");
			sqlBF.append("                where b.ryid = d.ryid ");
			sqlBF.append("                  and d.bcxmbh = 'JHTJRQ' ");
			sqlBF.append("                  and d.bcxmz <= " + jhtjzzrq + ")");

		}

		// 查询暂停年月
		sqlBF_ztny.append(" select a.ryid, b.qsny ztny ");
		sqlBF_ztny.append("   from ad3u.per_info a, ad3u.per_pause b ");
		sqlBF_ztny.append("  where a.ryid = b.ryid ");
		sqlBF_ztny.append("    and a.dyffzt = '2' ");
		sqlBF_ztny.append("    and b.zzny is null ");
		sqlBF_ztny.append("    and a.dwdjid = ? ");
		sqlBF_ztny.append(" union all ");
		sqlBF_ztny.append(" select a.ryid, a.dyzzny ztny ");
		sqlBF_ztny.append("   from ad3u.per_info a ");
		sqlBF_ztny.append("  where a.dyffzt = '3' ");
		sqlBF_ztny.append("    and a.dwdjid = ? ");
		String sql_ztny = sqlBF_ztny.toString();

		// 查询稽核标识和稽核日期
		sqlBF_jh.setLength(0);
		sqlBF_jh.append(" select a.ryid, max(decode(b.bcxmbh, 'JHTJBS', b.bcxmz)) jhtjbs, max(decode(b.bcxmbh, 'JHTJRQ', b.bcxmz)) jhtjrq ");
		sqlBF_jh.append("   from ad3u.per_info a, ad3u.per_cmpl b ");
		sqlBF_jh.append("  where a.ryid = b.ryid ");
		sqlBF_jh.append("    and b.bcxmbh in ('JHTJBS', 'JHTJRQ') ");
		sqlBF_jh.append("    and a.dwdjid = ?");
		sqlBF_jh.append("  group by a.ryid ");
		String sql_jh = sqlBF_jh.toString();

		// 查询待拨付金额
		sqlBF_bfje.setLength(0);
		sqlBF_bfje.append(" select b.ryid,nvl(sum(a.btje), 0) dyje ");
		sqlBF_bfje.append("   from ad3u.per_giv_detl_ungiv a, ad3u.per_info b ");
		sqlBF_bfje.append("  where b.dwdjid = ? ");
		sqlBF_bfje.append("    and a.ryid = b.ryid ");
		sqlBF_bfje.append("    and a.zdlsh is null ");// 未拨付状态
		sqlBF_bfje.append("  group by b.ryid ");
		String sql_bfje = sqlBF_bfje.toString();

		// 依次查出各管理机构的人员基本信息及拨付信息
		HashMap<String, DataObject> bfjeMap = new HashMap<String, DataObject>();
		HashMap<String, DataObject> jhtjMap = new HashMap<String, DataObject>();
		HashMap<String, DataObject> ztnyMap = new HashMap<String, DataObject>();
		DataStore ds_btje, ds_jh, ds_ztny;
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String dwmc = dsOrgn.getString(i, "dwmc");
			prompt.prompt("正在查询单位【" + dwmc + "】的人员信息...");

			String dwdjid = dsOrgn.getString(i, "dwdjid");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			dsPer = this.sql.executeQuery();

			// 暂停年月
			this.sql.setSql(sql_ztny);
			this.sql.setString(1, dwdjid);
			this.sql.setString(2, dwdjid);
			ds_ztny = this.sql.executeQuery();
			// 稽核标识和时间
			this.sql.setSql(sql_jh);
			this.sql.setString(1, dwdjid);
			ds_jh = this.sql.executeQuery();
			// 待发放金额
			this.sql.setSql(sql_bfje);
			this.sql.setString(1, dwdjid);
			ds_btje = this.sql.executeQuery();

			bfjeMap = SiTools.ds2HashMapWithOneKey(ds_btje, "ryid");
			jhtjMap = SiTools.ds2HashMapWithOneKey(ds_jh, "ryid");
			ztnyMap = SiTools.ds2HashMapWithOneKey(ds_ztny, "ryid");

			for (int j = 0, length = dsPer.rowCount(); j < length; j++) {
				ryid = dsPer.getString(j, "ryid");
				jhbs = "0";
				jhrq = "";
				// 暂停年月
				if (ztnyMap.containsKey(ryid)) {
					do_per = ztnyMap.get(ryid);
					ztny = do_per.getDateToString("ztny", "yyyyMM");
				} else {
					ztny = "";
				}
				// 稽核标识和日期
				if (jhtjMap.containsKey(ryid)) {
					do_per = jhtjMap.get(ryid);
					jhbs = do_per.getString("jhtjbs");
					jhrq = do_per.getString("jhtjrq");
					if (jhbs ==null || "".equals(jhbs)) {
						jhbs="0";
					}
				} 
				// 发放金额
				if (bfjeMap.containsKey(ryid)) {
					do_per = bfjeMap.get(ryid);
					dyje = do_per.getDouble("dyje");
				} else {
					dyje = 0;
				}

				dsPer.put(j, "dbfje", dyje);
				dsPer.put(j, "jhtjbs", jhbs);
				dsPer.put(j, "jhtjrq", jhrq);
				dsPer.put(j, "ztny", ztny);

			}

			if (dsPer.rowCount() > 0) {
				ds = ds.combineDatastore(dsPer);
			}
			prompt.moveForword(1);
		}

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		ds = ds.sort("dwbh");

		ds.setTypeList("dwbh:s,cbdwmc:s,shbzhm:s,xm:s,ltxlb:s,ztny:s,dyffzt:s,"
				+ "dbfje:n,jhtjbs:s,jhtjrq:s");

		rdo.put("dsjhtjxx", ds);
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());

		return rdo;
	}
	
	/**
	 * 
	 * 导出拨付人员明细查询信息，德州客户化  
	 * 
	 * @author 张涛
	 * @date 创建时间 2018-12-8
	 * @version V1.0
	 */
	public DataObject genBfrymxExportFile_3714(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryBfryMxInfo_3714(para);// 修改调用的查询方法，支持先查询单位，再循环查询个人，支持进度条提示--ywj--20161215
		DataStore dsBtbh = pdo.getDataStore("dsbtbh");
		fileDs = pdo.getDataStore("mxinfo");// 修改为对应的DataStore--ywj--20161215
		// modify 将code更改为汉字 weichao 20160112
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ygxs", HsuTools.discode("YGXS", fileDs.getString(i, "ygxs"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));// 增加单位性质--ywj--20161216
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
		}
		// end
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "shbzhm", "社会保障号码", "String", "", 20);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "yxzjhm", "身份证号码", "String", "", 18);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ygxs", "用工形式", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 10);
		addTableInfo4Write(tableInfo, "jfnx", "连续工龄", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "pjzs", "平均指数", "number", "#######0.000", 9);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 10);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "国家职业资格等级", "String", "", 10);
		addTableInfo4Write(tableInfo, "lxrxm", "联系人", "String", "", 50);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "sjhm", "手机号码", "String", "", 50);//gzh mod 20180413 增加导出手机号码
		addTableInfo4Write(tableInfo, "yzbm", "邮政编码", "String", "", 6);
		addTableInfo4Write(tableInfo, "txdz", "通讯地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "jtzz", "家庭住址", "String", "", 200);
		addTableInfo4Write(tableInfo, "hj", "合计", "number", "#######0.00", 9);
		
		//增加居住地行政区划的导出  刘欣 modify 20170112
		if (fileDs != null && fileDs.rowCount() > 0) {
			if (fileDs.getRow(0).containsKey("JZDXZQH")) {
				addTableInfo4Write(tableInfo, "JZDXZQH", "居住地行政区划", "String", "", 200);
			}
		}	
		
		String btmc,btbh;
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh");
			btmc = dsBtbh.getString(i, "btmc");
			addTableInfo4Write(tableInfo, btbh, btmc, "number", "#######0.00", 9);
		}
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "string", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		// 数据大于60000条时，分为多个sheet页展示数据--add.yxt.20160317
		int count = fileDs.rowCount();// 获取数据行数
		int num = count / 60000;
		int remainder = count % 60000;
		if (remainder > 0) {
			num++;
		}
		for (int i = 0; i < num; i++) {
			int hhmax = (i + 1) * 60000;
			int hhmin = i * 60000;
			if (hhmax > count) {
				hhmax = count;
			}
			DataStore dsTemp = fileDs.subDataStore(hhmin, hhmax);

			sheet = ExcelTool.createSheet(workbook, "报盘文件" + (i + 1), i);
			ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
			ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, dsTemp);
		}
		//--add.yxt.20160317。end

		// 生成excel文件
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		return rdo;
	}
	
	
	/**
	 * 方法简介.根据录入的信息查询拨付人员明细，德州客户化：查询月待遇补贴金额取per_giv_month_std，标准件取的是per_giv_detl
	 * 
	 * @author 张涛
	 * @date 创建时间 2018-12-8
	 * @version V1.0
	 */
	public DataObject queryBfryMxInfo_3714(final DataObject para) throws Exception {
		String dfjglb, dfjgid, dwxz, zfrylb, zyjszwjb, gjzyzgdj, xzzw, cjgzQsrq, cjgzZzrq, ltxQsrq, ltxZzrq, ffqsny, ffzzny;
		String dwdjid, dwbh, dwmc, dwxzTemp, ryid, jgsygzlx, sydwgrgw;
		String bcxmbh, bcxmz, dmlx;// 补充项目编号、名称、补充项目值
		DataStore ds, dsDw, dsBtbh, dsBtbhYear, dsBtje;
		DataStore dsMxInfo = new DataStore();
		DataStore dsBcxmbh, dsBcxx;// 机构内配置的补充项目,个人的补充项目
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jbjgidStr;
		String sqlMxInfo, sqlQtbt, sqlBcxm, sqlPjzs, sqlBtjeOld, sqlBtjeNew;
		int count;
		double btje, pjzs;
		String btbh, bhList, btmc, bcxmList;
		String btbhs, dyffzt, brcqshd, ffqsnd;
		DataStore dsTemp;
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);		

		ffqsny = para.getDateToString("ffqsny", "yyyyMM");
		ffzzny = para.getDateToString("ffzzny", "yyyyMM");
		dfjglb = para.getString("fdfjglb");
		dfjgid = para.getString("fdfjgid");
		dwxz = para.getString("dwxz");
		zfrylb = para.getString("zfrylb");
		zyjszwjb = para.getString("zyjszwjb");
		gjzyzgdj = para.getString("gjzyzgdj");
		sydwgrgw = para.getString("sydwgrgw", "");// 事业单位工人岗位 syq add 2018-3-23
		xzzw = para.getString("xzzw");
		cjgzQsrq = para.getDateToString("cjgzQsrq", "yyyyMMdd");
		cjgzZzrq = para.getDateToString("cjgzZzrq", "yyyyMMdd");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");
		jbjgidStr = para.getString("jbjgid");
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jgsygzlx = para.getString("jgsygzlx", "");// 机关事业工资类型
		dyffzt = HsuTools.replaceC2QCQ(para.getString("dyffzt", ""));// 待遇发放状态.泰安
		brcqshd = HsuTools.replaceC2QCQ(para.getString("brcqshd", ""));// 本人长期生活地.滨州
		ffqsnd = ffqsny.substring(0, 4); // 查询年待遇使用年度--ywj--20161215

		// 校验数据合法性
		// 限制经办机构ID不允许为空--ywj--20170106
		if (jbjgidStr == null || "".equals(jbjgidStr)) {
			this.bizException("传入的经办机构ID为空！");
		}
		String jbjgid = jbjgidStr.split(",")[0];// 取出一个jbjgid下方取参数
		// 根据经办机构ID获取参数值ad3u1021--ywj--20170105 // 取参数调整位置放至循环外
		String ad3u1021 = SiTools.getPara(jbjgid, "ad3u1021", "0");

		jbjgidStr = HsuTools.replaceC2QCQ(jbjgidStr);

		if (ffqsny == null || "".equals(ffqsny)) {
			this.bizException("传入的发放起始年月为空！");
		}
		if (ffzzny == null || "".equals(ffzzny)) {
			this.bizException("传入的发放终止年月为空！");
		}
		if (cjgzQsrq == null || "".equals(cjgzQsrq)) {
			cjgzQsrq = "19000101";
		}
		if (cjgzZzrq == null || "".equals(cjgzZzrq)) {
			cjgzZzrq = "20491231";
		}
		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "19000101";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (cjgzQsrq.compareTo(cjgzZzrq) > 0) {
			this.bizException("传入的参加工作起始日期大于参加工作终止日期！");
		}
		if (ltxQsrq.compareTo(ltxZzrq) > 0) {
			this.bizException("传入的离退休起始日期大于离退休终止日期！");
		}
		if (ffqsny.compareTo(ffzzny) > 0) {
			this.bizException("传入的起始日期大于离退休终止日期！");
		}
		SPrompt prompt = SPromptUtil.getSPrompt();

		// 符合条件的单位
		sqlBF.setLength(0);
		sqlBF.append(" select distinct r.dwdjid, r.dwid, r.dwbh, r.cbdwmc dwmc, r.cbdwxz dwxz ");
		sqlBF.append("   from si3u.orgn_reg r ");// 去除per_giv_month_std表关联
		sqlBF.append("  where exists (select '1' ");// 与ad3u.per_info表的关联改为exists的方式
		sqlBF.append("        from ad3u.per_info pi ");
		sqlBF.append("       where r.dwdjid = pi.dwdjid) ");
		if (dwxz != null && !"".equals(dwxz)) {
			sqlBF.append("    and r.cbdwxz = '");
			sqlBF.append(dwxz);
			sqlBF.append("'");
		}
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsDw = this.sql.executeQuery();

		int row = dsDw.rowCount() + 1;
		prompt.setTotalSteps(row);// 设置步数
		boolean isComplete = true;
		prompt.prompt("正在查询单位人员信息，一共" + row + "个单位...");
		bcxmList = "";
		// 查询经办机构的补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select distinct c.bcxmbh, p.bcxmmc, p.dmlx ");
		sqlBF.append("   from ad3u.cmpl_config c, ");
		sqlBF.append("        ad3u.per_cmpl_item p ");
		sqlBF.append("  where c.bcxmbh = p.bcxmbh ");
		sqlBF.append("    and c.bcxmbh  ");
		sqlBF.append("     in('TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH') ");//获取居住地行政区划  刘欣 modify 20170112
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and c.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBcxmbh = this.sql.executeQuery();

		// 查询经办机构查询年月的btbh
		//先从参数ad3u1048中取，取不到时再去查询  --zkj  modify 2017/11/14
		sqlBF.setLength(0);
		sqlBF.append("select csz");
		sqlBF.append("  from be3u.sys_para");
		sqlBF.append(" where csbh = 'ad3u1048'");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append("   and jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsBtbhs = this.sql.executeQuery();
		if (dsBtbhs.rowCount() > 0) {
			String btstr = "";
			for (int i = 0; i < dsBtbhs.rowCount(); i++) {
				btstr = btstr + dsBtbhs.getString(i, "csz") + ",";
			}
			btstr = HsuTools
					.replaceC2QCQ(btstr.substring(0, btstr.length() - 1));
			sqlBF.setLength(0);
			sqlBF.append("select btbh, btmc, btbh btbhs");
			sqlBF.append("  from ad3u.giv_item");
			sqlBF.append("  where btbh in (");
			sqlBF.append(btstr);
			sqlBF.append(") ");
			this.sql.setSql(sqlBF.toString());
			dsBtbh = this.sql.executeQuery();

		}else{
			sqlBF.setLength(0);
			sqlBF.append(" select distinct gi.btbh, gi.btmc, gi.btbh btbhs ");
			sqlBF.append("   from ad3u.giv_item gi, ");
			sqlBF.append("        ad3u.per_giv_month_std pg, ");
			sqlBF.append("        ad3u.per_info pi, ");
			sqlBF.append("        si3u.orgn_reg r ");
			sqlBF.append("  where gi.btbh = pg.btbh ");
			sqlBF.append("    and pg.ryid = pi.ryid ");
			sqlBF.append("    and pi.dwdjid = r.dwdjid ");
			sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny,'205012') >= ? ");
			if (jbjgidStr != null && !"".equals(jbjgidStr)) {
				sqlBF.append(" and r.jbjgid in (");
				sqlBF.append(jbjgidStr);
				sqlBF.append(") ");
			}
			// TODO 当传入的经办机构不存在时取经办机构还没实现
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			dsBtbh = this.sql.executeQuery();
		}

		// 烟台存在补贴编号相同大小写不一致，程序会报错，新增一列作为补贴别名（根据标准件）--ywj--20161215
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh").toUpperCase();
			for (int j = 0; j < i; j++) {
				String btbh2 = dsBtbh.getString(j, "btbh").toUpperCase();
				if (btbh.equals(btbh2)) {
					dsBtbh.put(j, "btbhs", btbh2 + j);
				}
			}
		}

		sqlBF.setLength(0);
		sqlBF.append(" select distinct gi.btbh, gi.btmc ");
		sqlBF.append("   from ad3u.giv_item gi, ");
		sqlBF.append("        ad3u.per_giv_year_std pg, ");
		sqlBF.append("        ad3u.per_info pi, ");
		sqlBF.append("        si3u.orgn_reg r ");
		sqlBF.append("  where gi.btbh = pg.btbh ");
		sqlBF.append("    and pg.ryid = pi.ryid ");
		sqlBF.append("    and pi.dwdjid = r.dwdjid ");
		if (jbjgidStr != null && !"".equals(jbjgidStr)) {
			sqlBF.append(" and r.jbjgid in (");
			sqlBF.append(jbjgidStr);
			sqlBF.append(") ");
		}
		// TODO 当传入的经办机构不存在时取经办机构还没实现
		this.sql.setSql(sqlBF.toString());
		dsBtbhYear = this.sql.executeQuery();
		prompt.prompt("正在查询，符合条件的单位中的人员...");
		bhList = "";
		// 单位中的人员
		sqlBF.setLength(0);
		// 职工
		sqlBF.append(" select ? dwbh, ? dwmc, ? dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, ei.ltxlb zfrylb, ei.cjgzrq, ");
		sqlBF.append("        ei.ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid, ");
		sqlBF.append("		  round(round(nvl(ei.stjfnx + ei.sjjfnx, 0)*12, 0)/12, 2) jfnx, '' dfjgbh, '' dfjgmc,ei.dacsrq, p.lxrxm,");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,ei.stjfnx,ei.sjjfnx, p.brcqshd, ");// 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, '' swryid, '' bz, ");// 增加户口所在地，手机号码  // 增加死亡人员ID和备注查询  --zkj add 2017/12/16
		sqlBF.append("        ei.jzgbz, pi.dyffzt, pn.sydwgrgw ,pn.jgsydwgzrylb ");// 事业单位工人岗位 syq add 2018-3-23 //机关事业单位工作人员类别 nx add 20181016
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.emp_info ei, ");// 在此处不再限制月待遇，之后查询月待遇时若人员不存在符合条件的月待遇则删除人员--ywj--20170105
		sqlBF.append("        si3u.per_natl pn ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		// 待遇发放状态的限制，泰安使用--ywj--20161215
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and pi.dyffzt in ( ");
			sqlBF.append(dyffzt);
			sqlBF.append(" ) ");
		}
		sqlBF.append("    and pi.dwdjid = ? ");
		// 增加查询 本人长期生活地（根据标准件）--ywj--20161215
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}

		sqlBF.append("    and nvl(ei.cjgzrq,?) between ? and ? ");
		sqlBF.append("    and ei.ltxrq between ? and ? ");
		sqlBF.append(" union all ");
		// 遗属
		sqlBF.append(" select distinct ? dwbh, ? dwmc, ? dwxz, pi.dfjglb, pi.dfjgid, ");
		sqlBF.append("        pi.shbzhm, pi.xm, pi.yhzh, pi.xb,p.yxzjhm, ");
		sqlBF.append("        pi.csrq, p.grsf, pi.ygxs, si.yslb zfrylb, '' cjgzrq, ");
		sqlBF.append("        '' ltxrq, pi.dyxsksny, pi.xzzw, p.zyjszwjb, p.gjzyzgdj, ");
		sqlBF.append("        p.txdz, p.jtzz, pi.dylqlb, pi.dqdydjid dydjid, ");
		sqlBF.append("		  0 jfnx, '' dfjgbh, '' dfjgmc, '' dacsrq, p.lxrxm, ");
		sqlBF.append("        p.lxrdh lxdh, p.yzbm, pi.ryid,0 stjfnx,0 sjjfnx, p.brcqshd, ");// 增加本人长期生活地
		sqlBF.append("		  p.hkszd, p.sjhm, si.swryid, si.bz, ");// 增加户口所在地，手机号码  //增加死亡人员ID bz 的查询 --zkj add 2017/12/16
		sqlBF.append("        '' jzgbz, pi.dyffzt, pn.sydwgrgw, pn.jgsydwgzrylb");// 事业单位工人岗位 syq add 2018-3-23//机关事业单位工作人员类别 nx add 20181016
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        biuv.person p, ");
		sqlBF.append("        ad3u.supp_info si, ");// 在此处不再限制月待遇，之后查询月待遇时若人员不存在符合条件的月待遇则删除人员--ywj--20170105
		sqlBF.append("        si3u.per_natl pn ");
		sqlBF.append("  where pi.ryid = p.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.ryid = pn.ryid(+) ");
		// 待遇发放状态的限制，泰安使用--ywj--20161215
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("    and pi.dyffzt in ( ");
			sqlBF.append(dyffzt);
			sqlBF.append(" ) ");
		}
		sqlBF.append("    and pi.sszfrq = 'B' ");
		sqlBF.append("    and pi.dwdjid = ? ");
		// 增加查询 本人长期生活地（根据标准件）--ywj--20161215
		if (brcqshd != null && !"".equals(brcqshd)) {
			sqlBF.append(" and p.brcqshd in (");
			sqlBF.append(brcqshd);
			sqlBF.append(") ");
		}
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and pi.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and pi.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("    and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(")");
		}
		if (zyjszwjb != null && !"".equals(zyjszwjb)) {
			sqlBF.append("    and p.zyjszwjb = '");
			sqlBF.append(zyjszwjb);
			sqlBF.append("'");
		}
		if (gjzyzgdj != null && !"".equals(gjzyzgdj)) {
			sqlBF.append("    and p.gjzyzgdj = '");
			sqlBF.append(gjzyzgdj);
			sqlBF.append("'");
		}
		// 事业单位工人岗位 syq add 2018-3-23
		if (sydwgrgw != null && !"".equals(sydwgrgw)) {
			sqlBF.append("    and pn.sydwgrgw = '");
			sqlBF.append(sydwgrgw);
			sqlBF.append("'");
		}
		if (xzzw != null && !"".equals(xzzw)) {
			sqlBF.append("    and pi.xzzw = '");
			sqlBF.append(xzzw);
			sqlBF.append("'");
		}

		// 机关事业工资类型
		if (jgsygzlx != null && !"".equals(jgsygzlx)) {
			sqlBF.append("  and exists (select '1'");
			sqlBF.append("      from ad3u.per_cmpl e");
			sqlBF.append("     where e.bcxmbh = 'JGSYGZXZ'");
			sqlBF.append("       and e.ryid = pi.ryid ");
			sqlBF.append("       and e.bcxmz ='" + jgsygzlx + "')");
		}
		sqlMxInfo = sqlBF.toString();
		count = dsDw.rowCount();

		// 取单位所有的个人补充信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.bcxmbh, a.bcxmz, pi.ryid ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        ad3u.per_info pi ");
		sqlBF.append("  where a.ryid = pi.ryid ");
		sqlBF.append("    and a.bcxmbh in ( ");
		sqlBF.append("        'TXJS','JZGB_F','LXDYJB','JSGJB', 'JZDXZQH' ");//获取居住地行政区划  刘欣 modify 20170112
		sqlBF.append("        ) ");
		sqlBF.append("    and pi.dwdjid = ? ");
		sqlBcxm = sqlBF.toString();

		// 取单位所有的个人平均指数
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(decode(a.dyxmbh, 'PJZS_38', a.dyxmz, 'pjzs_new', a.dyxmz, 0)), 0) pjzs, pi.ryid ");
		sqlBF.append("   from ad3u.per_cal_his a, ");
		sqlBF.append("        ad3u.per_info pi ");
		sqlBF.append("  where a.ryid = pi.ryid ");
		sqlBF.append("    and xh = (select max(xh) ");
		sqlBF.append("                from ad3u.per_cal_his c ");
		sqlBF.append("               where a.ryid = c.ryid) ");
		sqlBF.append("    and pi.dwdjid = ? ");
		sqlBF.append("    and a.dyxmbh in ('PJZS_38', 'pjzs_new') ");
		sqlBF.append("  group by pi.ryid ");
		sqlPjzs = sqlBF.toString();

		// 不同职工发放台账模式使用不同的sql查询月待遇，由参数控制选择使用哪个sql--ywj--20170105
		// 不使用职工发放台账新模式，只查询per_giv_detl一个表
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(pg.btje),0) hj, ");
		for (int j = 0, rowBh = dsBtbh.rowCount(); j < rowBh; j++) {
			btbh = dsBtbh.getString(j, "btbh");
			btbhs = dsBtbh.getString(j, "btbhs");
			bhList += btbhs + ":n,";
			sqlBF.append("        nvl(sum(decode(pg.btbh, '");
			sqlBF.append(btbh);
			sqlBF.append("', nvl(pg.btje, 0))), 0)");
			sqlBF.append(" " + btbhs + ", ");
		}
		sqlBF.append("        pg.ryid ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pg.qsny <= ? and nvl(pg.zzny, '205012') >= ? ");
		sqlBF.append("    and pi.dwdjid = ? ");		
		sqlBF.append("  group by pg.ryid ");
		sqlBtjeOld = sqlBF.toString();

		for (int i = 0; i < count; i++) {
			dwdjid = dsDw.getString(i, "dwdjid");
			dwbh = dsDw.getString(i, "dwbh");
			dwmc = dsDw.getString(i, "dwmc");
			dwxzTemp = dsDw.getString(i, "dwxz");
			prompt.prompt("正在查询【" + dwmc + "】的人员...");
			this.sql.setSql(sqlMxInfo);
			this.sql.setString(1, dwbh);
			this.sql.setString(2, dwmc);
			this.sql.setString(3, dwxzTemp);
			this.sql.setString(4, dwdjid);
			this.sql.setString(5, cjgzQsrq);
			this.sql.setString(6, cjgzQsrq);
			this.sql.setString(7, cjgzZzrq);
			this.sql.setString(8, ltxQsrq);
			this.sql.setString(9, ltxZzrq);
			this.sql.setString(10, dwbh);
			this.sql.setString(11, dwmc);
			this.sql.setString(12, dwxzTemp);
			this.sql.setString(13, dwdjid);
			ds = this.sql.executeQuery();

			// 根据参数选择sql查询单位所有人的月待遇补贴金额，放入map--ywj--20170103
			this.sql.setSql(sqlBtjeOld);
			this.sql.setString(1, ffzzny);
			this.sql.setString(2, ffqsny);
			this.sql.setString(3, dwdjid);
			dsBtje = this.sql.executeQuery();
			
			HashMap<String, DataObject> mapBtje = new HashMap<String, DataObject>();
			mapBtje = SiTools.ds2HashMapWithOneKey(dsBtje, "ryid");

			// 查询单位所有的个人补充信息，放入map--ywj--20161216
			this.sql.setSql(sqlBcxm);
			this.sql.setString(1, dwdjid);
			dsBcxx = this.sql.executeQuery();
			HashMap<String, DataObject> mapBcxx = new HashMap<String, DataObject>();
			mapBcxx = SiTools.ds2HashMapWithTwoKey(dsBcxx, "ryid", "bcxmbh");

			// 查询单位所有的个人平均指数，放入map--ywj--20161216
			this.sql.setSql(sqlPjzs);
			this.sql.setString(1, dwdjid);
			dsTemp = this.sql.executeQuery();
			HashMap<String, DataObject> mapPjzs = new HashMap<String, DataObject>();
			mapPjzs = SiTools.ds2HashMapWithOneKey(dsTemp, "ryid");

			// 开始查询人员信息
			sqlBF.setLength(0);
			sqlBF.append(" select pg.btbh, gi.btmc, nvl(pg.btje, 0)btje ");
			sqlBF.append("   from ad3u.per_giv_year_std pg, ");
			sqlBF.append("        ad3u.giv_item gi ");
			sqlBF.append("  where pg.ryid = ? ");
			sqlBF.append("    and pg.btbh = gi.btbh ");
			sqlBF.append("    and ? between pg.qsnd and nvl(pg.zznd,'2050') ");// 修改查询条件（根据标准件）--ywj--20161215
			sqlQtbt = sqlBF.toString();

			row = ds.rowCount();
			for (int j = row-1; j >= 0; j--) {
				ryid = ds.getString(j, "ryid");
				pjzs = 0;

				// 从map中取出各月待遇的补贴金额，放到ds中--ywj--20170103
				if (mapBtje.containsKey(ryid)) {
					ds.get(j).putAll(mapBtje.get(ryid));
				} else {
					ds.delRow(j);// 不存在则直接删除此人
					continue;
				}

				// 将所有其他补贴（目前主要是年待遇）先放进去，防止该人没有这个待遇时，排序报错
				for (int k = 0, n = dsBtbhYear.rowCount(); k < n; k++) {
					ds.put(j, dsBtbhYear.getString(k, "btbh"), 0);
				}

				this.sql.setSql(sqlQtbt);
				this.sql.setString(1, ryid);
				this.sql.setString(2, ffqsnd);
				DataStore dsQtbt = this.sql.executeQuery();

				// 取每个人的其他补贴（目前主要是年待遇）
				for (int k = 0, n = dsQtbt.rowCount(); k < n; k++) {
					btbh = dsQtbt.getString(k, "btbh");
					btmc = dsQtbt.getString(k, "btmc");
					btje = dsQtbt.getDouble(k, "btje");

					ds.put(j, btbh, btje);

					if (dsBtbh.find(" btbh == " + btbh + " ") < 0) {
						dsBtbh.addRow();
						dsBtbh.put(dsBtbh.rowCount() - 1, "btbh", btbh);
						dsBtbh.put(dsBtbh.rowCount() - 1, "btbhs", btbh);// 增加一列btbhs与其他行保持一致，防止取值时报错--ywj--20170103
						dsBtbh.put(dsBtbh.rowCount() - 1, "btmc", btmc);

						bhList += btbh + ":n,";
					}
				}

				// 修改平均指数的方法，从map中取出--ywj--20161216
				if (mapPjzs.containsKey(ryid)) {
					pjzs = mapPjzs.get(ryid).getDouble("pjzs", 0);
				}
				ds.put(j, "pjzs", pjzs);

				// 修改个人的补充信息的方法，从map中取出--ywj--20161216
				for (int k = 0, len = dsBcxmbh.rowCount(); k < len; k++) {
					bcxmbh = dsBcxmbh.getString(k, "bcxmbh");
					dmlx = dsBcxmbh.getString(k, "dmlx");
					if (bcxmList.indexOf(bcxmbh) < 0) {
						if (dmlx.equals("char") || dmlx.equals("code")
								|| dmlx.indexOf("pubcode") >= 0) {
							bcxmList += bcxmbh + ":s,";
						} else if (dmlx.equals("date") || dmlx.equals("month")
								|| dmlx.equals("year")) {
							bcxmList += bcxmbh + ":d,";
						} else if (dmlx.equals("number")) {
							bcxmList += bcxmbh + ":n,";
						}
						// add.cjj.20180726增加行政区划代码
						if ("JZDXZQH".equals(bcxmbh)
								&& bcxmList.indexOf("JZDXZQHDM:s") < 0) {
							bcxmList += "JZDXZQHDM:s,";
						}
					}

					String key = ryid + "_" + bcxmbh;
					if (mapBcxx.containsKey(key)) {
						bcxmz = mapBcxx.get(key).getString("bcxmz", "");
						ds.put(j, bcxmbh, bcxmz);
						
						//获取行政区划代码的具体值  刘欣 modify 20170112
						if("JZDXZQH".equals(bcxmbh)){
							ds.put(j, bcxmbh, HsuTools.getXzqhmc(bcxmz));
							ds.put(j, "JZDXZQHDM", bcxmz);//add.cjj.20180726增加行政区划代码
						}
					} else {
						ds.put(j, bcxmbh, "");
						//add.cjj.20180726增加行政区划代码
						if("JZDXZQH".equals(bcxmbh)){
							ds.put(j, "JZDXZQHDM", "");
						}
					}
				}
			}
			// 一个单位人员查询完毕
			dsMxInfo.combineDatastore(ds);
			prompt.moveForword(1);
		}
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		// 查询代发机构 // 放至循环外--ywj--20170110
		dsMxInfo = AdTools.genDfjgxxDataStore(dsMxInfo, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		dsMxInfo.setTypeList("dwbh:s,dwmc:s,dwxz:s,dfjglb:s,dfjgid:s,"
				+ "shbzhm:s,yxzjhm:s,a.xm:s,yhzh:s,xb:s,yzbm:s,"
				+ "csrq:s,dacsrq:s,cjgzrq:s,grsf:s,ygxs:s,zfrylb:s,"
				+ "ltxrq:s,dyxsksny:s,xzzw:s,zyjszwjb:s,gjzyzgdj:s,"
				+ "txdz:s,jtzz:s,hj:n,dylqlb:s,dydjid:s,lxrxm:s,lxdh:s,"
				+ "jfnx:n,dfjgbh:s,dfjgid:s," + bhList + "dfjgmc:s," + bcxmList
				+ ",jzgbz:s,stjfnx:n,sjjfnx:n,pjzs:n,sydwgrgw:s,jgsydwgzrylb:s");// add by nx 181016
		dsMxInfo.sort("shbzhm").sort("dwbh");//排序修改--20161216

		// 将查询条件返回前台
		int rowadd;
		DataStore dsQuery = new DataStore();
		dsQuery.addRow();
		rowadd = dsQuery.rowCount() - 1;
		dsQuery.put(rowadd, "fdfjglb", para.getString("fdfjglb"));
		dsQuery.put(rowadd, "fdfjgid", para.getString("fdfjgid"));
		dsQuery.put(rowadd, "fdfjgbh", para.getString("fdfjgbh"));
		dsQuery.put(rowadd, "fdfjgmc", para.getString("fdfjgmc"));
		dsQuery.put(rowadd, "dwxz", para.getString("dwxz"));
		dsQuery.put(rowadd, "zfrylb", para.getString("zfrylb"));
		dsQuery.put(rowadd, "zyjszwjb", para.getString("zyjszwjb"));
		dsQuery.put(rowadd, "gjzyzgdj", para.getString("gjzyzgdj"));
		dsQuery.put(rowadd, "xzzw", para.getString("xzzw"));
		dsQuery.put(rowadd, "cjgzQsrq", para.getString("cjgzQsrq"));
		dsQuery.put(rowadd, "cjgzZzrq", para.getString("cjgzZzrq"));
		dsQuery.put(rowadd, "ltxQsrq", para.getString("ltxQsrq"));
		dsQuery.put(rowadd, "ltxZzrq", para.getString("ltxZzrq"));
		dsQuery.put(rowadd, "jbjgid", para.getString("jbjgid"));
		dsQuery.put(rowadd, "jgsygzlx", para.getString("jgsygzlx", ""));
		dsQuery.put(rowadd, "sydwgrgw", para.getString("sydwgrgw", ""));//事业单位工人岗位 syq add 2018-3-23

		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end

		rdo.put("dsbcxmbh", dsBcxmbh);
		rdo.put("dsjbjg", ds);
		rdo.put("dsquery", dsQuery);
		rdo.put("mxinfo", dsMxInfo);
		rdo.put("dsbtbh", dsBtbh);
		rdo.put("cxbz", "1");
		rdo.put("jbjgid", this.getBizInstitution());
		rdo.put("ny", DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM"));
		rdo.put("ffqsny", para.getString("ffqsny"));
		rdo.put("ffzzny", para.getString("ffzzny"));
		
		QueryLogTool.updateQueryLog(querylogid, dsMxInfo.rowCount());

		return rdo;
	}
	/**
	 * 查询军转干部职工养老金
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-3-5
	 * @since V1.0
	 */
	public DataObject queryJzgzgyljInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String dwdjid = para.getString("dwdjid");
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19000101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "20501231";
		}
		String sqlstr = "";
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlstr = "  and a.dwdjid = '" + dwdjid + "'";
		}

		sqlBF.setLength(0);
		sqlBF.append("select c.ryid, c.xm, b.jbjgmc, e.ltxrq, c.shbzhm, ");
		sqlBF.append("       a.cbdwmc ydwmc, d.daglbm, d.qyxz, d.xgzqk, d.zfmgsgsj");
		sqlBF.append("  from si3u.orgn_reg      a,");
		sqlBF.append("       be3u.agency_natl   b,");
		sqlBF.append("       ad3u.per_info      c,");
		sqlBF.append("       si3u.per_army_info d,");
		sqlBF.append("       ad3u.emp_info      e");
		sqlBF.append(" where a.dwdjid = c.dwdjid");
		sqlBF.append("   and c.ryid = d.ryid");
		sqlBF.append("   and c.ryid = e.ryid");
		sqlBF.append("   and a.jbjgid = b.jbjgid");
		sqlBF.append("   and d.rdzt = '1'");
		sqlBF.append("   and nvl(c.dyspbz, '0') = '1'");
		sqlBF.append("   and to_char(d.rdrq,'yyyyMMdd') between ? and ?");
		sqlBF.append(sqlstr);
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		DataStore dsxx = this.sql.executeQuery();

		// 养老金
		sqlBF.setLength(0);
		sqlBF.append("  select nvl(sum(btje),0) btje");
		sqlBF.append("    from ad3u.per_giv_month_std");
		sqlBF.append("   where ryid = ?");
		sqlBF.append("     and ? between qsny and nvl(zzny, '205012')");
		String sqlYlj = sqlBF.toString();

		// 政府补贴 和 生活补贴
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btje");
		sqlBF.append("  from ad3u.per_giv_month_std");
		sqlBF.append(" where ryid = ?");
		sqlBF.append("   and ? between qsny and nvl(zzny, '205012')");
		sqlBF.append("   and btbh in ('A1JE', 'B1JE', 'A1JF', 'B1JF')");
		String sqlbt = sqlBF.toString();

		// 当前日期
		String dqrq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		// 查询
		for (int i = 0; i < dsxx.rowCount(); i++) {
			String ryid = dsxx.getString(i, "ryid");
			this.sql.setSql(sqlYlj);
			this.sql.setString(1, ryid);
			this.sql.setString(2, dqrq);
			DataStore dsylj = this.sql.executeQuery();
			double ylj = dsylj.getDouble(0, "btje");
			dsxx.put(i, "ylj", ylj);

			this.sql.setSql(sqlbt);
			this.sql.setString(1, ryid);
			this.sql.setString(2, dqrq);
			DataStore dsBt = this.sql.executeQuery();
			for (int j = 0; j < dsBt.rowCount(); j++) {
				String btbh = dsBt.getString(j, "btbh");
				double btje = dsBt.getDouble(j, "btje");
				if ("A1JE".equals(btbh) || "B1JE".equals(btbh)) {
					dsxx.put(i, "zfbt", btje);
				} else {
					dsxx.put(i, "shbt", btje);
				}
			}

		}
		DataObject rdo = new DataObject();
		rdo.put("dsxx", dsxx);
		return rdo;
	}
	/**
	 * 济南查询其他经办人的审核记录
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-3-30
	 * @since V1.0
	 */
	public DataObject fwdAdWssbshlsQuery(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		String qxbz = "0", yhxm = "", yhid = "", yhbh = "";
		
		yhid = this.getUser().getUserid();
		yhxm = this.getUser().getUsername();
		yhbh = HsuTools.getCzybhByUserId(yhid);
		
		if(this.getUser().hasFunction("sys_ckwssbshls")){ //有权限
			qxbz = "1";
		}
		
		rdo.put("qxbz", qxbz);
		rdo.put("yhid", yhid);
		rdo.put("yhxm", yhxm);
		rdo.put("yhbh", yhbh);
		return rdo ;
	}
	/**
	 * 济南网上申报审核历史查询 - 根据当前操作人
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-3-15
	 * @since V1.0
	 */
	public DataObject queryAdWssbshlsInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();

		// 接参
		String ryid = para.getString("ryid");
		String yhid = para.getString("yhid");
		if(yhid == null || "".equals(yhid)){
			yhid = "%";
		}

		// 申报日期
		String sbqsrq = para.getDateToString("sbqsrq", "yyyyMMdd");
		String sbzzrq = para.getDateToString("sbzzrq", "yyyyMMdd");
		if (sbqsrq == null || "".equals(sbqsrq)) {
			sbqsrq = "19000101";
		}
		if (sbzzrq == null || "".equals(sbzzrq)) {
			sbzzrq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMMdd");
		}
		// 审批日期
		String spqsrq = para.getDateToString("spqsrq", "yyyyMMdd");
		String spzzrq = para.getDateToString("spzzrq", "yyyyMMdd");
		if (spqsrq == null || "".equals(spqsrq)) {
			spqsrq = "19000101";
		}
		if (spzzrq == null || "".equals(spzzrq)) {
			spzzrq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMMdd");
		}

		String sbxmlb = para.getString("sbxmlb");
		// 查询退休人员 信息
		sqlBF.setLength(0);
		sqlBF.append("  select a.tsid, a.dwdjid, a.sbxmbh, a.spjbr, a.spjbsj,");
		sqlBF.append("         a.jbsj , b.jyzt shzt, a.jysm shsm, b.sfzhm shbzhm,");
		sqlBF.append("         b.xm ,c.dwbh ,c.cbdwmc, c.jbjgid, b.bz");
		sqlBF.append("    from tsu.trading_info a, tsu.hsoadtxsb_per b, si3u.orgn_reg c");
		sqlBF.append("   where a.tsid = b.tsid");
		sqlBF.append("     and a.dwdjid = c.dwdjid");
		sqlBF.append("     and a.spjbr like ?");
		sqlBF.append("     and to_char(a.jbsj,'yyyymmdd') between ? and ?");
		sqlBF.append("     and to_char(a.spjbsj,'yyyymmdd') between ? and ?");
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("     and b.ryid = '" + ryid + "'");
		}
		if (sbxmlb != null && !"".equals(sbxmlb)) {
			sqlBF.append("     and a.sbxmbh = '" + sbxmlb + "' ");
		} else {
			sqlBF.append("     and a.sbxmbh = '151' ");
		}
		// 查询遗属申报
		sqlBF.append(" union all ");
		sqlBF.append("  select a.tsid, a.dwdjid, a.sbxmbh, a.spjbr, a.spjbsj,");
		sqlBF.append("         a.jbsj , b.shzt, b.shsm,  b.yxzjhm shbzhm,");
		sqlBF.append("         b.xm ,c.dwbh ,c.cbdwmc, c.jbjgid, b.bz");
		sqlBF.append("    from tsu.trading_info a, tsu.hsoadyszj_per b, si3u.orgn_reg c");
		sqlBF.append("   where a.tsid = b.tsid");
		sqlBF.append("     and a.dwdjid = c.dwdjid");
		sqlBF.append("     and a.spjbr like ?");
		sqlBF.append("     and to_char(a.jbsj,'yyyymmdd') between ? and ?");
		sqlBF.append("     and to_char(a.spjbsj,'yyyymmdd') between ? and ?");
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("     and b.ryid = '" + ryid + "'");
		}
		if (sbxmlb != null && !"".equals(sbxmlb)) {
			sqlBF.append("     and a.sbxmbh = '" + sbxmlb + "' ");
		} else {
			sqlBF.append("     and a.sbxmbh = '158' ");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, yhid);
		this.sql.setString(2, sbqsrq);
		this.sql.setString(3, sbzzrq);
		this.sql.setString(4, spqsrq);
		this.sql.setString(5, spzzrq);
		this.sql.setString(6, yhid);
		this.sql.setString(7, sbqsrq);
		this.sql.setString(8, sbzzrq);
		this.sql.setString(9, spqsrq);
		this.sql.setString(10, spzzrq);
		DataStore dswssb = this.sql.executeQuery();

		dswssb.sort("shbzhm,sbxmbh");

		dswssb = HsuTools.genJbjgxxDataStore(dswssb, "jbjgid", "jbjgbh", "jbjgmc");
		dswssb = HsuTools.genSysUserDataStore(dswssb, "spjbr", "jbrbh", "jbrname");

		rdo.put("dswssb", dswssb);
		return rdo;
	}	
	/**
	 * 军转干部认定信息查询个人
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-3-15
	 * @since V1.0
	 */
	public DataObject queryAdgrJzgrdxxInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();

		// 接参
		String ryid = para.getString("ryid");
		String jzglsh = para.getString("jzglshcx");

		if ((ryid == null || "".equals(ryid))
				&& (jzglsh == null || "".equals(jzglsh))) {
			this.bizException("军转干流水号和社会保障号码不能同时为空！");
		}

		sqlBF.setLength(0);
		sqlBF.append(" select a.jdzyny, a.jzgzj, a.rwsj, a.daglbm, a.qyxz, ");
		sqlBF.append("        a.xgzqk, a.zfmgsgsj, a.lxr, a.lxdh, a.ltxrq, ");
		sqlBF.append("        a.bz, a.jzglsh, b.shbzhm, ");
		sqlBF.append("        c.cbdwmc, b.xm, b.csrq, a.rdrq ");
		sqlBF.append("   from si3u.per_army_info a, si3u.per_reg b, si3u.orgn_reg c ");
		sqlBF.append("  where a.rdzt = '1' ");
		sqlBF.append("    and a.ryid = b.ryid");
		sqlBF.append("    and b.hdbz = '1' ");
		sqlBF.append("    and b.dwdjid = c.dwdjid ");
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("    and a.ryid = '" + ryid + "' ");
		}
		if (jzglsh != null && !"".equals(jzglsh)) {
			sqlBF.append("    and a.jzglsh = '" + jzglsh + "' ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore dsper = this.sql.executeQuery();
		if (dsper.rowCount() < 1) {
			this.bizException("未查询到军转干认定信息！");
		}

		rdo.put("jzgxx", dsper);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.联网查询生存情况
	 * 
	 * 泰安查询，调用民政接口
	 * 
	 * @author guanll 2019.04.03
	 */
	public DataObject queryLwjyscqkInfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String dfjgid, sszfrq, ryid, dfjglb, jbjgidStr, xm, shbzhm;
		DataStore ds, dsTmp;
		
		String querylogid = QueryLogTool.saveQueryLog("联网校验生存情况查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		jbjgidStr = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		dfjglb = para.getString("fdfjglb");
		dfjgid = para.getString("fdfjgid");
		sszfrq = para.getString("sszfrq");

		// 单位中的人员
		sqlBF.setLength(0);
		// 职工
		sqlBF.append(" select b.dwbh, b.cbdwmc, a.shbzhm, a.xm, a.xb, 0 sydqdy, '1' scqk, a.ryid, sszfrq ");
	    sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        si3u.orgn_reg b ");
		sqlBF.append("  where a.dwdjid = b.dwdjid ");
		sqlBF.append("    and a.dyffzt = '1' ");
		sqlBF.append("    and b.jbjgid in (" + jbjgidStr + ") ");

		if (sszfrq != null && !"".equals(sszfrq)) {
			sqlBF.append(" and a.sszfrq = '");
			sqlBF.append(sszfrq);
			sqlBF.append("' ");
		}
		
		
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and a.dfjglb = '");
			sqlBF.append(dfjglb);
			sqlBF.append("'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and a.dfjgid = '");
			sqlBF.append(dfjgid);
			sqlBF.append("'");
		}
		this.sql.setSql(sqlBF.toString());
		ds = this.sql.executeQuery();
		
		// 循环取街道信息
		for (int i = 0; i < ds.rowCount(); i++) {
			ryid = ds.getString(i, "ryid");
			shbzhm = ds.getString(i, "shbzhm");
			xm = ds.getString(i, "xm");
			
			// 上月定期待遇
			sqlBF.setLength(0);
			sqlBF.append("select nvl(sum(nvl(a.btje, 0)), 0) ytbje ");
			sqlBF.append("  from ad3u.per_giv_month_std a ");
			sqlBF.append(" where a.ryid = ? ");
			sqlBF.append("   and ? between a.qsny and nvl(a.zzny, '204912') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, DateUtil.addMonthToString(DateUtil.getCurrentDateToString("yyyyMM"), "yyyyMM", -1));

			dsTmp = this.sql.executeQuery();
			Double txj = dsTmp.getDouble(0, "ytbje");
			ds.put(i, "sydqdy", txj);
			
			// 联网获取生存情况
			try {
				rdo.clear();
				rdo.put("id_card", shbzhm);
				rdo.put("name", xm);
				rdo = LocalServiceClient.invokeServiceByPspid("tapsp", "TAMZBZService", "getInfoStr", rdo);
				dsTmp = rdo.getDataStore("output");
				if (dsTmp.rowCount() > 0) {
					ds.put(i, "scqk", "0");// 生存情况为死亡
				}
			} catch (Exception e) {
				throw new BusinessException("调用民政殡葬服务获取生存信息失败：" + e.getMessage());
			}

		}
		ds.sort("dwbh,shbzhm");
		rdo.clear();
		rdo.put("dwScqkinfo", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
		
		return rdo;
	
	}	
	/**
	 * 跳转到企业遗属参保居民养老减员情况查询
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-4-5
	 * @since V1.0
	 */
	public DataObject fwdQyyscjjmyljyQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		// 获取街道所在经办机构
		DataObject pdo = AdTools.getZyjgSectionDs(this.getBizInstitution().substring(0, 4));
		DataStore dsjdjg = pdo.getDataStore("jgds");
		
		DataObject rdo = new DataObject();
		
		rdo.put("dsjbjg", ds);
		rdo.put("dsjdjg", dsjdjg);
		return rdo;
	}
	/**
	 * 到企业遗属参保居民养老减员情况查询
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-4-5
	 * @since V1.0
	 */
	public DataObject queryQyyscbjmjyqk(DataObject para) throws Exception {
		String jbjgid = null, jdid = null, vqsrq = null, vzzrq = null;
		DataStore vds_data = null, vds = null;
		String vsql = null, vsfzhm = null, vjdid;
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();

		jbjgid = para.getString("jbjgid");
		vjdid = para.getString("jdid");
		vqsrq = para.getDateToString("qsrq", "yyyyMMdd");
		if (vqsrq == null || "".equals(vqsrq)) {
			vqsrq = "19000101";
		}
		String today = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMMdd");
		vzzrq = para.getDateToString("zzrq", "yyyyMMdd");
		if (vzzrq == null || "".equals(vzzrq)) {
			vzzrq = today;
		}

		if (vqsrq.compareTo(vzzrq) > 0) {
			this.bizException("居民养老减员起始日期大于终止日期");
		}

		if (vzzrq.compareTo(today) > 0) {
			this.bizException("居民养老减员终止日期大于当前日期");
		}

		sqlBF.setLength(0);
		sqlBF.append("select b.dwbh, b.cbdwmc, a.xm, a.shbzhm, a.jdid, a.sqid, b.jbjgid, a.ryid,a.dwdjid, a.xb, a.dyffzt");
		sqlBF.append("  from ad3u.per_info a, si3u.orgn_reg b");
		sqlBF.append(" where a.dyzzny is null");
		sqlBF.append("   and a.dwdjid = b.dwdjid");
		sqlBF.append("   and a.sszfrq = 'B'");
		sqlBF.append("   and (exists (select 1");
		sqlBF.append("                  from rc3u.aged_reg m, rc3u.per_giv_exam n");
		sqlBF.append("                 where m.rydjid = n.rydjid");
		sqlBF.append("                   and m.cbzt = 'C0B'");
		sqlBF.append("                   and n.bgyy = 'C211'");
		sqlBF.append("                   and to_char(n.jbsj, 'yyyymmdd') between ? and ?");
		sqlBF.append("                   and m.shbzhm = a.shbzhm) or exists");
		sqlBF.append("        (select  1");
		sqlBF.append("           from rg3u.per_reg p, rg3u.per_term_exam q");
		sqlBF.append("          where p.dydjid = q.dydjid");
		sqlBF.append("            and p.dyffzt = '3'");
		sqlBF.append("            and p.xzbz = '110'");
		sqlBF.append("            and q.bgyy = 'C411'");
		sqlBF.append("            and to_char(q.jbsj, 'yyyymmdd') between ? and ?");
		sqlBF.append("            and p.shbzhm = a.shbzhm))");

		// 居委会不为空，以居委会所在辖区为准,将居委会的条件放到第二个情况里面
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("   and ((a.jdid is null and b.jbjgid = '" + jbjgid
					+ "01') or");
			if (vjdid != null && !"".equals(vjdid)) {
				sqlBF.append("       (a.jdid is not null and a.jdid = '"
						+ vjdid + "' and exists");
			} else {
				sqlBF.append("       (a.jdid is not null  and exists");
			}
			sqlBF.append("        (select 1 ");
			sqlBF.append("            from be3u.street_natl l");
			sqlBF.append("           where a.jdid = l.jdid");
			sqlBF.append("             and rsjid = '" + jbjgid + "')))");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, vqsrq);
		this.sql.setString(2, vzzrq);
		this.sql.setString(3, vqsrq);
		this.sql.setString(4, vzzrq);
		vds_data = this.sql.executeQuery();
		for (int vi = 0; vi < vds_data.rowCount(); vi++) {
			vsfzhm = vds_data.getString(vi, "shbzhm");
			jdid = vds_data.getString(vi, "jdid");
			String dwdjid = vds_data.getString(vi, "dwdjid");

			// // 待遇状态 没数据
			// vsql =
			// "select 1 from ad3u.per_pause where ryid=? and zzny is null";
			// this.sql.setSql(vsql);
			// this.sql.setString(1, ryid);
			// vds = this.sql.executeQuery();
			// if (vds.rowCount() > 0) {
			// vds_data.put(vi, "dyffzt", "2");// 有结果说明暂停缴费了
			// } else {
			// vds_data.put(vi, "dyffzt", "1");
			// }
			// 街道
			if (jdid != null && !"".equals(jdid)) {
				vsql = "select  a.rsjid  from be3u.street_natl a where a.jdid=? ";
				this.sql.setSql(vsql);
				this.sql.setString(1, jdid);
				vds = this.sql.executeQuery();
				if (vds.rowCount() > 0) {
					vds_data.put(vi, "rsjid", vds.getString(0, "rsjid"));
				}
			} 

			// 居民
			sqlBF.setLength(0);
			sqlBF.append("select a.rydjid,");
			sqlBF.append("       a.shbzhm sfzhm,");
			sqlBF.append("       a.xm,");
			sqlBF.append("       b.ztfsrq swrq,");
			sqlBF.append("       b.jbr,");
			sqlBF.append("       b.jbsj,");
			sqlBF.append("       b.jcrxm,");
			sqlBF.append("       b.jcrsfzhm,");
			sqlBF.append("       '' jcrlxdh,");
			sqlBF.append("       a.jdid,");
			sqlBF.append("       a.sqid,");
			sqlBF.append("       a.jbjgid");
			sqlBF.append("  from rg3u.per_reg a, rg3u.per_term_exam b");
			sqlBF.append(" where a.dydjid = b.dydjid");
			sqlBF.append("   and a.dyffzt = '3'");
			sqlBF.append("   and a.xzbz = '110'");
			sqlBF.append("   and b.bgyy = 'C411'");
			sqlBF.append("   and a.shbzhm = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vsfzhm);
			vds = this.sql.executeQuery();

			if (vds.rowCount() < 1) {
				sqlBF.setLength(0);
				sqlBF.append("select a.rydjid,");
				sqlBF.append("       a.shbzhm   sfzhm,");
				sqlBF.append("       a.xm,");
				sqlBF.append("       b.ztfsrq   swrq,");
				sqlBF.append("       b.jbr,");
				sqlBF.append("       b.jbsj,");
				sqlBF.append("       b.jcrxm,");
				sqlBF.append("       b.jcrsfzhm,");
				sqlBF.append("       b.jcrlxdh,");
				sqlBF.append("       b.jcrjtzz,");
				sqlBF.append("       a.jdid,");
				sqlBF.append("       a.sqid,");
				sqlBF.append("       a.jbjgid");
				sqlBF.append("  from rc3u.aged_reg a, rc3u.per_giv_exam b");
				sqlBF.append(" where a.rydjid = b.rydjid");
				sqlBF.append("   and a.cbzt = 'C0B'");
				sqlBF.append("   and b.bgyy = 'C211'");
				sqlBF.append("   and a.shbzhm =?");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, vsfzhm);
				vds = this.sql.executeQuery();
			}
			vds_data.put(vi, "swrq", vds.getDate(0, "swrq"));
			vds_data.put(vi, "jbr", vds.getString(0, "jbr"));
			vds_data.put(vi, "jbsj", vds.getDate(0, "jbsj"));
			vds_data.put(vi, "jcrxm", vds.getString(0, "jcrxm"));
			vds_data.put(vi, "jcrsfzhm", vds.getString(0, "jcrsfzhm"));
			vds_data.put(vi, "jcrlxdh", vds.getString(0, "jcrlxdh"));
			vds_data.put(vi, "jdidjm", vds.getString(0, "jdid"));
			vds_data.put(vi, "sqidjm", vds.getString(0, "sqid"));
			vds_data.put(vi, "jbjgidjm", vds.getString(0, "jbjgid"));

		}
		HsuTools.genSqxxDataStore(vds_data, "sqidjm", "sqbhjm", "sqmcjm");
		HsuTools.genSqxxDataStore(vds_data, "sqid", "sqbh", "sqmc");
		HsuTools.genJdxxDataStore(vds_data, "jdid", "jdbh", "jdmc");
		HsuTools.genJdxxDataStore(vds_data, "jdidjm", "jdbhjm", "jdmcjm");
		HsuTools.genJbjgxxDataStore(vds_data, "jbjgid", "jbjgbh", "jbjgmc");

		vds_data.sort("dwbh");

		rdo.put("dwqkinfo", vds_data);
		return rdo;
	}
	/**
	 * 查询未办理退休增加人员 - 机关
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-4-10
	 * @since V1.0
	 */
	public DataObject fwdAdWbltxzjryQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		DataObject rdo = new DataObject();
		
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 * 查询未办理退休增加人员 - 机关
	 * 方法简介.QuerySbjgBPO.queryWbltxzj(核二)
	 * @author 葛大帅
	 * @date 创建时间 2019-4-10
	 * @since V1.0
	 */
	public DataObject queryWbltxzjry(DataObject para) throws Exception {

		double vtxj = 0, vzhye = 0, vgrjze = 0, vdwjze = 0;
		int vi = 0;
		String  vmaxZzny = null;
		DataStore vds = null, vryDs = null ;
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();

		String jbjgid = para.getString("jbjgid");
		if(jbjgid == null){
			this.bizException("请选择经办机构！");
		}

		sqlBF.setLength(0);
		sqlBF.append("select a.ryid, a.shbzhm, a.xm, b.dwbh, a.xb, a.csrq, b.cbdwmc dwmc");
		sqlBF.append("  from si3u.per_reg a, si3u.orgn_reg b");
		sqlBF.append(" where a.dwdjid = b.dwdjid");
		sqlBF.append("   and a.hdbz = '1'");
		sqlBF.append("   and a.zglb in ('A0B', 'A0C', 'A0D', 'A0E')");
		sqlBF.append("   and b.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid) + ")");
		sqlBF.append("   and not exists (select 1");
		sqlBF.append("          from ad3u.per_info o, ad3u.per_reg p");
		sqlBF.append("         where a.ryid = o.ryid");
		sqlBF.append("           and o.dqdydjid = p.dydjid");
		sqlBF.append("           and nvl(p.bljyyy,'*') <> '404')");
		sqlBF.append("   and exists (select 1");
		sqlBF.append("          from si3u.per_reg_join j");
		sqlBF.append("         where j.rydjid = a.rydjid");
		sqlBF.append("           and xzbz in ('101', '102', '109')");
		sqlBF.append("           and j.zzrq is null)");
                         
		this.sql.setSql(sqlBF.toString());
		
		vryDs = this.sql.executeQuery();
		for (vi = 0; vi < vryDs.rowCount(); vi++) {
			String ryid = vryDs.getString(vi, "ryid");
            
			// 查询退休金
			sqlBF.setLength(0);
			sqlBF.append("select max(nvl(zzny, '999999')) zzny");
			sqlBF.append("  from ad3u.per_giv_month_std");
			sqlBF.append(" where ryid = ?");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			vds = this.sql.executeQuery();
			if (vds.rowCount() == 0) {
				vmaxZzny = null;
			} else {
				vmaxZzny = vds.getString(0, "zzny");
			}
			sqlBF.setLength(0);
			sqlBF.append("select nvl(sum(btje), 0) txj");
			sqlBF.append("  from ad3u.per_giv_month_std");
			sqlBF.append(" where ryid = ?");
			sqlBF.append("   and ? between qsny and nvl(zzny, '999999')");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, vmaxZzny);
			vds = this.sql.executeQuery();
			if (vds.rowCount() == 0) {
				vtxj = 0;
			} else {
				vtxj = vds.getDouble(0, "txj");
			}
			if (vtxj < 0) {
				vtxj = 0;
			}
			
			// 账户余额
			sqlBF.setLength(0);
			sqlBF.append("select nvl(sum(dwjze), 0) dwjze, nvl(sum(grjze), 0) grjze");
			sqlBF.append("  from ad3u.aged_account");
			sqlBF.append(" where ryid = ?");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			vds = this.sql.executeQuery();
			if (vds.rowCount() == 0) {
				vdwjze = 0;
				vgrjze = 0;
			} else {
				vdwjze = vds.getDouble(0, "dwjze");
				vgrjze = vds.getDouble(0, "grjze");
			}
			vzhye = vdwjze + vgrjze;
			if (vzhye < 0) {
				vzhye = 0;
			}

			vryDs.put(vi, "zhye", vzhye);
			vryDs.put(vi, "txj", vtxj);
		}
		vryDs.sort("dwbh");
		
		rdo.put("dsinfo", vryDs);
		return rdo;
	}
	
	/**
	 * 查询离退休减员人员待遇情况
	 * 方法简介.
	 * @author zkj
	 * @date 创建时间 2019-04-15
	 * @since V1.0
	 */
	public DataObject fwdAdLtxjyrydyqkcx(DataObject para) throws Exception{
		DataStore dsjbjg = SiTools.getOperateAndSnkqyJbjgByUser(this.getUser());
		para.put("dsjbjg", dsjbjg);
		//起始日期默认为当前年月上一个月的20号
		//终止日期默认为当前年月的19号
		String dqny = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		String dqnyper = DateUtil.addMonthToString(dqny, "yyyyMM", -1);
		String qsrq = dqnyper+ "20";
		String zzrq = dqny + "19";
		DataStore ds = new DataStore();
		ds.addRow();
		ds.put(0, "qsrq", qsrq);
		ds.put(0, "zzrq", zzrq);
		para.put("dsquery", ds);
		return para;
	}
	
	/**
	 * 查询离退休减员人员待遇情况
	 * 方法简介.
	 * @author zkj
	 * @date 创建时间 2019-04-15
	 * @since V1.0
	 */
	public DataObject queryLtxjyrydyqk(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		//接参数
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String jbjgidstr = para.getString("jbjgid");
		String dqrq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMMdd");
		
		if (qsrq == null || "".equals(qsrq)) {
			this.bizException("起始日期不能为空！");
		}
		if (zzrq == null || "".equals(zzrq)) {
			this.bizException("终止日期不能为空");
		}
		if (qsrq.compareTo("19800101") < 0) {
			this.bizException("起始日期不能小于1980.01.01!");
		}
		if (qsrq.compareTo(dqrq) > 0) {
			this.bizException("起始日期不能大于当前时间【"+ dqrq +"】!");
		}
		
		if (zzrq.compareTo("19800101") < 0) {
			this.bizException("终止日期不能小于1980.01.01!");
		}
		if (zzrq.compareTo(dqrq) > 0) {
			this.bizException("终止日期不能大于当前时间【"+ dqrq +"】!");
		}
		if (qsrq.compareTo(zzrq) > 0) {
			this.bizException("起始日期不能大于终止日期！");
		}
		if (jbjgidstr == null || "".equals(jbjgidstr)) {
			DataStore dsjbjg = SiTools.getOperateAndSnkqyJbjgByUser(this.getUser());
			for (int i = 0; i < dsjbjg.rowCount(); i++) {
				String jbjgid = dsjbjg.getString(i, "value");
				jbjgidstr = jbjgidstr + "," + jbjgid;
			}
			if (jbjgidstr.length() > 1) {
				jbjgidstr = jbjgidstr.substring(1);
			}
		}
		//根據经办机构ID获取人社局ID
		String jbjgarr[] = jbjgidstr.split(",");
		String rsjidstr = "";
		HashMap<String, String> rsjMap = new HashMap<String, String>();
		for (int i = 0; i < jbjgarr.length; i++) {
			String jbjgid = jbjgarr[i];
			String rsjid = jbjgid.substring(0, 6);
			if (!rsjMap.containsKey(rsjid)) {
				rsjidstr = rsjidstr + "," + rsjid;
				rsjMap.put(rsjid, rsjid);
			}
		}
		if (rsjidstr.length() > 1) {
			rsjidstr = rsjidstr.substring(1);
		}
		
		//取人员基本信息(单位挂靠)
		sqlBF.setLength(0);
		sqlBF.append(" select g.ryid, b.jbjgid, b.dwbh, b.cbdwmc dwmc, g.shbzhm, g.xm, g.zglb, d.ltxlb, d.ltxrq, f.swrq  ");
		sqlBF.append("   from si3u.orgn_reg b, ad3u.emp_info d, biuv.person f, si3u.per_reg g   ");
		sqlBF.append("  where g.dwdjid = b.dwdjid                                                                ");
		sqlBF.append("    and b.jbjgid in(" + HsuTools.replaceC2QCQ(jbjgidstr) + ")                              ");
		sqlBF.append("    and g.ryid = d.ryid                                                                    ");
		sqlBF.append("    and g.ryid = f.ryid                                                                    ");
		sqlBF.append("    and g.hdbz = '1'                                                                       ");
		sqlBF.append("    and exists (select 1                                                                   ");
		sqlBF.append("           from si3u.per_natl_cmpl c                                                       ");
		sqlBF.append("          where g.ryid = c.ryid                                                            ");
		sqlBF.append("            and c.bcxmbh = 'QRBFRQ'                                                        ");
		sqlBF.append("            and decode(instr(c.bcxmz, '.'), 0, bcxmz, substr(c.bcxmz, 1, 4)||substr(c.bcxmz, 6, 2)||substr(c.bcxmz, 9, 2)) between ? and ?) ");
		sqlBF.append("    and not exists (select 1                                                               ");
		sqlBF.append("           from ad3u.per_cmpl c                                                       ");
		sqlBF.append("          where g.ryid = c.ryid                                                            ");
		sqlBF.append("            and c.bcxmbh = 'ZRSQSJ'                                                        ");
		sqlBF.append("            and c.bcxmz is not null)                                                       ");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		DataStore dsryxx01 = this.sql.executeQuery();
		dsryxx01.sort("jbjgid,dwbh,dwmc");
		//取人员基本信息(社区挂靠)
		sqlBF.setLength(0);
		sqlBF.append(" select g.ryid, b.rsjid||'01' jbjgid, b.jdbh dwbh, b.jdmc dwmc, g.shbzhm, g.xm, g.zglb, d.ltxlb, d.ltxrq, f.swrq       ");
		sqlBF.append("   from be3u.street_natl b, ad3u.emp_info d, biuv.person f, si3u.per_reg g                                    ");
		sqlBF.append("  where g.jdid = b.jdid                                                                                       ");
		sqlBF.append("    and g.ryid = d.ryid                                                                                       ");
		sqlBF.append("    and g.ryid = f.ryid                                                                                       ");
		sqlBF.append("    and g.hdbz = '1'                                                                                          ");
		sqlBF.append("    and b.rsjid in (" + HsuTools.replaceC2QCQ(rsjidstr) + ")                                                  ");
		sqlBF.append("    and exists (select 1                                                                                      ");
		sqlBF.append("           from si3u.per_natl_cmpl c                                                                          ");
		sqlBF.append("          where g.ryid = c.ryid                                                                               ");
		sqlBF.append("            and c.bcxmbh = 'QRBFRQ'                                                                           ");
		sqlBF.append("            and decode(instr(c.bcxmz, '.'), 0, bcxmz, substr(c.bcxmz, 1, 4)||substr(c.bcxmz, 6, 2)||substr(c.bcxmz, 9, 2)) between ? and ?) ");
		sqlBF.append("    and exists (select 1                                                                                      ");
		sqlBF.append("           from ad3u.per_cmpl c                                                                          ");
		sqlBF.append("          where g.ryid = c.ryid                                                                               ");
		sqlBF.append("            and c.bcxmbh = 'ZRSQSJ'                                                                           ");
		sqlBF.append("            and c.bcxmz is not null)                                                                          ");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		DataStore dsryxx02 = this.sql.executeQuery();
		dsryxx02.sort("jbjgid,dwbh,dwmc");
		DataStore dsryxx = dsryxx01.combineDatastore(dsryxx02);
		sqlBF.setLength(0);
		sqlBF.append(" select ryid, bcxmbh, bcxmz                                 ");
		sqlBF.append("   from si3u.per_natl_cmpl a                                ");
		sqlBF.append("  where bcxmbh in ('QRBFRQ', 'TXSFSPZT')                    ");
		sqlBF.append("    and exists (select 1                                    ");
		sqlBF.append("           from si3u.per_natl_cmpl                          ");
		sqlBF.append("          where ryid = a.ryid                               ");
		sqlBF.append("            and bcxmbh = 'QRBFRQ'                           ");
		sqlBF.append("            and decode(instr(bcxmz, '.'), 0, bcxmz, substr(bcxmz, 1, 4)||substr(bcxmz, 6, 2)||substr(bcxmz, 9, 2)) between ? and ?) ");	
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		DataStore dscmpl = this.sql.executeQuery();
		
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, sum(decode(a.btbh,'A1D1',a.btje,0)) szf,sum(decode(a.btbh,'A1D2',a.btje,0)) fxj,                   ");
		sqlBF.append("              sum(decode(a.btbh,'A107',a.btje,0)) zhj,sum(decode(a.btbh,'A1D1',0,'A1D2',0,'A107',0,a.btje,0)) qty  ");
		sqlBF.append("   from ad3u.per_giv_detl a                                                                                        ");
		sqlBF.append("  where a.fflb = 'C'                                                                                               ");
		sqlBF.append("    and a.zdlsh is null                                                                                            ");
		sqlBF.append("    and exists (select 1                                                                                           ");
		sqlBF.append("           from si3u.per_natl_cmpl                                                                                 ");
		sqlBF.append("          where ryid = a.ryid                                                                                      ");
		sqlBF.append("            and bcxmbh = 'QRBFRQ'                                                                                  ");
		sqlBF.append("            and decode(instr(bcxmz, '.'), 0, bcxmz, substr(bcxmz, 1, 4)||substr(bcxmz, 6, 2)||substr(bcxmz, 9, 2)) between ? and ?) ");	
		sqlBF.append(" group by a.ryid                                                                                                   ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		DataStore dsgivonce = this.sql.executeQuery();
		
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, sum(decode(sign(a.btje), 1, a.btje, 0)) bfje, sum(decode(sign(a.btje), -1, a.btje, 0)) kfje ");
		sqlBF.append("   from ad3u.per_giv_detl a                                                                                 ");
		sqlBF.append("  where a.fsyy = '2'                                                                                        ");
		sqlBF.append("    and a.fflb in ('A', 'D')                                                                                ");
		sqlBF.append("    and a.zdlsh is null                                                                                     ");
		sqlBF.append("    and exists (select 1                                                                                    ");
		sqlBF.append("           from si3u.per_natl_cmpl                                                                          ");
		sqlBF.append("          where ryid = a.ryid                                                                               ");
		sqlBF.append("            and bcxmbh = 'QRBFRQ'                                                                           ");
		sqlBF.append("            and decode(instr(bcxmz, '.'), 0, bcxmz, substr(bcxmz, 1, 4)||substr(bcxmz, 6, 2)||substr(bcxmz, 9, 2)) between ? and ?) ");	
		sqlBF.append("  group by a.ryid                                                                                           ");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		DataStore dsgivcmpl = this.sql.executeQuery();
		
		int szfrs = 0, fxjrs = 0, kfrs= 0, zhrs = 0;
		int szfrs_f = 0, fxjrs_f = 0, kfrs_f= 0, zhrs_f = 0;
		double hj = 0, szfhj = 0, fxjhj = 0, kfjehj = 0,sfkfhj = 0, zhjhj = 0;
		double szfhj_f = 0, fxjhj_f = 0, kfjehj_f = 0,sfkfhj_f = 0, zhjhj_f = 0;
		for (int i = 0; i < dsryxx.rowCount(); i++) {
			String ryid = dsryxx.getString(i, "ryid");
			String qrbfrq = "", fffs = "";
			double szf = 0, fxj = 0, zhj = 0, qty = 0, bfje = 0, kfje = 0;
			//取确认拨付日期
			int find = dscmpl.find(" ryid == " + ryid + " and bcxmbh == QRBFRQ");
			if (find >= 0) {
				qrbfrq = dscmpl.getString(find, "bcxmz");
			}
			//取發放方式
			find = dscmpl.find(" ryid == " + ryid + " and bcxmbh == TXSFSPZT");
			if (find >= 0) {
				fffs = dscmpl.getString(find, "bcxmz");
			}
			//取一次性待遇数据
			find = dsgivonce.find(" ryid == " + ryid);
			if (find >= 0) {
				szf = dsgivonce.getDouble(find, "szf");
				fxj = dsgivonce.getDouble(find, "fxj");
				zhj = dsgivonce.getDouble(find, "zhj");
				qty = dsgivonce.getDouble(find, "qty");
			}
			//取补扣发数据
			find = dsgivcmpl.find(" ryid == " + ryid);
			if (find >= 0) {
				bfje = dsgivcmpl.getDouble(find, "bfje");
				kfje = dsgivcmpl.getDouble(find, "kfje");
			}
			hj = szf + fxj + zhj + qty + bfje + kfje;
			dsryxx.put(i, "qrbfrq", qrbfrq);
			dsryxx.put(i, "fffs", fffs);
			dsryxx.put(i, "szf", szf);
			dsryxx.put(i, "fxj", fxj);
			dsryxx.put(i, "zhj", zhj);
			dsryxx.put(i, "qty", qty);
			dsryxx.put(i, "bfje", bfje);
			dsryxx.put(i, "kfje", kfje);
			dsryxx.put(i, "hj", hj);
		}
		//统筹非社会化发放（通过以前退管老流程发放）

		//取人员基本信息(单位挂靠)
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, b.jbjgid, b.dwbh, b.cbdwmc dwmc, a.shbzhm, a.xm, a.zglb,                              ");
		sqlBF.append("        f.ltxlb, f.ltxrq, e.swrq, '4' fffs, sum(btje) zhj, sum(btje) hj,                      ");
		sqlBF.append("        '20' || decode(length(max(zdlsh)), 11, substrb(max(zdlsh), 1, 6), substrb(max(zdlsh), 4, 6)) qrbfrq    ");
		sqlBF.append("   from si3u.per_reg a, si3u.orgn_Reg b, si3u.per_giv_once c, biuv.person e, ad3u.emp_info f  ");
		sqlBF.append("  where a.dwdjid = b.dwdjid                                                                   ");
		sqlBF.append("    and b.jbjgid in("+ HsuTools.replaceC2QCQ(jbjgidstr) +")                                   ");
		sqlBF.append("    and a.ryid = c.ryid                                                                       ");
		sqlBF.append("    and a.hdbz = '1'                                                                          ");
		sqlBF.append("    and a.ryid = e.ryid                                                                       ");
		sqlBF.append("    and a.ryid = f.ryid(+)                                                                    ");
		sqlBF.append("    and exists                                                                                ");
		sqlBF.append("  (select 1                                                                                   ");
		sqlBF.append("           from si3u.pay_bill d                                                               ");
		sqlBF.append("          where c.zdlsh = d.zdlsh                                                             ");
		sqlBF.append("            and d.djzt = '0'                                                                  ");
		sqlBF.append("            and to_char(txsj, 'yyyymmdd') between ? and ?  )                                  ");
		sqlBF.append("  group by b.jbjgid, b.dwbh, b.cbdwmc, a.shbzhm, a.zglb, e.swrq, f.ltxrq, f.ltxlb, a.ryid, a.xm");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		DataStore dsryxx03 = this.sql.executeQuery();
		dsryxx03.sort("jbjgid,dwbh,ryid");
		dsryxx.combineDatastore(dsryxx03);
		
		//取人员基本信息(社区挂靠)
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, b.rsjid||'01' jbjgid, b.jdbh dwbh, b.jdmc dwmc, a.shbzhm, a.xm, a.zglb,                                                ");
		sqlBF.append("        e.ltxlb, e.ltxrq, g.swrq,  '20' || decode(length(max(zdlsh)), 11, substrb(max(zdlsh), 1, 6), substrb(max(zdlsh), 4, 6)) qrbfrq,  ");
		sqlBF.append("        '4' fffs,sum(btje) zhj,sum(btje) hj                                                                        ");
		sqlBF.append("   from si3u.per_reg      a,                                                                                       ");
		sqlBF.append("        be3u.street_natl  b,                                                                                       ");
		sqlBF.append("        si3u.per_giv_once c,                                                                                       ");
		sqlBF.append("        ad3u.emp_info e,                                                                                           ");
		sqlBF.append("        biuv.person g                                                                                              ");
		sqlBF.append("  where a.jdid = b.jdid                                                                                            ");
		sqlBF.append("    and a.ryid = c.ryid                                                                                            ");
		sqlBF.append("    and a.ryid = e.ryid(+)                                                                                         ");
		sqlBF.append("    and a.ryid = g.ryid                                                                                            ");
		sqlBF.append("    and a.hdbz = '1'                                                                                               ");
		sqlBF.append("    and b.rsjid in (" + HsuTools.replaceC2QCQ(rsjidstr) + ")                                                                                         ");
		sqlBF.append("    and exists                                                                                                     ");
		sqlBF.append("  (select 1                                                                                                        ");
		sqlBF.append("           from si3u.pay_bill f                                                                                    ");
		sqlBF.append("          where c.zdlsh = f.zdlsh                                                                                  ");
		sqlBF.append("            and f.djzt = '0'                                                                                       ");
		sqlBF.append("            and to_char(txsj, 'yyyymmdd') between ? and ?      )                                                   ");
		sqlBF.append("    group by b.rsjid, b.jdbh, b.jdmc, a.shbzhm, a.xm, a.zglb, e.ltxlb, e.ltxrq, g.swrq,a.ryid                     ");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsrq);
		this.sql.setString(2, zzrq);
		
		DataStore dsryxx04 = this.sql.executeQuery();
		dsryxx04.sort("jbjgid,dwbh,ryid");
		dsryxx.combineDatastore(dsryxx04);
		
		int count = dsryxx.rowCount();
		double szf = 0, fxj = 0, zhj = 0, qty = 0, bfje = 0, kfje = 0;
		String fffs = "";
		for (int i = 0; i < count; i++) {
			//循环开始将数据置空
			szf = 0; 
			fxj = 0; 
			zhj = 0; 
			qty = 0; 
			bfje = 0; 
			kfje = 0;
			String ryid = dsryxx.getString(i, "ryid");
			String ysxm = "";
			String yssfzhm = "";
			//查询遗属信息		
			this.sql.setSql(" select xm, sfzhm from ad3u.fami_natl where dyryid = ? and rownum<2 ");
			this.sql.setString(1, ryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				ysxm = dsTemp.getString(0, "xm");
				yssfzhm = dsTemp.getString(0, "sfzhm");
			}
			
			dsryxx.put(i, "ysxm", ysxm);
			dsryxx.put(i, "yssfzhm", yssfzhm);
			
			if (dsryxx.containsItem(i, "szf")) {
				szf = dsryxx.getDouble(i, "szf");
			}
			if (dsryxx.containsItem(i, "fxj")) {
				fxj = dsryxx.getDouble(i, "fxj");
			}
			if (dsryxx.containsItem(i, "zhj")) {
				zhj = dsryxx.getDouble(i, "zhj");
			}
			if (dsryxx.containsItem(i, "qty")) {
				qty = dsryxx.getDouble(i, "qty");
			}
			if (dsryxx.containsItem(i, "kfje")) {
				kfje = dsryxx.getDouble(i, "kfje");
			}
			if (dsryxx.containsItem(i, "bfje")) {
				bfje = dsryxx.getDouble(i, "bfje");
			}
			if (dsryxx.containsItem(i, "fffs")) {
				fffs = dsryxx.getString(i, "fffs");
			}
			
			if ("5".equals(fffs)) {
				// 计算丧葬费人数、金额
				if (szf != 0) {
					szfrs++;
					szfhj = szfhj + szf;
					sfkfhj = sfkfhj + szf;
				}
				// 计算一次性救济费人数、金额+(可能存在的其他一次性金额)
				if ((fxj + qty) != 0) {
					fxjrs++;
					fxjhj = fxjhj + fxj + qty;
					sfkfhj = sfkfhj + fxj + qty;
				}
				// 计算补发，扣款人数、金额
				if ((kfje + bfje) != 0) {
					kfrs++;
					kfjehj = kfjehj + kfje + bfje;
					sfkfhj = sfkfhj + kfje + bfje;
				}
				//计算账户金情况
				if (zhj != 0) {
					zhrs++;
					zhjhj=zhjhj + zhj;
				    sfkfhj=sfkfhj + zhj;
				}
			}else {
				// 计算丧葬费人数、金额
				if (szf != 0) {
					szfrs_f++;
					szfhj_f = szfhj_f + szf;
					sfkfhj_f = sfkfhj_f + szf;
				}
				// 计算一次性救济费人数、金额+(可能存在的其他一次性金额)
				if ((fxj + qty) != 0) {
					fxjrs_f++;
					fxjhj_f = fxjhj_f + fxj + qty;
					sfkfhj_f = sfkfhj_f + fxj + qty;
				}
				// 计算补发，扣款人数、金额
				if ((kfje + bfje) != 0) {
					kfrs_f++;
					kfjehj_f = kfjehj_f + kfje + bfje;
					sfkfhj_f = sfkfhj_f + kfje + bfje;
				}
				//计算账户金情况
				if (zhj != 0) {
					zhrs_f++;
					zhjhj_f=zhjhj_f + zhj;
				    sfkfhj_f=sfkfhj_f + zhj;
				}
			}
			
		}
		//组装汇总信息
		DataStore dshzxx = new DataStore();
		dshzxx.addRow();
		dshzxx.put(0, "szfrs", szfrs);
		dshzxx.put(0, "szfhj", szfhj);
		dshzxx.put(0, "fxjrs", fxjrs);
		dshzxx.put(0, "fxjhj", fxjhj);
		dshzxx.put(0, "kfrs", kfrs);
		dshzxx.put(0, "kfjehj", kfjehj);
		dshzxx.put(0, "zhrs", zhrs);
		dshzxx.put(0, "zhjhj", zhjhj);
		dshzxx.put(0, "sfkfhj", sfkfhj);
		
		dshzxx.put(0, "szfrs_f", szfrs_f);
		dshzxx.put(0, "szfhj_f", szfhj_f);
		dshzxx.put(0, "fxjrs_f", fxjrs_f);
		dshzxx.put(0, "fxjhj_f", fxjhj_f);
		dshzxx.put(0, "kfrs_f", kfrs_f);
		dshzxx.put(0, "kfjehj_f", kfjehj_f);
		dshzxx.put(0, "zhrs_f", zhrs_f);
		dshzxx.put(0, "zhjhj_f", zhjhj_f);
		dshzxx.put(0, "sfkfhj_f", sfkfhj_f);
		
		
		
		DataObject rdo = new DataObject();
		rdo.put("dssfxx", dshzxx);
		rdo.put("dsdyxx", dsryxx);
		
		return rdo;
	}
	/**
	 * 查询离退休减员人员统筹处打印数据
	 * 方法简介.
	 * @author zkj
	 * @date 创建时间 2019-04-17
	 * @since V1.0
	 */
	public DataObject queryTccPrintInfo(DataObject para) throws Exception{
		//接参数
		String qsrq = para.getDateToString("qsrq", "yyyy.MM.dd");
		String zzrq = para.getDateToString("zzrq", "yyyy.MM.dd");
		String jbjgid = para.getString("jbjgid");	
		String dqrq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyy年MM月dd日");
		//社发
		int zhrs = para.getInt("zhrs");
		double zhjhj = para.getDouble("zhjhj");
		double yfhj = para.getDouble("zhjhj");
		double sfkfhj = para.getDouble("zhjhj");
		
		int zhrs1 = para.getInt("zhrs_f");
		double zhjhj1 = para.getDouble("zhjhj_f");
		double yfhj1 = para.getDouble("zhjhj_f");
		double sfkfhj1 = para.getDouble("zhjhj_f");
		
		SPrinter printer = new SPrinter();
		printer.putPara("qsrq", qsrq);
		printer.putPara("zzrq", zzrq);
		printer.putPara("jbjgid", HsuTools.getJbjgmc(jbjgid));
		printer.putPara("dyrq", dqrq);
		
		printer.putPara("zhrs", DataFormat.formatInt(zhrs));
		printer.putPara("zhjhj", DataFormat.formatDouble(zhjhj, 2));
		printer.putPara("yfhj", DataFormat.formatDouble(yfhj, 2));
		printer.putPara("sfkfhj", DataFormat.formatDouble(sfkfhj, 2));
		
		printer.putPara("zhrs1",  DataFormat.formatInt(zhrs1));
		printer.putPara("zhjhj1", DataFormat.formatDouble(zhjhj1, 2));
		printer.putPara("yfhj1", DataFormat.formatDouble(yfhj1, 2));
		printer.putPara("sfkfhj1", DataFormat.formatDouble(sfkfhj1, 2));
		
		String printhtml = printer.print(this.getBizInstitution(), "siszfjjfjkkehzb");
		
		DataObject rdo = new DataObject();
		rdo.put("printhtml", printhtml);
	
		return rdo;
	}
	/**
	 * 查询离退休减员人员统筹处打印数据
	 * 方法简介.
	 * @author zkj
	 * @date 创建时间 2019-04-17
	 * @since V1.0
	 */
	public DataObject queryTgcPrintInfo(DataObject para) throws Exception{
		//接参数
		String qsrq = para.getDateToString("qsrq", "yyyy.MM.dd");
		String zzrq = para.getDateToString("zzrq", "yyyy.MM.dd");
		String jbjgid = para.getString("jbjgid");	
		String dqrq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyy年MM月dd日");
		//社发
		int szfrs = para.getInt("szfrs");
		int fxjrs = para.getInt("fxjrs");
		int kfrs = para.getInt("kfrs");
		double szfhj = para.getDouble("szfhj");
		double fxjhj = para.getDouble("fxjhj");
		double yfhj = fxjhj + szfhj;
		double kfhj = para.getDouble("kfjehj");
		double sfkfhj = fxjhj + szfhj + kfhj;
		
		//非社发
		int szfrs1 = para.getInt("szfrs_f");
		int fxjrs1 = para.getInt("fxjrs_f");
		int kfrs1 = para.getInt("kfrs_f");
		double szfhj1 = para.getDouble("szfhj_f");
		double fxjhj1 = para.getDouble("fxjhj_f");
		double yfhj1 = fxjhj1 + szfhj1;
		double kfhj1 = para.getDouble("kfjehj_f");
		double sfkfhj1 = fxjhj1 + szfhj1 + kfhj1;

		SPrinter printer = new SPrinter();
		printer.putPara("qsrq", qsrq);
		printer.putPara("zzrq", zzrq);
		printer.putPara("jbjgid", HsuTools.getJbjgmc(jbjgid));
		printer.putPara("dyrq", dqrq);
		
		printer.putPara("szfrs", DataFormat.formatInt(szfrs));
		printer.putPara("fxjrs", DataFormat.formatInt(fxjrs));
		printer.putPara("kfrs", DataFormat.formatInt(kfrs));
		printer.putPara("szfhj", DataFormat.formatDouble(szfhj, 2));
		printer.putPara("fxjhj", DataFormat.formatDouble(fxjhj, 2));
		printer.putPara("yfhj", DataFormat.formatDouble(yfhj, 2));
		printer.putPara("kfhj", DataFormat.formatDouble(kfhj, 2));
		printer.putPara("sfkfhj", DataFormat.formatDouble(sfkfhj, 2));
		
		printer.putPara("szfrs1", DataFormat.formatInt(szfrs1));
		printer.putPara("fxjrs1", DataFormat.formatInt(fxjrs1));
		printer.putPara("kfrs1", DataFormat.formatInt(kfrs1));
		printer.putPara("szfhj1", DataFormat.formatDouble(szfhj1, 2));
		printer.putPara("fxjhj1", DataFormat.formatDouble(fxjhj1, 2));
		printer.putPara("yfhj1", DataFormat.formatDouble(yfhj1, 2));
		printer.putPara("kfhj1", DataFormat.formatDouble(kfhj1, 2));
		printer.putPara("sfkfhj1", DataFormat.formatDouble(sfkfhj1, 2));
		
		String printhtml = printer.print(this.getBizInstitution(), "siszfjjfjkkehzb");
		
		DataObject rdo = new DataObject();
		rdo.put("printhtml", printhtml);
	
		return rdo;
	}
	
	/**
	 * 跳转到页面
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-4-19
	 * @since V1.0
	 */
	public DataObject fwdAdLtxryjysxxdrQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();

		ds = AdTools.getDsOperateAndSnkqyJbjgByUser(this.getUser());
		DataObject rdo = new DataObject();

		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 * 检测离退休人员及遗属导入查询
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-4-19
	 * @since V1.0
	 */
	public DataObject chkAdLtxryjysxxdrcxUpload(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "xm", "姓名", "String");
		setTableInfo(tableInfo, 1, "shbzhm", "社会保障号码", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		String jbjgidstr = para.getString("jbjgid");

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}

		// 查询职工信息
		sqlBF.setLength(0);
		sqlBF.append("  select a.dyxsksny, to_char(b.bljysj, 'yyyyMMdd') bljyrq,");
		sqlBF.append("         a.jdid, c.ltxlb, c.cjgzrq, a.dfjgid, a.yhzh, e.zglb,");
		sqlBF.append("         a.dyffzt, a.shbzhm, a.ryid, a.xb, a.xm,a.dfjglb,");
		sqlBF.append("         c.ltxlb, c.ltxrq, o.jtzz ,o.lxrdh lxdh, d.dwbh, d.cbdwmc dwmc, d.jbjgid");
		sqlBF.append("    from ad3u.per_info a, ad3u.per_reg b,");
		sqlBF.append("         ad3u.emp_info c, si3u.orgn_reg d,");
		sqlBF.append("         si3u.per_reg e, biuv.person o");
		sqlBF.append("   where a.dqdydjid = b.dydjid");
		sqlBF.append("     and a.ryid = c.ryid");
		sqlBF.append("     and o.ryid = a.ryid");
		sqlBF.append("     and a.dwdjid = d.dwdjid");
		sqlBF.append("     and e.ryid = a.ryid");
		sqlBF.append("     and e.hdbz = '1'");
		sqlBF.append("     and d.jbjgid in ("
				+ HsuTools.replaceC2QCQ(jbjgidstr) + ")");
		sqlBF.append("     and a.shbzhm = ?");
		String sqlAd = sqlBF.toString();

		// 查询遗属信息
		sqlBF.setLength(0);
		sqlBF.append("  select a.xb, a.shbzhm, a.dfjgid, a.yhzh, a.jdid, a.xm,");
		sqlBF.append("         a.dyxsksny,  to_char(b.bljysj, 'yyyyMMdd') bljyrq,");
		sqlBF.append("         c.dwbh, c.cbdwmc dwmc, c.jbjgid, d.jtzz, d.lxrdh lxdh,a.dfjglb,");
		sqlBF.append("         '遗属' zglb, '' ltxrq, '' cjgzrq, a.dyffzt, a.ryid, e.yslb ltxlb ");
		sqlBF.append("    from ad3u.per_info a, ad3u.per_reg b,");
		sqlBF.append("         si3u.orgn_reg c, biuv.person d, ad3u.supp_info e");
		sqlBF.append("   where a.sszfrq = 'B'");
		sqlBF.append("     and a.dqdydjid = b.dydjid");
		sqlBF.append("     and a.dwdjid = c.dwdjid");
		sqlBF.append("     and a.ryid = d.ryid");
		sqlBF.append("     and a.ryid = e.ryid");
		sqlBF.append("     and c.jbjgid in ("
				+ HsuTools.replaceC2QCQ(jbjgidstr) + ")");
		sqlBF.append("     and a.shbzhm = ?");
		String sqlYs = sqlBF.toString();

		// 月发放标准（当前年月待遇发放总额，暂停及减员人员此月无定期待遇则显示为0）
		sqlBF.setLength(0);
		sqlBF.append("select sum(btje) ylj");
		sqlBF.append("  from ad3u.per_giv_month_std");
		sqlBF.append(" where ryid = ?");
		sqlBF.append("   and to_char(sysdate, 'yyyymm') between qsny and nvl(zzny, '205012')");
		String sqldybz = sqlBF.toString();

		// 检测数据
		DataStore dsper = new DataStore();
		DataStore dserr = new DataStore();
		String shbzhm = "", xm = "", jdid = "", ryid = "", zglb = "", jbjgid = "";
		for (int i = 0; i < ds.rowCount(); i++) {
			shbzhm = ds.getString(i, "shbzhm");
			xm = ds.getString(i, "xm");
			String err = "";
			if (shbzhm == null || "".equals(shbzhm)) {
				err = "职工社会保障号码为空！";
			}
			if (xm == null || "".equals(xm)) {
				err += "职工姓名为空！";
			}
			if (err != null && !"".equals(err)) {
				dserr.addRow();
				dserr.put(dserr.rowCount() - 1, "shbzhm", shbzhm);
				dserr.put(dserr.rowCount() - 1, "xm", xm);
				dserr.put(dserr.rowCount() - 1, "err", err);
				continue;
			}
			this.sql.setSql(sqlAd);
			this.sql.setString(1, shbzhm);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() == 0) {
				this.sql.setSql(sqlYs);
				this.sql.setString(1, shbzhm);
				dsTemp = this.sql.executeQuery();
				if (dsTemp.rowCount() == 0) {
					dserr.addRow();
					dserr.put(dserr.rowCount() - 1, "shbzhm", shbzhm);
					dserr.put(dserr.rowCount() - 1, "xm", xm);
					dserr.put(dserr.rowCount() - 1, "err", "查不到此职工或遗属的登记信息！");
					continue;
				}
			}

			jdid = dsTemp.getString(0, "jdid");
			jbjgid = dsTemp.getString(0, "jbjgid");
			ryid = dsTemp.getString(0, "ryid");
			zglb = dsTemp.getString(0, "zglb");

			dsper.addRow(dsTemp.getRow(0));

			dsper.put(dsper.rowCount() - 1, "zglb", HsuTools.discode("ZGLB", zglb, zglb));

			this.sql.setSql(sqldybz);
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();
			dsper.put(dsper.rowCount() - 1, "yffbz", dsTemp.getDouble(0, "ylj"));

			String zrsqsj = AdTools.getPerCmpl(ryid, "ZRSQSJ", "");
			dsper.put(dsper.rowCount() - 1, "zrsqsj", zrsqsj);

			if (jdid != null && !"".equals(jdid)) {
				this.sql.setSql("select jdbh,jdmc,rsjid from be3u.street_natl where jdid = ?");
				this.sql.setString(1, jdid);
				dsTemp = this.sql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					dsper.put(dsper.rowCount() - 1, "jdbh", dsTemp.getString(0, "jdbh"));
					dsper.put(dsper.rowCount() - 1, "jdmc", dsTemp.getString(0, "jdmc"));
					dsper.put(dsper.rowCount() - 1, "jbjgid", dsTemp.getString(0, "rsjid")
							+ jbjgid.substring(6, 8));
				}
			}
		}

		dsper = HsuTools.genJbjgxxDataStore(dsper, "jbjgid", "jbjgbh", "jbjgmc");
		dsper = AdTools.genDfjgxxDataStore(dsper, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		rdo.put("dsper", dsper);
		rdo.put("dserr", dserr);
		return rdo;
	}
	
	
	/**
	 * 跳转到公安户籍数据对比实时查询页面相关信息
	 * 
	 * @author lan
	 * @date 创建时间 2019-04-25
	 * @since V1.0
	 */
	public DataObject fwdAdGahjsjdbssQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 * 公安户籍数据对比实时查询：解析报盘数据
	 * 
	 * @author lan
	 * @date 创建时间 2019-04-25
	 * @since V1.0
	 */
	public DataObject chkGahjsjdbssQueryUpload(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore(), dsTemp = new DataStore(), dsJbjg = new DataStore();
		DataStore dsRight = new DataStore();
		String errTest, shbzhm;
		int beginNum;
		
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "shbzhm", "身份证号码", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}

		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		if ("1".equals(ad3u1059)) {
			dsJbjg = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			dsJbjg = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		String jbjgid = "";
		for(int i = 0, rows = dsJbjg.rowCount(); i < rows; i++){
			jbjgid += "," + dsJbjg.getString(i, "value");
		}
		if(!"".equals(jbjgid) && jbjgid != null){
			jbjgid = jbjgid.substring(1);
		}

		sqlBF.setLength(0);
		sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, ");
		sqlBF.append("        a.zfrylb, a.dyffzt, a.sszfrq ");
		sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o ");
		sqlBF.append("  where a.dwdjid = o.dwdjid ");
		sqlBF.append("    and a.shbzhm = ? ");
		sqlBF.append("    and a.dyspbz = '1' ");
		if(!"".equals(jbjgid) && jbjgid != null){
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("           from ad3u.per_reg b ");
			sqlBF.append("          where a.dqdydjid = b.dydjid ");
			sqlBF.append("            and b.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid) + ")) ");
		}
		this.sql.setSql(sqlBF.toString());
		
		for (int i = 0, rowCount = ds.rowCount(); i < rowCount; i++) {
			errTest = "";
			shbzhm = StringUtil.trim(ds.getString(i, "shbzhm"));
			if (shbzhm == null || "".equals(shbzhm)) {
				errTest = errTest + "身份证号码不能为空；";
			} else {
				this.sql.setString(1, shbzhm);
				dsTemp = this.sql.executeQuery();
				if(dsTemp.rowCount() <= 0){
					errTest = errTest + "本地市不存在社会保障号码为[" + shbzhm + "]的离退休人员或遗属；";
				}
			}

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "shbzhm", shbzhm);
				dsError.put(row, "bz", errTest);
				continue;
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "dwbh", dsTemp.getString(0, "dwbh"));
				dsRight.put(rowR, "dwmc", dsTemp.getString(0, "dwmc"));
				dsRight.put(rowR, "ryid", dsTemp.getString(0, "ryid"));
				dsRight.put(rowR, "shbzhm", shbzhm);
				dsRight.put(rowR, "xm", dsTemp.getString(0, "xm"));
				dsRight.put(rowR, "zfrylb", dsTemp.getString(0, "zfrylb"));
				dsRight.put(rowR, "dyffzt", dsTemp.getString(0, "dyffzt"));
				dsRight.put(rowR, "sszfrq", dsTemp.getString(0, "sszfrq"));
			}
		}

		// 对正确的数据进行重复性检验
		beginNum = -1;
		shbzhm = "";
		dsRight = dsRight.sort("shbzhm");
		if (dsRight.rowCount() > 0) {
			shbzhm = StringUtil.trim(dsRight.getString(0, "shbzhm"));
		}

		for (int i = 1, n = dsRight.rowCount(); i < n; i++) {
			if (shbzhm.equals(StringUtil.trim(dsRight.getString(i, "shbzhm")))) {
				dsError.addRow(dsRight.getRow(i));
				dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复；");

				dsRight.delRow(i);

				n--;
				i--;
				beginNum = i;
			} else {
				shbzhm = StringUtil.trim(dsRight.getString(i, "shbzhm"));
				if (beginNum >= 0) {
					dsError.addRow(dsRight.getRow(beginNum));
					dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复；");

					dsRight.delRow(beginNum);

					n--;
					i--;
					beginNum = -1;
				}
			}
		}
		if (beginNum >= 0) {
			dsError.addRow(dsRight.getRow(beginNum));
			dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复；");

			dsRight.delRow(beginNum);
		}
		dsRight.sort("shbzhm");
		dsError.sort("shbzhm");
		
		rdo.clear();
		rdo.put("perinfo", dsRight);
		rdo.put("errinfo", dsError);
		return rdo;
	}
	/**
	 * 公安户籍数据对比实时查询
	 * 
	 * @author lan
	 * @date 创建时间 2019-04-25
	 * @since V1.0
	 */
	public DataObject queryGahjsjdbss(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject pdo = new DataObject(), rdo = new DataObject();
		DataStore dsTemp = new DataStore(), dsError = new DataStore(), dsRight = new DataStore(), dsPer = new DataStore();
		String cwxx, jbjgid, ltxqsrq = "", ltxzzrq = "";
		String dwbh, dwmc, ryid, shbzhm, xm, zfrylb, dyffzt, sszfrq;
		int row, rowR;

		SPrompt prompt = SPromptUtil.getSPrompt();
		String querylogid = QueryLogTool.saveQueryLog("公安户籍数据对比实时查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String bdryly = para.getString("bdryly"); // 比对人员来源0：查询到的退休人员，1：比对报盘文件中的数据
		jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid", ""));
		dyffzt = HsuTools.replaceC2QCQ(para.getString("dyffzt", ""));
		zfrylb = HsuTools.replaceC2QCQ(para.getString("zfrylb", ""));
		
		if(para.containsKey("ltxqsrq")){
			ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		}
		if(para.containsKey("ltxqsrq")){
			ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		}
		
		dsPer = para.getDataStore("dwBatStdPause", new DataStore());
		
		if(!"1".equals(bdryly)){
			if (jbjgid == null || "".equals(jbjgid)) {
				this.bizException("传入的经办机构为空！");
			}
			if (dyffzt == null || "".equals(dyffzt)) {
				this.bizException("传入的待遇发放状态为空！");
			}
			if (zfrylb == null || "".equals(zfrylb)) {
				this.bizException("传入的离退休类别为空！");
			}
			if (ltxqsrq == null || "".equals(ltxqsrq)) {
				this.bizException("传入的离退休起始日期为空！");
			}
			if (ltxzzrq == null || "".equals(ltxzzrq)) {
				this.bizException("传入的离退休终止日期为空！");
			}
			
			if (ltxqsrq.compareTo(ltxzzrq) > 0) {
				this.bizException("传入的离退休起始日期不能晚于离退休终止日期！");
			} else {
				SiTools.checkQsZzrq(ltxqsrq, ltxzzrq, 12); // 查询时间跨度不允许超过12个月
			}
			
			// 查询离退休人员、遗属信息
			sqlBF.setLength(0);
			sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, a.zfrylb, a.dyffzt, a.sszfrq ");
			sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o ");
			sqlBF.append("  where a.dwdjid = o.dwdjid ");
			sqlBF.append("    and a.sszfrq = 'A' "); // 职工
			sqlBF.append("    and a.dyspbz = '1' ");
			sqlBF.append("    and a.dyffzt in (" + dyffzt + ") ");
			sqlBF.append("    and a.zfrylb in (" + zfrylb + ") ");
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("           from ad3u.per_reg b ");
			sqlBF.append("          where a.dqdydjid = b.dydjid ");
			sqlBF.append("            and b.jbjgid in (" + jbjgid + ")) ");
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("           from ad3u.emp_info c ");
			sqlBF.append("          where a.ryid = c.ryid ");
			sqlBF.append("            and c.ltxrq between ? and ?) ");
			
			sqlBF.append(" union all ");
			sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, a.zfrylb, a.dyffzt, a.sszfrq ");
			sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o ");
			sqlBF.append("  where a.dwdjid = o.dwdjid ");
			sqlBF.append("    and a.sszfrq = 'B' "); // 遗属
			sqlBF.append("    and a.dyspbz = '1' ");
			sqlBF.append("    and a.dyffzt in (" + dyffzt + ") ");
			sqlBF.append("    and a.zfrylb in (" + zfrylb + ") ");
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("           from ad3u.per_reg b ");
			sqlBF.append("          where a.dqdydjid = b.dydjid ");
			sqlBF.append("            and b.jbjgid in (" + jbjgid + ")) ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ltxqsrq);
			this.sql.setString(2, ltxzzrq);
			dsPer = this.sql.executeQuery();
			
			if(dsPer.rowCount() <= 0){
				this.bizException("未查询到任何人员信息！");
			}
		} else {
			if(dsPer.rowCount() <= 0){
				this.bizException("传入的人员信息为空！");
			}
		}
		
		String licenseKey = HsuTools.getSystemPara("LCHJLicenseKey", "HSU", "");
		if (licenseKey == null || licenseKey.trim().isEmpty()) {
			this.bizException("从系统参数中获取的LCHJLicenseKey为空。");
		}

		String uddiaddr = HsuTools.getSystemPara("LCHJUddiAddr", "HSU", "");
		if (uddiaddr == null || uddiaddr.trim().isEmpty()) {
			this.bizException("从系统参数中获取的LCHJUddiAddr为空。");
		}

		boolean isComplete = true;
		int rowCount = dsPer.rowCount();
		prompt.setTotalSteps(rowCount);
		
		for(int i = 0; i < rowCount; i++){
			cwxx = "";
			dwbh = dsPer.getString(i, "dwbh");
			dwmc = dsPer.getString(i, "dwmc");
			ryid = dsPer.getString(i, "ryid");
			shbzhm = dsPer.getString(i, "shbzhm");
			xm = dsPer.getString(i, "xm");
			zfrylb = dsPer.getString(i, "zfrylb");
			dyffzt = dsPer.getString(i, "dyffzt");
			sszfrq = dsPer.getString(i, "sszfrq");
			
			if (prompt.isTerminating()) {
				isComplete = false;
				prompt.terminate("任务已被终止!");
				break;
			}
			
			prompt.prompt("共" + rowCount + "个参保人，正在查询第" + (i + 1) + "个参保人【" + shbzhm + "】的公安户籍数据对比情况...");
			
			// 查询省公安信息--户籍信息
			try {
				pdo.clear();
				pdo.put("gmsfhm", shbzhm);
				pdo = LCHJInvokService.invokeService(uddiaddr, licenseKey,
						"SZGAService", "queryPolPersonInfo", pdo);
			} catch (Exception e) {
				cwxx = "调用接口查询户籍信息出错：" + e.getMessage();
			}
			
			if(cwxx != null && !"".equals(cwxx)){
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "shbzhm", shbzhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "cwxx", cwxx);
			} else{
				dsTemp.clear();
				if (pdo.containsKey("output")) {
					dsTemp = pdo.getDataStore("output");
				}
				
				if(dsTemp.rowCount() > 0){
					dsRight.addRow();
					rowR = dsRight.rowCount() - 1;
					
					dsRight.put(rowR, "dwbh", dwbh);
					dsRight.put(rowR, "dwmc", dwmc);
					dsRight.put(rowR, "ryid", ryid);
					dsRight.put(rowR, "shbzhm", shbzhm);
					dsRight.put(rowR, "xm", xm);
					dsRight.put(rowR, "zfrylb", zfrylb);
					dsRight.put(rowR, "dyffzt", dyffzt);
					dsRight.put(rowR, "sszfrq", sszfrq);
					
					dsRight.put(rowR, "hh", dsTemp.getString(0, "hh"));
					dsRight.put(rowR, "yhzgxdm", dsTemp.getString(0, "yhzgxdm"));
					dsRight.put(rowR, "gahjxm", dsTemp.getString(0, "xm"));
					dsRight.put(rowR, "cym", dsTemp.getString(0, "cym"));
					dsRight.put(rowR, "xbdm", dsTemp.getString(0, "xbdm"));
					dsRight.put(rowR, "mzdm", dsTemp.getString(0, "mzdm"));
					dsRight.put(rowR, "csrq", dsTemp.getString(0, "csrq"));
					dsRight.put(rowR, "hjdz_ssxqdm", dsTemp.getString(0, "hjdz_ssxqdm"));
					dsRight.put(rowR, "hjdz_qhnxxdz", dsTemp.getString(0, "hjdz_qhnxxdz"));
					dsRight.put(rowR, "jg_ssxqdm", dsTemp.getString(0, "jg_ssxqdm"));
					dsRight.put(rowR, "jg_qhnxxdz", dsTemp.getString(0, "jg_qhnxxdz"));
					dsRight.put(rowR, "csd_ssxqdm", dsTemp.getString(0, "csd_ssxqdm"));
					dsRight.put(rowR, "gmsfhm", dsTemp.getString(0, "gmsfhm"));
				} else {
					// 放入不合法数据
					dsError.addRow();
					row = dsError.rowCount() - 1;
					dsError.put(row, "shbzhm", shbzhm);
					dsError.put(row, "cwxx", "未查询到相关数据。");
				}
			}
			prompt.moveForword(1);
		}
		
		if (isComplete) {
			prompt.prompt("查询公安户籍数据对比情况完成"); // 向PROMPT区输出提示信息
			prompt.complete();
			prompt.close();
		}
		
		dsRight.sort("shbzhm").sort("dwbh");
		dsError.sort("shbzhm");
		
		QueryLogTool.updateQueryLog(querylogid, dsRight.rowCount());

		rdo.put("perbdinfo", dsRight);
		rdo.put("errbdinfo", dsError);
		return rdo;
	}
	/**
	 * 跳转到民政殡葬数据对比实时查询页面相关信息
	 * 
	 * @author lan
	 * @date 创建时间 2019-04-25
	 * @since V1.0
	 */
	public DataObject fwdAdMzbzsjdbssQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 * 民政殡葬数据对比实时查询：解析报盘数据
	 * 
	 * @author lan
	 * @date 创建时间 2019-04-25
	 * @since V1.0
	 */
	public DataObject chkMzbzsjdbssQueryUpload(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		int row, rowR;
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		DataStore tableInfo = new DataStore();
		DataStore ds;
		DataObject rdo = new DataObject();
		DataStore dsError = new DataStore(), dsTemp = new DataStore(), dsJbjg = new DataStore();
		DataStore dsRight = new DataStore();
		String errTest, shbzhm;
		int beginNum;

		boolean isComplete = true;
		SPrompt prompt = SPromptUtil.getSPrompt();
		
		// 构造excel结构
		file = (CommonsMultipartFile) para.getObject("file");
		setTableInfo(tableInfo, 0, "shbzhm", "身份证号码", "String");
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);

		// 上传文件中的数据
		ds = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		ds = ExcelTool.removeBlankRowWithTrim(ds); // 去除空行
		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (ds == null) {
			prompt.complete();
			prompt.close();
			this.bizException("上传文件为空！");
		}
		if (ds.rowCount() == 0) {
			prompt.complete();
			prompt.close();
			this.bizException("文件中没有数据，请检查！");
		}
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		if ("1".equals(ad3u1059)) {
			dsJbjg = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			dsJbjg = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		String jbjgid = "";
		for(int i = 0, rows = dsJbjg.rowCount(); i < rows; i++){
			jbjgid += "," + dsJbjg.getString(i, "value");
		}
		if(!"".equals(jbjgid) && jbjgid != null){
			jbjgid = jbjgid.substring(1);
		}
		

		sqlBF.setLength(0);
		sqlBF.append(" select xm ");
		sqlBF.append("   from ad3u.per_info a "); // si3u.gs_fis_cremation_info_sum：淄博本地根据dbLink建立的同义词，开发库用表
		sqlBF.append("  where a.shbzhm = ? ");
		sqlBF.append("    and a.dyspbz = '1' ");
		String sqlPer = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, ");
		sqlBF.append("        a.zfrylb, a.dyffzt, a.sszfrq, d.name mzbzname, d.create_organ_name bygmc, ");
		sqlBF.append("        d.id_card mzbzsfzh, death_date swrq, create_time gxsj, start_time hhsj ");
		sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o, si3u.gs_fis_cremation_info_sum d "); // si3u.gs_fis_cremation_info_sum：淄博本地根据dbLink建立的同义词，开发库用表
		sqlBF.append("  where a.dwdjid = o.dwdjid ");
		sqlBF.append("    and a.shbzhm = d.id_card ");
		sqlBF.append("    and a.shbzhm = ? ");
		sqlBF.append("    and a.dyspbz = '1' ");
		if(!"".equals(jbjgid) && jbjgid != null){
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("           from ad3u.per_reg b ");
			sqlBF.append("          where a.dqdydjid = b.dydjid ");
			sqlBF.append("            and b.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid) + ")) ");
		}
		String sqlMzbzInfo = sqlBF.toString();
		
		int rowCount = ds.rowCount();
		prompt.setTotalSteps(rowCount);
		
		for (int i = 0; i < rowCount; i++) {
			errTest = "";
			shbzhm = StringUtil.trim(ds.getString(i, "shbzhm"));
			
			if (prompt.isTerminating()) {
				isComplete = false;
				prompt.terminate("任务已被终止!");
				break;
			}
			
			prompt.prompt("共" + rowCount + "个参保人，正在查询第" + (i + 1) + "个参保人【" + shbzhm + "】的民政殡葬数据对比情况...");
			
			
			if (shbzhm == null || "".equals(shbzhm)) {
				errTest = errTest + "身份证号码不能为空；";
			} else {
				this.sql.setSql(sqlPer);
				this.sql.setString(1, shbzhm);
				dsTemp = this.sql.executeQuery();
				
				if(dsTemp.rowCount() <= 0){
					errTest = errTest + "本地市不存在社会保障号码为[" + shbzhm + "]的离退休人员或遗属！";
				} else {
					DataObject pdo = new DataObject();
					pdo.put("xm", dsTemp.getString(0, "xm"));
					pdo.put("shbzhm", shbzhm);
					pdo.put("jbjgid", jbjgid);
					pdo.put("sqlMzbzInfo", sqlMzbzInfo);
					pdo = this.doMethod(this.getBizInstitution(), "chkMzbzsjdbssQueryPer", pdo, this.getUser());
					String msg = pdo.getString("msgstr", "");
					if (msg != null && !"".equals(msg)) {
						errTest = errTest + msg;
					} else {
						dsTemp = pdo.getDataStore("dstemp");
						if (dsTemp.rowCount() <= 0) {
							errTest = errTest + "民政殡葬数据中无此参保人信息！" + msg;
						}
					}
				}
			}

			if (!"".equals(errTest)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "shbzhm", shbzhm);
				dsError.put(row, "bz", errTest);
			} else {
				dsRight.addRow();
				rowR = dsRight.rowCount() - 1;
				dsRight.put(rowR, "dwbh", dsTemp.getString(0, "dwbh"));
				dsRight.put(rowR, "dwmc", dsTemp.getString(0, "dwmc"));
				dsRight.put(rowR, "ryid", dsTemp.getString(0, "ryid"));
				dsRight.put(rowR, "shbzhm", shbzhm);
				dsRight.put(rowR, "xm", dsTemp.getString(0, "xm"));
				
				dsRight.put(rowR, "zfrylb", dsTemp.getString(0, "zfrylb"));
				dsRight.put(rowR, "dyffzt", dsTemp.getString(0, "dyffzt"));
				dsRight.put(rowR, "sszfrq", dsTemp.getString(0, "sszfrq"));
				dsRight.put(rowR, "mzbzname", dsTemp.getString(0, "mzbzname"));
				dsRight.put(rowR, "bygmc", dsTemp.getString(0, "bygmc"));
				
				dsRight.put(rowR, "mzbzsfzh", dsTemp.getString(0, "mzbzsfzh"));
				dsRight.put(rowR, "swrq", dsTemp.getString(0, "swrq"));
				dsRight.put(rowR, "gxsj", dsTemp.getString(0, "gxsj"));
				dsRight.put(rowR, "hhsj", dsTemp.getString(0, "hhsj"));
			}
			prompt.moveForword(1);
		}
		
		if (isComplete) {
			prompt.prompt("查询民政殡葬数据对比情况完成"); // 向PROMPT区输出提示信息
			prompt.complete();
			prompt.close();
		}

		// 对正确的数据进行重复性检验
		beginNum = -1;
		shbzhm = "";
		dsRight = dsRight.sort("shbzhm");
		if (dsRight.rowCount() > 0) {
			shbzhm = StringUtil.trim(dsRight.getString(0, "shbzhm"));
		}

		for (int i = 1, n = dsRight.rowCount(); i < n; i++) {
			if (shbzhm.equals(StringUtil.trim(dsRight.getString(i, "shbzhm")))) {
				dsError.addRow(dsRight.getRow(i));
				dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复；");

				dsRight.delRow(i);

				n--;
				i--;
				beginNum = i;
			} else {
				shbzhm = StringUtil.trim(dsRight.getString(i, "shbzhm"));
				if (beginNum >= 0) {
					dsError.addRow(dsRight.getRow(beginNum));
					dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复；");

					dsRight.delRow(beginNum);

					n--;
					i--;
					beginNum = -1;
				}
			}
		}
		if (beginNum >= 0) {
			dsError.addRow(dsRight.getRow(beginNum));
			dsError.put(dsError.rowCount() - 1, "bz", "个人身份证号码重复；");

			dsRight.delRow(beginNum);
		}
		dsRight.sort("shbzhm");
		dsError.sort("shbzhm");
		
		rdo.clear();
		rdo.put("perinfo", dsRight);
		rdo.put("errinfo", dsError);
		return rdo;
	}
	/**
	 * 民政殡葬数据对比实时查询
	 * 
	 * @author lan
	 * @date 创建时间 2019-04-25
	 * @since V1.0
	 */
	public DataObject queryMzbzsjdbss(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();
		DataStore dsPer = new DataStore();
		String jbjgid, ltxqsrq = "", ltxzzrq = "";
		String zfrylb, dyffzt;

		String querylogid = QueryLogTool.saveQueryLog("民政殡葬数据对比实时查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		dyffzt = HsuTools.replaceC2QCQ(para.getString("dyffzt"));
		zfrylb = HsuTools.replaceC2QCQ(para.getString("zfrylb"));
		ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空！");
		}
		if (dyffzt == null || "".equals(dyffzt)) {
			this.bizException("传入的待遇发放状态为空！");
		}
		if (zfrylb == null || "".equals(zfrylb)) {
			this.bizException("传入的离退休类别为空！");
		}
		if (ltxqsrq == null || "".equals(ltxqsrq)) {
			this.bizException("传入的离退休起始日期为空！");
		}
		if (ltxzzrq == null || "".equals(ltxzzrq)) {
			this.bizException("传入的离退休终止日期为空！");
		}
		
		if (ltxqsrq.compareTo(ltxzzrq) > 0) {
			this.bizException("传入的离退休起始日期不能晚于离退休终止日期！");
		} else {
			SiTools.checkQsZzrq(ltxqsrq, ltxzzrq, 12); // 查询时间跨度不允许超过12个月
		}
		
		// 查询离退休人员、遗属信息
		sqlBF.setLength(0);
		sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, ");
		sqlBF.append("        a.zfrylb, a.dyffzt, a.sszfrq, d.name mzbzname, d.create_organ_name bygmc, ");
		sqlBF.append("        d.id_card mzbzsfzh, death_date swrq, create_time gxsj, start_time hhsj ");
		sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o, si3u.gs_fis_cremation_info_sum d "); // si3u.gs_fis_cremation_info_sum：淄博本地根据dbLink建立的同义词，开发库用表
		sqlBF.append("  where a.dwdjid = o.dwdjid ");
		sqlBF.append("    and a.shbzhm = d.id_card ");
		sqlBF.append("    and a.sszfrq = 'A' "); // 职工
		sqlBF.append("    and a.dyspbz = '1' ");
		sqlBF.append("    and a.dyffzt in (" + dyffzt + ") ");
		sqlBF.append("    and a.zfrylb in (" + zfrylb + ") ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.per_reg b ");
		sqlBF.append("          where a.dqdydjid = b.dydjid ");
		sqlBF.append("            and b.jbjgid in (" + jbjgid + ")) ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.emp_info c ");
		sqlBF.append("          where a.ryid = c.ryid ");
		sqlBF.append("            and c.ltxrq between ? and ?) ");
		
		sqlBF.append(" union all ");
		sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, ");
		sqlBF.append("        a.zfrylb, a.dyffzt, a.sszfrq, d.name mzbzname, d.create_organ_name bygmc, ");
		sqlBF.append("        d.id_card mzbzsfzh, death_date swrq, create_time gxsj, start_time hhsj ");
		sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o, si3u.gs_fis_cremation_info_sum d "); // si3u.gs_fis_cremation_info_sum：淄博本地根据dbLink建立的同义词，开发库用表
		sqlBF.append("  where a.dwdjid = o.dwdjid ");
		sqlBF.append("    and a.shbzhm = d.id_card ");
		sqlBF.append("    and a.sszfrq = 'B' "); // 遗属
		sqlBF.append("    and a.dyspbz = '1' ");
		sqlBF.append("    and a.dyffzt in (" + dyffzt + ") ");
		sqlBF.append("    and a.zfrylb in (" + zfrylb + ") ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.per_reg b ");
		sqlBF.append("          where a.dqdydjid = b.dydjid ");
		sqlBF.append("            and b.jbjgid in (" + jbjgid + ")) ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ltxqsrq);
		this.sql.setString(2, ltxzzrq);
		dsPer = this.sql.executeQuery();
		
		if(dsPer.rowCount() <= 0){
			this.bizException("未查询到任何人员信息！");
		}
		
		dsPer.sort("shbzhm").sort("dwbh");
		
		QueryLogTool.updateQueryLog(querylogid, dsPer.rowCount());

		rdo.clear();
		rdo.put("perbdinfo", dsPer);
		return rdo;
	}
	
	/**
	 * 民政殡葬数据对比实时查询
	 *
	 * @author 	LQ
	 * @date 创建时间 20201217
	 * @since V1.0
	 */
	public DataObject queryMzbzsjdbss_3704(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();
		DataStore dsPer = new DataStore();
		DataStore temprds = new DataStore();
		DataStore perrds = new DataStore();
		DataObject tempdo = new DataObject();
		DataObject temprdo = new DataObject();
		String jbjgid, ltxqsrq = "", ltxzzrq = "";
		String zfrylb, dyffzt;

		String querylogid = QueryLogTool.saveQueryLog("民政殡葬数据对比实时查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		dyffzt = HsuTools.replaceC2QCQ(para.getString("dyffzt"));
		zfrylb = HsuTools.replaceC2QCQ(para.getString("zfrylb"));
		ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空！");
		}
		if (dyffzt == null || "".equals(dyffzt)) {
			this.bizException("传入的待遇发放状态为空！");
		}
		if (zfrylb == null || "".equals(zfrylb)) {
			this.bizException("传入的离退休类别为空！");
		}
		if (ltxqsrq == null || "".equals(ltxqsrq)) {
			this.bizException("传入的离退休起始日期为空！");
		}
		if (ltxzzrq == null || "".equals(ltxzzrq)) {
			this.bizException("传入的离退休终止日期为空！");
		}
		
		if (ltxqsrq.compareTo(ltxzzrq) > 0) {
			this.bizException("传入的离退休起始日期不能晚于离退休终止日期！");
		} else {
			SiTools.checkQsZzrq(ltxqsrq, ltxzzrq, 12); // 查询时间跨度不允许超过12个月
		}

		LanePromptUtil.setTotalSteps(100);
		LanePromptUtil.promptToTrace("查询开始");

		// 查询离退休人员、遗属信息
		sqlBF.setLength(0);
		sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, ");
		sqlBF.append("        a.zfrylb, a.dyffzt, a.sszfrq ");
		sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o "); 
		sqlBF.append("  where a.dwdjid = o.dwdjid ");
		sqlBF.append("    and a.sszfrq = 'A' "); // 职工
		sqlBF.append("    and a.dyspbz = '1' ");
		sqlBF.append("    and a.dyffzt in (" + dyffzt + ") ");
		sqlBF.append("    and a.zfrylb in (" + zfrylb + ") ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.per_reg b ");
		sqlBF.append("          where a.dqdydjid = b.dydjid ");
		sqlBF.append("            and b.jbjgid in (" + jbjgid + ")) ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.emp_info c ");
		sqlBF.append("          where a.ryid = c.ryid ");
		sqlBF.append("            and c.ltxrq between ? and ?) ");
		sqlBF.append(" union all ");
		sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, ");
		sqlBF.append("        a.zfrylb, a.dyffzt, a.sszfrq ");
		sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o ");  
		sqlBF.append("  where a.dwdjid = o.dwdjid ");
		sqlBF.append("    and a.sszfrq = 'B' "); // 遗属
		sqlBF.append("    and a.dyspbz = '1' ");
		sqlBF.append("    and a.dyffzt in (" + dyffzt + ") ");
		sqlBF.append("    and a.zfrylb in (" + zfrylb + ") ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("           from ad3u.per_reg b ");
		sqlBF.append("          where a.dqdydjid = b.dydjid ");
		sqlBF.append("            and b.jbjgid in (" + jbjgid + ")) ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ltxqsrq);
		this.sql.setString(2, ltxzzrq);
		dsPer = this.sql.executeQuery();
		
		if(dsPer.rowCount() <= 0){
			this.bizException("未查询到任何人员信息！");
		}

		LanePromptUtil.setTotalSteps(dsPer.rowCount());
		LanePromptUtil.promptToTrace("查询开始");

		String esbid = "";
		String rsxtid = HsuTools.getRsxtidByJgid(this.getBizInstitution());
		if (rsxtid != null && rsxtid.length() >= 4) {
			esbid = rsxtid.substring(0, 4);
		}

		String licenseKey = HsuTools.getSystemPara("LCHJLicenseKey", "HSU", "");
		if (licenseKey == null || licenseKey.trim().isEmpty()) {
			this.bizException("从系统参数中获取的LCHJLicenseKey为空。");
		}

		String uddiaddr = HsuTools.getSystemPara("LCHJUddiAddr", "HSU", "");
		if (uddiaddr == null || uddiaddr.trim().isEmpty()) {
			this.bizException("从系统参数中获取的LCHJUddiAddr为空。");
		}

		for (int i = 0; i < dsPer.rowCount(); i++) {
			String yxzjhmTemp = dsPer.getString(i, "shbzhm");
			String xmTemp = dsPer.getString(i, "xm");
			LanePromptUtil.promptToTrace("正在查询第" + (i + 1) + "条退休/遗属人员丧葬信息，一共"
					+ dsPer.rowCount() + "条");
			LanePromptUtil.moveForward(1);

			try {
				tempdo.clear();
				tempdo.put("id_card", yxzjhmTemp);
				tempdo.put("name", xmTemp);
				//调整调民政厅接口 mod by gaoyue  20200118
				tempdo = LCHJInvokService.invokeService(uddiaddr, licenseKey, "SZMZService", "queryBzxx", tempdo);

			} catch (Exception e) {
				this.bizException("调用接口查询省民政厅殡葬信息出错：" + e.getMessage());
			}

			if (tempdo.containsKey("output")) {
				temprds = tempdo.getDataStore("output");
			}

			if (temprds.rowCount() < 1) {
				continue;
			}

			String cremationTime = temprds.getDateToString(0, "crematio_time", "yyyyMMdd");
			String createOrganName = temprds.getString(0, "create_organ_name");
			String deathdate = temprds.getString(0, "death_date");
			perrds.addRow(dsPer.getRow(i));
			perrds.put(perrds.rowCount()-1, "mzbzsfzh", yxzjhmTemp);
			perrds.put(perrds.rowCount()-1, "mzbzname", xmTemp);
			perrds.put(perrds.rowCount()-1, "hhsj", cremationTime);
			perrds.put(perrds.rowCount()-1, "bygmc", createOrganName);
			perrds.put(perrds.rowCount()-1, "swrq", deathdate);
		}
		// 指示进度条工作完成
		LanePromptUtil.complete();
		LanePromptUtil.end();
		
		dsPer.sort("shbzhm").sort("dwbh");
		QueryLogTool.updateQueryLog(querylogid, dsPer.rowCount());

		rdo.clear();
		rdo.put("perbdinfo", perrds);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.
	 * 跳转到省卫生健康委死亡医学证明查询准备数据
	 * @author xurugang
	 * @date 创建时间 2019年4月22日
	 * @since V1.0
	 */
	public final DataObject fwdAdSwsjkwswyxzmQuery(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dsSjly = new DataStore();
		DataStore ds = new DataStore();
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		dsSjly.put(0, "value", "1");
		dsSjly.put(0, "content", "公安部");
		dsSjly.put(1, "value", "2");
		dsSjly.put(1, "content", "民政部");
		dsSjly.put(2, "value", "3");
		dsSjly.put(2, "content", "卫计委");
		dsSjly.put(3, "value", "4");
		dsSjly.put(3, "content", "民政厅");

		rdo.put("dsjbjg", ds);
		rdo.put("sjlyds", dsSjly);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.
	 * 获取省卫生健康委死亡医学证明数据
	 * @author xurugang
	 * @date 创建时间 2019年4月22日
	 * @since V1.0
	 */
	public final DataObject getSwsjkwswyxzm(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore dsSw = new DataStore();
		DataStore output = new DataStore();
		DataStore dsMzb = new DataStore();

		String jbjgid = para.getString("jbjgid");
		String dfjglb = para.getString("ffztlb");
		String dfjgid = para.getString("ffztid");
		String sjlyp = para.getString("sjly");
		String sfzhmp = para.getString("shbzhm");
		
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构id为空！");
		}
		
		String licenseKey = HsuTools.getSystemPara("LCHJLicenseKey", "HSU", "");
		if (licenseKey == null || licenseKey.trim().isEmpty()) {
			this.bizException("从系统参数中获取的LCHJLicenseKey为空。");
		}

		String uddiaddr = HsuTools.getSystemPara("LCHJUddiAddr", "HSU", "");
		if (uddiaddr == null || uddiaddr.trim().isEmpty()) {
			this.bizException("从系统参数中获取的LCHJUddiAddr为空。");
		}

		String userid = this.getUser().getUserid();
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select sfzhm, yhxm xm ");
		sqlBF.append("   from be3u.sysuser ");
		sqlBF.append("  where yhid = ? ");
		sql.setSql(sqlBF.toString());
		sql.setString(1, userid);
		DataStore vds = sql.executeQuery();

		if (vds.rowCount() <= 0) {
			this.bizException("系统中没有查到操作员的信息。");
		}
		
		String czy_sfzhm = vds.getString(0, "sfzhm");
		String czy_xm = vds.getString(0, "xm");
		
		sqlBF.setLength(0);
		sqlBF.append(" select b.dwbh dwbh, b.cbdwmc dwmc, a.dyffzt dyffzt, a.sqid sqid, a.xm xm, ");
		sqlBF.append("        a.zfrylb zfrylb, a.xb xb, a.shbzhm shbzhm, a.zfrylb zfrylb, b.jbjgid jbjgid, ");
		sqlBF.append("        a.dfjglb dfjglb, a.dfjgid dfjgid, a.yhzh yhzh, c.jyrq jyrq, to_char(c.bljysj,'yyyyMMdd') bljyrq, ");
		sqlBF.append("        c.blzyyy blzyyy, a.ryid ryid, a.dyxsksny dyxsksny ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        si3u.orgn_reg b, ");
		sqlBF.append("        ad3u.per_reg c ");
		sqlBF.append("  where a.dwdjid = b.dwdjid  ");
		sqlBF.append("    and a.dqdydjid = c.dydjid  ");
		sqlBF.append("    and a.dyffzt in ('1', '2') ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("    and b.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(")");
		}
		if (dfjglb != null && !"".equals(dfjglb)) {
			sqlBF.append("    and a.dfjglb = ").append("'" + dfjglb + "'");
		}
		if (dfjgid != null && !"".equals(dfjgid)) {
			sqlBF.append("    and a.dfjgid = ").append("'" + dfjgid + "'");
		}
		if (sfzhmp != null && !"".equals(sfzhmp)) {
			sqlBF.append("    and a.shbzhm = ").append("'" + sfzhmp + "'");
		}
		
		this.sql.setSql(sqlBF.toString());
		DataStore dsPer = this.sql.executeQuery();

		for (int i = 0; i < dsPer.rowCount(); i++) {
			String xm = dsPer.getString(i, "xm");
			String sfzhm = dsPer.getString(i, "shbzhm");
			String dfjgidb = dsPer.getString(i, "dfjgid");
			
			sqlBF.setLength(0);
			sqlBF.append(" select distinct dfjgid, dfjgmc, dfjgbh ");
			sqlBF.append("   from be3u.provide_natl b ");
			sqlBF.append("  where b.dfjgid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dfjgidb);
			DataStore dsDfjg = this.sql.executeQuery();
			
			String dfjgmc = "",dfjgbh = "";
			if(dsDfjg.rowCount()>0) {
				dfjgmc = dsDfjg.getString(0, "dfjgmc");
				dfjgbh = dsDfjg.getString(0, "dfjgbh");
			}
			
			if (sjlyp == null || "".equals(sjlyp) || sjlyp.contains("1")) {// 公安部
				try {
					pdo.clear();
					pdo.put("GMSFHM", sfzhm);
					pdo.put("XM", xm);
					pdo.put("QQRXM", czy_xm);
					pdo.put("QQRGMSFHM", czy_sfzhm);
					pdo = LCHJInvokService.invokeService(uddiaddr, licenseKey, "GABService", "queryRkkjzxx", pdo);

					if (pdo.containsKey("output")) {
						output = pdo.getDataStore("output");
						if (output.rowCount() > 0) {
							String sfsw = output.getString(0, "swbs");

							if ("1".equals(sfsw)) {
								dsSw.addRow(dsPer.getRow(i));
								dsSw.put(dsSw.rowCount() - 1, "sjly", "1");
								dsSw.put(dsSw.rowCount() - 1, "sfsw", "是");
								dsSw.put(dsSw.rowCount() - 1, "dfjgbh", dfjgbh);
								dsSw.put(dsSw.rowCount() - 1, "dfjgmc", dfjgmc);
								continue;
							}
						}
					}
				} catch (Exception e) {
					this.bizException("调用接口查询公安部信息出错：" + e.getMessage());
				}
			}

			if (sjlyp == null || "".equals(sjlyp) || sjlyp.contains("2")) {// 民政部
				
				// 民政信息查询
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(d.swrq, to_char(d.hhsj, 'yyyyMMdd')) swrq ");
				sqlBF.append("   from si3u.mz_swryxx d ");
				sqlBF.append("  where d.sfzhm = ? ");
				sqlBF.append("    and d.deleteflag = '0' ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, sfzhm);
				dsMzb = this.sql.executeQuery();
				
				if (dsMzb.rowCount() > 0) {
					String swrq = dsMzb.getString(0, "swrq");
					
					if (swrq != null && !"".equals(swrq)) {
						dsSw.addRow(dsPer.getRow(i));
						dsSw.put(dsSw.rowCount() - 1, "sjly", "2");
						dsSw.put(dsSw.rowCount() - 1, "sfsw", "是");
						dsSw.put(dsSw.rowCount() - 1, "swrq", swrq);
						dsSw.put(dsSw.rowCount() - 1, "dfjgbh", dfjgbh);
						dsSw.put(dsSw.rowCount() - 1, "dfjgmc", dfjgmc);
						continue;
					}
				}
			}

			if (sjlyp == null || "".equals(sjlyp) || sjlyp.contains("3")) {// 卫计委
				try {
					pdo.clear();
					pdo.put("certificateHolderCode", sfzhm);
					pdo.put("certificateHolder", xm);
					pdo = LCHJInvokService.invokeService(uddiaddr, licenseKey, "SZWJWDZZZService", "querySwyxzmbyCyzt", pdo);
					
					if (pdo.containsKey("output")) {
						output = pdo.getDataStore("output");
						if (output.rowCount() > 0) {
							String swrq = output.getString(0, "death_date");

							if (swrq != null && !"".equals(swrq)) {
								dsSw.addRow(dsPer.getRow(i));
								dsSw.put(dsSw.rowCount() - 1, "sjly", "3");
								dsSw.put(dsSw.rowCount() - 1, "sfsw", "是");
								dsSw.put(dsSw.rowCount() - 1, "swrq", swrq);
								dsSw.put(dsSw.rowCount() - 1, "dfjgbh", dfjgbh);
								dsSw.put(dsSw.rowCount() - 1, "dfjgmc", dfjgmc);
								continue;
							}
						}
					}
				} catch (Exception e) {
					this.bizException("调用接口查询省卫生健康委死亡医学证明出错：" + e.getMessage());
				}
			}
			if (sjlyp == null || "".equals(sjlyp) || sjlyp.contains("4")) {// 民政厅
				try {
					pdo.clear();
					pdo.put("id_card", sfzhm);
					pdo.put("name", xm);
					pdo = LCHJInvokService.invokeService(uddiaddr, licenseKey,
							"SZMZService", "queryBzxx", pdo);
					if (pdo.containsKey("output")) {
						output = pdo.getDataStore("output");
						if (output.rowCount() > 0) {
							String swrq = output.getString(0, "death_date");

							if (swrq != null && !"".equals(swrq)) {
								swrq = swrq.replace("-", "");
								dsSw.addRow(dsPer.getRow(i));
								dsSw.put(dsSw.rowCount() - 1, "sjly", "4");
								dsSw.put(dsSw.rowCount() - 1, "sfsw", "是");
								dsSw.put(dsSw.rowCount() - 1, "swrq", swrq);
								dsSw.put(dsSw.rowCount() - 1, "dfjgbh", dfjgbh);
								dsSw.put(dsSw.rowCount() - 1, "dfjgmc", dfjgmc);
								continue;
							}
						}
					}
				} catch (Exception e) {
					this.bizException("调用接口查询省民政厅殡葬信息出错：" + e.getMessage());
				}
			}

		}

		rdo.clear();
		rdo.put("dssw", dsSw);
		return rdo;
	}
	/**
	 * 社保卡发放信息查询
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-6-3
	 * @since V1.0
	 */
	public DataObject fwdAdSbkffryxxcx(DataObject para) throws Exception{
		DataObject rdo = new DataObject();
		// 操作员有权限的经办机构 支持区域一体化
		DataStore dsjbjg = SiTools.getOperateAndSnkqyJbjgByUser(this.getUser());
		
		rdo.put("dsjbjg", dsjbjg);
		return rdo;
	}
	/** 
	 * 社保卡发放信息查询
	 * 方法简介.
	 * @author 葛大帅
	 * @date 创建时间 2019-6-3
	 * @since V1.0
	 */
	public DataObject queryAdSbkffryxxInfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		DataStore ds = new DataStore();
		// 接参
		String dfjgid = para.getString("ffztid"); // 代发机构
		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("请录入代发机构编号！");
		}
		String klb = para.getString("klb"); // 卡类别 1：社保卡 2：金融卡
		if (klb == null || "".equals(klb)) {
			this.bizException("请选择卡类别！");
		}
		String ltxlb = para.getString("ltxlb"); // 离退休类别
		String jbjgid = para.getString("jbjgid");
		if (jbjgid == null || "".equals(jbjgid)) { // 有权限的经办机构
			jbjgid = SiTools.getSjJbjgAndSnkqyJbjgstrByUser(this.getUser());
		}
		String dwdjid = para.getString("dwdjid");
		String cxfs = para.getString("cxfs");

		// 离退休起始年月，终止年月
		String qsny = para.getDateToString("qsny", "yyyyMM");
		String zzny = para.getDateToString("zzny", "yyyyMM");
		if (qsny == null || "".equals(qsny)) {
			qsny = "199001";
		}
		if (zzny == null || "".equals(zzny)) {
			zzny = "205012";
		}

		sqlBF.setLength(0);
		if ("1".equals(cxfs)) {// 社保卡发放补充信息
			sqlBF.append("  (select 1");
			sqlBF.append("        from ad3u.per_cmpl l");
			sqlBF.append("       where l.bcxmbh = 'SBKFF'");
			sqlBF.append("         and nvl(l.bcxmz, '0') = '1'");
			sqlBF.append("         and l.ryid = a.ryid) ");
		} else { // 根据实际情况查询
			sqlBF.append("  (select 1");
			sqlBF.append("       from sc3u.card_natl c, be3u.provide_natl p");
			sqlBF.append("      where c.ryid = a.ryid");
			sqlBF.append("        and instr('1', c.kzt) > 0");
			sqlBF.append("        and p.sbkyhbh = c.yhbh");
			sqlBF.append("        and a.dfjgid = p.dfjgid");
			sqlBF.append("        and a.yhzh = c.kctzh) ");
		}
		String sqlstr = sqlBF.toString();

		sqlBF.setLength(0);
		sqlBF.append("select a.shbzhm, a.xb, a.csrq, a.dyxsksny, a.ryid,");
		sqlBF.append("       a.xm, a.yhzh, o.dwbh, o.cbdwmc, o.jbjgid,");
		sqlBF.append("       e.ltxlb, e.ltxrq");
		sqlBF.append("  from ad3u.per_info a, si3u.orgn_reg o, ad3u.emp_info e");
		sqlBF.append(" where a.dwdjid = o.dwdjid");
		sqlBF.append("   and a.ryid = e.ryid");
		sqlBF.append("   and a.dfjgid = ?");
		sqlBF.append("   and a.sszfrq = 'A'");
		sqlBF.append("   and substr(e.ltxrq,1,6) between ? and ? ");
		sqlBF.append("   and o.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid)
				+ ")");
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and o.dwdjid = '" + dwdjid + "'");
		}
		if (ltxlb != null && !"".equals(ltxlb)) {
			sqlBF.append("   and e.ltxlb in (" + HsuTools.replaceC2QCQ(ltxlb)
					+ ")");
		}
		if ("1".equals(klb)) { // 社保卡
			sqlBF.append("   and exists " + sqlstr);
		} else { // 金融卡
			sqlBF.append("   and not exists " + sqlstr);
		}

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjgid);
		this.sql.setString(2, qsny);
		this.sql.setString(3, zzny);

		ds = this.sql.executeQuery();

		ds.sort("jbjgid,dwbh,shbzhm");
		// 经办机构
		ds = HsuTools.genJbjgxxDataStore(ds, "jbjgid", "jbjgbh", "jbjgmc");

		rdo.put("ds", ds);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.查询卫计委死亡医学证明信息
	 *
	 * @author szh
	 * @date 创建时间 2019-6-14
	 * @since V1.0
	 */
	public DataObject queryWjwswyxzmxx(DataObject para) throws Exception {

		DataObject tempdo = new DataObject();
		DataObject temprdo = new DataObject();
		DataStore temprds = new DataStore();
		DataStore perds = para.getDataStore("mzszxx");
		DataStore rds = new DataStore();
		DataStore dwErr = para.getDataStore("dserrinfo");
		DataObject rdo = new DataObject();
		int row;
		String errcode;
		
		int szxxpdsRowCount = 0;
		int szxxrdsRowCount = 0;
		// 记日志
		String querylogid = QueryLogTool.saveQueryLog("卫计委死亡医学证明信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(), para);

		// 接参数
		String yxzjhm = para.getString("yxzjhm");
		String xm = para.getString("xm");
		// 判断查询类型--单个/报盘
		if (!"".equals(yxzjhm) && yxzjhm != null) {
			// yxzjhm非空，此次为单人查询
			perds.clear();
			perds.put(0, "yxzjhm", yxzjhm);
			perds.put(0, "xm", xm);
		} else if (perds.rowCount() < 1 ) {
			// 均空，关进度条，返回para即可
			LanePromptUtil.complete();
			LanePromptUtil.end();
			return para;
		}
		//pspid,用于获取dwlesb.uddiaddress_pspid里面的地址和key，如：szpsp
		String pspid = HsuTools.getSystemPara("PSPID", "HSU", "");
		szxxpdsRowCount = perds.rowCount();
		
		LanePromptUtil.setTotalSteps(szxxpdsRowCount);
		LanePromptUtil.promptToTrace("卫计委死亡医学证明信息查询开始");
		for (int i = 0; i < szxxpdsRowCount; i++) {
			String yxzjhmTemp = perds.getString(i, "yxzjhm");
			String xmTemp = perds.getString(i, "xm");
			LanePromptUtil.promptToTrace("正在查询第" + (i + 1) + "条卫计委死亡医学证明信息，一共"
					+ szxxpdsRowCount + "条");
			LanePromptUtil.moveForward(1);
			try {
				tempdo.clear();
				tempdo.put("certificateHolderCode", yxzjhmTemp);
				tempdo.put("certificateHolder", xmTemp);
				temprdo = LocalServiceClient.invokeServiceByPspid(pspid,"SZWJWDZZZService", "querySwyxzmbyCyzt", tempdo);
			} catch (Exception e) {
				this.bizException("调用卫计委服务失败:" + e.getMessage());
			}
			errcode = temprdo.getString("_lesb__errcode","");
			if(errcode != null && !"".equals(errcode)){
				if("0".equals(errcode)){
					temprds.put(0,"card_id",temprdo.getString("card_id",""));
					temprds.put(0,"name",temprdo.getString("name",""));
					temprds.put(0,"gender",temprdo.getString("gender",""));
					temprds.put(0,"idcard_type",temprdo.getString("idcard_type",""));
					temprds.put(0,"idcard_code",temprdo.getString("idcard_code",""));
					temprds.put(0,"birth_date",temprdo.getString("birth_date",""));
					temprds.put(0,"age",temprdo.getString("age",""));
					temprds.put(0,"obode_detail",temprdo.getString("obode_detail",""));
					temprds.put(0,"obode_code",temprdo.getString("obode_code",""));
					temprds.put(0,"domicile_detail",temprdo.getString("domicile_detail",""));
					temprds.put(0,"domicile_code",temprdo.getString("domicile_code",""));
					temprds.put(0,"death_date",temprdo.getString("death_date",""));
					temprds.put(0,"fill_card_date",temprdo.getString("fill_card_date",""));
					rds.combineDatastore(temprds);
					szxxrdsRowCount++;		
				}else{// 放入不合法数据
					dwErr.addRow();
					row = dwErr.rowCount() - 1;
					dwErr.put(row, "yxzjhm", yxzjhmTemp);
					dwErr.put(row, "xm", xmTemp);
					dwErr.put(row, "cwxx", temprdo.getString("_lesb__errcode_text"));
					continue;
				}
			}
		}
		// 指示进度条工作完成
		LanePromptUtil.complete();
		LanePromptUtil.end();
		QueryLogTool.updateQueryLog(querylogid, szxxrdsRowCount);
		
		rdo.clear();
		rdo.put("mzszxx", rds);
		rdo.put("dserrinfo", dwErr);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.查询大纬养老认证信息
	 *
	 * @author gd
	 * @date 创建时间 2019-07-30
	 * @since V1.0
	 */
	public DataObject queryBatchCompareInfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		String qssj = para.getDateToString("qssj", "yyyyMMdd");
		String zzsj = para.getDateToString("zzsj", "yyyyMMdd", DateUtil.stringToDate("20491231"));
		String bdlb = para.getString("bdlb", "");
		String bdjg = para.getString("bdjg", "");
		// 增加经办机构险种标志 zxk-2020-01-09
		String jbjgid = para.getString("jbjgid", "");
		String xzbz = para.getString("xzbz", "");
		try{
			//因省集中后总线多个地市使用，Auth3Service服务增加地区编号进行区分，modify by hzf 2019/9/19
			String rsxtid = EnvironmentParaUtil.getDBUserSuffix();
			pdo.clear();
			pdo.put("qssj", qssj);
			pdo.put("zzsj", zzsj);
			pdo.put("bdlb", bdlb);
			pdo.put("bdjg", bdjg);
			pdo.put("jbjgid", jbjgid);
			pdo.put("xzbz", xzbz);
			if ("110".equals(xzbz)) {
				rdo = LocalServiceClient.invokeServiceOnRemoteESB(rsxtid,"Auth3Service", "queryBatchCompareInfoRG", pdo);
			}else if ("401".equals(xzbz)) {
				//备注：工伤的服务提供了入参fgrqlb：传6只查询工伤职工，传7只查询工亡遗属，不传跟6,7都查
				rdo = LocalServiceClient.invokeServiceOnRemoteESB(rsxtid,"Auth3Service", "queryBatchCompareInfoHM", pdo);
			} else {
				rdo = LocalServiceClient.invokeServiceOnRemoteESB(rsxtid,"Auth3Service", "queryBatchCompareInfo", pdo);
			}
		}catch(Exception e){
			this.bizException("调用服务失败:" + e.getMessage());
		}
		String verrflag = rdo.getString("errflag"); //正常调用时verrflag为0
		if(verrflag == null){
			verrflag = "0";
		}
		if(!"0".equals(verrflag)){
			String verrtext = rdo.getString("errtext");
			this.bizException(verrtext);
		}
		return rdo;
	}
	
	/**
	 * 方法简介.跳转到人员共享信息查询界面
	 * 
	 * @author wjq
	 * @date 创建时间 2019年7月18日
	 * @since V1.0
	 */
	public DataObject fwdAdRygxxxcx(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore xzbzcode, bzcode;
		StringBuffer sqlBF = new StringBuffer();

		// 组织险种类型code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'XZBZ' ");
		this.sql.setSql(sqlBF.toString());
		xzbzcode = this.sql.executeQuery();

		// 组织备注code值
		sqlBF.setLength(0);
		sqlBF.append(" select a.code value, a.content from si3u.sits_code a where a.dmbh = 'BZ' ");
		this.sql.setSql(sqlBF.toString());
		bzcode = this.sql.executeQuery();

		rdo.clear();
		rdo.put("dsxzbz", xzbzcode);
		rdo.put("dsbz", bzcode);

		return rdo;
	}

	/**
	 * 方法简介.人员共享信息查询
	 * 
	 * @author wjq
	 * @date 创建时间 2019年7月18日
	 * @since V1.0
	 */
	public DataObject queryAdRygxxxInfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		DataStore dwMzbz = new DataStore(), dwBylpt = new DataStore(), dwSwyxzm = new DataStore(), dwJyfx = new DataStore(), dsRygxxx = new DataStore();
		// 接参
		String sjlx = para.getString("sjlx");
		String ny = para.getDateToString("ny", "yyyyMM");
		String yxzjhm = para.getString("yxzjhm");
		String xm = para.getString("xm");
		if (yxzjhm == null || "".equals(yxzjhm)) {// 身份证号码为空时，按数据类型查询
			if (sjlx == null || "".equals(sjlx)) {
				this.bizException("数据类型不能为空！");
			}
			if (ny == null || "".equals(ny)) {
				this.bizException("年月不能为空！");
			}
			if ("1".equals(sjlx)) {// 民政殡葬数据
				sqlBF.setLength(0);
				sqlBF.append("select a.ryid, a.xm, a.zjhm, a.swrq, a.hhrq, ");
				sqlBF.append("       a.dz, a.jbsj ");
				sqlBF.append("  from ad3u.per_gov_share_info a ");
				sqlBF.append(" where a.sjlx = '1' ");
				sqlBF.append("   and a.ny = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ny);
				dwMzbz = this.sql.executeQuery();
			} else if ("2".equals(sjlx)) {// 部养老平台数据
				sqlBF.setLength(0);
				sqlBF.append("select a.ryid, a.zjhm, a.xm, a.ltxrq, a.dyffzt, ");
				sqlBF.append("       to_date(a.swrq, 'yyyy-MM-dd') swrq, a.xzqhdm, a.bz, a.jsxzbz xzbz ");
				sqlBF.append("  from ad3u.per_gov_share_info a ");
				sqlBF.append(" where a.sjlx = '2' ");
				sqlBF.append("   and a.ny = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ny);
				dwBylpt = this.sql.executeQuery();
			} else if ("3".equals(sjlx)) {// 死亡医学证明数据
				sqlBF.setLength(0);
				sqlBF.append("select a.ryid, a.xm, a.zjhm, a.xb, a.mz, ");
				sqlBF.append("       a.sfsw ");
				sqlBF.append("  from ad3u.per_gov_share_info a ");
				sqlBF.append(" where a.sjlx = '3' ");
				sqlBF.append("   and a.ny = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ny);
				dwSwyxzm = this.sql.executeQuery();
			} else { // 监狱服刑人员数据
				sqlBF.setLength(0);
				sqlBF.append("select a.ryid, a.xm, a.zsxm, a.zjlx, a.zjhm,  ");
				sqlBF.append("       a.pjlb, a.xzqhdm, a.pcmx, a.nd, a.pczh, ");
				sqlBF.append("       a.pcxh, a.pcrq, a.xq, a.qr, a.zr ");
				sqlBF.append("  from ad3u.per_gov_share_info a ");
				sqlBF.append(" where a.sjlx = '4' ");
				sqlBF.append("   and a.ny = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ny);
				dwJyfx = this.sql.executeQuery();
			}
		} else { // 按个人身份证号码姓名查询
			if (xm == null || "".equals(xm)) {
				this.bizException("姓名不能为空！");
			}
			sqlBF.setLength(0);
			sqlBF.append("select a.ryid, a.xm, a.zjhm, to_date(a.swrq, 'yyyy-MM-dd') swrq, to_date(a.hhrq, 'yyyy-MM-dd HH24:mi') hhrq,  ");
			sqlBF.append("       a.dz, a.jbsj, a.ltxrq, a.dyffzt, a.xzqhdm,  ");
			sqlBF.append("       a.bz, a.xb, a.mz, a.sfsw, a.zsxm,  ");
			sqlBF.append("       a.zjlx, a.pjlb, a.pcmx, a.nd, a.pczh, ");
			sqlBF.append("       a.pcxh, a.pcrq, a.xq, a.qr, a.zr, ");
			sqlBF.append("       a.sjlx ");
			sqlBF.append("  from ad3u.per_gov_share_info a ");
			sqlBF.append(" where a.zjhm = ? ");
			sqlBF.append("   and a.xm = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, yxzjhm);
			this.sql.setString(2, xm);
			dsRygxxx = this.sql.executeQuery();

			dwMzbz = dsRygxxx.findAll(" sjlx == 1 ");// 民政殡葬数据
			dwBylpt = dsRygxxx.findAll(" sjlx == 2 ");// 部养老平台数据
			dwSwyxzm = dsRygxxx.findAll(" sjlx == 3 ");// 死亡医学证明数据
			dwJyfx = dsRygxxx.findAll(" sjlx == 4 ");// 监狱服刑人员数据
		}

		// 将行政区划代码转成行政区划名称
		dwBylpt = HsuTools.genXzqhmcDataStore(dwBylpt, "xzqhdm", "xzqhmc");
		dwJyfx = HsuTools.genXzqhmcDataStore(dwJyfx, "xzqhdm", "xzqhmc");

		rdo.clear();
		rdo.put("dwmzbzinfo", dwMzbz);
		rdo.put("dwbylptinfo", dwBylpt);
		rdo.put("dwswyxzminfo", dwSwyxzm);
		rdo.put("dwjyfxinfo", dwJyfx);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.方法简介.跳转到未上传申请表人员的JSP之前查询相关信息
	 *
	 * @author rzs
	 * @date 创建时间 2019年9月11日
	 * @since V1.0
	 */
	public DataObject fwdAdWscsqbryQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
//		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
//		if("1".equals(ad3u1059)){
//			ds = AdTools.getQueryJbjgidByUser(this.getUser());
//		} else {
//			ds = SiTools.getSjJbjgidByUserId(this.getUser());
//		}
		// 取3752%01的经办机构.mod.谈杰.20191009
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select a.jbjgid value, a.jbjgmc content, a.jbjgid, a.jbjgmc ");
		sqlBF.append("   from be3u.agency_natl a                                   ");
		sqlBF.append("  where a.jbjgid like '3752%01'                              ");
		this.sql.setSql(sqlBF.toString());
		ds = this.sql.executeQuery();

		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 *
	 * 方法简介.跳转到企业街道保障中心供养统计JSP页面相关信息查询
	 * 
	 * @author 黄泽峰 2019-10-5
	 */
	public DataObject fwdQyjdbzzxgytjQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}

		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.为上传申请表人员查询
	 *
	 * @author rzs
	 * @date 创建时间 2019年9月11日
	 * @since V1.0
	 */
	public DataObject queryAdWscsqbryInfo(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsTemp = new DataStore();
		
		String dwdjid = para.getString("dwdjid");
		String jbjgid = para.getString("jbjgid");
		String spr = para.getString("spr");
		String vbiz = para.getString("biz");
		String ryid = para.getString("cxryid");
		String scbz = para.getString("scbz");
		String shzt = "", piid = "", dyhsr = "", dyfhr = "";
		
		if(vbiz == null || "".equals(vbiz)){
			this.bizException("获取的经办机构为空");
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		String jbjg = "'"+biz+"01','"+biz+"03'";
		int index = 1;	
		DataStore ryxx = new DataStore();
		DataStore ywRyxx = new DataStore();
		if (scbz == null || "".equals(scbz) || "0".equals(scbz)
				|| "1".equals(scbz)) {// 0:未上传,1:已上传
			sqlBF.setLength(0);
			sqlBF.append("select distinct b.ryid, b.shbzhm, b.xm, b.grbh, a.zfrylb ltxlb,  ");
			sqlBF.append("       d.jbjgid, d.dwbh, d.cbdwmc dwmc, e.orgname jbjgmc,  ");
			sqlBF.append("       h.rydjid, a.spr, f.jlgrzhnya zhjlny, a.cjgzrq, a.ltxrq, ");
			sqlBF.append("       '' usertask, '' splbdm, '1' sqbscyw");//申请表上传业务
			sqlBF.append("  from si3u.retd_identity a, biuv.person b, si3u.orgn_reg d, odssu.orginfor e, si3u.per_natl f, si3u.per_reg h ");
			sqlBF.append(" where a.ryid = b.ryid ");
			sqlBF.append("   and a.dwdjid = d.dwdjid ");
			sqlBF.append("   and d.jbjgid = e.orgno ");
			sqlBF.append("   and b.ryid = f.ryid ");
			sqlBF.append("   and h.ryid = b.ryid ");
			sqlBF.append("   and h.hdbz = '1' ");
			sqlBF.append("   and instr(h.tblb,'101') > 0 ");
			sqlBF.append("   and a.dwdjid = h.dwdjid ");

			if (dwdjid != null && !"".equals(dwdjid)) {
				sqlBF.append("   and a.dwdjid = ? ");
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				sqlBF.append("   and d.jbjgid in (")
					.append(HsuTools.replaceC2QCQ(jbjgid))
					.append(") ");
			} else {
				sqlBF.append("   and d.jbjgid in (").append(jbjg).append(") ");
			}
			if (spr != null && !"".equals(spr)) {
				sqlBF.append("   and a.spr like (?) ");
			}
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and b.ryid = ? ");
			}
			// 根据上传标志判断是否执行.mod.谈杰.20191024
			if (scbz != null && !"".equals(scbz)) {
				if ("1".equals(scbz)) {
					sqlBF.append("   and exists ");
				} else if("0".equals(scbz)){
					sqlBF.append("   and not exists ");
				}
				sqlBF.append(" (select 1 from ad3u.per_info c ");
				sqlBF.append("   where a.ryid = c.ryid  ");
				sqlBF.append("     and exists (select 1 ");// 查询做过退休转在职的人 wsk add 2020/11/17
				sqlBF.append("    from ad3u.per_pay_his g  ");
				sqlBF.append("   where c.ryid = g.ryid))  ");
			}
			this.sql.setSql(sqlBF.toString());

			if (dwdjid != null && !"".equals(dwdjid)) {
				this.sql.setString(index++, dwdjid);
			}
			if (spr != null && !"".equals(spr)) {
				this.sql.setString(index++, spr);
			}
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}

			ryxx = this.sql.executeQuery();
		}

		// 新增查询征缴处等待审核、征缴处审核不通过状态 业务人员信息.add.zcc.20191209
		 index = 1;
		if (scbz == null || "".equals(scbz) || "0".equals(scbz)) {// 0:未上传，查询以上两种状态
			sqlBF.setLength(0);
			sqlBF.append("select distinct b.piid, a.ryid,c.task_def_key_ usertask,a.shbzhm,a.xm,");
			sqlBF.append("          e.grbh,b.ltxlb,g.jbjgid,f.dwbh,f.cbdwmc dwmc,");
			sqlBF.append("          g.jbjgmc,a.rydjid,b.slr spr,h.jlgrzhnya zhjlny,a.cjgzrq,");
			sqlBF.append("          b.ltxrq,d.splbdm, '0' sqbscyw");
			sqlBF.append("  from si3u.per_reg         a,");
			sqlBF.append("       sicp3uws.adgrtxysh       b,");
			sqlBF.append("       activiti.act_ru_task     c,");
			sqlBF.append("    sicp3uws.approve_history   d,");
			sqlBF.append("       biuv.person              e,");
			sqlBF.append("       si3u.orgn_reg        f,");
			sqlBF.append("       be3u.agency_natl         g,");
			sqlBF.append("       si3u.per_natl        h");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and b.piid = c.proc_inst_id_");
			sqlBF.append("   and a.ryid = e.ryid");
			sqlBF.append("   and a.dwdjid = f.dwdjid");
			sqlBF.append("   and f.jbjgid = g.jbjgid");
			sqlBF.append("   and a.ryid = h.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.tblb like '%101%'");
			sqlBF.append("   and c.proc_def_id_ like 'adQyyldysq%'");
			sqlBF.append("   and not exists (select '1' from si3u.retd_identity i where a.ryid = i.ryid)");
			sqlBF.append("   and b.piid = d.piid(+)");
//			if ("2".equals(scbz)) {//只查询待征缴确认的
//				sqlBF.append("   and b.piid = d.piid(+)");
//				sqlBF.append("   and c.task_def_key_  in ( 'ut.adQyyldysqOutNet.1.UserTask_05i5hgc.zjcqr','ut.adQyyldysq.2.UserTask_05i5hgc.zjcqr') ");
//			}else if("3".equals(scbz)){//只查询征缴审核不通过的
//				sqlBF.append("   and b.piid = d.piid");
//				sqlBF.append("   and c.task_def_key_  not in ( 'ut.adQyyldysqOutNet.1.UserTask_05i5hgc.zjcqr','ut.adQyyldysq.2.UserTask_05i5hgc.zjcqr') ");
//			}else{
//				sqlBF.append("   and b.piid = d.piid(+)");
//			}
			
			if (dwdjid != null && !"".equals(dwdjid)) {
				sqlBF.append("   and a.dwdjid = ? ");
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				sqlBF.append("   and f.jbjgid in (")
					.append(HsuTools.replaceC2QCQ(jbjgid))
					.append(") ");
			} else {
				sqlBF.append("   and f.jbjgid in (").append(jbjg).append(") ");
			}
			if (spr != null && !"".equals(spr)) {
				sqlBF.append("   and b.slr = ? ");
			}
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ? ");
			}
			this.sql.setSql(sqlBF.toString());

			if (dwdjid != null && !"".equals(dwdjid)) {
				this.sql.setString(index++, dwdjid);
			}
			if (spr != null && !"".equals(spr)) {
				this.sql.setString(index++, spr);
			}
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}

			ywRyxx = this.sql.executeQuery();
		}
		ryxx.combineDatastore(ywRyxx);
		
		DataStore dsSc = new DataStore();
		String sqbscyw="",sprname="",usertask="", splbdm="";
		for (int i = 0; i < ryxx.rowCount(); i++) {
			ryid = ryxx.getString(i, "ryid");
			spr = ryxx.getString(i, "spr");
			sqbscyw = ryxx.getString(i, "sqbscyw");
			usertask = ryxx.getString(i, "usertask");
			splbdm = ryxx.getString(i, "splbdm");
			if ("0".equals(sqbscyw)
					&& "ut.adQyyldysqOutNet.1.UserTask_05i5hgc.zjcqr,ut.adQyyldysq.2.UserTask_05i5hgc.zjcqr".indexOf(usertask) < 0
					&& (splbdm == null || "".equals(splbdm))){//删除非征缴审核、征缴审核不通过的
				ryxx.delRow(i);
				i--;
				continue;
			}
			sprname = HsuTools.getCzyxmByUserId(spr);
			if("".equals(sprname)){
				sprname = spr;
			}
			ryxx.put(i, "sprname", sprname);
			
			// 先根据录入的上传标志直接进行判断.mod.谈杰.20191024
//			if (scbz != null && !"".equals(scbz)) {
//				if ("0".equals(scbz)) {
//					ryxx.put(i, "cz", "申请表上传");
//				} else {
//					ryxx.put(i, "cz", "查看");
//				}
//			} else {// 如果没有录入上传标志，再次查询该人员是否已经上传.mod.谈杰.20191024
				sqlBF.setLength(0);
				sqlBF.append(" select 1 ");
				sqlBF.append("   from ad3u.per_info a  ");
				sqlBF.append("  where a.ryid = ? ");
				sqlBF.append("    and exists (select 1 "); // 查询做过退休转在职的人 wsk add 2020/11/18
				sqlBF.append("   from ad3u.per_pay_his b");
				sqlBF.append("  where a.ryid = b.ryid) ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				dsSc = this.sql.executeQuery();

				if (dsSc.rowCount() > 0 || "0".equals(sqbscyw)) {
					ryxx.put(i, "cz", "查看");
				} else {
					ryxx.put(i, "cz", "申请表上传");
				}

//			}
			if(ryid != null && !"".equals(ryid)){
				this.sql.setSql(" select min(qsrq) sccbny from si3u.per_reg_join where xzbz = '101' and ryid = ? ");
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				if(dsTemp.rowCount() > 0){
					ryxx.put(i, "sccbny", dsTemp.getString(0, "sccbny"));
				}
			}
			String tcwzrbz = "0";
			sqlBF.setLength(0);
			sqlBF.append(" select substr(b.qsny, 1, 4), substr(b.zzny, 1, 4)                   ");
			sqlBF.append("   from si3u.per_move a, si3u.aged_pay_his b                         ");
			sqlBF.append("  where a.ryid = b.ryid                                              ");
			sqlBF.append("    and a.zyfx = '0'                                                 ");
			sqlBF.append("    and a.blwjbz = '1'                                               ");
			sqlBF.append("    and '1990' between substr(b.qsny, 1, 4) and substr(b.zzny, 1, 4) ");
			sqlBF.append("    and a.ryid = ?			                                       ");
			
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				tcwzrbz = "1";
			}
			ryxx.put(i, "tcwzrbz", tcwzrbz);
			// 取机关事业工作经历
			String jgsygzbs = SiTools.getPerNatlCmpl(ryid, "JGSYGZBS", "0");
			ryxx.put(i, "jgsygzbs", jgsygzbs);
			// 固定名单中单位先默认为否
			ryxx.put(i, "sfgdmdzdw", "0");
			//取视同缴费月数
			double stjfnx = Double.valueOf(SiTools.getPerNatlCmpl(ryid, "STJFNX", "0"));
			int stjfys = (int) MathUtil.round(stjfnx * 12, 0);
			ryxx.put(i, "stjfys", stjfys);
			if("1".equals(scbz)){
				ryxx.put(i, "sfsctxspb", "1");
			}else{
				ryxx.put(i, "sfsctxspb", "0");
			}
			
			shzt = "";
			if("0".equals(scbz) && "1".equals(sqbscyw)){
				shzt = "0";
			}else{
				shzt = "0";
				this.sql.setSql(" select bcxmz from si3u.per_natl_cmpl where bcxmbh = 'SQBSCLCBH' and  ryid = ?  ");
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				//补充信息为空，查询一下是否存在网上申报信息
				if(dsTemp.rowCount() <= 0 ){
					this.sql.setSql(" select a.piid bcxmz from sicp3uws.adtxdyhd a,bpzone.pi_hi_view b where a.ryid = ? and a.piid = b.piid and b.pdid like 'adQytxsqbsc_wssb%' and b.zfbz = '0'  order by a.slsj desc");//增加限定办理业务.mod.zcc.2020.01.02
					this.sql.setString(1, ryid);
					dsTemp = this.sql.executeQuery();
				}
				if(dsTemp.rowCount() > 0 && "1".equals(sqbscyw)){
					piid = dsTemp.getString(0, "bcxmz");
					ryxx.put(i, "piid", piid);
					if (piid != null && !"".equals(piid)) {
						this.sql.setSql(" select dyhsr, dyfhr from sicp3uws.adtxdyhd where piid = ? ");
						this.sql.setString(1, piid);
						dsTemp = this.sql.executeQuery();
						if(dsTemp.rowCount() >0){
							dyhsr = dsTemp.getString(0, "dyhsr");
							dyfhr = dsTemp.getString(0, "dyfhr");
							if(dyhsr == null || "".equals(dyhsr)){
								shzt = "1";
							}
							if(dyhsr != null && !"".equals(dyhsr) && (dyfhr == null || "".equals(dyfhr))){
								shzt = "2";
								//查询是否存在在办流程，判断审核状态（初审点击计算待遇时，存在dyhsr）.mod.zcc.20200116
								this.sql.setSql(" select 1 from activiti.act_ru_task where proc_inst_id_ = ? and task_def_key_ like '%AdTxdyhdQyTxdyhs%' ");
								this.sql.setString(1, piid);
								DataStore dsTrue =this.sql.executeQuery();
								if(dsTrue.rowCount() > 0){
									shzt = "1";
								}
							}
							if(dyfhr != null && !"".equals(dyfhr)){
								shzt = "3";
							}
						}
					}
					//不存在per_info,即未上传（更正流程开启但未上传）.mod.zcc.20191210
					this.sql.setSql(" select '1' from ad3u.per_info where ryid = ?");
					this.sql.setString(1, ryid);
					dsTemp = this.sql.executeQuery();
					if (dsTemp.rowCount() <= 0) {
						shzt = "0";
					}
				} else if (dsTemp.rowCount() <= 0 && "1".equals(sqbscyw)) {
					this.sql.setSql(" select '1' from ad3u.per_info where ryid = ?");// 存在perInfo则认为已经复审（老数据）
					this.sql.setString(1, ryid);
					dsTemp = this.sql.executeQuery();
					if (dsTemp.rowCount() > 0) {
						shzt = "3";
					}
				} else if ("0".equals(sqbscyw)
						&& usertask != null
						&& "ut.adQyyldysqOutNet.1.UserTask_05i5hgc.zjcqr,ut.adQyyldysq.2.UserTask_05i5hgc.zjcqr".indexOf(usertask) >= 0) {
					shzt = "4";
				} else {
					shzt = "5";
				}
			}
			
			
			ryxx.put(i, "shzt", shzt);
			
		}
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}
	/**
	 * 方法简介.企业街道保障中心供养统计查询
	 * 
	 * @author 黄泽峰 2019-10-5
	 */
	public DataObject queryQyjdbzzxgytj(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		
		String jbjgid = para.getString("jbjgid");
		String qsny = para.getDateToString("qsny", "yyyyMM");
		String zzny = para.getDateToString("zzny", "yyyyMM");
		String vbiz = para.getString("biz");
		
		if(vbiz == null || "".equals(vbiz)){
			this.bizException("获取的经办机构为空");
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		String jbjg = "'"+biz+"01','"+biz+"03'";
		//新增获取多个rsjid.mod.zcc.20191204
		String rsjidStr = SiTools.getRsjidByjbjgid(biz+"01,"+biz+"03");
		if(jbjgid != null && !"".equals(jbjgid)){
			rsjidStr = SiTools.getRsjidByjbjgid(jbjgid);
		}
		int index = 1;	
		
		sqlBF.setLength(0);
		sqlBF.append(" select d.jbjgmc, c.jdmc, count(*) rs" );
		sqlBF.append("   from ad3u.per_info a, " );
		sqlBF.append("        ad3u.Per_Reg  b, " );
		sqlBF.append("        be3u.street_natl  c, " );
		sqlBF.append("        be3u.agency_natl  d " );
		sqlBF.append("  where a.dqdydjid = b.dydjid " );
		sqlBF.append("    and c.jdid = a.jdid " );
		sqlBF.append("    and d.jbjgid = b.jbjgid " );
		sqlBF.append("    and a.sszfrq = 'B' " );//去除待遇领取类别限制，限制所属支付人群为供养亲属.mod.zcc.20191204
		sqlBF.append("    and c.rsjid in (").append(HsuTools.replaceC2QCQ(rsjidStr)).append(")");//新增限制经办机构对应的街道.mod.zcc.20191204
		
		if(jbjgid != null && !"".equals(jbjgid)){
			sqlBF.append("   and d.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");
		}else{
			sqlBF.append("   and d.jbjgid in (").append(jbjg).append(") ");
		}
		
		if(qsny != null && !"".equals(qsny)){
			sqlBF.append("   and a.dyxsksny >= ? ");
		}
		if(zzny != null && !"".equals(zzny)){
			sqlBF.append("   and a.dyxsksny <= ? ");
		}
		sqlBF.append("  group by d.jbjgmc, c.jdmc  " );
		
		this.sql.setSql(sqlBF.toString());
		
		if(qsny != null && !"".equals(qsny)){
			this.sql.setString(index++, qsny);
		}
		if(zzny != null && !"".equals(zzny)){
			this.sql.setString(index++, zzny);
		}
		
		DataStore ryxx = this.sql.executeQuery();
		
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.企业退休人员原单位查询
	 * 
	 * @author 黄泽峰 2019-10-6
	 */
	public DataObject queryQytxryydwcx(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		
		String ryid = para.getString("ryid");
		String dwdjid = para.getString("dwdjid");
		String vbiz = para.getString("biz");
		
		if(vbiz == null || "".equals(vbiz)){
			this.bizException("获取的经办机构为空");
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
//		String jbjg = "'"+biz+"01','"+biz+"03'";
		int index = 1;	
		
		sqlBF.setLength(0);
		
		sqlBF.append(" select b.grbh, b.xm, b.shbzhm, d.dwbh," );
		sqlBF.append("        d.cbdwmc, e.bcxmz, a.yhzh, c.cjgzrq, " );
		sqlBF.append("        c.ltxrq, b.hkszd, b.jtzz, b.lxrdh, " );
		sqlBF.append("        a.dyffzt, b.swrq, a.dyzzny, a.ryid " );
		sqlBF.append("   from ad3u.per_info a, " );
		sqlBF.append("        biuv.person   b, " );
		sqlBF.append("        ad3u.emp_info c, " );
		sqlBF.append("        si3u.orgn_reg d, " );
		sqlBF.append("        ad3u.per_cmpl e " );
		sqlBF.append("  where a.ryid = b.ryid " );
		sqlBF.append("    and a.ryid = c.ryid " );
		sqlBF.append("    and a.dwdjid = d.dwdjid " );
		sqlBF.append("    and a.ryid = e.ryid(+) " );
		sqlBF.append("    and e.bcxmbh(+) = 'YGZDW' " );
//		sqlBF.append("    and d.jbjgid in (").append(jbjg).append(") ");
		
		if(ryid != null && !"".equals(ryid)){
			sqlBF.append("   and a.ryid = ? ");
		}
		if(dwdjid != null && !"".equals(dwdjid)){
			sqlBF.append("   and e.bcxmz = ? ");
		}
		
		this.sql.setSql(sqlBF.toString());
		
		if(ryid != null && !"".equals(ryid)){
			this.sql.setString(index++, ryid);
		}
		if(dwdjid != null && !"".equals(dwdjid)){
			this.sql.setString(index++, dwdjid);
		}
		
		DataStore vds = this.sql.executeQuery();
		for (int i = 0; i < vds.rowCount(); i++) {
			ryid = vds.getString(i, "ryid");
			String dyzzny = vds.getString(i, "dyzzny");
			sqlBF.setLength(0);
			sqlBF.append(" select sum(btje) btje ");
			sqlBF.append("    from ad3u.per_giv_month_std ");
			sqlBF.append("   where ryid = ? ");
			sqlBF.append("     and least(nvl( ? , '204912'), '"
					+ DateUtil.dateToString(new Date(), "yyyyMM")
					+ "') between qsny and nvl(zzny, '204912') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, dyzzny);
			DataStore ds = this.sql.executeQuery();
			if (ds.rowCount() > 0) {
				double btje = ds.getDouble(0, "btje");
				vds.put(i, "yljze", btje);
			}
		}
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", vds);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.查询待遇终止未核算待遇人员
	 * 
	 * @author 张成成
	 * @date 2019年9月17日
	 */
	public DataObject queryAdQyncycxzf(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String biz = para.getString("biz");
		if (biz == null || "".equals(biz)) {
			this.bizException("获取的经办机构为空");
		}
		String jbjg = "'" + biz + "01','" + biz + "03'";

		String shbzhm = para.getString("shbzhm", "");
		String xzryid = para.getString("ryid", "");
		String dwbh = para.getString("dwbh", "");
		String jbjgid = para.getString("jbjgid", "");
		String sxlx = para.getString("sxlx", "");// 1:企业退休终止待遇支付,2:企业在职职工一次性支付
		String ffqd = para.getString("ffqd", "");
		String dfjglb = para.getString("dfjglb", "");
		String ywzt = para.getString("ywzt", "");
		String slr = para.getString("slr", "");
		Date swsjkssj = para.getDate("swsjkssj");
		Date swsjjssj = para.getDate("swsjjssj");
		String lqlsdy = para.getString("lqlsdy", "");//增加临时待遇.add.zcc.20200220
		//检测时间合法性
		Date currentTime = DateUtil.getDBTime();
		if (swsjkssj != null) {
			if (swsjkssj.compareTo(currentTime) > 0) {
				this.bizException("死亡开始时间大于当前时间，请检查！");
			}
		}
		if (swsjjssj != null) {
			if (swsjjssj.compareTo(currentTime) > 0) {
				this.bizException("死亡结束时间大于当前时间，请检查！");
			}
		}
		if (swsjkssj != null && swsjjssj != null) {
			if (swsjkssj.compareTo(swsjjssj) > 0) {
				this.bizException("死亡开始时间大于死亡结束时间，请检查！");
			}
		}
		if ("".equals(jbjgid) || jbjgid == null) {
			jbjgid = jbjg;
		}
		DataStore dsPerInfo = new DataStore();
		// 查询“企业退休终止待遇支付”人员
		DataStore dsPerTx = new DataStore();
		if (sxlx == null || "".equals(sxlx) || "1".equals(sxlx)) {
			sqlBF.setLength(0);
			sqlBF.append(" select '1'sxlx, a.grbh, a.xm, c.jsrq swrq, e.jbjgid, ");
			sqlBF.append("        f.jbjgmc, e.dwbh, e.cbdwmc dwmc, d.dfjglb, d.ffqd, ");
			sqlBF.append("        c.slsj, c.slr, '查看' cz, b.ryid, '' rydjid,  ");
			if (lqlsdy == null || "".equals(lqlsdy)) {
				sqlBF.append("        b.shbzhm, nvl(i.bcxmz, '0') lqlsdy ");
			} else {
				if ("0".equals(lqlsdy)) {
					sqlBF.append("        b.shbzhm, '0' lqlsdy ");
				} else {
					sqlBF.append("        b.shbzhm, '1' lqlsdy ");
				}
			}
			sqlBF.append("   from biu.person a, ");
			sqlBF.append("        ad3u.per_info b, ");
			sqlBF.append("        sicp3uws.adtxswdyzf c, ");
			sqlBF.append("        sicp3uws.adgiv_way d, ");
			sqlBF.append("        si3u.orgn_reg e, ");
			sqlBF.append("        be3u.agency_natl f, ");
			if (lqlsdy == null || "".equals(lqlsdy)) {
				sqlBF.append("        si3u.per_natl_cmpl h, ");
				sqlBF.append("        ad3u.per_cmpl i ");
			} else {
				sqlBF.append("        si3u.per_natl_cmpl h");
			}
			sqlBF.append("  where a.ryid = b.ryid and a.ryid = c.ryid and c.piid = d.piid and b.dwdjid = e.dwdjid and e.jbjgid = f.jbjgid ");

			if (lqlsdy == null || "".equals(lqlsdy)) {
				sqlBF.append("  and a.ryid = i.ryid(+) ");
				sqlBF.append("  and i.bcxmbh(+) = 'LQLSDY' ");
			} else {
				if ("0".equals(lqlsdy)) {
					sqlBF.append("  and (not exists (select 1 from ad3u.per_cmpl k where a.ryid = k.ryid and k.bcxmbh = 'LQLSDY') ");
					sqlBF.append("  or exists (select 1 from ad3u.per_cmpl k where a.ryid = k.ryid and k.bcxmbh = 'LQLSDY' and k.bcxmz = '0')) ");
				} else {
					sqlBF.append("  and exists (select 1 from ad3u.per_cmpl k where a.ryid = k.ryid and k.bcxmbh = 'LQLSDY' and k.bcxmz = '1') ");
				}
			}
			sqlBF.append(" and exists (select 1 from si3u.per_natl_cmpl g where b.ryid = g.ryid and g.bcxmbh = 'TXZZDYZFRYBZ') ");
			sqlBF.append(" and  h.bcxmbh = 'TXZZDYZFPIID' and b.ryid = h.ryid and h.bcxmz = c.piid ");
			sqlBF.append("   and e.jbjgid in (").append(jbjgid).append(") ");
			if (!"".equals(xzryid) && xzryid != null) {
				sqlBF.append("  and b.ryid =  ? ");
			}
			if (!"".equals(dwbh) && dwbh != null) {
				sqlBF.append("  and e.dwbh =  ? ");
			}
			if (!"".equals(ffqd) && ffqd != null) {
				sqlBF.append("  and d.ffqd =  ? ");
			}
			if (!"".equals(dfjglb) && dfjglb != null) {
				sqlBF.append("  and d.dfjglb =  ? ");
			}
			if (!"".equals(slr) && slr != null) {
				sqlBF.append("  and c.slr =  ? ");
			}
			if (swsjkssj != null) {
				sqlBF.append("  and c.jsrq >=  ? ");
			}
			if (swsjjssj != null) {
				sqlBF.append("  and c.jsrq <=  ? ");
			}
			this.sql.setSql(sqlBF.toString());
			int num = 1;
			if (!"".equals(xzryid) && xzryid != null) {
				this.sql.setString(num++, xzryid);
			}
			if (!"".equals(dwbh) && dwbh != null) {
				this.sql.setString(num++, dwbh);
			}
			if (!"".equals(ffqd) && ffqd != null) {
				this.sql.setString(num++, ffqd);
			}
			if (!"".equals(dfjglb) && dfjglb != null) {
				this.sql.setString(num++, dfjglb);
			}
			if (!"".equals(slr) && slr != null) {
				this.sql.setString(num++, slr);
			}
			if (swsjkssj != null) {
				this.sql.setDate(num++, swsjkssj);
			}
			if (swsjjssj != null) {
				this.sql.setDate(num++, swsjjssj);
			}
			dsPerTx = this.sql.executeQuery();
		}
		//去除已经推送的人员
		//mod.zcc.20191010.不在去除，修改为查询出来分为未推送，已推送状态
		DataStore dsPerTxNts = new DataStore();
		DataStore dsPerTxYts = new DataStore();
		DataObject doPerTx = new DataObject();
		boolean activeFlag=false;
		for(int i=0; i<dsPerTx.rowCount(); i++){
			String ryid = dsPerTx.getString(i, "ryid");
			activeFlag = SiTools.chkExistsActiveBussiness("AdTxswdyzf", "H", ryid);
			doPerTx.clear();
			doPerTx = dsPerTx.getRow(i).clone();
			if(activeFlag==true){
				dsPerTx.put(i, "ywzt", "1");
				doPerTx.put("ywzt", "1");
				dsPerTxYts.addRow(doPerTx.clone());
			}else{
				dsPerTx.put(i, "ywzt", "2");
				doPerTx.put("ywzt", "2");
				dsPerTxNts.addRow(doPerTx.clone());
			}
		}
		if("1".equals(ywzt)){
			dsPerTx = dsPerTxYts;
		}else if("2".equals(ywzt)){
			dsPerTx = dsPerTxNts;
		}

		// 查询“企业在职职工一次性支付”人员
		DataStore dsPerZz = new DataStore();
		if (sxlx == null || "".equals(sxlx) || "2".equals(sxlx)) {
			sqlBF.setLength(0);
			sqlBF.append(" select '2'sxlx, a.grbh, a.xm, to_date(c.ztfsrq,'yyyyMMdd') swrq, e.jbjgid, ");
			sqlBF.append("        f.jbjgmc, e.dwbh, e.cbdwmc dwmc, decode(c.jsfx,'0','G','1','B','G') dfjglb, c.fffs ffqd, ");
			sqlBF.append("        c.slsj, c.slr, '查看' cz, d.ryid, d.rydjid, ");
			if (lqlsdy == null || "".equals(lqlsdy)) {
				sqlBF.append("        d.shbzhm, nvl(i.bcxmz, '0') lqlsdy ");
			} else {
				if ("0".equals(lqlsdy)) {
					sqlBF.append("        d.shbzhm, '0' lqlsdy ");
				} else {
					sqlBF.append("        d.shbzhm, '1' lqlsdy ");
				}
			}
			sqlBF.append("   from biu.person a, ");
			sqlBF.append("        sicp3uws.sizzswhd c, ");
			sqlBF.append("        si3u.per_reg d, ");
			sqlBF.append("        si3u.orgn_reg e, ");
			sqlBF.append("        be3u.agency_natl f, ");
			if (lqlsdy == null || "".equals(lqlsdy)) {
				sqlBF.append("        si3u.per_natl_cmpl h, ");
				sqlBF.append("        si3u.per_natl_cmpl i ");
			} else {
				sqlBF.append("        si3u.per_natl_cmpl h");
			}
			sqlBF.append("  where a.ryid = d.ryid and d.tblb like '%101%' and d.hdbz = '1' and d.dwdjid = e.dwdjid and e.jbjgid = f.jbjgid  ");
			sqlBF.append("  and exists (select 1 from si3u.per_reg k where c.rydjid = k.rydjid and d.ryid = k.ryid)  ");//取消dwdjid直接关联，可能存在年初办完在职一次性，又进行了增减员dwdjid发生变化.mod.zcc.20200424

			if (lqlsdy == null || "".equals(lqlsdy)) {
				sqlBF.append("  and a.ryid = i.ryid(+) ");
				sqlBF.append("  and i.bcxmbh(+) = 'LQLSDY' ");
			} else {
				if ("0".equals(lqlsdy)) {
					sqlBF.append("  and (not exists (select 1 from si3u.per_natl_cmpl k where a.ryid = k.ryid and k.bcxmbh = 'LQLSDY') ");
					sqlBF.append("  or exists (select 1 from si3u.per_natl_cmpl k where a.ryid = k.ryid and k.bcxmbh = 'LQLSDY' and k.bcxmz = '0')) ");
				} else {
					sqlBF.append("  and exists (select 1 from si3u.per_natl_cmpl k where a.ryid = k.ryid and k.bcxmbh = 'LQLSDY'  and k.bcxmz = '1') ");
				}
			}
			sqlBF.append(" and exists(select 1 from si3u.per_natl_cmpl g where d.ryid = g.ryid and g.bcxmbh = 'QYZZZGYCXZFRYBZ') ");
			sqlBF.append(" and  h.bcxmbh = 'QYZZZGYCXZFPIID' and h.ryid = d.ryid and h.bcxmz = c.piid ");
			sqlBF.append(" and e.jbjgid in (").append(jbjgid).append(") ");
			this.sql.setSql(sqlBF.toString());
			if (!"".equals(xzryid) && xzryid != null) {
				sqlBF.append("  and d.ryid =  ? ");
			}
			if (!"".equals(dwbh) && dwbh != null) {
				sqlBF.append("  and e.dwbh =  ? ");
			}
			if (!"".equals(ffqd) && ffqd != null) {
				sqlBF.append("  and c.fffs =  ? ");
			}
			if (!"".equals(dfjglb) && dfjglb != null) {
				sqlBF.append("  and decode(c.jsfx,'0','G','1','B','G') =  ? ");
			}
			if (!"".equals(slr) && slr != null) {
				sqlBF.append("  and c.slr =  ? ");
			}
			if (swsjkssj != null) {
				sqlBF.append("  and c.ztfsrq >=  ? ");
			}
			if (swsjjssj != null) {
				sqlBF.append("  and c.ztfsrq <=  ? ");
			}
			this.sql.setSql(sqlBF.toString());
			int num = 1;
			if (!"".equals(xzryid) && xzryid != null) {
				this.sql.setString(num++, xzryid);
			}
			if (!"".equals(dwbh) && dwbh != null) {
				this.sql.setString(num++, dwbh);
			}
			if (!"".equals(ffqd) && ffqd != null) {
				this.sql.setString(num++, ffqd);
			}
			if (!"".equals(dfjglb) && dfjglb != null) {
				this.sql.setString(num++, dfjglb);
			}
			if (!"".equals(slr) && slr != null) {
				this.sql.setString(num++, slr);
			}
			String swrq;
			if (swsjkssj != null) {
				swrq = DateUtil.dateToString(swsjkssj, "yyyyMMdd");
				this.sql.setString(num++, swrq);
			}
			if (swsjjssj != null) {
				swrq = DateUtil.dateToString(swsjjssj, "yyyyMMdd");
				this.sql.setString(num++, swrq);
			}
			dsPerZz = this.sql.executeQuery();
		}
		// mod.zcc.20191011.不在去除，修改为查询出来分为未推送，已推送状态
		DataStore dsPerZzNts = new DataStore();
		DataStore dsPerZzYts = new DataStore();
		DataObject doPerZz = new DataObject();
		activeFlag = false;
		for (int i = 0; i < dsPerZz.rowCount(); i++) {
			String ryid = dsPerZz.getString(i, "ryid");
			activeFlag = SiTools.chkExistsActiveBussiness("SiQyZzzgycxzf", "H", ryid);
			doPerZz.clear();
			doPerZz = dsPerZz.getRow(i).clone();
			if (activeFlag == true) {
				dsPerZz.put(i, "ywzt", "1");
				doPerZz.put("ywzt", "1");
				dsPerZzYts.addRow(doPerZz.clone());
			} else {
				dsPerZz.put(i, "ywzt", "2");
				doPerZz.put("ywzt", "2");
				dsPerZzNts.addRow(doPerZz.clone());
			}
		}
		if ("1".equals(ywzt)) {
			dsPerZz = dsPerZzYts;
		} else if ("2".equals(ywzt)) {
			dsPerZz = dsPerZzNts;
		}

		if ("1".equals(sxlx)) {
			dsPerInfo.combineDatastore(dsPerTx);
		} else if ("2".equals(sxlx)) {
			dsPerInfo.combineDatastore(dsPerZz);
		} else {
			dsPerInfo.combineDatastore(dsPerTx);
			dsPerInfo.combineDatastore(dsPerZz);
		}
		dsPerInfo.sort("slsj");

		dsPerInfo = HsuTools.genSysUserDataStore(dsPerInfo, "slr", "dysprbh", "slr");
		
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", dsPerInfo);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.校验待遇终止未核算待遇人员
	 * 
	 * @author 张成成
	 * @date 2019年9月17日
	 */
	public DataObject checkRybcxx(DataObject para) throws Exception {

		DataStore selectInfo = para.getDataStore("dwResult", new DataStore());
		if (selectInfo.rowCount() == 0) {
			return null;
		}
		String sxlx, ryid, shbzhm, xm, txswrybz, zzswrybz;
		boolean activeFlag = false;
		for (int i = 0; i < selectInfo.rowCount(); i++) {
			sxlx = selectInfo.getString(i, "sxlx");
			ryid = selectInfo.getString(i, "ryid");
			shbzhm = selectInfo.getString(i, "shbzhm");
			xm = selectInfo.getString(i, "xm");
			if ("1".equals(sxlx)) {
				txswrybz = SiTools.getPerNatlCmpl(ryid, "TXZZDYZFRYBZ", "0");
				if ("0".equals(txswrybz)) {
					this.bizException("选择推送的人员中，人员【" + shbzhm + xm
							+ "】不是【待遇终止，但未核算待遇】状态！");
				}
				//是否存在已经开企业业务
				activeFlag = SiTools.chkExistsActiveBussiness("AdTxswdyzf", "H", ryid);
				if (activeFlag == true) {
					this.bizException("选择推送的人员中，人员【" + shbzhm + xm
							+ "】的【退休终止待遇支付】已推送成功，但尚未办理完成，请确认!");
				}
			} else {
				zzswrybz = SiTools.getPerNatlCmpl(ryid, "QYZZZGYCXZFRYBZ", "0");
				if ("0".equals(zzswrybz)) {
					this.bizException("选择推送的人员中，人员【" + shbzhm + xm
							+ "】不是【在职死亡，但未核算待遇】状态！");
				}
				//是否存在已经开企业业务
				activeFlag = SiTools.chkExistsActiveBussiness("SiQyZzzgycxzf", "H", ryid);
				if (activeFlag == true) {
					this.bizException("选择推送的人员中，人员【" + shbzhm + xm
							+ "】的【企业在职职工一次性支付】已推送成功，但尚未办理完成，请确认!");
				}	
			}
		}
		return null;
	}
	/**
	 * 方法简介.获取在职职工死亡相关信息
	 * 
	 * @author 张成成
	 * @date 2019年9月28日
	 */
	public DataObject querySiQyZzzgswInfo(DataObject para) throws Exception {
		//接参数
		String biz = para.getString("biz");
		String rydjid = para.getString("rydjid","");
		if("".equals(rydjid) || rydjid == null){
			this.bizException("传入的人员登记ID为空，请检查！");
		}
		String ryid = para.getString("ryid","");
		if("".equals(ryid) || ryid == null){
			this.bizException("传入的人员ID为空，请检查！");
		}
		String perPiid = SiTools.getPerNatlCmpl(ryid, "QYZZZGYCXZFPIID");
		UTO muto = this.newUTO(SiQyZzzgycxzfUTO.class);
		para.put("piid", perPiid);
		DataObject vdo = muto.doMethod(biz, "querySiQyZzzgycxzfslInfo", para, this.getUser());
		DataStore ywxxInfo = vdo.getDataStore("ywxxinfo");
		String jsfx;
		//适配DFJGLB，code
		for(int i=0; i<ywxxInfo.rowCount(); i++){
			jsfx = ywxxInfo.getString(i, "jsfx");
			if("0".equals(jsfx)){
				ywxxInfo.put(i, "dfjglb", "G");
			}else if("1".equals(jsfx)){
				ywxxInfo.put(i, "dfjglb", "B");
			}
		}
		DataObject pdo = new DataObject();
		pdo.clear();
		pdo.put("ywxxinfo", ywxxInfo);
		return pdo;
	}
	/**
	 * 方法简介.获取退休死亡相关信息
	 * 
	 * @author 张成成
	 * @date 2019年9月29日
	 */
	public DataObject queryAdTxswzzzfInfo(DataObject para) throws Exception {
		//接参数
		String biz = para.getString("biz");
		String ryid = para.getString("ryid","");
		if("".equals(ryid) || ryid == null){
			this.bizException("传入的人员ID为空，请检查！");
		}
		String perPiid = SiTools.getPerNatlCmpl(ryid, "TXZZDYZFPIID", "");
		UTO muto = this.newUTO(AdTxswdyzfDyzzUTO.class);
		para.put("piid", perPiid);
		DataObject result = muto.doMethod(biz, "fwdAdTxswdyzfDyzzUTC", para, this.getUser());
		DataStore jyInfo = result.getDataStore("dsywsl");
		
		String lqrxm="", lqrsfzhm="", lqrdh = "", lqrgx ="";//领取人相关信息从工单表中获取.mod.zcc.20191207
		if(jyInfo.rowCount()>0){
			lqrxm = jyInfo.getString(0, "lqvrxm");
			lqrsfzhm = jyInfo.getString(0, "lqrsfzhm");
			lqrdh = jyInfo.getString(0, "lqrdh");
			lqrgx = jyInfo.getString(0, "yszgx");
		}
		
		muto = this.newUTO(AdTxswdyzfDyzzUTO.class);
		result = muto.doMethod(biz, "getAdBfdywhInfo", para, this.getUser());
		DataStore ffxx = result.getDataStore("ffxx");
		ffxx.put(0, "lqrxm", lqrxm);
		ffxx.put(0, "lqrsfzhm", lqrsfzhm);
		ffxx.put(0, "lqrdh", lqrdh);
		ffxx.put(0, "lqrgx", lqrgx);
		
		DataObject pdo = new DataObject();
		pdo.clear();
		pdo.put("jyInfo", jyInfo);
		pdo.put("ffxx", ffxx);
		return pdo;
	}
	/**
	 * 
	 * 方法简介.开启和核算业务
	 * 
	 * @author 张成成
	 * @date 2019年9月29日
	 */
	public DataObject startRybcxx(DataObject para) throws Exception {
		DataObject pdo = new DataObject();
		DataStore selectInfo = para.getDataStore("dwResult", new DataStore());
		if (selectInfo.rowCount() == 0) {
			return null;
		}
		String sxlx, ryid, rydjid, shbzhm, xm, jbjgid, grbh;//新增开启流程传入grbh（查看汉图）.add.zcc.20191112
		for (int i = 0; i < selectInfo.rowCount(); i++) {
			sxlx = selectInfo.getString(i, "sxlx");
			ryid = selectInfo.getString(i, "ryid");
			rydjid = selectInfo.getString(i, "rydjid");
			shbzhm = selectInfo.getString(i, "shbzhm");
			xm = selectInfo.getString(i, "xm");
			jbjgid = selectInfo.getString(i, "jbjgid");
			grbh = selectInfo.getString(i, "grbh");
			if ("1".equals(sxlx)) {
				// add.zcc.20191016.新增返sszfrq，供待办事项使用
				DataObject vdoPerInfo = AdTools.getPerInfoByRyid(ryid);

				String sszfrq = vdoPerInfo.getString("sszfrq");
				if (sszfrq == null) {
					this.bizException("该人员所属支付人群为空！");
				}

				String sszfrqmc = "退休养老待遇终止";
				if (("B").equals(sszfrq)) {
					sszfrqmc = "供养亲属待遇终止";
				}
				pdo.clear();
				pdo.put("shbzhm", shbzhm);
				pdo.put("xm", xm);
				pdo.put("ryid", ryid);
				pdo.put("biz", jbjgid);
				pdo.put("bljgid", jbjgid);
				pdo.put("sszfrqmc", sszfrqmc);
				pdo.put("sfzhm", shbzhm);
				pdo.put("grbh", grbh);
				ProcessUtil.newProcessIndependently(jbjgid, jbjgid, "AdTxswdyzf", pdo);
			} else {
				pdo.clear();
				pdo.put("shbzhm", shbzhm);
				pdo.put("xm", xm);
				pdo.put("ryid", ryid);
				pdo.put("rydjid", rydjid);
				pdo.put("biz", jbjgid);
				pdo.put("bljgid", jbjgid);
				pdo.put("cblb", "A");
				pdo.put("sfzhm", shbzhm);
				pdo.put("grbh", grbh);
				ProcessUtil.newProcessIndependently(jbjgid, jbjgid, "SiQyZzzgycxzf", pdo);
			}
		}
		return null;
	}
	
	/**
	 * 
	 * 方法简介.跳转到企业年度调待查询的JSP之前查询相关信息
	 *
	 * @author zhanghao
	 * @date 创建时间 2019年10月05日
	 * @since V1.0
	 */
	public DataObject fwdAdQyndtdQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		rdo.put("biz", biz);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.企业年度调待查询
	 * 去掉经办机构查询条件和没选任何地区时默认只能查询有权限的地市的限制 modify by wsk 2020/08/15
	 * @author zhanghao
	 * @date 创建时间 2019年10月05日
	 * @since V1.0
	 */
	public DataObject queryAdQyndtdInfo(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		String yxzjhm, dwdjid, dyffzt, nd, shqsrq, shzzrq, vbiz; 
		int qsnl, zznl, tdgl;
		
		//1.接收前台参数
		yxzjhm = para.getString("yxzjhm", "");
		dwdjid = para.getString("dwdjid");
		dyffzt = para.getString("dyffzt");
		nd = para.getDateToString("nd","yyyy");
		shqsrq = para.getDateToString("shqsrq", "yyyyMMdd");
		shzzrq = para.getDateToString("shzzrq", "yyyyMMdd");
		qsnl = para.getInt("qsnl", 0);
		zznl = para.getInt("zznl", 999);
		vbiz = para.getString("biz");
		
		// 前台的zznl的默认值是0，当取到0的时候，重新对zznl进行初始化操作
		if (zznl == 0) {
			zznl = 999;
		}
		
		if(vbiz == null || "".equals(vbiz)){
			this.bizException("获取的经办机构为空！");
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		//2.初始化参数
		int index = 1;
		
		//3.查询数据
		sqlBF.setLength(0);
		sqlBF.append("select a.ryid, a.nd, d.jbjgmc jbjgmc, e.grbh, b.xm,              ");
		sqlBF.append("       b.shbzhm, a.csrq dacsrq, a.dwdjid dwbh, c.cbdwmc, a.ltxrq, ");
		sqlBF.append("       a.ltxlb, a.dyhdrq, a.dyffzt, a.jbylj, a.nl,                ");
		sqlBF.append("       a.gjzc, a.ygsyz, a.cjgz53nq, a.jzgbz, a.tzbz, a.xjzbz,     ");
		sqlBF.append("       a.xgbz, a.ngsbz, a.tzje_gdbf, a.tzje_blbf, a.tzje_qt1,     ");
		sqlBF.append("       a.tzje_qt2, a.tzje_jzg, a.tzje_qt3, a.tzje_nlbf, a.tzje_nxbf,");
		sqlBF.append("       a.tsbt_38, a.tsbt_zyj, a.zylj, a.tzhj, '打印' cz           ");
		sqlBF.append("  from ad3u.per_std_chng_cal_qd a,                                ");
		sqlBF.append("       ad3u.per_info b,                                             ");
		sqlBF.append("       si3u.orgn_reg c,                                           ");
		sqlBF.append("       be3u.agency_natl d,                                           ");
		sqlBF.append("       biu.person e                                           ");
		sqlBF.append(" where a.ryid = b.ryid                                            ");
		sqlBF.append("   and b.ryid = e.ryid                                        ");
		sqlBF.append("   and a.dwdjid = c.dwdjid                                        ");
		sqlBF.append("   and c.jbjgid = d.jbjgid                                         ");
		sqlBF.append("   and a.nl between ? and ?                                       ");
		if (yxzjhm != null && !"".equals(yxzjhm)) {
			sqlBF.append("   and b.shbzhm = ? ");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and a.dwdjid = ? ");
		}
		if (dyffzt != null && !"".equals(dyffzt)) {
			sqlBF.append("   and a.dyffzt in (").append(HsuTools.replaceC2QCQ(dyffzt)).append(") ");
		}
		if (nd != null && !"".equals(nd)) {
			sqlBF.append("   and a.nd = '").append(nd).append("' ");
		}
		if (shqsrq != null && !"".equals(shqsrq)) {
			sqlBF.append("   and a.dyhdrq >= '").append(shqsrq).append("' ");
		}
		if (shzzrq != null && !"".equals(shzzrq)) {
			sqlBF.append("   and a.dyhdrq <= '").append(shzzrq).append("' ");
		}
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setInt(index++, qsnl);
		this.sql.setInt(index++, zznl);
		if (yxzjhm != null && !"".equals(yxzjhm)) {
			this.sql.setString(index++, yxzjhm);
		}
		if(dwdjid != null && !"".equals(dwdjid)){
			this.sql.setString(index++, dwdjid);
		}
		DataStore ryxx = this.sql.executeQuery();
		
		//4.组装调待工龄列（从ad3u.per_cmpl中的TZGL获取）
		for (int i = 0; i < ryxx.rowCount(); i++) {
			tdgl = Integer.parseInt(AdTools.getPerCmpl(ryxx.getString(i, "ryid"), "TZGL"));
			ryxx.put(i, "tdgl", tdgl);
		}
		ryxx = ryxx.sort("nd");
		
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}
	/**
	 * 方法简介.查询打印企业年度调待数据
	 * 
	 * @author zhanghao
	 * @date 创建时间 2019年10月05日
	 * @since V1.0
	 */
	public DataObject queryAdDyqyndtdinfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		SPrinter sprinter = new SPrinter(), sprinter2 = new SPrinter();
		DataStore ds_std = new DataStore(), ds_std_other = new DataStore(), ds = new DataStore(), ds_std_copy = new DataStore(), ds_std_other_copy = new DataStore(), dsBf = new DataStore();
		String ryid = "", nd = "", grbh = "", xm = "", ltxlb = "", csrq = "", cjgzrq = "", ltxrq = "", cbdwmc = "", btmc = "", qsny = "", jbjgid = "", htmlprintpdf1 = "", htmlprintpdf2 = "", ny = "", htmlprintpdf = "";
		double ptgd = 0, ptbl = 0, ptnx = 0, xj = 0, jzgtz = 0, nltz = 0, yzhj = 0, bfhj = 0, tdqyjbyljxj = 0, wtdqyjbyljxj = 0, tdqtxdy = 0, tdhtxdy = 0, lx = 0, tdqyjbylj = 0, tzgl =0;
		double qzqtzhj = 0;// 取整前调资合计
		int xh = 0, bfys = 0;
		
		ryid = para.getString("ryid");
		nd = para.getString("nd");
		
		if (ryid == null || "".equals(ryid)) {
			this.bizException("传入的人员ID为空，请检查！");
		}
		if (nd == null || "".equals(nd)) {
			this.bizException("传入的年度为空，请检查！");
		}
		// 根据年度不同，取不同的调待补贴.mod.谈杰.20191111
		if("2008".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q808', 'Q810', 'Q812', 'Q814', 'Q815', ");
			sqlBF.append("                'Q816', 'Q818') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2009".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q820', 'Q822', 'Q824', 'Q826', 'Q827') ");
			sqlBF.append("                'Q828', 'Q830') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2010".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q832', 'Q834', 'Q835', 'Q837', 'Q838', ");
			sqlBF.append("                'Q839', 'Q840') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2011".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q841', 'Q842', 'Q843', 'Q844', 'Q845', ");
			sqlBF.append("                'Q846', 'Q847') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2012".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q849', 'Q850', 'Q851', 'Q852', 'Q853', ");
			sqlBF.append("                'Q861') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2013".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q855', 'Q856', 'Q857', 'Q858', 'Q859', ");
			sqlBF.append("                'Q861') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2014".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q864', 'Q865', 'Q866', 'Q858', 'Q867', ");
			sqlBF.append("                'Q868') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2015".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q872', 'Q873', 'Q874', 'Q875', 'Q876') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2016".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q881', 'Q882', 'Q883', 'Q884', 'Q885') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2017".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q890', 'Q891', 'Q892', 'Q893', 'Q894') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2018".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q899', 'Q900', 'Q902', 'Q903', 'Q904') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2019".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('Q909', 'Q910', 'Q911', 'Q912', 'Q913') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}
		else if("2020".equals(nd)){
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in ('QA48', 'QA49', 'QA50', 'QA51', 'QA52', 'QA53', 'QA54', 'QA55', 'QA56') ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}else if("2021".compareTo(nd) <= 0){
			String zfjbjgid = AdTools.getZfjbjgidByRyid(ryid);
			String ad3u1223 = SiTools.getParaYear(zfjbjgid, "ad3u1223", nd, "");// 调资年度新增补贴,逗号隔开的补贴编号
			if (ad3u1223 == null || "".equals(ad3u1223)) {
				this.bizException(nd + "调资年度的新增补贴未配置！");
			}
			
			sqlBF.setLength(0);
			sqlBF.append("select (MONTHS_BETWEEN ( to_date(max(yfny),'yyyyMM'), to_date(min(yfny),'yyyyMM') ) + 1) bfys, nvl(sum(btje),0) bfhj ");
			sqlBF.append("  from ad3u.per_giv_detl ");
			sqlBF.append(" where btbh in (" + HsuTools.replaceC2QCQ(ad3u1223) + ") ");
			sqlBF.append("   and fsyy = '2' ");
			sqlBF.append("   and ryid = ? ");			
			sqlBF.append("   and bz <> '多发扣回' ");	
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsBf = this.sql.executeQuery();
		}
		
		if (dsBf.rowCount() > 0) {
			bfys = dsBf.getInt(0, "bfys");
			bfhj = dsBf.getDouble(0, "bfhj");
		}
		//调资工龄取法  赵俊杰.2020-7-29
		 tzgl = Double.valueOf(AdTools.getPerCmpl(ryid, "TZGL", "0"));
		if (tzgl == 0) {
			sqlBF.setLength(0);
			sqlBF.append(" select ceil(nvl(zhqnx, 0) + nvl(zhhnx, 0)) tzgl ");
			sqlBF.append("   from ad3u.emp_info a ");
			sqlBF.append("  where ryid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			DataStore demp = this.sql.executeQuery();
			if (demp.rowCount() > 0) {
				tzgl = demp.getDouble(0, "tzgl");
			}
		}
		tzgl = Math.ceil(tzgl);
		

		// 更新ad3u.per_std_chng_cal_qd 表的总养老金.mod.谈杰.20191111
		String zyljny = nd + "12";
		double zylj = 0, tzhj = 0, yzylj = 0;

		// 取调待后的养老金
		sqlBF.setLength(0);
		sqlBF.append(" select sum(btje) zylj ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and ? between qsny and nvl(zzny, '999999') ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, zyljny);
		DataStore dsZylj = this.sql.executeQuery();
		
		if(dsZylj.rowCount() > 0){
			zylj = dsZylj.getDouble(0, "zylj");
		}
		
		// 取调资合计
		sqlBF.setLength(0);
		sqlBF.append(" select tzhj ");
		sqlBF.append("   from ad3u.per_std_chng_cal_qd ");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and nd = ? ");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, nd);
		DataStore dsTzhj = this.sql.executeQuery();
		
		if(dsTzhj.rowCount() > 0){
			tzhj = dsTzhj.getDouble(0, "tzhj");
		}
		
		yzylj = MathUtil.round(zylj - tzhj, 2);
		// 更新总养老金
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.per_std_chng_cal_qd ");
		sqlBF.append("    set zylj = ? ");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and nd = ? ");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setDouble(1, yzylj);
		this.sql.setString(2, ryid);
		this.sql.setString(3, nd);
		this.sql.executeUpdate();
		
		ny = DateUtil.addMonthToString(nd, "yyyy", -1) + "12";
		sqlBF.setLength(0);
		sqlBF.append("select b.grbh, a.xm, a.ltxlb, a.csrq, d.cjgzrq, ");
		sqlBF.append("       a.ltxrq, c.cbdwmc, nvl(a.jbylj, 0) tdqyjbylj, nvl(a.tzje_gdbf, 0) ptgd, ");
		sqlBF.append("       nvl(a.tzje_blbf, 0) ptbl, nvl(a.tzje_nxbf, 0) ptnx,  ");
		sqlBF.append("       nvl(a.tzje_jzg, 0) + nvl(a.tzje_nlbf, 0) + nvl(a.tzje_qt1, 0) + nvl(a.tzje_qt2, 0) + nvl(a.tzje_qt3, 0) xj, ");
		sqlBF.append("       nvl(a.tzje_jzg, 0) jzgtz, nvl(a.tzje_nlbf, 0) nltz, nvl(a.tzhj, 0) yzhj, nvl(a.jbylj, 0) tdqyjbyljxj, nvl(a.zylj, 0) tdqtxdy, ");
		sqlBF.append("       nvl(a.zylj, 0) - nvl(a.jbylj, 0) wtdqyjbyljxj, nvl(a.zylj, 0) + nvl(a.tzhj, 0) tdhtxdy, c.jbjgid, ");
		sqlBF.append("       nvl(a.tzje_jzg, 0) + nvl(a.tzje_nlbf, 0) + nvl(a.tzje_qt1, 0) + nvl(a.tzje_qt2, 0) + nvl(a.tzje_qt3, 0) + nvl(a.tzje_gdbf, 0) + nvl(a.tzje_blbf, 0) + nvl(a.tzje_nxbf, 0) qzqtzhj");
		sqlBF.append("  from ad3u.per_std_chng_cal_qd a, ");
		sqlBF.append("       biu.person               b, ");
		sqlBF.append("       si3u.orgn_reg            c, ");
		sqlBF.append("       ad3u.emp_info            d   ");
		sqlBF.append(" where a.ryid = b.ryid ");
		sqlBF.append("   and a.dwdjid = c.dwdjid ");
		sqlBF.append("   and a.ryid = d.ryid ");
		sqlBF.append("   and a.ryid = ? ");
		sqlBF.append("   and nd = ? ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, nd);
		ds = this.sql.executeQuery();
		
		if(ds.rowCount() == 0){
			this.bizException("未查询到人员ID【" + ryid + "】的调待信息！");
		}

		grbh = ds.getString(0, "grbh");
		xm = ds.getString(0, "xm");
		ltxlb = ds.getString(0, "ltxlb");
		csrq = ds.getString(0, "csrq");
		cjgzrq = ds.getString(0, "cjgzrq");
		
		ltxrq = ds.getString(0, "ltxrq");
		cbdwmc = ds.getString(0, "cbdwmc");
		tdqyjbylj = ds.getDouble(0, "tdqyjbylj");
		ptgd = ds.getDouble(0, "ptgd");
		jzgtz = ds.getDouble(0, "jzgtz");
		
		nltz = ds.getDouble(0, "nltz");
		ptbl = ds.getDouble(0, "ptbl");
		ptnx = ds.getDouble(0, "ptnx");
		xj = ds.getDouble(0, "xj");
		yzhj = ds.getDouble(0, "yzhj");
		
		tdqyjbyljxj = ds.getDouble(0, "tdqyjbyljxj");
		tdqtxdy = ds.getDouble(0, "tdqtxdy");
		wtdqyjbyljxj = ds.getDouble(0, "wtdqyjbyljxj");
		tdhtxdy = ds.getDouble(0, "tdhtxdy");
		jbjgid = ds.getString(0, "jbjgid");
		qzqtzhj = ds.getDouble(0, "qzqtzhj");
		
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("查询的经办机构ID为空，查询失败！");
		}

		sqlBF.setLength(0);
		sqlBF.append("select b.btbh, c.btmc, a.qsny, a.btje lx ");
		sqlBF.append("  from ad3u.per_giv_month_std a, ");
		sqlBF.append("       ad3u.giv_item_config   b, ");
		sqlBF.append("       ad3u.giv_item          c, ");
		sqlBF.append("       ad3u.per_info          d, ");
		sqlBF.append("       si3u.orgn_reg          e ");
		sqlBF.append(" where a.btbh = b.btbh ");
		sqlBF.append("   and a.btbh = c.btbh ");
		sqlBF.append("   and a.ryid = d.ryid ");
		sqlBF.append("   and d.dwdjid = e.dwdjid ");
		sqlBF.append("   and a.ryid =  ? ");
		sqlBF.append("   and b.jbjgid = e.jbjgid ");
		sqlBF.append("   and ? between a.qsny and nvl(a.zzny, '205012') ");
		sqlBF.append("   and nvl(b.jcyljbz, '0') = '1' ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, ny);
		ds_std_copy = this.sql.executeQuery();
		for (int i = 0; i < ds_std_copy.rowCount(); i++) {
			xh = i + 1;
			btmc = ds_std_copy.getString(i, "btmc");
			qsny = ds_std_copy.getString(i, "qsny");
			lx = ds_std_copy.getDouble(i, "lx");
			if (xh % 2 == 1) {
				ds_std.addRow();
				ds_std.put(ds_std.rowCount() - 1, "xh", DataFormat.formatDouble(xh, 0));
				ds_std.put(ds_std.rowCount() - 1, "btmc", btmc);
				ds_std.put(ds_std.rowCount() - 1, "qsny", qsny);
				ds_std.put(ds_std.rowCount() - 1, "lx", lx);
			} else {
				ds_std.put(ds_std.rowCount() - 1, "xh1", DataFormat.formatDouble(xh, 0));
				ds_std.put(ds_std.rowCount() - 1, "btmc1", btmc);
				ds_std.put(ds_std.rowCount() - 1, "qsny1", qsny);
				ds_std.put(ds_std.rowCount() - 1, "lx1", lx);
			}

		}
		if (ds_std_copy.rowCount() % 2 == 1) {
			ds_std.put(ds_std.rowCount() - 1, "xh1", "");
			ds_std.put(ds_std.rowCount() - 1, "btmc1", "");
			ds_std.put(ds_std.rowCount() - 1, "qsny1", "");
			ds_std.put(ds_std.rowCount() - 1, "lx1", "");
		}
		ds_std.sort("btbh");
		sqlBF.setLength(0);
		sqlBF.append("select b.btbh, c.btmc, a.qsny, a.btje lx ");
		sqlBF.append("  from ad3u.per_giv_month_std a, ");
		sqlBF.append("       ad3u.giv_item_config   b, ");
		sqlBF.append("       ad3u.giv_item          c, ");
		sqlBF.append("       ad3u.per_info          d, ");
		sqlBF.append("       si3u.orgn_reg          e ");
		sqlBF.append(" where a.btbh = b.btbh ");
		sqlBF.append("   and a.btbh = c.btbh ");
		sqlBF.append("   and a.ryid = d.ryid ");
		sqlBF.append("   and d.dwdjid = e.dwdjid ");
		sqlBF.append("   and a.ryid =  ? ");
		sqlBF.append("   and b.jbjgid = e.jbjgid ");
		sqlBF.append("   and ? between a.qsny and nvl(a.zzny, '205012') ");
		sqlBF.append("   and nvl(b.jcyljbz, '0') = '0' ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		this.sql.setString(2, ny);
		ds_std_other_copy = this.sql.executeQuery();

		for (int i = 0; i < ds_std_other_copy.rowCount(); i++) {
			xh = i + 1;
			btmc = ds_std_other_copy.getString(i, "btmc");
			qsny = ds_std_other_copy.getString(i, "qsny");
			lx = ds_std_other_copy.getDouble(i, "lx");
			if (xh % 2 == 1) {
				ds_std_other.addRow();
				ds_std_other.put(ds_std_other.rowCount() - 1, "xh", DataFormat.formatDouble(xh, 0));
				ds_std_other.put(ds_std_other.rowCount() - 1, "btmc", btmc);
				ds_std_other.put(ds_std_other.rowCount() - 1, "qsny", qsny);
				ds_std_other.put(ds_std_other.rowCount() - 1, "lx", lx);
			} else {
				ds_std_other.put(ds_std_other.rowCount() - 1, "xh1", DataFormat.formatDouble(xh, 0));
				ds_std_other.put(ds_std_other.rowCount() - 1, "btmc1", btmc);
				ds_std_other.put(ds_std_other.rowCount() - 1, "qsny1", qsny);
				ds_std_other.put(ds_std_other.rowCount() - 1, "lx1", lx);
			}

		}
		if (ds_std_other_copy.rowCount() % 2 == 1) {
			ds_std_other.put(ds_std_other.rowCount() - 1, "xh1", "");
			ds_std_other.put(ds_std_other.rowCount() - 1, "btmc1", "");
			ds_std_other.put(ds_std_other.rowCount() - 1, "qsny1", "");
			ds_std_other.put(ds_std_other.rowCount() - 1, "lx1", "");
		}
		ds_std_other.sort("btbh");
		sprinter.clear();
		sprinter.putPara("nf", nd);
		sprinter.putPara("grbh", grbh);
		sprinter.putPara("xm", xm);
		sprinter.putPara("ltxlb", HsuTools.discode("ZFRYLB", ltxlb, ltxlb));
		sprinter.putPara("csrq", csrq);
		
		sprinter.putPara("cjgzrq", cjgzrq);
		sprinter.putPara("ltxrq", ltxrq);
		sprinter.putPara("cbdwmc", cbdwmc);
		sprinter.putPara("tdqyjbylj", DataFormat.formatDouble(tdqyjbylj, 2));
		sprinter.putPara("ptgd", DataFormat.formatDouble(ptgd, 2));
		
		sprinter.putPara("ptbl", DataFormat.formatDouble(ptbl, 2));
		sprinter.putPara("ptnx", DataFormat.formatDouble(ptnx, 2));
		sprinter.putPara("xj", DataFormat.formatDouble(xj, 2));
		sprinter.putPara("jzgtz", DataFormat.formatDouble(jzgtz, 2));
		sprinter.putPara("nltz", DataFormat.formatDouble(nltz, 2));
		sprinter.putPara("tzgl", DataFormat.formatDouble(tzgl, 2));
		
		sprinter.putPara("yzhj", DataFormat.formatDouble(yzhj, 2));
		sprinter.putPara("bfys", bfys);
		sprinter.putPara("bfhj", DataFormat.formatDouble(bfhj, 2));
		sprinter.putPara("ds_std", ds_std);
		sprinter.putPara("tdqyjbyljxj", DataFormat.formatDouble(tdqyjbyljxj, 2));
		sprinter.putPara("qzqtzhj", DataFormat.formatDouble(qzqtzhj, 2));// 取整前调资合计(是调资记录表里各项的和的实际值，没有做取整)
		
		sprinter2.putPara("wtdqyjbyljxj", DataFormat.formatDouble(wtdqyjbyljxj, 2));
		sprinter2.putPara("tdqtxdy", DataFormat.formatDouble(tdqtxdy, 2));
		sprinter2.putPara("tdhtxdy", DataFormat.formatDouble(tdhtxdy, 2));
		sprinter2.putPara("ds_std_other", ds_std_other);
		// 返回打印内容
		if("2021".compareTo(nd) <= 0){
			htmlprintpdf1 = sprinter.printTxtModelAsTxtStr(jbjgid, "2021adQytxtzrytdqkmxb");
			int idx = htmlprintpdf1.lastIndexOf("~chpg"); //修复打印数据超过一页时出现的打印不全问题 modify by wsk 2020/8/18
		    htmlprintpdf1 = htmlprintpdf1.substring(0, idx) + htmlprintpdf1.substring(idx + 5, htmlprintpdf1.length());
			htmlprintpdf2 = sprinter2.printTxtModelAsTxtStr(jbjgid, "2021adQytxtzrytdqkmxb2");
		}else{
			htmlprintpdf1 = sprinter.printTxtModelAsTxtStr(jbjgid, "adQytxtzrytdqkmxb");
			int idx = htmlprintpdf1.lastIndexOf("~chpg"); //修复打印数据超过一页时出现的打印不全问题 modify by wsk 2020/8/18
		    htmlprintpdf1 = htmlprintpdf1.substring(0, idx) + htmlprintpdf1.substring(idx + 5, htmlprintpdf1.length());
			htmlprintpdf2 = sprinter2.printTxtModelAsTxtStr(jbjgid, "adQytxtzrytdqkmxb2");
		}

		htmlprintpdf = SecUtil.base64Encode(sprinter.resolveTxtStrToPdf(htmlprintpdf1 + htmlprintpdf2));

		rdo.put("htmlprintpdf", htmlprintpdf);
		return rdo;
	}
	
	/**
	 * 方法简介.跳转到企业社会化管理服务信息统计的JSP
	 *
	 * @author 房绍旖 2019年10月5日
	 */
	public DataObject fwdAdQyshhglfwxxtj(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);

		return rdo;
	}
	
	/**
	 * 方法简介.企业社会化管理服务信息统计查询方法
	 *
	 * @author 房绍旖 2019年10月5日
	 */
	public DataObject queryAdQyshhglfwxxtj(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		String jbjgid = para.getString("jbjgid");
		String jdid = para.getString("jdid");
		String sqid = para.getString("sqid");
		String lmbz = para.getString("lmbz");
		String glbz = para.getString("glbz");
		String ggbz = para.getString("ggbz");
		String zbbz = para.getString("zbbz");
		String xb = para.getString("xb");
		String dyspbz = para.getString("dyspbz");
		String zzmm = para.getString("zzmm");
		String tcjn = para.getString("tcjn");
		String xqah = para.getString("xqah");
		String vbiz = para.getString("biz");

		if (vbiz == null || "".equals(vbiz)) {
			this.bizException("获取的经办机构为空");
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		String jbjg = "'" + biz + "01','" + biz + "03'";

		String tcjnStr = "%" + tcjn + "%";
		String xqahStr = "%" + xqah + "%";

		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, a.xm, a.xb, a.shbzhm, a.jdid, ");
		sqlBF.append("        a.sqid, a.dyxsksny, a.nrsqglrq, a.dyffzt, b.ltxlb, ");
		sqlBF.append("        b.ltxrq, c.grbh, c.sjhm, c.jtzz, d.dwbh, d.cbdwmc, ");
		sqlBF.append("        d.jbjgid, e.jbjgmc, f.jdmc, g.sqmc ");// 优化SQL，在主SQL中增加查询字段.mod.谈杰.20200326
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.emp_info b, ");
		sqlBF.append("        biuv.person c, ");
		sqlBF.append("        si3u.orgn_reg d, ");
		sqlBF.append("        be3u.agency_natl e, ");// 优化SQL，将后面循环查询的表加入主SQL.mod.谈杰.20200326
		sqlBF.append("        be3u.street_natl f, ");
		sqlBF.append("        be3u.community_natl g ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.dwdjid = d.dwdjid ");
		sqlBF.append("    and d.jbjgid = e.jbjgid(+) ");// 优化SQL，增加限制条件.mod.谈杰.20200326
		sqlBF.append("    and a.jdid = f.jdid(+) ");
		sqlBF.append("    and a.sqid = g.sqid(+) ");

		if (jbjgid != null && !"".equals(jbjgid)) {// 经办机构
			sqlBF.append("   and d.jbjgid in (")
				.append(HsuTools.replaceC2QCQ(jbjgid))
				.append(") ");
		} else {
			sqlBF.append("   and d.jbjgid in (").append(jbjg).append(") ");
		}

		if (jdid != null && !"".equals(jdid)) {// 街道
			sqlBF.append("   and a.jdid in (")
				.append(HsuTools.replaceC2QCQ(jdid))
				.append(") ");
		}

		if (sqid != null && !"".equals(sqid)) {// 社区
			sqlBF.append("   and a.sqid in (")
				.append(HsuTools.replaceC2QCQ(sqid))
				.append(") ");
		}

		if (lmbz != null && !"".equals(lmbz)) {// 劳模
			if ("1".equals(lmbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and e.bcxmz like '%4%') ");
			} else if ("0".equals(lmbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and e.bcxmz not like '%4%') ");
			}
		}

		if (glbz != null && !"".equals(glbz)) {// 八十岁以上高龄
			if ("1".equals(glbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and e.bcxmz like '%1%') ");
			} else if ("0".equals(glbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and e.bcxmz not like '%1%') ");
			}
		}

		if (ggbz != null && !"".equals(ggbz)) {// 孤寡
			if ("1".equals(ggbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and e.bcxmz like '%2%') ");
			} else if ("0".equals(glbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and e.bcxmz not like '%2%') ");
			}
		}

		if (zbbz != null && !"".equals(zbbz)) {// 重病
			if ("1".equals(zbbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and e.bcxmz like '%3%') ");
			} else if ("0".equals(zbbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and e.bcxmz not like '%3%') ");
			}
		}

		if (xb != null && !"".equals(xb)) {// 性别
			sqlBF.append("   and a.xb = '" + xb + "'");
		}

		if (dyspbz != null && !"".equals(dyspbz)) {// 待遇审批标志
			sqlBF.append("   and a.dyspbz = '" + dyspbz + "'");
		}

		if (zzmm != null && !"".equals(zzmm)) {// 政治面貌
			sqlBF.append("   and c.zzmm = '" + zzmm + "'");
		}

		if (tcjn != null && !"".equals(tcjn)) {// 特长技能
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("                  from ad3u.per_cmpl e ");
			sqlBF.append("                 where a.ryid = e.ryid ");
			sqlBF.append("                   and e.bcxmbh = 'TCJN' ");
			sqlBF.append("                   and e.bcxmz like '" + tcjnStr
					+ "')");
		}

		if (xqah != null && !"".equals(xqah)) {// 兴趣爱好
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("                  from ad3u.per_cmpl e ");
			sqlBF.append("                 where a.ryid = e.ryid ");
			sqlBF.append("                   and e.bcxmbh = 'XQAH' ");
			sqlBF.append("                   and e.bcxmz like '" + xqahStr
					+ "')");
		}
		this.sql.setSql(sqlBF.toString());		
		DataStore ryxx = this.sql.executeQuery();
		
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}
	
	/**
	 * 方法简介.跳转到企业转移信息维护的JSP
	 *
	 * @author 房绍旖 2019年10月5日
	 */
	public DataObject fwdAdQyzyxxwh(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String biz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("biz", biz); // 增加出参 sjx 2019-11-26
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	
	/**
	 * 方法简介.企业转移信息维护查询方法
	 *
	 * @author 房绍旖 2019年10月5日
	 */
	public DataObject queryAdQyzyxxwh(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		String jbjgid = para.getString("jbjgid");
		String jdid = para.getString("jdid");
		String sqid = para.getString("sqid");
		String dyffzt = para.getString("dyffzt");
		String ryid = para.getString("ryid");
		String biz = para.getString("biz");

		if (biz == null || "".equals(biz)) {
			this.bizException("获取的经办机构为空");
		}
		String jbjg = "'" + biz + "01','" + biz + "03'";

		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, a.xm, a.xb, a.shbzhm, a.jdid, ");
		sqlBF.append("        a.dyxsksny, a.nrsqglrq, b.ltxlb, b.ltxrq, c.grbh, ");
		sqlBF.append("        d.dwbh, d.cbdwmc, '撤销' cz ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.emp_info b, ");
		sqlBF.append("        biuv.person c, ");
		sqlBF.append("        si3u.orgn_reg d ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.dwdjid = d.dwdjid ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("                  from ad3u.per_cmpl e ");
		sqlBF.append("                 where a.ryid = e.ryid ");
		sqlBF.append("                   and e.bcxmbh = 'NRSQGLBZ' ");// 社会化管理标志是1
		sqlBF.append("                   and e.bcxmz = '1') ");
		
		if (jbjgid != null && !"".equals(jbjgid)) {// 经办机构
			sqlBF.append("   and d.jbjgid in (")
				.append(HsuTools.replaceC2QCQ(jbjgid))
				.append(") ");
		} else {
			sqlBF.append("   and d.jbjgid in (").append(jbjg).append(") ");
		}

		if (jdid != null && !"".equals(jdid)) {// 街道
			sqlBF.append("   and a.jdid in (")
				.append(HsuTools.replaceC2QCQ(jdid))
				.append(") ");
		}

		if (sqid != null && !"".equals(sqid)) {// 社区
			sqlBF.append("   and a.sqid in (")
				.append(HsuTools.replaceC2QCQ(sqid))
				.append(") ");
		}

		if (dyffzt != null && !"".equals(dyffzt)) {// 待遇发放状态
			sqlBF.append("   and a.dyffzt = '" + dyffzt + "'");
		}

		if (ryid != null && !"".equals(ryid)) {// 人员id
			sqlBF.append("   and a.ryid = '" + ryid + "'");
		}

		this.sql.setSql(sqlBF.toString());
		DataStore ryxx = this.sql.executeQuery();

		for (int i = 0; i < ryxx.rowCount(); i++) {
			jdid = ryxx.getString(i, "jdid");

			String jdmc = "";

			sqlBF.setLength(0);
			sqlBF.append(" select jdmc ");
			sqlBF.append("   from be3u.street_natl ");
			sqlBF.append("  where jdid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, jdid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				jdmc = dsTemp.getString(0, "jdmc");
			}

			ryxx.put(i, "jdmc", jdmc);
		}

		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}
	
	/**
	 * 方法简介.清空补充信息
	 * 
	 * @author 房绍旖 2019年10月6日
	 */
	public DataObject delpercmpl(final DataObject para) throws Exception {
		DataObject pdo = new DataObject();
		String ryid = para.getString("ryid");

		try {
			pdo.put("pjbh", this.genPjbh(ryid));
			pdo.put("ryid", ryid);
			pdo.put("bcxmbh", "NRSQGLBZ");
			pdo.put("bcxmz", "");
			iDoAdPutAdPerCmplASO.doEntry(pdo);
		} catch (ASOException e) {
			Transaction tm = TransactionManager.getTransaction();
			tm.rollback();
			this.bizException("撤销失败：" + e.getMessage());
		}
		return null;
	}
	
	/** 
	 * 获取凭据编号
	 * 
	 * @author 房绍旖 2019年10月6日
	 */
	private String genPjbh(String pRyid) {
		Date d = DateUtil.getCurrentDate();
		String s;
		try {
			// 精确到毫秒的串
			s = DateUtil.dateToString(d, "yyyyMMddhh24mmssSS");
		} catch (AppException e) {
			s = "30001231000000000";
		}
		return "W" + s + pRyid;
	}
	/**
	 * 方法简介.查询打印重复领取待遇协助抵扣明细表
	 * 
	 * @author 张云盛
	 * @date 创建时间 2019年10月06日
	 * @since V1.0
	 */
	public DataObject queryAdDycflqdyxzdkmxinfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sb = new StringBuffer();
		DataStore ds = new DataStore();
		DataStore dsDkje = new DataStore(); // 查询抵扣金额
		SPrinter sprinter = new SPrinter();
		String ryid = "";

		String ffny = para.getString("ffny").substring(0, 6);
		String jbjgid = para.getString("jbjgid"); //当前的jbjgid
		String jbjg = "'"+jbjgid+"01','"+jbjgid+"03'";
		String cxjbjgid = para.getString("cxjbjgid"); //查询条件的jbjgid

		sb.setLength(0);
		sb.append("	select b.btje xydkje, 0 - a.btje dydjke, b.zhrq	,a.ryid,");
		sb.append("	 	   c.xm,c.shbzhm 								");
		sb.append("	  from ad3u.per_giv_detl_ungiv a, 					");
		sb.append("        ad3u.per_giv_back b,							");
		sb.append("        biuv.person c,   						    ");
		sb.append("        ad3u.bill_genl d   							");
		sb.append("  where a.btbh = 'Q941'								");
		sb.append("    and a.btbh = b.btbh								");
		sb.append("    and a.ryid = b.ryid								");
		sb.append("    and a.ryid = c.ryid								");
		sb.append("    and a.zdlsh = d.zdlsh							");
		sb.append("	   and a.ffny = ?	and	d.bfny = ?       			");
		if(!"".equals(cxjbjgid) && null!=cxjbjgid){
			sb.append("   and d.jbjgid in (").append(HsuTools.replaceC2QCQ(cxjbjgid)).append(") ");
		}else{
			sb.append("   and d.jbjgid in (").append(jbjg).append(") ");
		}
		this.sql.setSql(sb.toString());
		this.sql.setString(1, ffny);
		this.sql.setString(2, ffny);
		
		ds = this.sql.executeQuery();

		sb.setLength(0);
		sb.append(" select sum(a.btje) ydkje		");
		sb.append("   from ad3u.per_giv_detl a,     ");
		sb.append("        ad3u.bill_genl d   		");
		sb.append("  where ryid = ?  				");
		sb.append("    and ffny < ?  				");
		sb.append("    and a.zdlsh = d.zdlsh		");
		sb.append("    and btbh = 'Q941'  		    ");
		if(!"".equals(cxjbjgid) && null!=cxjbjgid){
			sb.append("   and d.jbjgid in (").append(HsuTools.replaceC2QCQ(cxjbjgid)).append(") ");
		}else{
			sb.append("   and d.jbjgid in (").append(jbjg).append(") ");
		}
		String getYdkje = sb.toString();

		// 拼接已抵扣金额
		for (int i = 0; i < ds.rowCount(); i++) {
			ryid = ds.getString(i, "ryid");
			this.sql.setSql(getYdkje);
			this.sql.setString(1, ryid);
			this.sql.setString(2, ffny);
			dsDkje = this.sql.executeQuery();
			if (dsDkje.rowCount() > 0) {
				ds.put(i, "ydkje", MathUtil.round(0 - dsDkje.getDouble(0, "ydkje"), 2));
			}
			ds.put(i, "xh", i + 1+"");
		}
		String jbjgmc = HsuTools.getJbjgqc(jbjgid); // 打印单据的左上角显示办理机构
		String dqny = DateUtil.getCurrentDateToString("yyyyMM");
		String year = dqny.substring(0, 4) + "年" ;
		String month = dqny.substring(4, 6) + "月";
		// 返回打印内容
		sprinter.clear();
		sprinter.putPara("jbjgmc", jbjgmc);
		sprinter.putPara("year", year);
		sprinter.putPara("month", month);
		sprinter.putDataStore(ds);
		String printhtml = sprinter.printTxtModelAsTxtStr(this.getBizInstitution(), "adDycflqdyxzdkmxb");

		rdo.put("printhtml", printhtml);
		return rdo;
	}
	
	/**
	 * 方法简介.查询打印重复领取待遇协助抵扣明细表
	 * 
	 * @author 张云盛
	 * @date 创建时间 2019年10月06日
	 * @since V1.0
	 */
	public DataObject queryAdDycflqdyxzdkdzdinfo(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sb = new StringBuffer();
		DataStore ds = new DataStore();
		DataStore dsDkje = new DataStore(); // 查询抵扣金额
		SPrinter sprinter = new SPrinter();

		String ffny = para.getString("ffny").substring(0, 6);
		String jbjgid = para.getString("jbjgid"); //当前的jbjgid
		String jbjg = "'"+jbjgid+"01','"+jbjgid+"03'";
		String cxjbjgid = para.getString("cxjbjgid"); //查询条件的jbjgid
		
		sb.setLength(0);
		sb.append(" select a.ryid, sum(b.btje) xyydc,sum(a.btje) byxzdk,count(distinct a.ryid) rs,sum(b.ye) sydc ");
		sb.append("   from ad3u.per_giv_detl_ungiv a,   	");
		sb.append("		   ad3u.per_giv_back b,				");
		sb.append("        ad3u.bill_genl d   				");
		sb.append("  where a.btbh = 'Q941'					");
		sb.append("    and ffny = ?		  					");
		sb.append("    and a.ryid = b.ryid					");
		sb.append("    and a.btbh = b.btbh					");
		sb.append("    and a.zdlsh = d.zdlsh				");
		if(!"".equals(cxjbjgid) && null!=cxjbjgid){
			sb.append("   and d.jbjgid in (").append(HsuTools.replaceC2QCQ(cxjbjgid)).append(") ");
		}else{
			sb.append("   and d.jbjgid in (").append(jbjg).append(") ");
		}
		sb.append("  group by a.ryid				");
		
		this.sql.setSql(sb.toString());
		this.sql.setString(1, ffny);
		ds = this.sql.executeQuery();
		
		// 查询已抵扣金额 ，把所有人小于等于查询月的所有btbh = Q941的查出来
		// 改为按ryid进行循环查询.mod.谈杰.20191213
		double zxyydc = 0, zbyxzdk = 0, zsydc = 0, zydkje = 0;
		int zrs = 0;
		for(int i = 0; i <ds.rowCount(); i++){
			String ryid = ds.getString(i, "ryid");
			double xyydc = ds.getDouble(i, "xyydc");
			double byxzdk = ds.getDouble(i, "byxzdk");
			double sydc = ds.getDouble(i, "sydc");
			int rs = ds.getInt(i, "rs");
			
			sb.setLength(0);
			sb.append(" select sum(a.btje) ydkje		");
			sb.append("   from ad3u.per_giv_detl a,     ");
			sb.append("        ad3u.bill_genl d   		");
			sb.append("  where ffny < ?  				");
			sb.append("    and a.zdlsh = d.zdlsh		");
			sb.append("    and btbh = 'Q941'  		    ");
			sb.append("    and a.ryid = ?  		        ");
			if(!"".equals(cxjbjgid) && null!=cxjbjgid){
				sb.append("   and d.jbjgid in (").append(HsuTools.replaceC2QCQ(cxjbjgid)).append(") ");
			}else{
				sb.append("   and d.jbjgid in (").append(jbjg).append(") ");
			}
			
			this.sql.setSql(sb.toString());
			this.sql.setString(1, ffny);
			this.sql.setString(2, ryid);
			dsDkje = this.sql.executeQuery();
			if (dsDkje.rowCount() > 0) {
				zydkje = MathUtil.round(zydkje + dsDkje.getDouble(0, "ydkje"), 2);
			}
			zxyydc = MathUtil.round(zxyydc + xyydc, 2);
			zbyxzdk = MathUtil.round(zbyxzdk + byxzdk, 2);
			zsydc = MathUtil.round(zsydc + sydc, 2);
			zrs += rs;
		}
		
		if(zrs == 0){
			this.bizException("当前查询的发放年月【"+ffny+"】没有查询到符合条件的人");
		}

		String dqny = DateUtil.getCurrentDateToString("yyyyMMdd");
		String year = dqny.substring(0, 4) + "年" ;
		String month = dqny.substring(4, 6) + "月";
		String day = dqny.substring(6, 8) + "日";
		// 返回打印内容
		sprinter.clear();
		
		sprinter.putPara("ny", year+ month+day);
		sprinter.putPara("xyydc", zxyydc);
//		sprinter.putPara("byxzdk", byxzdk);
		sprinter.putPara("byxzdk", MathUtil.round(0 - zbyxzdk, 2));
		sprinter.putPara("rs", zrs+"");
		sprinter.putPara("sydc", zsydc);
//		sprinter.putPara("ydkje", ydkje);
		sprinter.putPara("ydkje", MathUtil.round(0 - zydkje, 2));
		sprinter.putPara("cyrs", (zrs - zrs));
		sprinter.putPara("cydk", MathUtil.round(zxyydc + zbyxzdk, 2));
		String printhtml = sprinter.printTxtModelAsTxtStr(this.getBizInstitution(), "adDycflqdyxzdkdzd");

		rdo.put("printhtml", printhtml);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.跳转到机关养老单位代发收缴信息查询的JSP
	 *
	 * @author zhanghao
	 * @date 创建时间 2019年10月05日
	 * @since V1.0
	 */
	public DataObject fwdAdjgyldwdfsjxxcx(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String biz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		rdo.put("biz", biz);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.机关养老单位代发收缴信息查询
	 *
	 * @author zhanghao
	 * @date 创建时间 2019年10月05日
	 * @since V1.0
	 */
	public DataObject queryAdjgyldwdfsjInfo(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		String ffny, dwdjid, biz;
		
		//1.接收前台参数
		ffny = para.getDateToString("ffny", "yyyyMM");
		dwdjid = para.getString("dwdjid", "");
		biz = para.getString("biz");
		
		if (biz == null || "".equals(biz)) {
			this.bizException("获取的经办机构为空！");
		}
		
		String jbjg = "'" + biz + "01','" + biz + "03'";
		
		//2.查询数据
		sqlBF.setLength(0);
		sqlBF.append(" select '查看' cz, a.dwdjid, c.dwbh, c.cbdwmc, b.ffny,                                                                       ");
		sqlBF.append("        count(distinct(decode(nvl(b.dfsjqrbz, '0'), '1', b.ryid, null))) ysjrs,                                              ");//已收缴人数
		sqlBF.append("        sum(decode(nvl(b.dfsjqrbz, '0'), '1', b.btje, 0)) ysjje,                                                             ");//已收缴金额
		sqlBF.append("        count(distinct(decode(nvl(b.dfsjqrbz, '0'), '0', b.ryid, null))) wsjrs,                                              ");//未收缴人数
		sqlBF.append("        sum(decode(nvl(b.dfsjqrbz, '0'), '0', b.btje, 0)) wsjje,                                                             ");//未收缴金额
		sqlBF.append("");
		sqlBF.append("        count(distinct(decode(a.zfrylb, 'A11', decode(nvl(b.dfsjqrbz, '0'), '1', b.ryid, null), null))) ysjrs_lx,            ");//已收缴人数离休
		sqlBF.append("        sum(decode(a.zfrylb, 'A11', decode(nvl(b.dfsjqrbz, '0'), '1', b.btje, 0), 0)) ysjje_lx,                              ");//已收缴金额离休
		sqlBF.append("        count(distinct(decode(a.zfrylb, 'A11', decode(nvl(b.dfsjqrbz, '0'), '0', b.ryid, null), null))) wsjrs_lx,            ");//未收缴人数离休
		sqlBF.append("        sum(decode(a.zfrylb, 'A11', decode(nvl(b.dfsjqrbz, '0'), '0', b.btje, 0), 0)) wsjje_lx,                              ");//未收缴金额离休
		sqlBF.append("");
		sqlBF.append("        count(distinct(decode(nvl(b.dfsjqrbz, '0'), '1', b.ryid, null))) -                                                   ");
		sqlBF.append("        count(distinct(decode(a.zfrylb, 'A11', decode(nvl(b.dfsjqrbz, '0'), '1', b.ryid, null), null))) -                    ");
		sqlBF.append("        count(distinct(decode(substr(a.zfrylb, 1, 1), 'B', decode(nvl(b.dfsjqrbz, '0'), '1', b.ryid, null), null))) ysjrs_tx,");//已收缴人数退休
		sqlBF.append("        sum(decode(nvl(b.dfsjqrbz, '0'), '1', b.btje, 0)) -                                                                  ");
		sqlBF.append("        sum(decode(a.zfrylb, 'A11', decode(nvl(b.dfsjqrbz, '0'), '1', b.btje, 0), 0)) -                                      ");
		sqlBF.append("        sum(decode(substr(a.zfrylb, 1, 1), 'B', decode(nvl(b.dfsjqrbz, '0'), '1', b.btje, 0), 0)) ysjje_tx,                  ");//已收缴金额退休
		sqlBF.append("        count(distinct(decode(nvl(b.dfsjqrbz, '0'), '0', b.ryid, null))) -                                                   ");
		sqlBF.append("        count(distinct(decode(a.zfrylb, 'A11', decode(nvl(b.dfsjqrbz, '0'), '0', b.ryid, null), null))) -                    ");
		sqlBF.append("        count(distinct(decode(substr(a.zfrylb, 1, 1), 'B', decode(nvl(b.dfsjqrbz, '0'), '0', b.ryid, null), null))) wsjrs_tx,");//未收缴人数退休
		sqlBF.append("        sum(decode(nvl(b.dfsjqrbz, '0'), '0', b.btje, 0)) -                                                                  ");
		sqlBF.append("        sum(decode(a.zfrylb, 'A11', decode(nvl(b.dfsjqrbz, '0'), '0', b.btje, 0), 0)) -                                      ");
		sqlBF.append("        sum(decode(substr(a.zfrylb, 1, 1), 'B', decode(nvl(b.dfsjqrbz, '0'), '0', b.btje, 0), 0)) wsjje_tx,                  ");//未收缴金额退休
		sqlBF.append("");
		sqlBF.append("        count(distinct(decode(substr(a.zfrylb, 1, 1), 'B', decode(nvl(b.dfsjqrbz, '0'), '1', b.ryid, null), null))) ysjrs_ys,");//已收缴人数遗属
		sqlBF.append("        sum(decode(substr(a.zfrylb, 1, 1), 'B', decode(nvl(b.dfsjqrbz, '0'), '1', b.btje, 0), 0)) ysjje_ys,                  ");//已收缴金额遗属
		sqlBF.append("        count(distinct(decode(substr(a.zfrylb, 1, 1), 'B', decode(nvl(b.dfsjqrbz, '0'), '0', b.ryid, null), null))) wsjrs_ys,");//未收缴人数遗属
		sqlBF.append("        sum(decode(substr(a.zfrylb, 1, 1), 'B', decode(nvl(b.dfsjqrbz, '0'), '0', b.btje, 0), 0)) wsjje_ys                   ");//未收缴金额遗属
		sqlBF.append("   from ad3u.per_info a,    ");
		sqlBF.append("        ad3u.per_giv_detl b,");
		sqlBF.append("        si3u.orgn_reg c,    ");
		sqlBF.append("        ad3u.giv_item d     ");
		sqlBF.append("  where a.ryid = b.ryid     ");
		sqlBF.append("    and a.dwdjid = c.dwdjid ");
		sqlBF.append("    and b.btbh = d.btbh     ");
		sqlBF.append("    and d.ddwffbz = '1'     ");
		if (ffny != null && !"".equals(ffny)) {
			sqlBF.append("   and b.ffny = '"+ ffny +"'");
		} else {
			sqlBF.append("   and b.ffny is not null   ");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and a.dwdjid = '"+ dwdjid +"'   ");
		}
		sqlBF.append("    and c.jbjgid in(").append(jbjg).append(") ");
		sqlBF.append(" group by a.dwdjid, c.dwbh, c.cbdwmc, b.ffny");
		
		this.sql.setSql(sqlBF.toString());
		DataStore ryxx = this.sql.executeQuery();
		
		//3.查询结果进行排序
		ryxx = ryxx.sort("ffny").sort("dwbh");
		
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.机关养老单位代发收缴信息查询（查看操作）
	 *
	 * @author zhanghao
	 * @date 创建时间 2019年10月05日
	 * @since V1.0
	 */
	public DataObject fwdJgyldwdfsjxxRES(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		String ffny, dwdjid, ryid, jbjgid, grbh, jbjgmc;
		
		//1.接收前台参数
		ffny = para.getDateToString("ffny", "yyyyMM");
		dwdjid = para.getString("dwdjid", "");
		
		if (ffny == null || "".equals(ffny)) {
			this.bizException("传入的发放年月为空，请检查！");
		}
		if (dwdjid == null || "".equals(dwdjid)) {
			this.bizException("传入的单位登记ID为空，请检查！");
		}
		
		//2.查询数据
		sqlBF.setLength(0);
		sqlBF.append(" select a.ryid, a.xm, a.shbzhm, c.dwbh, c.cbdwmc,               ");
		sqlBF.append("        b.ffny, nvl(b.dfsjqrbz, '0') dfsjqrbz, b.xzbz, c.jbjgid,");
		sqlBF.append("        sum(nvl(b.btje, 0)) je                                  ");
		sqlBF.append("   from ad3u.per_info a,    ");
		sqlBF.append("        ad3u.per_giv_detl b,");
		sqlBF.append("        si3u.orgn_reg c,    ");
		sqlBF.append("        ad3u.giv_item d     ");
		sqlBF.append("  where a.ryid = b.ryid     ");
		sqlBF.append("    and a.dwdjid = c.dwdjid ");
		sqlBF.append("    and b.btbh = d.btbh     ");
		sqlBF.append("    and d.ddwffbz = '1'     ");
		sqlBF.append("    and b.ffny = '"+ ffny +"'");
		sqlBF.append("    and a.dwdjid = '"+ dwdjid +"'");
		sqlBF.append(" group by a.ryid, a.xm, a.shbzhm, c.dwbh, c.cbdwmc, b.ffny, b.dfsjqrbz, b.xzbz, c.jbjgid");
		
		this.sql.setSql(sqlBF.toString());
		DataStore ryxx = this.sql.executeQuery();
		
		// 3.循环查询人员的个人编号和对应的经办机构
		for (int i = 0; i < ryxx.rowCount(); i++) {
			ryid = ryxx.getString(i, "ryid");
			jbjgid = ryxx.getString(i, "jbjgid");
			grbh = SiTools.getBiPersonByRyid(ryid).getString("grbh");
			jbjgmc = HsuTools.getJbjgmc(jbjgid);
			
			ryxx.put(i, "grbh", grbh);
			ryxx.put(i, "jbjgmc", jbjgmc);
		}
		
		// 4.进行排序
		ryxx = ryxx.sort("shbzhm");
		
		DataObject rdo = new DataObject();
		rdo.put("ryxx", ryxx);
		return rdo;
	}
	/**
	 * 方法简介.跳转到企业街道退休人员信息维护的JSP
	 *
	 * @author 房绍旖 2019年10月6日
	 */
	public DataObject fwdAdQyjdtxryxxwh(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);

		return rdo;
	}
	
	/**
	 * 方法简介.企业街道退休人员信息维护查询方法
	 *
	 * @author 房绍旖 2019年10月6日
	 */
	public DataObject queryAdQyjdtxryxxwh(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		String ryid = para.getString("ryid");
		String dwdjid = para.getString("dwdjid");
		String nrsqglbz = para.getString("nrsqglbz");
		String dyffzt = para.getString("dyffzt");
		String cjbz = para.getString("cjbz");
		String jbjgid = para.getString("jbjgid"); 
		String jdid = para.getString("jdid");
		String sqid = para.getString("sqid");
		String ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		String ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		String vbiz = para.getString("biz");

		if (vbiz == null || "".equals(vbiz)) {
			this.bizException("获取的经办机构为空");
		}
		
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		String jbjg = biz + "01," + biz + "03";

		String rsjid = "";
		if (jbjgid != null && !"".equals(jbjgid)) {
			rsjid = SiTools.getRsjidByjbjgid(jbjgid);
		} else {
			rsjid = SiTools.getRsjidByjbjgid(jbjg);
		}
		sqlBF.setLength(0);
		sqlBF.append(" select /*+parallel(a,12)*/a.ryid, a.xm, a.xb, a.shbzhm, a.jdid, ");
		sqlBF.append("        a.sqid, a.dyxsksny, a.nrsqglrq, a.dyffzt, b.ltxlb, ");
		sqlBF.append("        b.ltxrq, c.grbh, c.sjhm, c.jtzz, c.hkszd,  ");
		sqlBF.append("        c.csrq, c.zzmm, d.dwbh, d.cbdwmc, d.jbjgid, ");
		sqlBF.append("        '修改' cz, f.jbjgmc, e.jdmc, g.sqmc ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.emp_info b, ");
		sqlBF.append("        biuv.person c, ");
		sqlBF.append("        si3u.orgn_reg d, ");
		sqlBF.append("        be3u.street_natl e, ");
		sqlBF.append("        be3u.agency_natl f, ");
		sqlBF.append("        be3u.community_natl g ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.dwdjid = d.dwdjid ");
		sqlBF.append("    and a.jdid = e.jdid ");
		sqlBF.append("    and d.jbjgid = f.jbjgid ");
		sqlBF.append("    and a.sqid = g.sqid(+) ");
		sqlBF.append("    and a.dylqlb = '101' "); //限制待遇领取类别为企业 -- zkj modify 2019/12/14

		if (ryid != null && !"".equals(ryid)) {// 人员ID
			sqlBF.append("   and a.ryid = '" + ryid + "'");
		}

		if (dwdjid != null && !"".equals(dwdjid)) {// 单位登记ID
			sqlBF.append("   and a.dwdjid = '" + dwdjid + "'");
		}

		if (nrsqglbz != null && !"".equals(nrsqglbz)) {// 纳入社会化管理标志
			if ("1".equals(nrsqglbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'NRSQGLBZ' ");
				sqlBF.append("                   and e.bcxmz = '1') ");
			} else if ("0".equals(nrsqglbz)) {
				sqlBF.append("    and not exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl e ");
				sqlBF.append("                 where a.ryid = e.ryid ");
				sqlBF.append("                   and e.bcxmbh = 'NRSQGLBZ' ");
				sqlBF.append("                   and e.bcxmz = '1') ");
			}
		}

		if (dyffzt != null && !"".equals(dyffzt)) {// 待遇发放状态
			sqlBF.append("   and a.dyffzt = '" + dyffzt + "'");
		}

		if (cjbz != null && !"".equals(cjbz)) {// 是否采集
			if ("1".equals(cjbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.fami_natl f ");
				sqlBF.append("                 where a.ryid = f.dyryid) ");
			} else if ("0".equals(cjbz)) {
				sqlBF.append("    and not exists (select 1 ");
				sqlBF.append("                  from ad3u.fami_natl f ");
				sqlBF.append("                 where a.ryid = f.dyryid) ");
			}
		}

		if(ryid == null||"".equals(ryid)){// 选人的时候不限机构
			// 经办机构  经办机构改为限制街道的人社局id -- zkj modify 2019/12/14
			sqlBF.append("   and e.rsjid in (").append(HsuTools.replaceC2QCQ(rsjid)).append(") ");
		}

		if (jdid != null && !"".equals(jdid)) {// 街道
			sqlBF.append("   and a.jdid in (")
				.append(HsuTools.replaceC2QCQ(jdid))
				.append(") ");
		}

		if (sqid != null && !"".equals(sqid)) {// 社区
			sqlBF.append("   and a.sqid in (")
				.append(HsuTools.replaceC2QCQ(sqid))
				.append(") ");
		}

		if (ltxqsrq != null && !"".equals(ltxqsrq)) {// 离退休起始日期
			sqlBF.append("   and b.ltxrq >= '" + ltxqsrq + "'");
		}

		if (ltxzzrq != null && !"".equals(ltxzzrq)) {// 离退休终止日期
			sqlBF.append("   and b.ltxrq <= '" + ltxzzrq + "'");
		}

		this.sql.setSql(sqlBF.toString());
		DataStore ryxx = this.sql.executeQuery();
		if (ryid == null || "".equals(ryid)) {
			//将几个补充信息全部取出来放到ds中，从ds中取减少访问数据库次数
			sqlBF.setLength(0);
			sqlBF.append(" select /*+parallel(a,12)*/ bcxmbh, bcxmz, ryid ");
			sqlBF.append("   from ad3u.per_cmpl");
			sqlBF.append("  where bcxmbh in ('NRSQGLBZ', 'TCJN', 'YDBZ', 'TSRYQK') ");
			this.sql.setSql(sqlBF.toString());
			DataStore dscmpl = this.sql.executeQuery();
			//优化速度将ds中的数据放到map里  key:ryid+bcxmbh value:补充项目值
			HashMap<String, String> cmplMap = new HashMap<String, String>();
			for (int i = 0; i < dscmpl.rowCount(); i++) {
				String bcxmbh = dscmpl.getString(i, "bcxmbh");
				String bcxmz = dscmpl.getString(i, "bcxmz");
				ryid = dscmpl.getString(i, "ryid");
				cmplMap.put(ryid + bcxmbh, bcxmz);
			}
			for (int i = 0; i < ryxx.rowCount(); i++) {
				ryid = ryxx.getString(i, "ryid");
				nrsqglbz = "0";
				String tcjn = "", ydrybz = "", tsryqk = "", glbz = "", ggbz = "", zbbz = "", lmbz = "";
				//取纳入统筹标志
				if (cmplMap.containsKey(ryid + "NRSQGLBZ")) {
					nrsqglbz = cmplMap.get(ryid + "NRSQGLBZ");
				}
				if (nrsqglbz == null || "".equals(nrsqglbz)) {
					nrsqglbz = "0";
				}
				
				//取特长技能
				if (cmplMap.containsKey(ryid + "TCJN")) {
					tcjn = cmplMap.get(ryid + "TCJN");
				}
				//取异地标志
				if (cmplMap.containsKey(ryid + "YDBZ")) {
					ydrybz = cmplMap.get(ryid + "YDBZ");
				}
				if (ydrybz == null || "".equals(ydrybz)) {
					ydrybz = "0";
				}
				
				//取特殊人员情况
				if (cmplMap.containsKey(ryid + "TSRYQK")) {
					tsryqk = cmplMap.get(ryid + "TSRYQK");
					if (tsryqk != null && !"".equals(tsryqk)) {
						if (tsryqk.indexOf("1") >= 0) {// 八十岁以上高龄标志
							glbz = "1";
						} else {
							glbz = "0";
						}

						if (tsryqk.indexOf("2") >= 0) {// 孤寡标志
							ggbz = "1";
						} else {
							ggbz = "0";
						}

						if (tsryqk.indexOf("3") >= 0) {// 重病标志
							zbbz = "1";
						} else {
							zbbz = "0";
						}

						if (tsryqk.indexOf("4") >= 0) {// 劳模标志
							lmbz = "1";
						} else {
							lmbz = "0";
						}
					} else {
						glbz = "0";
						ggbz = "0";
						zbbz = "0";
						lmbz = "0";
					}
				} else {
					glbz = "0";
					ggbz = "0";
					zbbz = "0";
					lmbz = "0";
				}
				ryxx.put(i, "nrsqglbz", nrsqglbz);
				ryxx.put(i, "tcjn", tcjn);
				ryxx.put(i, "ydrybz", ydrybz);
				ryxx.put(i, "glbz", glbz);
				ryxx.put(i, "ggbz", ggbz);
				ryxx.put(i, "zbbz", zbbz);
				ryxx.put(i, "lmbz", lmbz);
			}
		} else {//ryid不为空，保持原来的逻辑
			for (int i = 0; i < ryxx.rowCount(); i++) {
				jbjgid = ryxx.getString(i, "jbjgid");
				jdid = ryxx.getString(i, "jdid");
				sqid = ryxx.getString(i, "sqid");
				ryid = ryxx.getString(i, "ryid");

				String tcjn = "", ydrybz = "", tsryqk = "", glbz = "", ggbz = "", zbbz = "", lmbz = "";

				nrsqglbz = AdTools.getPerCmpl(ryid, "NRSQGLBZ", "");// 纳入社会化管理标志
				if (nrsqglbz == null || "".equals(nrsqglbz)) {
					nrsqglbz = "0";
				}
				
				tcjn = AdTools.getPerCmpl(ryid, "TCJN", "");// 特长技能
				
				ydrybz = AdTools.getPerCmpl(ryid, "YDBZ", "");// 异地标志
				if (ydrybz == null || "".equals(ydrybz)) {
					ydrybz = "0";
				}
				
				tsryqk = AdTools.getPerCmpl(ryid, "TSRYQK", "");// 特殊人员情况
				if (tsryqk != null && !"".equals(tsryqk)) {
					if (tsryqk.indexOf("1") >= 0) {// 八十岁以上高龄标志
						glbz = "1";
					} else {
						glbz = "0";
					}

					if (tsryqk.indexOf("2") >= 0) {// 孤寡标志
						ggbz = "1";
					} else {
						ggbz = "0";
					}

					if (tsryqk.indexOf("3") >= 0) {// 重病标志
						zbbz = "1";
					} else {
						zbbz = "0";
					}

					if (tsryqk.indexOf("4") >= 0) {// 劳模标志
						lmbz = "1";
					} else {
						lmbz = "0";
					}
				} else {
					glbz = "0";
					ggbz = "0";
					zbbz = "0";
					lmbz = "0";
				}

				ryxx.put(i, "nrsqglbz", nrsqglbz);
				ryxx.put(i, "tcjn", tcjn);
				ryxx.put(i, "ydrybz", ydrybz);
				ryxx.put(i, "glbz", glbz);
				ryxx.put(i, "ggbz", ggbz);
				ryxx.put(i, "zbbz", zbbz);
				ryxx.put(i, "lmbz", lmbz);
			}
		}

		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}

	/**
	 * 方法简介.统发数据同步查询
	 * 
	 * @author rzs
	 * @date 创建时间 2019年10月6日
	 * @since V1.0
	 */
	public DataObject fwdAdTfsjtbcx(DataObject para) throws Exception {

		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();

		// 构造经办机构dscode
		sqlBF.setLength(0);
		sqlBF.append(" select jbjgid value, jbjgmc content  ");
		sqlBF.append("   from be3u.agency_natl              ");
		sqlBF.append("  where jbjgid like '3752%03'         ");

		this.sql.setSql(sqlBF.toString());
		DataStore dsjbjg = this.sql.executeQuery();

		// 待遇开始时间默认为当前年月
		String dqny = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		DataStore dsquery = new DataStore();
		dsquery.addRow();
		dsquery.put(0, "dyqsny", dqny);
		dsquery.put(0, "ny", dqny);
		dsquery.put(0, "jbjgid", para.getString("biz"));

		rdo.put("dsjbjg", dsjbjg);
		rdo.put("biz", para.getString("biz"));
		rdo.put("dsquery", dsquery);
		return rdo;
	}

	/**
	 * 方法简介.统发数据同步数据查询
	 * 
	 * @author rzs
	 * @date 创建时间 2019年10月7日
	 * @since V1.0
	 */
	public DataObject queryAdTfsjtbcxinfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String jspch = para.getString("jspch");
		String ny = para.getDateToString("ny", "yyyyMM");
		String jbjgid = para.getString("jbjgid");
		String district = "";

		if (jbjgid != null && !"".equals(jbjgid)) {
			if ("37529903".equals(jbjgid)) {
				district = "370200,370201,370220";
			} else if ("37521303".equals(jbjgid)) {
				district = "370205";
			} else if ("37521203".equals(jbjgid)) {
				district = "370207";
			} else if ("37521403".equals(jbjgid)) {
				district = "370208";
			} else if ("37528103".equals(jbjgid)) {
				district = "370209";
			} else if ("37528203".equals(jbjgid)) {
				district = "370210";
			} else if ("37528303".equals(jbjgid)) {
				district = "370211";
			} else if ("37528403".equals(jbjgid)) {
				district = "370214";
			} else if ("37528503".equals(jbjgid)) {
				district = "370213";
			} else if ("37524003".equals(jbjgid)) {
				district = "370230";
			} else {
				this.bizException("未查询到改经办机构所属行政区划");
			}
		}

		int index = 1;

		sqlBF.setLength(0);
		sqlBF.append("select * ");
		sqlBF.append("  from ad3u.provide_data_01 ");
		sqlBF.append("  where 1=1  ");

		if (ny != null && !"".equals(ny)) {
			sqlBF.append("   and month = ?  ");
		}
		if (jspch != null && !"".equals(jspch)) {
			sqlBF.append("   and batchnumber = ?  ");
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("    and District in ("
					+ HsuTools.replaceC2QCQ(district) + ")  ");
		}
		this.sql.setSql(sqlBF.toString());

		if (ny != null && !"".equals(ny)) {
			this.sql.setString(index++, ny);
		}
		if (jspch != null && !"".equals(jspch)) {
			this.sql.setString(index++, jspch);
		}
		DataStore ds01 = this.sql.executeQuery();
		HsuTools.genXzqhmcDataStore(ds01, "district", "xzqhmc");

		index = 1;
		sqlBF.setLength(0);
		sqlBF.append("select * ");
		sqlBF.append("  from AD3U.ICA4 ");
		sqlBF.append("  where 1=1  ");

		if (ny != null && !"".equals(ny)) {
			sqlBF.append("   and month = ?  ");
		}
		if (jspch != null && !"".equals(jspch)) {
			sqlBF.append("   and batchnumber = ?  ");
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("    and District in ("
					+ HsuTools.replaceC2QCQ(district) + ")  ");
		}
		this.sql.setSql(sqlBF.toString());

		if (ny != null && !"".equals(ny)) {
			this.sql.setString(index++, ny);
		}
		if (jspch != null && !"".equals(jspch)) {
			this.sql.setString(index++, jspch);
		}
		DataStore ds02 = this.sql.executeQuery();
//		for (int i = 0; i < ds02.rowCount(); i++) {
//			String AB020 = ds02.getString(i, "AB020");
//			String AAZ198 = ds02.getString(i, "AAZ198");
//			String dfjgmc = "";
//			if (AB020 != null && !"".equals(AB020) && AAZ198 != null
//					&& !"".equals(AAZ198)) {
//				String dfjgid = HsuTools.discode("RSJKBANK", AB020 + AAZ198);
//				dfjgmc = HsuTools.getDfjgmc(dfjgid);
//			}
//			if (dfjgmc != null && !"".equals(dfjgmc)) {
//				ds02.put(i, "dfjgmc", dfjgmc);
//			} else {
//				ds02.put(i, "dfjgmc", AB020);
//			}
//		}
		HsuTools.genXzqhmcDataStore(ds02, "district", "xzqhmc");
		index = 1;
		sqlBF.setLength(0);
		sqlBF.append("select * ");
		sqlBF.append("  from ad3u.ica2 ");
		sqlBF.append("  where 1=1  ");

		if (ny != null && !"".equals(ny)) {
			sqlBF.append("   and month = ?  ");
		}
		if (jspch != null && !"".equals(jspch)) {
			sqlBF.append("   and batchnumber = ?  ");
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("    and District in ("
					+ HsuTools.replaceC2QCQ(district) + ")  ");
		}
		this.sql.setSql(sqlBF.toString());

		if (ny != null && !"".equals(ny)) {
			this.sql.setString(index++, ny);
		}
		if (jspch != null && !"".equals(jspch)) {
			this.sql.setString(index++, jspch);
		}
		DataStore ds03 = this.sql.executeQuery();
		HsuTools.genXzqhmcDataStore(ds03, "district", "xzqhmc");

		index = 1;
		sqlBF.setLength(0);
		sqlBF.append("select * ");
		sqlBF.append("  from ad3u.provide_data_04 ");
		sqlBF.append("  where 1=1  ");

		if (ny != null && !"".equals(ny)) {
			sqlBF.append("   and month = ?  ");
		}
		if (jspch != null && !"".equals(jspch)) {
			sqlBF.append("   and batchnumber = ?  ");
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("    and District in ("
					+ HsuTools.replaceC2QCQ(district) + ")  ");
		}
		this.sql.setSql(sqlBF.toString());

		if (ny != null && !"".equals(ny)) {
			this.sql.setString(index++, ny);
		}
		if (jspch != null && !"".equals(jspch)) {
			this.sql.setString(index++, jspch);
		}
		DataStore ds04 = this.sql.executeQuery();
		HsuTools.genXzqhmcDataStore(ds04, "district", "xzqhmc");

		DataObject rdo = new DataObject();
		rdo.put("myxztxryhmcgrid", ds01);
		rdo.put("myyljtzrygrid", ds02);
		rdo.put("czbfffgrid", ds03);
		rdo.put("czqbffgrid", ds04);

		return rdo;
	}

	/**
	 * 
	 * 方法简介.跳转到职工养老实付查询JSP前查询相关信息
	 * 
	 * @author 黄泽峰 2019-10-7
	 */
	public DataObject fwdZgylsfQuery(final DataObject para) throws Exception {
		String rq, ny;
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		rq = DateUtil.dateToString(DateUtil.getDBDate(), "yyyy-MM-dd");
		ny = rq.substring(0, 7);
		// 取经办机构信息
		// 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
		rdo.put("dsjbjg", ds);
		rdo.put("rq", rq);
		rdo.put("ny", ny);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.职工养老实付查询
	 * 
	 * @author 黄泽峰 2019-10-7
	 * mod 谈杰 2019-10-23
	 */
	public final DataObject queryZgylsfcx(final DataObject para) throws Exception {
		DataStore dsDyffInfo = new DataStore();
		DataStore dsJbjg = new DataStore();
		StringBuffer sqlBF = new StringBuffer();

		// 接参数
		String jbjgid = para.getString("jbjgid");
		String ryid = para.getString("ryid");
		String sbkbz = para.getString("sbkbz");
		String zdlsh = para.getString("zdlsh");
		String ywny = para.getDateToString("ywny", "yyyyMM");
		String bfbz = para.getString("bfbz");
		String bfdxlx = para.getString("bfdxlx");
//		String vbiz = para.getString("biz");
//		
//		if(vbiz == null || "".equals(vbiz)){
//			this.bizException("获取的经办机构为空");
//		}
//		
//		String biz = HsuTools.getRsjidByJgid(vbiz);
//		if (biz == null || "".equals(biz)) {
//			biz = vbiz;
//		}
//		
//		String jbjg = "'"+biz+"01','"+biz+"03'";
		
		// 有操作权限的经办机构信息
		String jbjgidHz = "";
		dsJbjg = SiTools.getOperateJbjgidByUserId(this.getUser().getUserid());
		if (dsJbjg.rowCount() == 0) {
			this.bizException("未查询到您有操作权限的经办机构！");
		} else {
			for (int j = 0; j < dsJbjg.rowCount(); j++) {
				jbjgidHz = jbjgidHz + dsJbjg.getString(j, "value") + ",";
			}
			jbjgidHz = jbjgidHz.substring(0, jbjgidHz.length() - 1);
		}
	
		if(jbjgid == null || "".equals(jbjgid)){
			jbjgid = jbjgidHz;
		}
		if ("".equals(ywny) || ywny == null) {
			ywny = HsuTools.getDBDateString("yyyyMM");
		}
//		if ("".equals(sbkbz) || sbkbz == null) {
//			this.bizException("传入社保卡标志为空!");
//		}
		if ("".equals(bfbz) || bfbz == null) {
			this.bizException("传入拨付标志为空!");
		} 
		
		// 先写社保卡标志为是的
		sqlBF.setLength(0);
		if("1".equals(sbkbz) || sbkbz == null || "".equals(sbkbz)){
			sqlBF.append(" select h.grbh, a.xm, a.shbzhm, o.dwbh, o.cbdwmc, ");
			sqlBF.append("        c.xzbz,b.bfny ffny,c.bfje je, o.jbjgid, '01' bfdxlx, ");
			sqlBF.append("        a.dfjgid, a.yhzh, a.yhhm, f.bfbz, f.clbz sfbz, ");
			sqlBF.append("        c.zfzt, decode(f.bfbz, '0', f.sbyy, '') sbyy ");// 增加查询失败原因.add.谈杰.20200225
			sqlBF.append("   from ad3u.per_info                     a, ");
			sqlBF.append("        ad3u.bill_genl                    b, ");
			sqlBF.append("        ad3u.bill_per_detl                c, ");
			sqlBF.append("        ad3u.fee_exp                      d, ");
			sqlBF.append("        be3u.pay_batch_detl_hp_detail_sbk f, ");
			sqlBF.append("        ad3u.fee_exp_detl                 g, ");
			sqlBF.append("        biuv.person                       h, ");
			sqlBF.append("        si3u.orgn_reg                     o  ");
			sqlBF.append("  where a.ryid = c.ryid ");
			sqlBF.append("    and b.zdlsh = c.zdlsh ");
			sqlBF.append("    and c.zdlsh = d.zdlsh ");
			sqlBF.append("    and b.zdlsh = d.zdlsh ");
			sqlBF.append("    and d.dfzcid = g.dfzcid ");
			sqlBF.append("    and a.ryid = g.ryid ");
			sqlBF.append("    and g.dfzcmxid = f.sfxlh ");
			sqlBF.append("    and a.ryid = h.ryid ");
			sqlBF.append("    and a.dwdjid = o.dwdjid ");
			sqlBF.append("    and b.bfny = '" + ywny + "'");
			sqlBF.append("    and o.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid) + ") ");
			if (ryid != null && !"".equals(ryid)) {// 人员ID
				sqlBF.append("   and a.ryid = '" + ryid + "'");
			}

//			if (jbjgid != null && !"".equals(jbjgid)) {
//				sqlBF.append("   and o.jbjgid in (")
//					.append(HsuTools.replaceC2QCQ(jbjgid))
//					.append(") ");
//			} else {
//				sqlBF.append("   and o.jbjgid in (").append(jbjg).append(") ");
//			}
			

			if (zdlsh != null && !"".equals(zdlsh)) {
				sqlBF.append("   and b.zdlsh = '" + zdlsh + "'");
			}

			if (bfbz != null && !"".equals(bfbz)) {
				sqlBF.append("   and f.bfbz = '" + bfbz + "'");
			}
			
			// 增加查询在职一次性返还人员.add.谈杰.20200114
			sqlBF.append("  union all ");
			sqlBF.append(" select j.grbh, i.xm, i.shbzhm, k.dwbh, k.cbdwmc, ");
			sqlBF.append("        b.xzbz, d.bfny ffny, sum(b.btje) je, k.jbjgid, '01' bfdxlx, ");
			sqlBF.append("        a.yhid dfjgid, a.yhzh, a.yhhm, g.bfbz, g.clbz sfbz, ");
			sqlBF.append("        decode(c.djzt, '0', '3', '1', '2') zfzt, ");
			sqlBF.append("        decode(g.bfbz, '0', g.sbyy, '') sbyy ");// 增加查询失败原因.add.谈杰.20200225
			sqlBF.append("   from si3u.per_giv_exam                 a, ");
			sqlBF.append("        si3u.per_giv_once                 b, ");
			sqlBF.append("        si3u.pay_bill                     c, ");
			sqlBF.append("        ad3u.bill_genl                    d, ");
			sqlBF.append("        ad3u.fee_exp                      e, ");
			sqlBF.append("        be3u.pay_batch_detl_hp_detail_sbk g, ");
			sqlBF.append("        ad3u.fee_exp_detl                 h, ");
			sqlBF.append("        si3u.per_reg                      i, ");
			sqlBF.append("        biuv.person                       j, ");
			sqlBF.append("        si3u.orgn_reg                     k  ");
			sqlBF.append("  where a.spid = b.spid ");
			sqlBF.append("    and b.zdlsh = c.zdlsh ");
			sqlBF.append("    and c.djph = d.zdlsh ");
			sqlBF.append("    and d.zdlsh = e.zdlsh ");
			sqlBF.append("    and e.dfzcid = h.dfzcid ");
			sqlBF.append("    and i.ryid = h.ryid ");
			sqlBF.append("    and h.dfzcmxid = g.sfxlh ");
			sqlBF.append("    and a.rydjid = i.rydjid ");
			sqlBF.append("    and i.ryid = j.ryid ");
			sqlBF.append("    and i.dwdjid = k.dwdjid ");
			sqlBF.append("    and d.bfny = '" + ywny + "'");
			sqlBF.append("    and k.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid) + ") ");
			if (ryid != null && !"".equals(ryid)) {// 人员ID
				sqlBF.append("   and i.ryid = '" + ryid + "'");
			}
			
			if (zdlsh != null && !"".equals(zdlsh)) {
				sqlBF.append("   and d.zdlsh = '" + zdlsh + "'");
			}

			if (bfbz != null && !"".equals(bfbz)) {
				sqlBF.append("   and g.bfbz = '" + bfbz + "'");
			}
			sqlBF.append("  group by j.grbh, i.xm, i.shbzhm, k.dwbh, k.cbdwmc, ");
			sqlBF.append("           b.xzbz, d.bfny, k.jbjgid, a.yhid, a.yhzh, ");
			sqlBF.append("           a.yhhm, g.bfbz, g.clbz, decode(c.djzt, '0', '3', '1', '2'), ");
			sqlBF.append("           decode(g.bfbz, '0', g.sbyy, '') ");
		}
		
		if(sbkbz == null || "".equals(sbkbz)){
			sqlBF.append("  union all ");
		}
		// 增加社保卡标志为否.add.谈杰.20200109
		if("2".equals(sbkbz) || sbkbz == null || "".equals(sbkbz)){
			sqlBF.append(" select h.grbh, a.xm, a.shbzhm, o.dwbh, o.cbdwmc, ");
			sqlBF.append("        c.xzbz,b.bfny ffny,c.bfje je, o.jbjgid, '01' bfdxlx, ");
			sqlBF.append("        a.dfjgid, a.yhzh, a.yhhm, f.bfbz, f.clbz sfbz, ");
			sqlBF.append("        c.zfzt, decode(f.bfbz, '0', f.bz, '') sbyy ");// 增加查询失败原因.add.谈杰.20200225
			sqlBF.append("   from ad3u.per_info                     a, ");
			sqlBF.append("        ad3u.bill_genl                    b, ");
			sqlBF.append("        ad3u.bill_per_detl                c, ");
			sqlBF.append("        ad3u.fee_exp                      d, ");
			sqlBF.append("        be3u.pay_batch_detl_hp_detail_fsbk f, ");
			sqlBF.append("        ad3u.fee_exp_detl                 g, ");
			sqlBF.append("        biuv.person                       h, ");
			sqlBF.append("        si3u.orgn_reg                     o  ");
			sqlBF.append("  where a.ryid = c.ryid ");
			sqlBF.append("    and b.zdlsh = c.zdlsh ");
			sqlBF.append("    and c.zdlsh = d.zdlsh ");
			sqlBF.append("    and b.zdlsh = d.zdlsh ");
			sqlBF.append("    and d.dfzcid = g.dfzcid ");
			sqlBF.append("    and a.ryid = g.ryid ");
			sqlBF.append("    and g.dfzcmxid = f.bflsh ");
			sqlBF.append("    and a.ryid = h.ryid ");
			sqlBF.append("    and a.dwdjid = o.dwdjid ");
			sqlBF.append("    and b.bfny = '" + ywny + "'");
			sqlBF.append("    and o.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid) + ") ");
			if (ryid != null && !"".equals(ryid)) {// 人员ID
				sqlBF.append("   and a.ryid = '" + ryid + "'");
			}

			if (zdlsh != null && !"".equals(zdlsh)) {
				sqlBF.append("   and b.zdlsh = '" + zdlsh + "'");
			}

			if (bfbz != null && !"".equals(bfbz)) {
				sqlBF.append("   and f.bfbz = '" + bfbz + "'");
			}
		}
		
		this.sql.setSql(sqlBF.toString());
//		this.sql.setString(1, ywny);
		dsDyffInfo = this.sql.executeQuery();

		for (int i = 0; i < dsDyffInfo.rowCount(); i++) {
			String jbjgmc = HsuTools.getJbjgmc(dsDyffInfo.getString(i, "jbjgid"));
			String yhmc = HsuTools.getDfjgmc(dsDyffInfo.getString(i, "dfjgid"));
			dsDyffInfo.put(i, "jbjgmc", jbjgmc);
			dsDyffInfo.put(i, "ywny", ywny);
			dsDyffInfo.put(i, "yhmc", yhmc);
		}
		DataObject rdo = new DataObject();
		rdo.put("dyffinfo", dsDyffInfo);

		return rdo;		
	}

	/**
	 * 方法简介.统发数据同步查询数据同步
	 * 
	 * @author rzs
	 * @date 创建时间 2019年10月7日
	 * @since V1.0
	 */
	public DataObject changeAdTfsjtbcxinfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		String jbjgid = para.getString("jbjgid");
		String ny = para.getDateToString("ny", "yyyyMM");
		DataStore dsTemp = new DataStore(), dstfxx = new DataStore();
		String xzqhstr = "", batchnumber = "";
		if (jbjgid != null && !"".equals(jbjgid)) {
			// 首先根据经办机构获取行政区划代码
			this.sql.setSql(" select ssxzqdm from si3u.si_natl_config where jbjgid = ? ");
			this.sql.setString(1, jbjgid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() == 0) {
				this.bizException("经办机构【" + HsuTools.getJbjgmc(jbjgid)
						+ "】行政区划对应关系未配置，请检查");
			}

			if ("37529903".equals(jbjgid)) {
				xzqhstr = "370200,370201,370220";
			} else if ("37521303".equals(jbjgid)) {
				xzqhstr = "370205";
			} else if ("37521203".equals(jbjgid)) {
				xzqhstr = "370207";
			} else if ("37521403".equals(jbjgid)) {
				xzqhstr = "370208";
			} else if ("37528103".equals(jbjgid)) {
				xzqhstr = "370209";
			} else if ("37528203".equals(jbjgid)) {
				xzqhstr = "370210";
			} else if ("37528303".equals(jbjgid)) {
				xzqhstr = "370211";
			} else if ("37528403".equals(jbjgid)) {
				xzqhstr = "370214";
			} else if ("37528503".equals(jbjgid)) {
				xzqhstr = "370213";
			} else if ("37524003".equals(jbjgid)) {
				xzqhstr = "370230";
			}
		}

		// 获取最大的批次号
		sqlBF.setLength(0);
		sqlBF.append(" select to_char(MAX(TO_NUMBER(BATCHNUMBER))) BATCHNUMBER   ");
		sqlBF.append("   from ad3u.provide_data_01                               ");
		sqlBF.append("  where  1 = 1                                        ");
		if (ny != null && !"".equals(ny)) {
			sqlBF.append("    and  month = ?   ");
		}
		if (xzqhstr != null && !"".equals(xzqhstr)) {
			sqlBF.append("    and District in ("
					+ HsuTools.replaceC2QCQ(xzqhstr) + ")  ");
		}

		this.sql.setSql(sqlBF.toString());
		if (ny != null && !"".equals(ny)) {
			this.sql.setString(1, ny);
		}
		dsTemp = this.sql.executeQuery();
		batchnumber = dsTemp.getString(0, "BATCHNUMBER");

		// 检测同一个批次号中是否有身份证号码重复的数据，如果有直接报错
		this.sql.setSql(" select AB003 from ad3u.provide_data_01 where batchnumber = ? ");
		this.sql.setString(1, batchnumber);
		dstfxx = this.sql.executeQuery();
		for (int i = 0; i < dstfxx.rowCount(); i++) {
			String zjhm1 = dstfxx.getString(i, "AB003");
			for (int j = i + 1; j < dstfxx.rowCount(); j++) {
				String zjhm2 = dstfxx.getString(j, "AB003");
				if (zjhm1 != null && zjhm1.equals(zjhm2)) {
					this.bizException("接收批次【" + batchnumber
							+ "】中存在身份证号码重复的人员，请检查！");
				}
			}
		}
		// 匹配身份证号码和姓名相同的人员信息 clzt为匹配多条的情况
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.provide_data_01                           ");
		sqlBF.append("    set AAE374 = '2'  ");
		sqlBF.append("  where batchnumber = ?                                ");
		sqlBF.append("    and (AAE374 = '0' or AAE374 is null  or AAE374 = '' )                  ");
		sqlBF.append("    and exists (select 1                               ");
		sqlBF.append("           from ad3u.per_info b                        ");
		sqlBF.append("          where b.xm = AB002                              ");
		sqlBF.append("            and b.shbzhm = AB003                       ");
		sqlBF.append("            and b.dyffzt = '1'                         ");
		sqlBF.append("            and dylqlb = '102'                         ");
		sqlBF.append("           group by ryid                               ");
		sqlBF.append("           having count(ryid) > 1           )         ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, batchnumber);
		this.sql.executeUpdate();

		// 更新姓名和身份证号码匹配成功的记录
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.provide_data_01 a    ");
		sqlBF.append("    set (AAE374, AAC001, AAZ039, A0100, B0110 ) =  ");
		sqlBF.append("       (select '3' clzt, b.ryid , b.dwdjid, c.grbh, d.dwbh  ");
		sqlBF.append("           from ad3u.per_info b,     ");
		sqlBF.append("                biuv.person  c,     ");
		sqlBF.append("                si3u.orgn_reg  d     ");
		sqlBF.append("          where c.ryid = b.ryid     ");
		sqlBF.append("            and d.dwdjid = b.dwdjid     ");
		sqlBF.append("            and b.shbzhm = a.AB003  ");
		sqlBF.append("            and b.dylqlb = '102'  ");
		sqlBF.append("            and b.dyffzt = '1')   ");
		sqlBF.append("  where batchnumber = ?           ");
		sqlBF.append("    and (AAE374 = '0' or AAE374 is null or AAE374 = '' )   ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, batchnumber);
		this.sql.executeUpdate();

		// 获取最大的批次号
		sqlBF.setLength(0);
		sqlBF.append(" select to_char(MAX(TO_NUMBER(BATCHNUMBER))) BATCHNUMBER   ");
		sqlBF.append("   from ad3u.provide_data_02                               ");
		sqlBF.append("  where  1 = 1                                        ");
		if (ny != null && !"".equals(ny)) {
			sqlBF.append("    and  month = ?   ");
		}
		if (xzqhstr != null && !"".equals(xzqhstr)) {
			sqlBF.append("    and District in ("
					+ HsuTools.replaceC2QCQ(xzqhstr) + ")  ");
		}

		this.sql.setSql(sqlBF.toString());
		if (ny != null && !"".equals(ny)) {
			this.sql.setString(1, ny);
		}
		dsTemp = this.sql.executeQuery();
		batchnumber = dsTemp.getString(0, "BATCHNUMBER");

		// 检测同一个批次号中是否有身份证号码重复的数据，如果有直接报错
		this.sql.setSql(" select zjhm from ad3u.provide_data_02 where batchnumber = ? ");
		this.sql.setString(1, batchnumber);
		dstfxx = this.sql.executeQuery();
		for (int i = 0; i < dstfxx.rowCount(); i++) {
			String zjhm1 = dstfxx.getString(i, "zjhm");
			for (int j = i + 1; j < dstfxx.rowCount(); j++) {
				String zjhm2 = dstfxx.getString(j, "zjhm");
				if (zjhm1 != null && zjhm1.equals(zjhm2)) {
					this.bizException("接收批次【" + batchnumber
							+ "】中存在身份证号码重复的人员，请检查！");
				}
			}
		}
		// 匹配身份证号码和姓名相同的人员信息 clzt为匹配多条的情况
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.provide_data_02                           ");
		sqlBF.append("    set clzt = '2'  ");
		sqlBF.append("  where batchnumber = ?                                ");
		sqlBF.append("    and (clzt = '0' or clzt is null  or clzt = '' )                  ");
		sqlBF.append("    and exists (select 1                               ");
		sqlBF.append("           from ad3u.per_info b                        ");
		sqlBF.append("          where b.xm = xm                              ");
		sqlBF.append("            and b.shbzhm = zjhm                       ");
		sqlBF.append("            and b.dyffzt = '1'                         ");
		sqlBF.append("            and dylqlb = '102'                         ");
		sqlBF.append("           group by ryid                               ");
		sqlBF.append("           having count(ryid) > 1           )         ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, batchnumber);
		this.sql.executeUpdate();

		// 更新姓名和身份证号码匹配成功的记录
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.provide_data_02 a    ");
		sqlBF.append("    set (clzt, ryid, dwdjid, tfrybh, tfdwbh ) =  ");
		sqlBF.append("       (select '3' clzt, b.ryid , b.dwdjid, c.grbh, d.dwbh  ");
		sqlBF.append("           from ad3u.per_info b,     ");
		sqlBF.append("                biuv.person  c,     ");
		sqlBF.append("                si3u.orgn_reg  d     ");
		sqlBF.append("          where c.ryid = b.ryid     ");
		sqlBF.append("            and d.dwdjid = b.dwdjid     ");
		sqlBF.append("            and b.shbzhm = a.zjhm  ");
		sqlBF.append("            and b.dylqlb = '102'  ");
		sqlBF.append("            and b.dyffzt = '1')   ");
		sqlBF.append("  where batchnumber = ?           ");
		sqlBF.append("    and (clzt = '0' or clzt is null or clzt = '' )   ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, batchnumber);
		this.sql.executeUpdate();

		// 获取最大的批次号
		sqlBF.setLength(0);
		sqlBF.append(" select to_char(MAX(TO_NUMBER(BATCHNUMBER))) BATCHNUMBER   ");
		sqlBF.append("   from ad3u.provide_data_03                               ");
		sqlBF.append("  where  1 = 1                                        ");
		if (ny != null && !"".equals(ny)) {
			sqlBF.append("    and  month = ?   ");
		}
		if (xzqhstr != null && !"".equals(xzqhstr)) {
			sqlBF.append("    and District in ("
					+ HsuTools.replaceC2QCQ(xzqhstr) + ")  ");
		}

		this.sql.setSql(sqlBF.toString());
		if (ny != null && !"".equals(ny)) {
			this.sql.setString(1, ny);
		}
		dsTemp = this.sql.executeQuery();
		batchnumber = dsTemp.getString(0, "BATCHNUMBER");

		// 检测同一个批次号中是否有身份证号码重复的数据，如果有直接报错
		this.sql.setSql(" select sfzhm from ad3u.provide_data_03 where batchnumber = ? ");
		this.sql.setString(1, batchnumber);
		dstfxx = this.sql.executeQuery();
		for (int i = 0; i < dstfxx.rowCount(); i++) {
			String zjhm1 = dstfxx.getString(i, "sfzhm");
			for (int j = i + 1; j < dstfxx.rowCount(); j++) {
				String zjhm2 = dstfxx.getString(j, "sfzhm");
				if (zjhm1 != null && zjhm1.equals(zjhm2)) {
					this.bizException("接收批次【" + batchnumber
							+ "】中存在身份证号码重复的人员，请检查！");
				}
			}
		}
		// 匹配身份证号码和姓名相同的人员信息 clzt为匹配多条的情况
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.provide_data_03                           ");
		sqlBF.append("    set clzt = '2'  ");
		sqlBF.append("  where batchnumber = ?                                ");
		sqlBF.append("    and (clzt = '0' or clzt is null  or clzt = '' )                  ");
		sqlBF.append("    and exists (select 1                               ");
		sqlBF.append("           from ad3u.per_info b                        ");
		sqlBF.append("          where b.xm = xm                              ");
		sqlBF.append("            and b.shbzhm = sfzhm                       ");
		sqlBF.append("            and b.dyffzt = '1'                         ");
		sqlBF.append("            and dylqlb = '102'                         ");
		sqlBF.append("           group by ryid                               ");
		sqlBF.append("           having count(ryid) > 1           )         ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, batchnumber);
		this.sql.executeUpdate();

		// 更新姓名和身份证号码匹配成功的记录
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.provide_data_03 a    ");
		sqlBF.append("    set (clzt, ryid, dwdjid, tfrybh, tfdwbh ) =  ");
		sqlBF.append("       (select '3' clzt, b.ryid , b.dwdjid, c.grbh, d.dwbh  ");
		sqlBF.append("           from ad3u.per_info b,     ");
		sqlBF.append("                biuv.person  c,     ");
		sqlBF.append("                si3u.orgn_reg  d     ");
		sqlBF.append("          where c.ryid = b.ryid     ");
		sqlBF.append("            and d.dwdjid = b.dwdjid     ");
		sqlBF.append("            and b.shbzhm = a.sfzhm  ");
		sqlBF.append("            and b.dylqlb = '102'  ");
		sqlBF.append("            and b.dyffzt = '1')   ");
		sqlBF.append("  where batchnumber = ?           ");
		sqlBF.append("    and (clzt = '0' or clzt is null or clzt = '' )   ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, batchnumber);
		this.sql.executeUpdate();

		// 获取最大的批次号
		sqlBF.setLength(0);
		sqlBF.append(" select to_char(MAX(TO_NUMBER(BATCHNUMBER))) BATCHNUMBER   ");
		sqlBF.append("   from ad3u.provide_data_04                               ");
		sqlBF.append("  where  1 = 1                                        ");
		if (ny != null && !"".equals(ny)) {
			sqlBF.append("    and  month = ?   ");
		}
		if (xzqhstr != null && !"".equals(xzqhstr)) {
			sqlBF.append("    and District in ("
					+ HsuTools.replaceC2QCQ(xzqhstr) + ")  ");
		}

		this.sql.setSql(sqlBF.toString());
		if (ny != null && !"".equals(ny)) {
			this.sql.setString(1, ny);
		}
		dsTemp = this.sql.executeQuery();
		batchnumber = dsTemp.getString(0, "BATCHNUMBER");

		// 检测同一个批次号中是否有身份证号码重复的数据，如果有直接报错
		this.sql.setSql(" select AB003 from ad3u.provide_data_04 where batchnumber = ? ");
		this.sql.setString(1, batchnumber);
		dstfxx = this.sql.executeQuery();
		for (int i = 0; i < dstfxx.rowCount(); i++) {
			String zjhm1 = dstfxx.getString(i, "zjhm");
			for (int j = i + 1; j < dstfxx.rowCount(); j++) {
				String zjhm2 = dstfxx.getString(j, "zjhm");
				if (zjhm1 != null && zjhm1.equals(zjhm2)) {
					this.bizException("接收批次【" + batchnumber
							+ "】中存在身份证号码重复的人员，请检查！");
				}
			}
		}
		// 匹配身份证号码和姓名相同的人员信息 clzt为匹配多条的情况
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.provide_data_04                           ");
		sqlBF.append("    set AAE374 = '2'  ");
		sqlBF.append("  where batchnumber = ?                                ");
		sqlBF.append("    and (AAE374 = '0' or AAE374 is null  or AAE374 = '' )                  ");
		sqlBF.append("    and exists (select 1                               ");
		sqlBF.append("           from ad3u.per_info b                        ");
		sqlBF.append("          where b.xm = AB002                              ");
		sqlBF.append("            and b.shbzhm = AB003                       ");
		sqlBF.append("            and b.dyffzt = '1'                         ");
		sqlBF.append("            and dylqlb = '102'                         ");
		sqlBF.append("           group by ryid                               ");
		sqlBF.append("           having count(ryid) > 1           )         ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, batchnumber);
		this.sql.executeUpdate();

		// 更新姓名和身份证号码匹配成功的记录
		sqlBF.setLength(0);
		sqlBF.append(" update ad3u.provide_data_04 a    ");
		sqlBF.append("    set (AAE374, AAC001, AAZ039, A0100, B0110 ) =  ");
		sqlBF.append("       (select '3' clzt, b.ryid , b.dwdjid, c.grbh, d.dwbh  ");
		sqlBF.append("           from ad3u.per_info b,     ");
		sqlBF.append("                biuv.person  c,     ");
		sqlBF.append("                si3u.orgn_reg  d     ");
		sqlBF.append("          where c.ryid = b.ryid     ");
		sqlBF.append("            and d.dwdjid = b.dwdjid     ");
		sqlBF.append("            and b.shbzhm = a.AB003  ");
		sqlBF.append("            and b.dylqlb = '102'  ");
		sqlBF.append("            and b.dyffzt = '1')   ");
		sqlBF.append("  where batchnumber = ?           ");
		sqlBF.append("    and (AAE374 = '0' or AAE374 is null or AAE374 = '' )   ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, batchnumber);
		this.sql.executeUpdate();

		return null;
	}

	/**
	 * 方法简介.统发数据同步查询批次号查询
	 * 
	 * @author rzs
	 * @date 创建时间 2019年9月18日
	 * @since V1.0
	 */
	public DataObject fwdjspchTfdytzlovUTC(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String jspch = para.getString("jspch");
		sqlBF.setLength(0);
		sqlBF.append(" select distinct batchnumber  ");
		sqlBF.append("   from ad3u.provide_data_01              ");
		sqlBF.append("  where 1 = 1                    ");
		if (jspch != null && !"".equals(jspch)) {
			sqlBF.append(" and batchnumber like '%" + jspch + "%'");
		}
		sqlBF.append(" union  ");

		sqlBF.append(" select distinct batchnumber  ");
		sqlBF.append("   from ad3u.provide_data_02              ");
		sqlBF.append("  where 1 = 1                    ");
		if (jspch != null && !"".equals(jspch)) {
			sqlBF.append(" and batchnumber like '%" + jspch + "%'");
		}
		sqlBF.append(" union   ");
		sqlBF.append(" select distinct batchnumber  ");
		sqlBF.append("   from ad3u.provide_data_03              ");
		sqlBF.append("  where 1 = 1                    ");
		if (jspch != null && !"".equals(jspch)) {
			sqlBF.append(" and batchnumber like '%" + jspch + "%'");
		}
		sqlBF.append(" union   ");

		sqlBF.append(" select distinct batchnumber  ");
		sqlBF.append("   from ad3u.provide_data_04              ");
		sqlBF.append("  where 1 = 1                    ");
		if (jspch != null && !"".equals(jspch)) {
			sqlBF.append(" and batchnumber like '%" + jspch + "%'");
		}

		this.sql.setSql(sqlBF.toString());
		DataStore dsjspch = this.sql.executeQuery();

		rdo.put("dsjspch", dsjspch);

		return rdo;
	}
	
	/**
	 * 方法简介.跳转到企业街道供养亲属信息管理的jsp
	 * 
	 * @author 汪磊 2019-10-6
	 */
	public DataObject fwdAdQyjdgyqsxxgl(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		// 支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);

		return rdo;
	}

	/**
	 * 方法简介.查询企业街道供养亲属信息
	 * 
	 * @author 汪磊 2019-10-6
	 */
	public DataObject queryAdQyjdgyqsInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

		String jbjgid = para.getString("jbjgid", ""); // 经办机构
		String jdid = para.getString("jdid", ""); // 街道
		String sqid = para.getString("sqid", "");// 社区
		String dyffzt = para.getString("dyffzt", "");// 待遇发放状态
		String yxzjhm = para.getString("yxzjhm", "");// 身份证

		sqlBF.setLength(0);
		sqlBF.append(" select a.grbh, a.xm,a.shbzhm,a.xb,e.jbjgmc, ");
		sqlBF.append("        f.jdmc, g.sqmc, b.dyffzt,b.dyxsksny,a.ryid,'修改' cz ");
		sqlBF.append("   from biuv.person a,ad3u.per_info b,si3u.orgn_reg c, ");
		sqlBF.append("        be3u.agency_natl e,be3u.street_natl f,be3u.community_natl g ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.dwdjid = c.dwdjid");
		sqlBF.append("    and c.jbjgid = e.jbjgid(+)");
		sqlBF.append("    and b.jdid = f.jdid(+)");
		sqlBF.append("    and b.sqid = g.sqid(+)");
		sqlBF.append("    and b.sszfrq = 'B'");
		if (jbjgid != null && jbjgid != "") {
			sqlBF.append("    and c.jbjgid = '" + jbjgid + "' ");
		}
		if (jdid != null && jdid != "") {
			sqlBF.append("    and b.jdid = '" + jdid + "' ");
		}
		if (sqid != null && sqid != "") {
			sqlBF.append("    and b.sqid = '" + sqid + "' ");
		}
		if (dyffzt != null && dyffzt != "") {
			sqlBF.append("    and b.dyffzt = '" + dyffzt + "' ");
		}
		if (yxzjhm != null && yxzjhm != "") {
			sqlBF.append("    and a.yxzjhm = '" + yxzjhm + "' ");
		}

		this.sql.setSql(sqlBF.toString());
		ds = sql.executeQuery();
		rdo.put("ryinfo", ds);

		return rdo;
	}
	
	/**
	 * 方法简介.企业待遇核定信息查询
	 * 
	 * @author 汪磊 2019-10-7
	 */
	public DataObject queryAdQydyhdInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

		String yxzjhm = para.getString("yxzjhm", "");// 身份证
		String  dwdjid= para.getString("dwdjid",""); //单位
		String  xzbz= para.getString("xzbz","");    //险种标志
		String  zfrylb= para.getString("zfrylb",""); //人员类别
		String  jbjgid= para.getString("jbjgid",""); // 经办机构
		String ltxny = para.getDateToString("ltxny","yyyyMM");  //离退休年月
		String  shqsrq= para.getDateToString("shqsrq", "yyyy-MM-dd"); //审核起始日期
		String  shzzrq= para.getDateToString("shzzrq", "yyyy-MM-dd");  //审核终止日期
  
		//退休职工
		sqlBF.setLength(0);
		sqlBF.append(" select a.grbh, a.xm,a.shbzhm,c.dwbh, c.cbdwmc, ");
		sqlBF.append("        d.lb, b.dylqlb xzbz,sszfrq, b.dyspsj, e.ltxrq,");
		sqlBF.append("        dyxsksny,'' swgrbh, '查看' cz, b.ryid");//增加cz、ryid.mod.zcc.20191115
		sqlBF.append("   from biuv.person a, ad3u.per_info b, si3u.Orgn_Reg c, si3u.orgn_tfba d,ad3u.emp_info e ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.dwdjid = c.dwdjid");
		sqlBF.append("    and c.dwdjid = d.dwdjid(+)");
		sqlBF.append("    and b.ryid = e.ryid");
//		sqlBF.append("    and b.dyffzt in ('1', '2')   ");// 支持查询暂停人员.mod.谈杰.20200316 // 不再限制人员的待遇发放状态.mod.谈杰.20200324
		if(yxzjhm != null && yxzjhm!= ""){
			sqlBF.append("  and a.shbzhm = '" + yxzjhm +"' ");
		}
		if(dwdjid != null && dwdjid!= ""){
			sqlBF.append("  and c.dwdjid = '" + dwdjid +"' ");
		}
		if(xzbz != null && xzbz!= ""){
			sqlBF.append("  and b.dylqlb = '" + xzbz +"' ");
		}
		if(zfrylb != null && zfrylb!= ""){
			sqlBF.append("  and b.zfrylb = '" + zfrylb +"' ");
		}
		if(jbjgid != null && jbjgid!= ""){
			sqlBF.append("  and c.jbjgid = '" + jbjgid +"' ");
		}
		if(ltxny != null && ltxny!= ""){
			sqlBF.append("  and exists(select 1 from ad3u.emp_info v");
			sqlBF.append("              where b.ryid = v.ryid");
			sqlBF.append("                and substr(v.ltxrq,0,6) = "+ltxny+")");
		}
		if(shqsrq != null){
			sqlBF.append("  and b.dyspsj >= to_date('"+shqsrq+"','YYYY-MM-DD HH:mi:ss')");
		}
		if(shzzrq != null){
			sqlBF.append("  and b.dyspsj <= to_date('"+shzzrq+"','YYYY-MM-DD HH:mi:ss')");
		}
		//遗属
		sqlBF.append("  union all ");
		sqlBF.append(" select a.grbh,a.xm, a.shbzhm, c.dwbh,c.cbdwmc,");
		sqlBF.append("        d.lb,b.dylqlb xzbz,sszfrq,b.dyspsj, ''ltxrq,");
		sqlBF.append("        dyxsksny,g.grbh swgrbh, '查看' cz, b.ryid");//增加cz、ryid.mod.zcc.20191115
		sqlBF.append("   from biuv.person a, ad3u.per_info b, si3u.Orgn_Reg c, si3u.orgn_tfba d,ad3u.supp_info e,biuv.person g");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.dwdjid = c.dwdjid");
		sqlBF.append("    and c.dwdjid = d.dwdjid(+)");
		sqlBF.append("    and b.ryid = e.ryid");
		sqlBF.append("    and g.ryid = e.swryid");
//		sqlBF.append("    and b.dyffzt in ('1', '2')   ");// 支持查询暂停人员.mod.谈杰.20200316 // 不再限制人员的待遇发放状态.mod.谈杰.20200324
		if(yxzjhm != null && yxzjhm!= ""){
			sqlBF.append("  and a.shbzhm = '" + yxzjhm +"' ");
		}
		if(dwdjid != null && dwdjid!= ""){
			sqlBF.append("  and c.dwdjid = '" + dwdjid +"' ");
		}
		if(xzbz != null && xzbz!= ""){
			sqlBF.append("  and b.dylqlb = '" + xzbz +"' ");
		}
		if(zfrylb != null && zfrylb!= ""){
			sqlBF.append("  and b.zfrylb = '" + zfrylb +"' ");
		}
		if(jbjgid != null && jbjgid!= ""){
			sqlBF.append("  and c.jbjgid = '" + jbjgid +"' ");
		}
		if(ltxny != null && ltxny!= ""){
			sqlBF.append("  and exists(select 1 from ad3u.emp_info v");
			sqlBF.append("              where b.ryid = v.ryid");
			sqlBF.append("                and substr(v.ltxrq,0,6) = "+ltxny+")");
		}
		
		if(shqsrq != null){
			sqlBF.append("  and b.dyspsj >= to_date('"+shqsrq+"','YYYY-MM-DD HH:mi:ss')");
		}
		if(shzzrq != null){
			sqlBF.append("  and b.dyspsj <= to_date('"+shzzrq+"','YYYY-MM-DD HH:mi:ss')");
		}
		
		this.sql.setSql(sqlBF.toString());
		ds = sql.executeQuery();

		rdo.put("ryinfo", ds);

		return rdo;
	}
	
	/**
	 * 跳转到机关养老缺口查询jsp页面
	 * 
	 * @author 张涛
	 * @date 创建时间 2019年10月9日
	 * @since V1.0
	 */
	public DataObject fwdAdjgylqkcx(DataObject para) throws Exception {
		String qsrq, zzrq;
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsJbjg;
		DataObject rdo = new DataObject();

		// 组装经办机构ds
		sqlBF.setLength(0);
		sqlBF.append(" select jbjgid value, jbjgmc content  ");
		sqlBF.append("   from be3u.agency_natl              ");
		sqlBF.append("  where jbjgid like '3752%03'         ");

		this.sql.setSql(sqlBF.toString());
		dsJbjg = this.sql.executeQuery();
		
		// 排序
		dsJbjg = dsJbjg.sort("value");

		// 获取起始终止日期
		qsrq = DateUtil.addMonthToString(DateUtil.FormatDate(DateUtil.getDBDate(), "yyyyMM"), "yyyyMM", -2) + "26";
		zzrq = DateUtil.addMonthToString(DateUtil.FormatDate(DateUtil.getDBDate(), "yyyyMM"), "yyyyMM", -1) + "25";

		rdo.clear();
		rdo.put("dsjbjg", dsJbjg);
		rdo.put("qsrq", qsrq);
		rdo.put("zzrq", zzrq);

		return rdo;
	}
	
	/**
	 * 机关养老缺口查询
	 * 
	 * 改为从数据表中查询 sjx 2019-11-08
	 * 
	 * @author 张涛
	 * @date 创建时间 2019年10月9日
	 * @since V1.0
	 */
	public DataObject queryAdjgylqk(DataObject para) throws Exception {
		String qsrq, zzrq, jbjgid, qsny, zzny;
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsQk, dsQkhz = new DataStore();
		DataObject rdo = new DataObject();

		// 接参
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		jbjgid = para.getString("jbjgid");

		// 判空
		if (qsrq == null || "".equals(qsrq)) {
			this.bizException("起始时间不能为空！");
		}
		if (zzrq == null || "".equals(zzrq)) {
			this.bizException("截止时间不能为空！");
		}

		// 取起始、终止年月
		qsny = qsrq.substring(0, 6);
		zzny = zzrq.substring(0, 6);

		// 从agency_age_gap表中取详细数据
		sqlBF.setLength(0);
		sqlBF.append(" select a.jbjgid, a.dwdjid, a.zzrs, a.ltxrs, a.yljfe, ");
		sqlBF.append("        a.zfylj, a.ylj, a.ycxje, a.ysbzf, a.jjqk, ");
		sqlBF.append("        a.zctype, a.jjly, a.dwbh, a.cbdwmc, a.qsrq, ");
		sqlBF.append("        a.zzrq  ");
		sqlBF.append("   from si3u.agency_age_gap a ");
		sqlBF.append("  where substr(a.zzrq,0,6) between ? and ? ");
		if (!"".equals(jbjgid) && null != jbjgid) {
			sqlBF.append("    and a.jbjgid = ? ");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsny);
		this.sql.setString(2, zzny);
		if (!"".equals(jbjgid) && null != jbjgid) {
			this.sql.setString(3, jbjgid);
		}
		dsQk = this.sql.executeQuery();

		// 取汇总信息
		sqlBF.setLength(0);
		sqlBF.append(" select sum(nvl(a.zzrs,0)) zzrssum, sum(nvl(a.ltxrs,0)) ltxrssum, sum(nvl(a.yljfe,0)) yljfesum, ");
		sqlBF.append("        sum(nvl(a.zfylj,0)) zfyljsum, sum(nvl(a.ylj,0)) yljsum, sum(nvl(a.ycxje,0)) ycxjesum,  ");
		sqlBF.append("        sum(nvl(a.ysbzf,0)) ysbzfsum, sum(nvl(a.jjqk,0)) jjqksum, sum(nvl(a.fhje,0)) fhjesum, ");
		sqlBF.append("        a.zctype, count(a.dwdjid) dws, a.jbjgid ");
		sqlBF.append("   from si3u.agency_age_gap a ");
		sqlBF.append("  where substr(a.zzrq,0,6) between ? and ? ");
		if (!"".equals(jbjgid) && null != jbjgid) {
			sqlBF.append("    and a.jbjgid = ? ");
		}
		sqlBF.append(" group by jbjgid, zctype ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsny);
		this.sql.setString(2, zzny);
		if (!"".equals(jbjgid) && null != jbjgid) {
			this.sql.setString(3, jbjgid);
		}
		dsQkhz = this.sql.executeQuery();

		dsQkhz.setTypeList("jbjgid:s,zzrssum:n,ltxrssum:n,yljfesum:n,zfyljsum:n,jjqksum:n,dws:n,zctype:s,yljsum:n,ycxjesum:n,fhjesum:n,ysbzfsum:n");

		// 设置列类型
		dsQk.setTypeList("jbjgid:s,dwdjid:s,zzrs:n,ltxrs:n,yljfe:n,zfylj:n,ylj:n,ycxje:n,jjqk:n,zctype:s,jjly:s,dwbh:s,cbdwmc:s");

		rdo.clear();
		rdo.put("dsqk", dsQk);
		rdo.put("dsqkhz", dsQkhz);

		return rdo;
	}
	
	/**
	 * 政策汇总表
	 * 
	 * @author 张涛
	 * @date 创建时间 2019年10月9日
	 * @since V1.0
	 */
	public DataObject downloadFile(DataObject para) throws Exception {
		String zzrq, jbjgid, fileName, modelName, xzqhmc;
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsQkhz, vds, dsTemp;
		DataObject rdo = new DataObject(), pdo = new DataObject();
		int dws = 0, zzrssum = 0, ltxrssum = 0;
		double yljfesum = 0.00, zfyljsum = 0.00, jjqksum = 0.00, yljsum = 0.00, ycxjesum = 0.00, fhjesum = 0.00, ysbzfsum = 0.00;
		Blob blob;
		byte[] templateBytes = null;
		byte[] filebyte = null;

		// 接参
		zzrq = para.getDateToString("zzrq", "yyyy年MM月");
		jbjgid = para.getString("jbjgid");
		dsQkhz = para.getDataStore("dwResult1");

		// 判空
		if (zzrq == null || "".equals(zzrq)) {
			this.bizException("传入的截止时间为空！");
		}
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的区划为空！");
		}

		// 取需要的变量
		for (int i = 0; i < dsQkhz.rowCount(); i++) {
			dws = dws + dsQkhz.getInt(i, "dws");
			zzrssum = zzrssum + dsQkhz.getInt(i, "zzrssum");
			ltxrssum = ltxrssum + dsQkhz.getInt(i, "ltxrssum");
			yljfesum = yljfesum + dsQkhz.getDouble(i, "yljfesum");
			zfyljsum = zfyljsum + dsQkhz.getDouble(i, "zfyljsum");

			jjqksum = jjqksum + dsQkhz.getDouble(i, "jjqksum");
			yljsum = yljsum + dsQkhz.getDouble(i, "yljsum");
			ycxjesum = ycxjesum + dsQkhz.getDouble(i, "ycxjesum");
			fhjesum = fhjesum + dsQkhz.getDouble(i, "fhjesum");
			ysbzfsum = ysbzfsum + dsQkhz.getDouble(i, "ysbzfsum");
		}

		// 取行政区划
		sqlBF.setLength(0);
		sqlBF.append(" select b.xzqhmc ");
		sqlBF.append("   from si3u.si_natl_config a, ");
		sqlBF.append("        be3u.district_natl b ");
		sqlBF.append("  where a.ssxzqdm = b.xzqhdm ");
		sqlBF.append("    and a.jbjgid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		dsTemp = this.sql.executeQuery();

		if (dsTemp.rowCount() > 0) {
			xzqhmc = dsTemp.getString(0, "xzqhmc");
		} else {
			xzqhmc = "市本级及市内四区";
		}

		fileName = "事业单位养老保险基金收支缺口汇总表.xls";
		modelName = "事业单位养老保险基金收支缺口汇总表模板.xls";

		// 获取政策汇总表模板
		try {
			pdo.clear();
			pdo.put("modelName", modelName);
			pdo.put("biz", this.getBizInstitution());
			pdo = this.iModelBPO.doMethod(jbjgid, "downloadFile", pdo, this.getUser());
			vds = pdo.getDataStore("vds");
			blob = (Blob) vds.getObject(0, "CONTENT");

			templateBytes = blob.getBytes(1, (new BigDecimal(blob.length())).intValue());
		} catch (Exception e) {
			this.bizException("获取模板信息出错，错误信息：" + e.getMessage() + "。请联系地纬公司解决！");
		}

		// 生成政策汇总表
		try {
			pdo.clear();
			pdo.put("xzqhmc", xzqhmc);
			pdo.put("dws", dws);
			pdo.put("zzrssum", zzrssum);

			pdo.put("ltxrssum", ltxrssum);
			pdo.put("yljfesum", yljfesum);
			pdo.put("zfyljsum", zfyljsum);
			pdo.put("jjqksum", jjqksum);
			pdo.put("yljsum", yljsum);

			pdo.put("ycxjesum", ycxjesum);
			pdo.put("fhjesum", fhjesum);
			pdo.put("ysbzfsum", ysbzfsum);
			pdo.put("zzrq", zzrq);
			pdo.put("bz", "务必在摘要写明 " + xzqhmc + "机关养老" + zzrq + "收支缺口"); // 新增参数 sjx 2020-02-20

			// 根据模板获取表单信息
			filebyte = SiTools.getExcelByTemplate(templateBytes, 0, pdo);

		} catch (Exception e) {
			this.bizException("生成个人缴费汇总表出错，错误信息：" + e.getMessage() + "。请联系地纬公司解决！");
		}

		rdo.put("filebyte", filebyte);
		rdo.put("filename", fileName);

		return rdo;
	}
	/**
	 * 方法简介.跳转到企业年初一次性支付的JSP之前查询相关信息
	 * 
	 * @author 张成成
	 * @date 2019年10月11日
	 */
	public DataObject fwdAdQyncycxzf(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 * 方法简介.获取民政、公安人员死亡日期
	 * 
	 * @author 张成成
	 * @date 2019年10月15日
	 */
	public DataObject getMzGaSwrq(DataObject para) throws Exception{
		//接参
		String ryid = para.getString("ryid", "");
		String sfzhm = para.getString("sfzhm", "");
		String xm = para.getString("xm", "");
		
		BPO iPerSgxxxBPO = this.newBPO(PerSgxxxBPO.class);
		DataObject perPdo = new DataObject();
		DataStore perInfo = new DataStore();
		String mzswrq = "", gaswrq = "";
		//(ryid)或者(sfzhm、xm)需存在其一
		if ("".equals(sfzhm) || sfzhm == null || "".equals(xm) || xm == null) {
			if ("".equals(ryid) || ryid == null) {
				this.bizException("传值有误，请传入(ryid)或者(sfzhm、xm)！");
			} else {
				StringBuffer sqlBF = new StringBuffer();
				sqlBF.setLength(0);
				sqlBF.append("select a.shbzhm sfzhm, a.xm from biuv.person a where a.ryid = ?");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				perInfo = this.sql.executeQuery();
				if (perInfo.rowCount() <= 0) {
					this.bizException("根据ryid【" + ryid + "】在数据库中查不到人员基本信息！");
				} else {
					sfzhm = perInfo.getString(0, "sfzhm");
					xm = perInfo.getString(0, "xm");
				}
			}
		}

		perPdo.put("sfzhm", sfzhm);
		perPdo.put("xm", xm);
		try {
			DataObject pdo = iPerSgxxxBPO.doMethod(this.getBizInstitution(), "queryPerProMinzhengInfo", perPdo, this.getUser());
			DataStore ds = pdo.getDataStore("ds", new DataStore());
			if (ds.rowCount() > 0) {
				mzswrq = ds.get(0).getString("death_date");
			}
		} catch (Exception e) {
//			 this.bizException(e.getMessage());
		}
		if (mzswrq == null || "".equals(mzswrq)) {
			// 省里面没数据时，调用民政公安信息增加调用青岛本地信息.mod.zcc.20200105
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select a.sssj, a.ssdd");
			sqlBF.append("  from rc3u.death_info a");
			sqlBF.append(" where a.szsfzhm = ?");
			sqlBF.append("   and a.szxm = ?");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, sfzhm);
			this.sql.setString(2, xm);
			DataStore dsMz = this.sql.executeQuery();
			if (dsMz.rowCount() > 0) {
				mzswrq = dsMz.get(0).getString("sssj");
				if (mzswrq != null && !"".equals(mzswrq)) {
					mzswrq = DateUtil.dateToString(DateUtil.stringToDate(mzswrq), "yyyyMMdd");
				}
			}
		} else {
			mzswrq = DateUtil.dateToString(DateUtil.stringToDate(mzswrq), "yyyyMMdd");
		}
		DataObject rdo = new DataObject();
		rdo.put("mzswrq", mzswrq);
		rdo.put("gaswrq", gaswrq);
		return rdo;
	}
	
	/**
	 * 方法简介.跳转到企业数据采集统计的JSP页面
	 *
	 * @author 谈杰 2019年10月18日
	 */
	public DataObject fwdQysjcjtj(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		DataObject qdsdo = new DataObject();
		
//		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
//		if("1".equals(ad3u1059)){
//			ds = AdTools.getQueryJbjgidByUser(this.getUser());
//		} else {
//			ds = SiTools.getSjJbjgidByUserId(this.getUser());
//		}
		// 只取企业 mod.谈杰.20191019
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select a.jbjgid value, a.jbjgmc content, a.jbjgid, a.jbjgmc ");
		sqlBF.append("   from be3u.agency_natl a                                   ");
		sqlBF.append("  where a.jbjgid like '3752%01'                              ");
		this.sql.setSql(sqlBF.toString());
		ds = this.sql.executeQuery();
		
		// dsCode中新增一个“青岛市”，用于按经办机构进行汇总查询
		qdsdo.put("value", "3752");
		qdsdo.put("content", "青岛市");
		qdsdo.put("jbjgid", "3752");
		qdsdo.put("jbjgmc", "青岛市");
		ds.addRow(qdsdo);
		
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;

	}
	
	/**
	 * 方法简介.企业数据采集统计方法
	 *
	 * @author 谈杰 2019年10月18日
	 */
	public DataObject queryQysjcjtj(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

//		String ryid = para.getString("ryid");
		String jbjgid = para.getString("jbjgid"); 
		String jdid = para.getString("jdid");
//		String vbiz = para.getString("biz");
		String biz = jbjgid;// 用于判断是否按经办机构进行汇总查询.add.谈杰.20191202
		
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("经办机构ID为空！");
		}

//		if (vbiz == null || "".equals(vbiz)) {
//			this.bizException("获取的经办机构为空");
//		}
//		
//		String biz = HsuTools.getRsjidByJgid(vbiz);
//		if (biz == null || "".equals(biz)) {
//			biz = vbiz;
//		}
//		
//		String jbjg = "'" + biz + "01','" + biz + "03'";

		// 前台经办机构选择“青岛市”，则按经办机构进行汇总查询.add.谈杰.20191202
		if ("3752".equals(biz)) {
			sqlBF.setLength(0);
			sqlBF.append(" select b.rsjid||'01' jbjgid, '' jdid, count(distinct a.ryid) zcffrs ");
			sqlBF.append("   from ad3u.per_info a,    ");
			sqlBF.append("        be3u.street_natl b  ");
			sqlBF.append("  where a.jdid = b.jdid ");
			sqlBF.append("    and a.dyffzt = '1' ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and a.sszfrq = 'A' ");
			sqlBF.append("  group by b.rsjid ");
		} else {

			String rsjid = SiTools.getRsjidByjbjgid(jbjgid);
			// 查询符合条件的正常发放人数
			sqlBF.setLength(0);
			sqlBF.append("  select b.rsjid||'01' jbjgid, a.jdid, count(distinct a.ryid) zcffrs ");
			sqlBF.append("    from ad3u.per_info a, be3u.street_natl b ");
			sqlBF.append("   where a.jdid = b.jdid ");
			sqlBF.append("     and a.dyffzt = '1' ");
			sqlBF.append("     and a.dylqlb = '101' ");
			sqlBF.append("     and a.sszfrq = 'A' ");
			sqlBF.append("     and b.rsjid in (")
				.append(HsuTools.replaceC2QCQ(rsjid))
				.append(") ");
			if (jdid != null && !"".equals(jdid)) {// 街道
				sqlBF.append("   and a.jdid in (")
					.append(HsuTools.replaceC2QCQ(jdid))
					.append(") ");
			}
			sqlBF.append("group by b.rsjid, a.jdid ");
		}
		this.sql.setSql(sqlBF.toString());
//		this.sql.setString(1, jbjgid);
		DataStore dstj = this.sql.executeQuery();

		for (int i = 0; i < dstj.rowCount(); i++) {
			jbjgid = dstj.getString(i, "jbjgid");
			jdid = dstj.getString(i, "jdid");
			int zcffrs = dstj.getInt(i, "zcffrs");
			int shhfwcjrs = 0;
			String jbjgmc = "", jdmc = "";

			// 经办机构名称
			sqlBF.setLength(0);
			sqlBF.append(" select jbjgmc ");
			sqlBF.append("   from be3u.agency_natl ");
			sqlBF.append("  where jbjgid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, jbjgid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				jbjgmc = dsTemp.getString(0, "jbjgmc");
			}

			// 街道名称
			sqlBF.setLength(0);
			sqlBF.append(" select jdmc ");
			sqlBF.append("   from be3u.street_natl ");
			sqlBF.append("  where jdid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, jdid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				jdmc = dsTemp.getString(0, "jdmc");
			}

			// 社会化服务采集人数
			// 前台经办机构选择“青岛市”，则按经办机构进行汇总查询.add.谈杰.20191202
			if ("3752".equals(biz)) {
				sqlBF.setLength(0);
				sqlBF.append(" select count(distinct a.ryid) shhfwcjrs ");
				sqlBF.append("   from ad3u.per_info a,    ");
				sqlBF.append("        be3u.street_natl b  ");
				sqlBF.append("  where a.jdid = b.jdid");
				sqlBF.append("    and b.rsjid||'01' = ? ");
				sqlBF.append("    and a.dyffzt = '1' ");
				sqlBF.append("    and a.dylqlb = '101' ");
				sqlBF.append("    and exists(select 1 ");
				sqlBF.append("                 from ad3u.fami_natl c ");
				sqlBF.append("                where a.ryid = c.dyryid) ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, jbjgid);
			} else {
				sqlBF.setLength(0);
				sqlBF.append("  select a.jdid, count(distinct a.ryid) shhfwcjrs ");
				sqlBF.append("    from ad3u.per_info a, si3u.orgn_reg b ");
				sqlBF.append("   where a.dwdjid = b.dwdjid ");
				sqlBF.append("     and a.dyffzt = '1' ");
				sqlBF.append("     and a.jdid = ? ");
				sqlBF.append("     and a.dylqlb = '101' ");
				sqlBF.append("     and exists(select 1 ");
				sqlBF.append("                  from ad3u.fami_natl c ");
				sqlBF.append("                 where a.ryid = c.dyryid) ");
				sqlBF.append("   group by a.jdid ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, jdid);
			}
			dsTemp = this.sql.executeQuery();
			
			if (dsTemp.rowCount() > 0) {
				shhfwcjrs = dsTemp.getInt(0, "shhfwcjrs");
			}
			double cjl = 0;
			if (zcffrs != 0) {
				cjl =((double)shhfwcjrs / zcffrs) * 100;
			}
			
			dstj.put(i, "cz", "查看");
			dstj.put(i, "jbjgmc", jbjgmc);
			dstj.put(i, "jdmc", jdmc);
			dstj.put(i, "shhfwcjrs", shhfwcjrs);
			dstj.put(i, "cjl", cjl);
		}

		DataObject rdo = new DataObject();
		rdo.put("tjinfo", dstj);
		return rdo;
		
	}
	
	/**
	 * 
	 * 方法简介.企业数据采集统计 查询未采集人员信息
	 * @author 谈杰
	 * @date 创建时间 2019-10-18
	 * @since V1.0
	 */
	public final DataObject queryQysjcjtjWcjry(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();

		String dwdjid = para.getString("dwdjid");
		String sfzhm = para.getString("sfzhm");
		String jbjgid = para.getString("jbjgid");
		String jdid = para.getString("jdid");

		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空!");
		}

		// 查询未采集人员
		sqlBF.setLength(0);
		sqlBF.append("  select distinct a.ryid, a.shbzhm, a.jdid, a.dwdjid, b.jbjgid, ");
		sqlBF.append("         a.xm, b.dwbh, b.cbdwmc dwmc, c.hkszd, c.sjhm lxdh,  ");
		sqlBF.append("         c.grbh, d.jbjgmc, e.jdmc, '打印' dy  ");//直接在这里查出经办机构名称和街道名称.mod.谈杰.20191019
		sqlBF.append("    from ad3u.per_info      a, ");
		sqlBF.append("         si3u.orgn_reg      b, ");
		sqlBF.append("         biuv.person        c, ");
		sqlBF.append("         be3u.agency_natl   d, ");
		sqlBF.append("         be3u.street_natl   e  ");
		sqlBF.append("   where a.dwdjid = b.dwdjid ");
		sqlBF.append("     and a.ryid = c.ryid ");
		sqlBF.append("     and b.jbjgid = d.jbjgid ");
		sqlBF.append("     and a.jdid = e.jdid ");
		sqlBF.append("     and a.dyffzt = '1' ");
		sqlBF.append("     and a.dylqlb = '101' ");
		sqlBF.append("     and a.sszfrq = 'A' ");
//		sqlBF.append("     and b.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");
		sqlBF.append("     and not exists(select 1 ");
		sqlBF.append("                      from ad3u.fami_natl d ");
		sqlBF.append("                     where a.ryid = d.dyryid) ");
		if(jdid != null && !"".equals(jdid)){// 支持街道id为空.mod.谈杰.20191202
			sqlBF.append("     and a.jdid = '" + jdid + "'  "); 
		}
		if(jdid == null || "".equals(jdid)){
			sqlBF.append("     and e.rsjid||'01' = ? ");// 街道id为空时，按经办机构查询.mod.谈杰.20191202
		}
//		if (jdid != null && !"".equals(jdid)) {// 街道
//			sqlBF.append("   and a.jdid in (")
//				.append(HsuTools.replaceC2QCQ(jdid))
//				.append(") ");
//			sqlBF.append("     and a.jdid = ? ");
//		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("    and a.dwdjid = ? ");
		}
		if (sfzhm != null && !"".equals(sfzhm)) {
			sqlBF.append("    and (a.shbzhm like  ? or a.xm like ?) ");
		}
		int num = 1;
		this.sql.setSql(sqlBF.toString());
//		this.sql.setString(num++, jdid);
		if(jdid == null || "".equals(jdid)){
			this.sql.setString(num++, jbjgid);
		}
		if (dwdjid != null && !"".equals(dwdjid)) {// 没传个人，传了单位
			this.sql.setString(num++, dwdjid);
		}
		if ((sfzhm != null && !"".equals(sfzhm)) && (dwdjid != null && !"".equals(dwdjid))) {// 传了个人和单位
			this.sql.setString(num++, sfzhm + "%");
			this.sql.setString(num++, sfzhm + "%");
		} else if ((sfzhm != null && !"".equals(sfzhm)) && (dwdjid == null || "".equals(dwdjid))) {// 传个人，没传单位
			this.sql.setString(num++, sfzhm + "%");
			this.sql.setString(num++, sfzhm + "%");
		}
		
		DataStore dswcjry = this.sql.executeQuery();

		rdo = new DataObject();
		rdo.put("dswcjry", dswcjry);
		return rdo;
		
	}
	
	/**
	 * 
	 * 方法简介.企业退休资格审批人员查询
	 * @author 谈杰
	 * @date 创建时间 2019-10-22
	 * @since V1.0
	 */
	public final DataObject queryAdQytxzgsprycx(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();

		String ryid = para.getString("ryid", "");
		String spywlx = para.getString("spywlx", "");
		String spqssj = para.getDateToString("spqssj", "yyyyMMdd");
		String spzzsj = para.getDateToString("spzzsj", "yyyyMMdd");

//		if (jbjgid == null || "".equals(jbjgid)) {
//			this.bizException("传入的经办机构为空!");
//		}
		
		if (spqssj != null && !"".equals(spqssj) && spzzsj != null
				&& !"".equals(spzzsj)) {
			if (spqssj.compareTo(spzzsj) > 0) {
				this.bizException("审批起始时间晚于审批终止时间！");
			}
		}
		
		if (spywlx == null || "".equals(spywlx) || "1".equals(spywlx)) {
			sqlBF.setLength(0);
			sqlBF.append(" select '1' ywlx, a.grbh, a.xm, a.xb, a.csrq, ");
			sqlBF.append("        a.shbzhm, d.bcxmz ltxrq, e.bcxmz jbr, c.bcxmz jbrq, a.ryid, ");
			sqlBF.append("        '' cz");
			sqlBF.append("   from biuv.person             a, ");
			sqlBF.append("        si3u.per_natl_cmpl b, ");
			sqlBF.append("        si3u.per_natl_cmpl c, ");
			sqlBF.append("        si3u.per_natl_cmpl d, ");
			sqlBF.append("        si3u.per_natl_cmpl e ");
			sqlBF.append("  where a.ryid = b.ryid ");
			sqlBF.append("    and a.ryid = c.ryid(+) ");
			sqlBF.append("    and a.ryid = d.ryid ");
			sqlBF.append("    and a.ryid = e.ryid(+) ");
			sqlBF.append("    and d.bcxmbh = 'LTXRQ' ");

			if (ryid != null && !"".equals(ryid)) {// 人员ID
				sqlBF.append("   and a.ryid = '" + ryid + "'");
			}

			// sqlBF.append("    and a.ryid = '2000047' ");
			sqlBF.append("    and b.bcxmbh = 'TXZGQRLB' ");
			sqlBF.append("    and e.bcxmbh(+) = 'JZGTXZGFSR' ");
			sqlBF.append("    and instr(b.bcxmz, '1') > 0 ");
			sqlBF.append("    and c.bcxmbh(+) = 'JZGTXZGFSSJ' ");

			if (spqssj != null && !"".equals(spqssj)) {// 审批起始时间
				sqlBF.append("   and nvl(c.bcxmz, '19000101') >= '" + spqssj
						+ "'");
			}

			if (spzzsj != null && !"".equals(spzzsj)) {// 审批终止时间
				sqlBF.append("   and nvl(c.bcxmz, '20491231') <= '" + spzzsj
						+ "'");
			}

			// sqlBF.append("    and nvl(c.bcxmz(+), '19000101') >= '20191001' ");
		}
		if (spywlx == null || "".equals(spywlx)) {
			sqlBF.append("  union all ");
		}
		if (spywlx == null || "".equals(spywlx) || "2".equals(spywlx)) {
			sqlBF.append(" select '2' ywlx, a.grbh, a.xm, a.xb, a.csrq, ");
			sqlBF.append("        a.shbzhm, d.bcxmz ltxrq, e.bcxmz jbr, c.bcxmz jbrq, a.ryid, ");
			sqlBF.append("        '查看' cz");
			sqlBF.append("   from biuv.person             a, ");
			sqlBF.append("        si3u.per_natl_cmpl b, ");
			sqlBF.append("        si3u.per_natl_cmpl c, ");
			sqlBF.append("        si3u.per_natl_cmpl d, ");
			sqlBF.append("        si3u.per_natl_cmpl e ");
			sqlBF.append("  where a.ryid = b.ryid ");
			sqlBF.append("    and a.ryid = c.ryid(+) ");
			sqlBF.append("    and a.ryid = d.ryid ");
			sqlBF.append("    and a.ryid = e.ryid(+) ");
			sqlBF.append("    and d.bcxmbh = 'LTXRQ' ");

			if (ryid != null && !"".equals(ryid)) {// 人员ID
				sqlBF.append("   and a.ryid = '" + ryid + "'");
			}

			// sqlBF.append("    and a.ryid = '2000045' ");
			sqlBF.append("    and b.bcxmbh = 'TXZGQRLB' ");
			sqlBF.append("    and e.bcxmbh(+) = 'TSGZTXZGFSR' ");
			sqlBF.append("    and instr(b.bcxmz, '2') > 0 ");
			sqlBF.append("    and c.bcxmbh(+) = 'TSGZTXZGFSSJ' ");

			if (spqssj != null && !"".equals(spqssj)) {// 审批起始时间
				sqlBF.append("   and nvl(c.bcxmz, '19000101') >= '" + spqssj
						+ "'");
			}

			if (spzzsj != null && !"".equals(spzzsj)) {// 审批终止时间
				sqlBF.append("   and nvl(c.bcxmz, '20491231') <= '" + spzzsj
						+ "'");
			}

			// sqlBF.append("    and nvl(c.bcxmz(+), '19000101') >= '20191001' ");
		}
		if (spywlx == null || "".equals(spywlx)) {
			sqlBF.append("  union all ");
		}
		if (spywlx == null || "".equals(spywlx) || "3".equals(spywlx)) {
			sqlBF.append(" select '3' ywlx, a.grbh, a.xm, a.xb, a.csrq, ");
			sqlBF.append("        a.shbzhm, d.bcxmz ltxrq, e.bcxmz jbr, c.bcxmz jbrq, a.ryid, ");
			sqlBF.append("        '' cz");
			sqlBF.append("   from biuv.person             a, ");
			sqlBF.append("        si3u.per_natl_cmpl b, ");
			sqlBF.append("        si3u.per_natl_cmpl c, ");
			sqlBF.append("        si3u.per_natl_cmpl d, ");
			sqlBF.append("        si3u.per_natl_cmpl e ");
			sqlBF.append("  where a.ryid = b.ryid ");
			sqlBF.append("    and a.ryid = c.ryid(+) ");
			sqlBF.append("    and a.ryid = d.ryid ");
			sqlBF.append("    and a.ryid = e.ryid(+) ");
			sqlBF.append("    and d.bcxmbh = 'LTXRQ' ");

			if (ryid != null && !"".equals(ryid)) {// 人员ID
				sqlBF.append("   and a.ryid = '" + ryid + "'");
			}

			// sqlBF.append("    and a.ryid = '2000048' ");
			sqlBF.append("    and b.bcxmbh = 'TXZGQRLB' ");
			sqlBF.append("    and e.bcxmbh(+) = 'SYZQTXZGFSR' ");
			sqlBF.append("    and instr(b.bcxmz, '3') > 0 ");
			sqlBF.append("    and c.bcxmbh(+) = 'SYZQTXZGFSSJ' ");

			if (spqssj != null && !"".equals(spqssj)) {// 审批起始时间
				sqlBF.append("   and nvl(c.bcxmz, '19000101') >= '" + spqssj
						+ "'");
			}

			if (spzzsj != null && !"".equals(spzzsj)) {// 审批终止时间
				sqlBF.append("   and nvl(c.bcxmz, '20491231') <= '" + spzzsj
						+ "'");
			}

			// sqlBF.append("    and nvl(c.bcxmz(+), '19000101') >= '20191001' ");
		}
		if (spywlx == null || "".equals(spywlx)) {
			sqlBF.append("  union all ");
		}
		if (spywlx == null || "".equals(spywlx) || "4".equals(spywlx)) {
			sqlBF.append(" select '4' ywlx, a.grbh, a.xm, a.xb, a.csrq, ");
			sqlBF.append("        a.shbzhm, d.bcxmz ltxrq, e.bcxmz jbr, c.bcxmz jbrq, a.ryid, ");
			sqlBF.append("        '' cz");
			sqlBF.append("   from biuv.person             a, ");
			sqlBF.append("        si3u.per_natl_cmpl b, ");
			sqlBF.append("        si3u.per_natl_cmpl c, ");
			sqlBF.append("        si3u.per_natl_cmpl d, ");
			sqlBF.append("        si3u.per_natl_cmpl e ");
			sqlBF.append("  where a.ryid = b.ryid ");
			sqlBF.append("    and a.ryid = c.ryid(+) ");
			sqlBF.append("    and a.ryid = d.ryid ");
			sqlBF.append("    and a.ryid = e.ryid(+) ");
			sqlBF.append("    and d.bcxmbh = 'LTXRQ' ");

			if (ryid != null && !"".equals(ryid)) {// 人员ID
				sqlBF.append("   and a.ryid = '" + ryid + "'");
			}

			// sqlBF.append("    and a.ryid = '2000013' ");
			sqlBF.append("    and b.bcxmbh = 'TXZGQRLB' ");
			sqlBF.append("    and e.bcxmbh(+) = 'YQTXZGFSR' ");
			sqlBF.append("    and instr(b.bcxmz, '4') > 0 ");
			sqlBF.append("    and c.bcxmbh(+) = 'YQTXZGFSSJ' ");

			if (spqssj != null && !"".equals(spqssj)) {// 审批起始时间
				sqlBF.append("   and nvl(c.bcxmz, '19000101') >= '" + spqssj
						+ "'");
			}

			if (spzzsj != null && !"".equals(spzzsj)) {// 审批终止时间
				sqlBF.append("   and nvl(c.bcxmz, '20491231') <= '" + spzzsj
						+ "'");
			}

			// sqlBF.append("    and nvl(c.bcxmz(+), '19000101') >= '20191001' ");
		}

		this.sql.setSql(sqlBF.toString());
		DataStore dsryinfo = this.sql.executeQuery();

		rdo.put("dsryinfo", dsryinfo);
		return rdo;
		
	}
	/**
	 * 方法简介.跳转 职工养老新增退休人员花名册（企业、机关） 页面
	 * 
	 * @author 张成成
	 * @date 2019年10月22日
	 */
	public DataObject fwdAdZgylxztxryhmc(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String biz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		String xzbz = para.getString("xzbz","");
		if("101".equals(xzbz)){
			for(int i=0; i < ds.rowCount(); i++){
				String jbjgid = ds.getString(i, "value");
				if("03".equals(jbjgid.substring(jbjgid.length()-2))){
					ds.delRow(i);
					i--;
				}
			}
		}else{
			for(int i=0; i < ds.rowCount(); i++){
				String jbjgid = ds.getString(i, "value");
				if("01".equals(jbjgid.substring(jbjgid.length()-2))){
					ds.delRow(i);
					i--;
				}
			}
		}
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 * 
	 * 方法简介.职工养老新增退休人员花名册（企业、机关） 查询
	 * 
	 * @author 张成成
	 * @date 2019年10月22日
	 */
	public DataObject queryAdZgylxztxryhmc(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String biz = para.getString("biz");
		if (biz == null || "".equals(biz)) {
			this.bizException("获取的经办机构为空");
		}
		String jbjg = "'" + biz + "01'";

		String ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		String ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		String ltxlb = para.getString("ltxlb", "");
		
		String csrid = para.getString("csrid", "");
		Date csqsrq = para.getDate("csqsrq");
		Date cszzrq = para.getDate("cszzrq");
		String csrname = para.getString("csrname", "");//新增支持name查询.add.zcc.20191113
		
		String fsrid = para.getString("fsrid", "");
		Date fsqsrq = para.getDate("fsqsrq");
		Date fszzrq = para.getDate("fszzrq");
		String fsrname = para.getString("fsrname", "");
		
		String xzbz = para.getString("xzbz", "");
		String jbjgid = para.getString("jbjgid", "");
		String dqny = DateUtil.dateToString(DateUtil.getDBDate(),"yyyyMM");
		
		//检测参数、时间合法性
		if("".equals(xzbz) || xzbz == null){
			this.bizException("险种类型为空，请检查！");
		}
		if ((!"".equals(ltxqsrq) && ltxqsrq != null)
				&& (!"".equals(ltxzzrq) && ltxzzrq != null)) {
			if (ltxqsrq.compareTo(ltxzzrq) > 0) {
				this.bizException("离退休起始日期大于终止日期，请检查！");
			}
		}
		
		if (csqsrq != null && cszzrq != null) {
			if (csqsrq.compareTo(cszzrq) > 0) {
				this.bizException("初审起始日期大于终止日期，请检查！");
			}
		}
		if (fsqsrq != null && fszzrq != null) {
			if (fsqsrq.compareTo(fszzrq) > 0) {
				this.bizException("复审起始日期大于终止日期，请检查！");
			}
		}
		if (xzbz.indexOf("102") >= 0) {
			jbjg = "'" + biz + "03'";
		}
//		if ("".equals(jbjgid) || jbjgid == null) {
//			jbjgid = jbjg;
//		}

		sqlBF.setLength(0);
		sqlBF.append("select c.grbh, a.ryid, a.xm, a.xb, a.shbzhm,");
		sqlBF.append("       d.dwbh, d.cbdwmc dwmc, e.lb tfbz, b.ltxlb, b.ltxrq,");
		sqlBF.append("       a.dyxsksny, a.dyspr csr, a.dyspsj cssj, a.dyfhr fsr, a.dyfhsj fssj,");
		sqlBF.append("       d.jbjgid, f.jbjgmc, nvl(b.zhqnx,0) zhqnx,nvl(b.zhhnx,0) zhhnx, nvl(b.zhzje,0) grylzhje ");// 增加个人养老账户金额 wsk 2020/11/25
		sqlBF.append("  from ad3u.per_info a,");
		sqlBF.append("       ad3u.emp_info b,");
		sqlBF.append("       biu.person c,");
		sqlBF.append("       si3u.orgn_reg d,");
		sqlBF.append("       si3u.orgn_tfba e,");
		sqlBF.append("       be3u.agency_natl f");
		sqlBF.append(" where a.ryid = b.ryid and a.ryid = c.ryid and a.dwdjid = d.dwdjid");
		sqlBF.append("       and a.dwdjid = e.dwdjid(+) and d.jbjgid = f.jbjgid");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("       and d.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(")");
		}
		sqlBF.append("    and not exists(select 1 ");//去除待遇重算的人员.mod.zcc.20200113
		sqlBF.append("                 from ad3u.per_cal_his g ");
		sqlBF.append("                where a.ryid = g.ryid ");
		sqlBF.append("                  and nvl(g.xh, 0) > 1) ");

		if(!"".equals(ltxqsrq) && ltxqsrq != null){
			sqlBF.append("  and b.ltxrq >=  ? ");
		}
		if(!"".equals(ltxzzrq) && ltxzzrq != null){
			sqlBF.append("  and b.ltxrq <=  ? ");
		}
		if (!"".equals(ltxlb) && ltxlb != null) {
			sqlBF.append("  and b.ltxlb = ?");
		}
		if (!"".equals(csrname) && csrname != null) {
			sqlBF.append("  and a.dyspr in (?, ?) ");
		}
		if (csqsrq != null) {
			sqlBF.append("  and nvl(to_char(a.dyspsj,'yyyyMMdd'),'19000101') >=  ? ");
		}
		if (cszzrq != null) {
			sqlBF.append("  and nvl(to_char(a.dyspsj,'yyyyMMdd'),'19000101') <=  ? ");
		}
		if (!"".equals(fsrname) && fsrname != null) {
			sqlBF.append("  and a.dyfhr in (?, ?)");
		}
		if (fsqsrq != null) {
			sqlBF.append("  and nvl(to_char(a.dyfhsj,'yyyyMMdd'),'19000101') >=  ? ");
		}
		if (fszzrq != null) {
			sqlBF.append("  and nvl(to_char(a.dyfhsj,'yyyyMMdd'),'19000101') <=  ? ");
		}
		if (!"".equals(xzbz) && xzbz != null) {
			sqlBF.append("  and a.dylqlb = ?");
		}
		this.sql.setSql(sqlBF.toString());
		int num = 1;
		if(!"".equals(ltxqsrq) && ltxqsrq != null){
			this.sql.setString(num++, ltxqsrq);
		}
		if(!"".equals(ltxzzrq) && ltxzzrq != null){
			this.sql.setString(num++, ltxzzrq);
		}
		if (!"".equals(ltxlb) && ltxlb != null) {
			this.sql.setString(num++, ltxlb);
		}
		if (!"".equals(csrname) && csrname != null) {
			this.sql.setString(num++, csrid);
			this.sql.setString(num++, csrname);
		}
		if (csqsrq != null) {
			this.sql.setString(num++, DateUtil.FormatDate(csqsrq, "yyyyMMdd"));
		}
		if (cszzrq != null) {
			this.sql.setString(num++, DateUtil.FormatDate(cszzrq, "yyyyMMdd"));
		}
		if (!"".equals(fsrname) && fsrname != null) {
			this.sql.setString(num++, fsrid);
			this.sql.setString(num++, fsrname);
		}
		if (fsqsrq != null) {
			this.sql.setString(num++, DateUtil.FormatDate(fsqsrq, "yyyyMMdd"));
		}
		if (fszzrq != null) {
			this.sql.setString(num++, DateUtil.FormatDate(fszzrq, "yyyyMMdd"));
		}
		if (!"".equals(xzbz) && xzbz != null) {
			this.sql.setString(num++, xzbz);
		}
		DataStore ryinfo = this.sql.executeQuery();
		
		String ryid = "",jfqsny="",jfzzny="",glhjStr="";
		double glhj = 0,yljze = 0;
		DataStore dsTemp = new DataStore();
		double zhqnx=0,zhhnx=0;
		int glhjns=0,glhjys=0;
		String zhqgl = "", zhhgl = "";//账户前工龄，账户后工龄 wsk 2020/11/28
		int zhqns = 0, zhqys = 0, zhhns = 0, zhhys = 0;
		double zhqzys = 0, zhhzys = 0;// 账户前总月数，账户后总月数
		for (int i = 0; i < ryinfo.rowCount(); i++) {
			zhqnx = ryinfo.getDouble(i, "zhqnx");
			zhhnx = ryinfo.getDouble(i, "zhhnx");
			glhj = (zhqnx+zhhnx)*12;
			glhjns = (int)(glhj / 12);
			glhjys = (int)(glhj % 12);
			glhjStr = "";
			if(glhjns>0){
				glhjStr += glhjns + "年";
			}
			if(glhjys>0){
				glhjStr += glhjys + "个月";
			}
			
			zhqzys = zhqnx * 12;
			zhqns = (int)(zhqzys / 12);
			zhqys = (int)(zhqzys % 12);
			zhqgl = "";
			if (zhqns > 0) {
				zhqgl += zhqns + "年";
			}
			if(zhqys>0){
				zhqgl += zhqys + "个月";
			}
			
			zhhzys = zhhnx * 12;
			zhhns = (int)(zhhzys / 12);
			zhhys = (int)(zhhzys % 12);
			zhhgl = "";
			if (zhhns > 0) {
				zhhgl += zhhns + "年";
			}
			if(zhhys>0){
				zhhgl += zhhys + "个月";
			}
			
			ryinfo.put(i, "glhj", glhj);
			ryinfo.put(i, "glhjStr", glhjStr);
			ryinfo.put(i, "zhqgl", zhqgl);
			ryinfo.put(i, "zhhgl", zhhgl);
			ryinfo.put(i, "cz", "查看"); //添加查看按钮，查看退休审批表 wsk 2020/11/25

			ryid = ryinfo.getString(i, "ryid");
			if (ryid != null && !"".equals(ryid)) {
				// 获取缴费起始终止时间
				sqlBF.setLength(0);
				sqlBF.append("select min(qsny) jfqsny, max(zzny) jfzzny");
				sqlBF.append("  from si3u.per_decl");
				sqlBF.append(" where ryid = ?");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					jfqsny = dsTemp.getString(0, "jfqsny");
					jfzzny = dsTemp.getString(0, "jfzzny");
				}
				ryinfo.put(i, "jfqsny", jfqsny);
				ryinfo.put(i, "jfzzny", jfzzny);

				// 获取养老金总额
				sqlBF.setLength(0);
				sqlBF.append(" select sum(btje) yljze ");
				sqlBF.append("   from ad3u.per_giv_month_std ");
				sqlBF.append("  where ryid = ? ");
				sqlBF.append("    and ? between qsny and nvl(zzny, ?) ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				this.sql.setString(2, dqny);
				this.sql.setString(3, dqny);
				dsTemp = this.sql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					yljze = dsTemp.getDouble(0, "yljze");	
				}
				ryinfo.put(i, "yljze", yljze);
			}
		}
		ryinfo = ryinfo.sort("ltxrq");
		//转换审核人
		ryinfo = HsuTools.genSysUserDataStore(ryinfo, "csr", "dysprbh", "csr");
		ryinfo = HsuTools.genSysUserDataStore(ryinfo, "fsr", "dysprbh", "fsr");
		
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryinfo);
		return rdo;
	}
	
	/**
	 * 退休人员明细
	 * @author zxk 2019年10月25日
	 */
	public DataObject genTxrymxExportFile_3713(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		SPrompt prompt = SPromptUtil.getSPrompt();
		
		prompt.prompt("正在导出数据，请稍等...");
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryTxrymxInfo(para);
		fileDs = pdo.getDataStore("dsperinfo");
		for (int i = 0; i < fileDs.rowCount(); i++) {
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "sszfrq", HsuTools.discode("SSZFRQ", fileDs.getString(i, "sszfrq"), ""));
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ryzt", HsuTools.discode("RYSCZT", fileDs.getString(i, "ryzt"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
			
			String spbz = fileDs.getString(i, "spbz");
			if ("1".equals(spbz)) {
				fileDs.put(i, "spbz", "已审批");
			}else {
				fileDs.put(i, "spbz", "未审批");
			}
			
			Date blzysj = fileDs.getDate(i, "blzysj");
			if(blzysj!=null){
				fileDs.put(i, "blzysj", DateUtil.dateToString(blzysj, "yyyy-MM-dd"));
			}
			Date spsj = fileDs.getDate(i, "spsj");
			if(blzysj!=null){
				fileDs.put(i, "spsj", DateUtil.dateToString(spsj, "yyyy-MM-dd"));
			}
			Date dyfhsj = fileDs.getDate(i, "dyfhsj");
			if(dyfhsj!=null){
				fileDs.put(i, "dyfhsj", DateUtil.dateToString(dyfhsj, "yyyy-MM-dd"));
			}
		}
		
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "sfzhm", "身份证号码", "String", "", 18);
		
		addTableInfo4Write(tableInfo, "jcxylj", "基础养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "zhylj", "个人账户养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "gdxylj", "过渡性养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "gdxtjj", "过渡性调节金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "ce", "新老办法差额", "number", "#########0.00", 12);
		
		addTableInfo4Write(tableInfo, "qtylj", "其他养老金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "dqje", "退休金", "number", "#########0.00", 12);
		addTableInfo4Write(tableInfo, "zynj", "职业年金", "number", "#######0.00", 12);//导出增加职业年金显示   add rzs-20190409
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 20);
		
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "sszfrq", "所属支付人群", "String", "", 20);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "blzysj", "办理增员日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "spbz", "审批标志", "String", "", 10);
		
		addTableInfo4Write(tableInfo, "spr", "审批人", "String", "", 50);
		addTableInfo4Write(tableInfo, "spsj", "审批日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "fhr", "复核人", "String", "", 50);
		addTableInfo4Write(tableInfo, "dyfhsj", "复核日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "zjfnx", "总缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "jtzz", "家庭地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ssjd", "所属街道", "String", "", 100);
		addTableInfo4Write(tableInfo, "sssq", "所属社区", "String", "", 100);
		addTableInfo4Write(tableInfo, "txdah", "退休档案号", "String", "", 50);
		addTableInfo4Write(tableInfo, "ryzt", "人员状态", "String", "", 50);
		
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 50);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "String", "", 10);
		addTableInfo4Write(tableInfo, "txzbh", "退休证编号", "String", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		sheet = ExcelTool.createSheet(workbook, "报盘文件", 0);
		// 生成excel文件
		ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
		ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, fileDs);
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		prompt.complete(); // 进度条任务完成
		prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		return rdo;
	}
	
	/**
	 * 方法简介.跳转到职工一次性待遇领取人员查询的JSP
	 *
	 * @author 谈杰 2019年11月1日
	 */
	public DataObject fwdAdZgycxdylqrycx(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);

		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.职工一次性待遇领取人员查询
	 * @author 谈杰
	 * @date 创建时间 2019-11-1
	 * @since V1.0
	 */
	public final DataObject queryAdZgycxdylqrycx(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String ryid = para.getString("ryid", "");
		String dwdjid = para.getString("dwdjid", "");
		String jbjgid = para.getString("jbjgid", "");
		String xzbz = para.getString("xzbz", "");
		String dyhdlx = para.getString("dyhdlx", "");
		String jbqsrq = para.getDateToString("jbqsrq", "yyyyMMdd");
		String jbzzrq = para.getDateToString("jbzzrq", "yyyyMMdd");
		String swqsrq = para.getDateToString("swqsrq", "yyyyMMdd");
		String swzzrq = para.getDateToString("swzzrq", "yyyyMMdd");
		
		// 检验参数
//		if("".equals(dyhdlx) || dyhdlx == null){
//			this.bizException("待遇核定类型为空，请检查！");
//		}
		
		if ((!"".equals(jbqsrq) && jbqsrq != null)
				&& (!"".equals(jbzzrq) && jbzzrq != null)) {
			if (jbqsrq.compareTo(jbzzrq) > 0) {
				this.bizException("复审起始日期大于终止日期，请检查！");
			}
		}
		
		// 如果前台没有选择经办机构，则取操作员有权限的经办机构
		if(jbjgid == null || "".equals(jbjgid)){
			DataStore dsJbjg = SiTools.getOperateJbjgidByUserId(this.getUser().getUserid());
			if (dsJbjg.rowCount() == 0) {
//				this.bizException("未查询到您有操作权限的经办机构！");
				dsJbjg = SiTools.getSjJbjgidByUserId(this.getUser());// mod.谈杰.20191112
//			} else {
			} 
				for (int j = 0; j < dsJbjg.rowCount(); j++) {
					jbjgid = jbjgid + dsJbjg.getString(j, "value") + ",";
				}
				jbjgid = jbjgid.substring(0, jbjgid.length() - 1);
//			}
		}
		
		if (ryid == null || "".equals(ryid)) {
			//如果是全查的话则只查询ungiv 查询per_giv_detl查不动。
			// 根据前台选择的待遇核定类型，执行不同的SQL
			sqlBF.setLength(0);
			if("1".equals(dyhdlx) || dyhdlx == null || "".equals(dyhdlx)){// 供养一次性
//				sqlBF.setLength(0);
				sqlBF.append(" select a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("        c.cbdwmc dwmc, d.lb tfbz, '供养一次性' dyhdlx, e.xzbz, '审批表' cz, ");
				sqlBF.append("        a.zfrylb, sum(e.btje) bfje, nvl(f.zfzt,'1') zfzt, c.jbjgid, g.jbjgmc, ");
				sqlBF.append("         i.bljyjbr jbr, to_char(e.jbsj, 'yyyyMMdd') jbsj, e.yfny, '' rydjid, '' spid, ");//增加查询yfny.modify.zcc.20191113
				sqlBF.append("        e.ffqd ");// 增加查询发放渠道.add.谈杰.20200323
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        biuv.person b, ");
				sqlBF.append("        si3u.orgn_reg c, ");
				sqlBF.append("        si3u.orgn_tfba d, ");
				sqlBF.append("        ad3u.per_giv_detl_ungiv e, ");
				sqlBF.append("        ad3u.bill_per_detl f, ");
				sqlBF.append("        be3u.agency_natl g, ");
				sqlBF.append("        ad3u.per_reg i ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
				sqlBF.append("    and a.ryid = e.ryid ");
				sqlBF.append("    and e.ryid = f.ryid(+) ");
				sqlBF.append("    and e.zdlsh = f.zdlsh(+) ");
				sqlBF.append("    and c.jbjgid = g.jbjgid ");
				sqlBF.append("    and a.dqdydjid = i.dydjid ");
				sqlBF.append("    and e.btbh = 'H727' and a.sszfrq = 'A' ");// 补贴跟遗属丧葬费一致，因此这里必须限制非遗属的---zky modify 2020年1月7日
//				sqlBF.append("	  and c.jbjgid = '' ");
				sqlBF.append("    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");
				
				if (ryid != null && !"".equals(ryid)) {
					sqlBF.append("   and a.ryid = '" + ryid + "'");
				}
				if (dwdjid != null && !"".equals(dwdjid)) {
					sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
				}
				if (xzbz != null && !"".equals(xzbz)) {
					sqlBF.append("   and e.xzbz = '" + xzbz + "'");
				}
				if (jbqsrq !=null && !"".equals(jbqsrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'190001') >= '" + jbqsrq + "'");
				}
				if (jbzzrq !=null && !"".equals(jbzzrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'205012') <= '" + jbzzrq + "'");
				}
				if (swqsrq !=null && !"".equals(swqsrq)){
					sqlBF.append(" and nvl(b.swrq,'190001') >= '" + swqsrq + "'");
				}
				if (swzzrq !=null && !"".equals(swzzrq)){
					sqlBF.append(" and nvl(b.swrq,'205012') <= '" + swzzrq + "'");
				}
				sqlBF.append(" group by a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("       c.cbdwmc, d.lb, e.xzbz, a.zfrylb, f.zfzt, ");
				sqlBF.append("       c.jbjgid, g.jbjgmc, i.bljyjbr, to_char(e.jbsj, 'yyyyMMdd'), e.yfny,  ");
				sqlBF.append("       e.ffqd ");
			}
			if(dyhdlx == null || "".equals(dyhdlx)){
				sqlBF.append(" union all ");
			}
			if("2".equals(dyhdlx) || dyhdlx == null || "".equals(dyhdlx)){// 供养死亡
//				sqlBF.setLength(0);
				sqlBF.append(" select a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("        c.cbdwmc dwmc, d.lb tfbz, '供养死亡' dyhdlx, e.xzbz, '审批表' cz, ");
				sqlBF.append("        a.zfrylb, sum(e.btje) bfje, nvl(f.zfzt,'1') zfzt, c.jbjgid, g.jbjgmc, ");
				sqlBF.append("        i.bljyjbr jbr, to_char(e.jbsj, 'yyyyMMdd') jbsj, e.yfny, '' rydjid, '' spid, ");//增加查询yfny.modify.zcc.20191113
				sqlBF.append("        e.ffqd ");// 增加查询发放渠道.add.谈杰.20200323
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        biuv.person b, ");
				sqlBF.append("        si3u.orgn_reg c, ");
				sqlBF.append("        si3u.orgn_tfba d, ");
				sqlBF.append("        ad3u.per_giv_detl_ungiv e, ");
				sqlBF.append("        ad3u.bill_per_detl f, ");
				sqlBF.append("        be3u.agency_natl g, ");
				sqlBF.append("        ad3u.giv_item h, ");
				sqlBF.append("        ad3u.per_reg i ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
				sqlBF.append("    and a.ryid = e.ryid ");
				sqlBF.append("    and e.ryid = f.ryid(+) ");
				sqlBF.append("    and e.zdlsh = f.zdlsh(+) ");
				sqlBF.append("    and c.jbjgid = g.jbjgid ");
				sqlBF.append("    and e.btbh = h.btbh ");
				sqlBF.append("    and a.dqdydjid = i.dydjid ");
				sqlBF.append("    and a.dyffzt = '3' ");// 待遇发放状态为终止
				sqlBF.append("    and a.sszfrq = 'B' ");
				sqlBF.append("    and h.ffzq = '5' ");// 发放周期为一次性
//				sqlBF.append("    and c.jbjgid = '' ");
				sqlBF.append("    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");

				if (ryid != null && !"".equals(ryid)) {
					sqlBF.append("   and a.ryid = '" + ryid + "'");
				}
				if (dwdjid != null && !"".equals(dwdjid)) {
					sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
				}
				if (xzbz != null && !"".equals(xzbz)) {
					sqlBF.append("   and e.xzbz = '" + xzbz + "'");
				}
				if (jbqsrq !=null && !"".equals(jbqsrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'190001') >= '" + jbqsrq + "'");
				}
				if (jbzzrq !=null && !"".equals(jbzzrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'205012') <= '" + jbzzrq + "'");
				}
				if (swqsrq !=null && !"".equals(swqsrq)){
					sqlBF.append(" and nvl(b.swrq,'190001') >= '" + swqsrq + "'");
				}
				if (swzzrq !=null && !"".equals(swzzrq)){
					sqlBF.append(" and nvl(b.swrq,'205012') <= '" + swzzrq + "'");
				}
				sqlBF.append(" group by a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("       c.cbdwmc, d.lb, e.xzbz, a.zfrylb, f.zfzt, ");
				sqlBF.append("       c.jbjgid, g.jbjgmc, i.bljyjbr, to_char(e.jbsj, 'yyyyMMdd'), e.yfny,  ");
				sqlBF.append("       e.ffqd ");
			}
			if(dyhdlx == null || "".equals(dyhdlx)){
				sqlBF.append(" union all ");
			}
			if("3".equals(dyhdlx) || dyhdlx == null || "".equals(dyhdlx)){// 退休死亡
//				sqlBF.setLength(0);
				sqlBF.append(" select a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("        c.cbdwmc dwmc, d.lb tfbz, '退休死亡' dyhdlx, e.xzbz, '审批表' cz, ");
				sqlBF.append("        a.zfrylb, sum(e.btje) bfje, nvl(f.zfzt,'1') zfzt, c.jbjgid, g.jbjgmc, ");
				sqlBF.append("        i.bljyjbr jbr, to_char(e.jbsj, 'yyyyMMdd') jbsj, e.yfny, '' rydjid, '' spid, ");//增加查询yfny.modify.zcc.20191113
				sqlBF.append("        e.ffqd ");// 增加查询发放渠道.add.谈杰.20200323
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        biuv.person b, ");
				sqlBF.append("        si3u.orgn_reg c, ");
				sqlBF.append("        si3u.orgn_tfba d, ");
				sqlBF.append("        ad3u.per_giv_detl_ungiv e, ");
				sqlBF.append("        ad3u.bill_per_detl f, ");
				sqlBF.append("        be3u.agency_natl g, ");
				sqlBF.append("        ad3u.giv_item h, ");
				sqlBF.append("        ad3u.per_reg i ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
				sqlBF.append("    and a.ryid = e.ryid ");
				sqlBF.append("    and e.ryid = f.ryid(+) ");
				sqlBF.append("    and e.zdlsh = f.zdlsh(+) ");
				sqlBF.append("    and c.jbjgid = g.jbjgid ");
				sqlBF.append("    and e.btbh = h.btbh ");
				sqlBF.append("    and a.dqdydjid = i.dydjid ");
				sqlBF.append("    and a.dyffzt = '3' ");// 待遇发放状态为终止
				sqlBF.append("    and a.sszfrq = 'A' ");
				sqlBF.append("    and h.ffzq = '5' ");// 发放周期为一次性
//				sqlBF.append("    and c.jbjgid = '' ");
				sqlBF.append("    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");

				if (ryid != null && !"".equals(ryid)) {
					sqlBF.append("   and a.ryid = '" + ryid + "'");
				}
				if (dwdjid != null && !"".equals(dwdjid)) {
					sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
				}
				if (xzbz != null && !"".equals(xzbz)) {
					sqlBF.append("   and e.xzbz = '" + xzbz + "'");
				}
				if (jbqsrq !=null && !"".equals(jbqsrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'190001') >= '" + jbqsrq + "'");
				}
				if (jbzzrq !=null && !"".equals(jbzzrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'205012') <= '" + jbzzrq + "'");
				}
				if (swqsrq !=null && !"".equals(swqsrq)){
					sqlBF.append(" and nvl(b.swrq,'190001') >= '" + swqsrq + "'");
				}
				if (swzzrq !=null && !"".equals(swzzrq)){
					sqlBF.append(" and nvl(b.swrq,'205012') <= '" + swzzrq + "'");
				}
				sqlBF.append(" group by a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("       c.cbdwmc, d.lb, e.xzbz, a.zfrylb, f.zfzt, ");
				sqlBF.append("       c.jbjgid, g.jbjgmc, i.bljyjbr, to_char(e.jbsj, 'yyyyMMdd'), e.yfny,  ");
				sqlBF.append("       e.ffqd ");
			}
			if(dyhdlx == null || "".equals(dyhdlx)){
				sqlBF.append(" union all ");
			}
			if("4".equals(dyhdlx) || dyhdlx == null || "".equals(dyhdlx)){// 在职死亡
//				sqlBF.setLength(0);
				sqlBF.append(" select a.ryid, a.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("        c.cbdwmc dwmc, d.lb tfbz, decode(b.splb, 'A01', '在职死亡', 'A02', '出国返还', 'A14','职工待遇补发', '其他退保返还') dyhdlx, f.xzbz, decode(b.splb, 'A14', '', '审批表') cz, ");
				sqlBF.append("        '' zfrylb, sum(f.btje) bfje, decode(g.djzt,'0','0','1','2') zfzt, ");
				sqlBF.append("        c.jbjgid, e.jbjgmc, b.jbr, to_char(b.jbsj, 'yyyyMMdd') jbsj, b.jyny yfny, h.rydjid, b.spid, ");//增加查询jyny.modify.zcc.20191113
				sqlBF.append("        b.fffs ffqd ");// 增加查询发放渠道.add.谈杰.20200323
				sqlBF.append("   from biuv.person a, ");
				sqlBF.append("        si3u.per_giv_exam b, ");
				sqlBF.append("        si3u.orgn_reg c, ");
				sqlBF.append("        si3u.orgn_tfba d, ");
				sqlBF.append("        be3u.agency_natl e, ");
				sqlBF.append("        si3u.per_giv_once f, ");
				sqlBF.append("        si3u.pay_bill g, ");
				sqlBF.append("        si3u.per_reg h ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and c.dwdjid = h.dwdjid ");
				sqlBF.append("    and a.ryid = h.ryid ");
				sqlBF.append("    and b.rydjid = h.rydjid ");
				sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
				sqlBF.append("    and c.jbjgid = e.jbjgid ");
				sqlBF.append("    and b.spid = f.spid ");
				sqlBF.append("    and f.zdlsh = g.zdlsh ");
				sqlBF.append("    and b.splb in ('A01', 'A02', 'A05', 'A14') ");
				sqlBF.append("    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");

				if (ryid != null && !"".equals(ryid)) {
					sqlBF.append("   and a.ryid = '" + ryid + "'");
				}
				if (dwdjid != null && !"".equals(dwdjid)) {
					sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
				}
				if (xzbz != null && !"".equals(xzbz)) {
					sqlBF.append("   and f.xzbz = '" + xzbz + "'");
				}
				if (jbqsrq !=null && !"".equals(jbqsrq)){
					sqlBF.append(" and nvl(to_char(b.jbsj,'yyyyMMdd'),'190001') >= '" + jbqsrq + "'");
				}
				if (jbzzrq !=null && !"".equals(jbzzrq)){
					sqlBF.append(" and nvl(to_char(b.jbsj,'yyyyMMdd'),'205012') <= '" + jbzzrq + "'");
				}
				if (swqsrq !=null && !"".equals(swqsrq)){
					sqlBF.append(" and nvl(a.swrq,'190001') >= '" + swqsrq + "'");
				}
				if (swzzrq !=null && !"".equals(swzzrq)){
					sqlBF.append(" and nvl(a.swrq,'205012') <= '" + swzzrq + "'");
				}
				sqlBF.append(" group by a.ryid, a.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("          c.cbdwmc, d.lb, f.xzbz, g.djzt, c.jbjgid, ");
				sqlBF.append("          e.jbjgmc, b.jbr, to_char(b.jbsj, 'yyyyMMdd'), b.jyny, h.rydjid, b.spid, decode(b.splb, 'A01', '在职死亡', 'A02', '出国返还', 'A14','职工待遇补发', '其他退保返还'), decode(b.splb, 'A14', '', '审批表'), ");
				sqlBF.append("          b.fffs ");
			}
		} else {
			// 如果选人了的话就直接查询per_giv_detl中的数据
			// 根据前台选择的待遇核定类型，执行不同的SQL
			sqlBF.setLength(0);
			if("1".equals(dyhdlx) || dyhdlx == null || "".equals(dyhdlx)){// 供养一次性
//				sqlBF.setLength(0);
				sqlBF.append(" select a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("        c.cbdwmc dwmc, d.lb tfbz, '供养一次性' dyhdlx, e.xzbz, '审批表' cz, ");
				sqlBF.append("        a.zfrylb, sum(e.btje) bfje, nvl(f.zfzt,'1') zfzt, c.jbjgid, g.jbjgmc, ");
				sqlBF.append("        i.bljyjbr jbr, to_char(e.jbsj, 'yyyyMMdd') jbsj, e.yfny, '' rydjid, '' spid, ");//增加查询yfny.modify.zcc.20191113
				sqlBF.append("        e.ffqd ");// 增加查询发放渠道.add.谈杰.20200323
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        biuv.person b, ");
				sqlBF.append("        si3u.orgn_reg c, ");
				sqlBF.append("        si3u.orgn_tfba d, ");
				sqlBF.append("        ad3u.per_giv_detl e, ");
				sqlBF.append("        ad3u.bill_per_detl f, ");
				sqlBF.append("        be3u.agency_natl g, ");
				sqlBF.append("        ad3u.per_reg i ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
				sqlBF.append("    and a.ryid = e.ryid ");
				sqlBF.append("    and e.ryid = f.ryid(+) ");
				sqlBF.append("    and e.zdlsh = f.zdlsh(+) ");
				sqlBF.append("    and c.jbjgid = g.jbjgid ");
				sqlBF.append("    and a.dqdydjid = i.dydjid ");
				sqlBF.append("    and e.btbh = 'H727' and a.sszfrq = 'A'  ");
//				sqlBF.append("	  and c.jbjgid = '' ");
				sqlBF.append("    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");
				
				if (ryid != null && !"".equals(ryid)) {
					sqlBF.append("   and a.ryid = '" + ryid + "'");
				}
				if (dwdjid != null && !"".equals(dwdjid)) {
					sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
				}
				if (xzbz != null && !"".equals(xzbz)) {
					sqlBF.append("   and e.xzbz = '" + xzbz + "'");
				}
				if (jbqsrq !=null && !"".equals(jbqsrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'190001') >= '" + jbqsrq + "'");
				}
				if (jbzzrq !=null && !"".equals(jbzzrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'205012') <= '" + jbzzrq + "'");
				}
				if (swqsrq !=null && !"".equals(swqsrq)){
					sqlBF.append(" and nvl(b.swrq,'190001') >= '" + swqsrq + "'");
				}
				if (swzzrq !=null && !"".equals(swzzrq)){
					sqlBF.append(" and nvl(b.swrq,'205012') <= '" + swzzrq + "'");
				}
				sqlBF.append(" group by a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("       c.cbdwmc, d.lb, e.xzbz, a.zfrylb, f.zfzt, ");
				sqlBF.append("       c.jbjgid, g.jbjgmc, i.bljyjbr, to_char(e.jbsj, 'yyyyMMdd'), e.yfny,  ");
				sqlBF.append("       e.ffqd ");
			}
			if(dyhdlx == null || "".equals(dyhdlx)){
				sqlBF.append(" union all ");
			}
			if("2".equals(dyhdlx) || dyhdlx == null || "".equals(dyhdlx)){// 供养死亡
//				sqlBF.setLength(0);
				sqlBF.append(" select a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("        c.cbdwmc dwmc, d.lb tfbz, '供养死亡' dyhdlx, e.xzbz, '审批表' cz, ");
				sqlBF.append("        a.zfrylb, sum(e.btje) bfje, nvl(f.zfzt,'1') zfzt, c.jbjgid, g.jbjgmc, ");
				sqlBF.append("        i.bljyjbr jbr, to_char(e.jbsj, 'yyyyMMdd') jbsj, e.yfny, '' rydjid, '' spid, ");//增加查询yfny.modify.zcc.20191113
				sqlBF.append("        e.ffqd ");// 增加查询发放渠道.add.谈杰.20200323
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        biuv.person b, ");
				sqlBF.append("        si3u.orgn_reg c, ");
				sqlBF.append("        si3u.orgn_tfba d, ");
				sqlBF.append("        ad3u.per_giv_detl e, ");
				sqlBF.append("        ad3u.bill_per_detl f, ");
				sqlBF.append("        be3u.agency_natl g, ");
				sqlBF.append("        ad3u.giv_item h, ");
				sqlBF.append("        ad3u.per_reg i ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
				sqlBF.append("    and a.ryid = e.ryid ");
				sqlBF.append("    and e.ryid = f.ryid(+) ");
				sqlBF.append("    and e.zdlsh = f.zdlsh(+) ");
				sqlBF.append("    and c.jbjgid = g.jbjgid ");
				sqlBF.append("    and e.btbh = h.btbh ");
				sqlBF.append("    and a.dqdydjid = i.dydjid ");
				sqlBF.append("    and a.dyffzt = '3' ");// 待遇发放状态为终止
				sqlBF.append("    and a.sszfrq = 'B' ");
				sqlBF.append("    and h.ffzq = '5' ");// 发放周期为一次性
//				sqlBF.append("    and c.jbjgid = '' ");
				sqlBF.append("    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");

				if (ryid != null && !"".equals(ryid)) {
					sqlBF.append("   and a.ryid = '" + ryid + "'");
				}
				if (dwdjid != null && !"".equals(dwdjid)) {
					sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
				}
				if (xzbz != null && !"".equals(xzbz)) {
					sqlBF.append("   and e.xzbz = '" + xzbz + "'");
				}
				if (jbqsrq !=null && !"".equals(jbqsrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'190001') >= '" + jbqsrq + "'");
				}
				if (jbzzrq !=null && !"".equals(jbzzrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'205012') <= '" + jbzzrq + "'");
				}
				if (swqsrq !=null && !"".equals(swqsrq)){
					sqlBF.append(" and nvl(b.swrq,'190001') >= '" + swqsrq + "'");
				}
				if (swzzrq !=null && !"".equals(swzzrq)){
					sqlBF.append(" and nvl(b.swrq,'205012') <= '" + swzzrq + "'");
				}
				sqlBF.append(" group by a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("       c.cbdwmc, d.lb, e.xzbz, a.zfrylb, f.zfzt, ");
				sqlBF.append("       c.jbjgid, g.jbjgmc, i.bljyjbr, to_char(e.jbsj, 'yyyyMMdd'), e.yfny,  ");
				sqlBF.append("       e.ffqd ");
			}
			if(dyhdlx == null || "".equals(dyhdlx)){
				sqlBF.append(" union all ");
			}
			if("3".equals(dyhdlx) || dyhdlx == null || "".equals(dyhdlx)){// 退休死亡
//				sqlBF.setLength(0);
				sqlBF.append(" select a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("        c.cbdwmc dwmc, d.lb tfbz, '退休死亡' dyhdlx, e.xzbz, '审批表' cz, ");
				sqlBF.append("        a.zfrylb, sum(e.btje) bfje, nvl(f.zfzt,'1') zfzt, c.jbjgid, g.jbjgmc, ");
				sqlBF.append("        i.bljyjbr jbr, to_char(e.jbsj, 'yyyyMMdd') jbsj, e.yfny, '' rydjid, '' spid, ");//增加查询yfny.modify.zcc.20191113
				sqlBF.append("        e.ffqd ");// 增加查询发放渠道.add.谈杰.20200323
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        biuv.person b, ");
				sqlBF.append("        si3u.orgn_reg c, ");
				sqlBF.append("        si3u.orgn_tfba d, ");
				sqlBF.append("        ad3u.per_giv_detl e, ");
				sqlBF.append("        ad3u.bill_per_detl f, ");
				sqlBF.append("        be3u.agency_natl g, ");
				sqlBF.append("        ad3u.giv_item h, ");
				sqlBF.append("        ad3u.per_reg i ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.dwdjid = c.dwdjid ");
				sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
				sqlBF.append("    and a.ryid = e.ryid ");
				sqlBF.append("    and e.ryid = f.ryid(+) ");
				sqlBF.append("    and e.zdlsh = f.zdlsh(+) ");
				sqlBF.append("    and c.jbjgid = g.jbjgid ");
				sqlBF.append("    and e.btbh = h.btbh ");
				sqlBF.append("    and a.dqdydjid = i.dydjid ");
				sqlBF.append("    and a.dyffzt = '3' ");// 待遇发放状态为终止
				sqlBF.append("    and a.sszfrq = 'A' ");
				sqlBF.append("    and h.ffzq = '5' ");// 发放周期为一次性
//				sqlBF.append("    and c.jbjgid = '' ");
				sqlBF.append("    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");

				if (ryid != null && !"".equals(ryid)) {
					sqlBF.append("   and a.ryid = '" + ryid + "'");
				}
				if (dwdjid != null && !"".equals(dwdjid)) {
					sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
				}
				if (xzbz != null && !"".equals(xzbz)) {
					sqlBF.append("   and e.xzbz = '" + xzbz + "'");
				}
				if (jbqsrq !=null && !"".equals(jbqsrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'190001') >= '" + jbqsrq + "'");
				}
				if (jbzzrq !=null && !"".equals(jbzzrq)){
					sqlBF.append(" and nvl(to_char(e.jbsj,'yyyyMMdd'),'205012') <= '" + jbzzrq + "'");
				}
				if (swqsrq !=null && !"".equals(swqsrq)){
					sqlBF.append(" and nvl(b.swrq,'190001') >= '" + swqsrq + "'");
				}
				if (swzzrq !=null && !"".equals(swzzrq)){
					sqlBF.append(" and nvl(b.swrq,'205012') <= '" + swzzrq + "'");
				}
				sqlBF.append(" group by a.ryid, b.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("       c.cbdwmc, d.lb, e.xzbz, a.zfrylb, f.zfzt, ");
				sqlBF.append("       c.jbjgid, g.jbjgmc, i.bljyjbr, to_char(e.jbsj, 'yyyyMMdd'), e.yfny,  ");
				sqlBF.append("       e.ffqd ");
			}
			if(dyhdlx == null || "".equals(dyhdlx)){
				sqlBF.append(" union all ");
			}
			if("4".equals(dyhdlx) || dyhdlx == null || "".equals(dyhdlx)){// 在职死亡
//				sqlBF.setLength(0);
				sqlBF.append(" select a.ryid, a.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("        c.cbdwmc dwmc, d.lb tfbz, decode(b.splb, 'A01', '在职死亡', 'A02', '出国返还', 'A14','职工待遇补发', '其他退保返还') dyhdlx, f.xzbz, decode(b.splb, 'A14', '', '审批表') cz, ");
				sqlBF.append("        '' zfrylb, sum(f.btje) bfje, decode(g.djzt,'0','0','1','2') zfzt, ");
				sqlBF.append("        c.jbjgid, e.jbjgmc, b.jbr, to_char(b.jbsj, 'yyyyMMdd') jbsj, b.jyny yfny, h.rydjid, b.spid, ");//增加查询jyny.modify.zcc.20191113
				sqlBF.append("        b.fffs ffqd ");// 增加查询发放渠道.add.谈杰.20200323
				sqlBF.append("   from biuv.person a, ");
				sqlBF.append("        si3u.per_giv_exam b, ");
				sqlBF.append("        si3u.orgn_reg c, ");
				sqlBF.append("        si3u.orgn_tfba d, ");
				sqlBF.append("        be3u.agency_natl e, ");
				sqlBF.append("        si3u.per_giv_once f, ");
				sqlBF.append("        si3u.pay_bill g, ");
				sqlBF.append("        si3u.per_reg h ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and c.dwdjid = h.dwdjid ");
				sqlBF.append("    and a.ryid = h.ryid ");
				sqlBF.append("    and b.rydjid = h.rydjid ");
				sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
				sqlBF.append("    and c.jbjgid = e.jbjgid ");
				sqlBF.append("    and b.spid = f.spid ");
				sqlBF.append("    and f.zdlsh = g.zdlsh ");
				sqlBF.append("    and b.splb in ('A01', 'A02', 'A05', 'A14') ");
				sqlBF.append("    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(") ");

				if (ryid != null && !"".equals(ryid)) {
					sqlBF.append("   and a.ryid = '" + ryid + "'");
				}
				if (dwdjid != null && !"".equals(dwdjid)) {
					sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
				}
				if (xzbz != null && !"".equals(xzbz)) {
					sqlBF.append("   and f.xzbz = '" + xzbz + "'");
				}
				if (jbqsrq !=null && !"".equals(jbqsrq)){
					sqlBF.append(" and nvl(to_char(b.jbsj,'yyyyMMdd'),'190001') >= '" + jbqsrq + "'");
				}
				if (jbzzrq !=null && !"".equals(jbzzrq)){
					sqlBF.append(" and nvl(to_char(b.jbsj,'yyyyMMdd'),'205012') <= '" + jbzzrq + "'");
				}
				if (swqsrq !=null && !"".equals(swqsrq)){
					sqlBF.append(" and nvl(a.swrq,'190001') >= '" + swqsrq + "'");
				}
				if (swzzrq !=null && !"".equals(swzzrq)){
					sqlBF.append(" and nvl(a.swrq,'205012') <= '" + swzzrq + "'");
				}
				sqlBF.append(" group by a.ryid, a.grbh, a.xm, a.shbzhm, c.dwbh, ");
				sqlBF.append("          c.cbdwmc, d.lb, f.xzbz, g.djzt, c.jbjgid, ");
				sqlBF.append("          e.jbjgmc, b.jbr, to_char(b.jbsj, 'yyyyMMdd'), b.jyny, h.rydjid, b.spid,decode(b.splb, 'A01', '在职死亡', 'A02', '出国返还', 'A14','职工待遇补发', '其他退保返还'), decode(b.splb, 'A14', '', '审批表'), ");
				sqlBF.append("          b.fffs ");
			}
		}
		
//		String aString = this.sql.getSqlString();
		this.sql.setSql(sqlBF.toString());
		DataStore dsryinfo = this.sql.executeQuery();
		//转换经办人
		dsryinfo = HsuTools.genSysUserDataStore(dsryinfo, "jbr", "dysprbh", "jbr");

		rdo.put("dsryinfo", dsryinfo);
		return rdo;
		
	}
	/**
	 * 方法简介.跳转 机关养老开库时间段维护 页面
	 * 
	 * @author zcc
	 * @date  2019-11-2
	 */
	public DataObject fwdAdJgylkksjdwh(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String biz = para.getString("biz");
		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		for (int i = 0; i < ds.rowCount(); i++) {
			String jbjgid = ds.getString(i, "value");
			if ("01".equals(jbjgid.substring(jbjgid.length() - 2))) {
				ds.delRow(i);
				i--;
			}
		}
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	/**
	 * 方法简介.查询 机关养老开库时间段维护 数据
	 * 
	 * @author zcc
	 * @date  2019-11-2
	 */
	public DataObject queryAdJgylkksjdwh(DataObject para) throws Exception {
		// 接参数
		String biz = para.getString("biz");
		String jbjg = biz + "03";
		
		String jbjgid = para.getString("jbjgid", "");
		String nd = para.getString("nd", "");
		
		if(jbjgid==null || "".equals(jbjgid)){
			jbjgid = jbjg;
		}
		this.sql.setSql("select a.jbjgmc from be3u.agency_natl a where a.jbjgid = ?");
		this.sql.setString(1, jbjgid);
		String jbjgmc = this.sql.executeQuery().getString(0, "jbjgmc");
		
		DataStore dsInfo = new DataStore();
		
		try {
			DataObject vdo = new DataObject();
			vdo.put("jbjgid", jbjgid);
			vdo.put("aae001", nd);
			String vdoString = LocalServiceClient.invokeServiceByPspid("SBKWD", "GGFWSBService", "ZQ3126", vdo).toString();
			
			vdo = JsonUtil.json2DataObject(vdoString);
			String respCode = String.valueOf(vdo.getInt("respCode"));
			if ("1".equals(respCode)) {
				dsInfo = vdo.getDataStore("ds_info");
			} else {
				String respMsg = vdo.getString("respMsg");
				this.bizException(respMsg);
			}
		} catch (Exception e) {
			this.bizException(e.getMessage());
		}
		for(int i=0; i< dsInfo.rowCount(); i++){
			dsInfo.put(i, "jbjgmc", jbjgmc);
			dsInfo.put(i, "qsybz", "机关事业");
		}
		DataObject rdo = new DataObject();
		rdo.put("dsinfo", dsInfo);
		return rdo;
	}
	/**
	 * 方法简介.生成 机关养老开库时间段维护
	 * 
	 * @author zcc
	 * @date  2019-11-2
	 */
	public DataObject createAdJgylkksjdwh(DataObject para) throws Exception {
		// 接参数
		String biz = para.getString("biz");
		String jbjg = biz + "03";
		
		String jbjgid = para.getString("jbjgid", "");
		String nd = para.getString("nd", "");
		
		if(jbjgid==null || "".equals(jbjgid)){
			jbjgid = jbjg;
		}
		
		try {
			DataObject vdo = new DataObject();
			vdo.put("jbjgid", jbjgid);
			vdo.put("aae001", nd);
			vdo.put("userid", this.getUser().getUserid());
			vdo.put("username", this.getUser().getUsername());
			vdo = LocalServiceClient.invokeServiceByPspid("SBKWD", "GGFWSBService", "ZQ3127", vdo);
			String respCode = vdo.getString("respCode");
			
			if ("0".equals(respCode)) {
				String respMsg = vdo.getString("respMsg");
				this.bizException(respMsg);
			}
		} catch (Exception e) {
			this.bizException(e.getMessage());
		}
		
		return null;
	}
	/**
	 * 方法简介.机关养老开库时间段维护 修改保存
	 * 
	 * @author zcc
	 * @date  2019-11-2
	 */
	public DataObject changeAdJgylkksjdwh(DataObject para) throws Exception {
		// 接参数
		Date kkkssj,kkjssj;
		DataStore dsInfo = para.getDataStore("dwResult",new DataStore());
		for(int i=0; i<dsInfo.rowCount(); i++){
			kkkssj = dsInfo.getDate(i, "aae030");
			kkjssj = dsInfo.getDate(i, "aae031");
			if(kkkssj==null){
				this.bizException("开库开始时间不能为空！");
			}
			if(kkjssj==null){
				this.bizException("开库结束时间不能为空！");
			}
			if(kkkssj.compareTo(kkjssj)>0){
				this.bizException("开库开始时间不能晚于结束时间！");
			}
			dsInfo.put(i, "aae030", dsInfo.getDateToString(i, "aae030", "yyyyMMdd"));
			dsInfo.put(i, "aae031", dsInfo.getDateToString(i, "aae031", "yyyyMMdd"));
		}

		try {
			DataObject vdo = new DataObject();
			vdo.put("userid", this.getUser().getUserid());
			vdo.put("username", this.getUser().getUsername());
			vdo.put("ds_info", dsInfo.toJSON());
			vdo = LocalServiceClient.invokeServiceByPspid("SBKWD", "GGFWSBService", "ZQ3128", vdo);
			String respCode = vdo.getString("respCode");
			
			if ("0".equals(respCode)) {
				String respMsg = vdo.getString("respMsg");
				this.bizException(respMsg);
			}
		} catch (Exception e) {
			this.bizException(e.getMessage());
		}
		
		return null;
	}
	
	/**
	 * 方法简介.跳转到企业待遇再次核定信息查询jsp
	 * 
	 * @author 谈杰 2019-11-6
	 */
	public DataObject fwdAdQydyzchdxxcx(final DataObject para) throws Exception {
//		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

//		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
//		if ("1".equals(ad3u1059)) {
//			ds = AdTools.getQueryJbjgidByUser(this.getUser());
//		} else {
//			ds = SiTools.getSjJbjgidByUserId(this.getUser());
//		}

		// 支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
//		rdo.put("dsjbjg", ds);

		return rdo;
	}
	
	/**
	 * 方法简介.企业待遇再次核定信息查询
	 * 
	 * @author 谈杰 2019-11-6
	 */
	public DataObject queryAdQydyzchdInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore ds = new DataStore();
		DataStore dsJbjg = new DataStore();
		DataObject rdo = new DataObject();

		String ryid = para.getString("ryid", "");// 人员ID
		String dwdjid= para.getString("dwdjid",""); //单位
		String ltxrq = para.getDateToString("ltxrq","yyyyMM");  //离退休日期
		String zfrylb= para.getString("zfrylb",""); //离退休类别
		String jbqsrq= para.getDateToString("jbqsrq", "yyyyMMdd"); //经办起始日期
		String jbzzrq= para.getDateToString("jbzzrq", "yyyyMMdd");  //经办终止日期
		
		if ((!"".equals(jbqsrq) && jbqsrq != null)
				&& (!"".equals(jbzzrq) && jbzzrq != null)) {
			if (jbqsrq.compareTo(jbzzrq) > 0) {
				this.bizException("经办起始日期大于终止日期，请检查！");
			}
		}
		
		// 有操作权限的经办机构信息
		String jbjgid = "";
		dsJbjg = SiTools.getOperateJbjgidByUserId(this.getUser().getUserid());
		if (dsJbjg.rowCount() == 0) {
			this.bizException("未查询到您有操作权限的经办机构！");
		} else {
			for (int j = 0; j < dsJbjg.rowCount(); j++) {
				String jbjgidString = dsJbjg.getString(j, "value");
				String jbjgidStringSub = jbjgidString.substring(jbjgidString.length() - 2);
				if ("01".equals(jbjgidStringSub)) {
					// jbjgid = jbjgid + dsJbjg.getString(j, "value") + ",";
					jbjgid = jbjgid + jbjgidString + ",";
				}
			}
			jbjgid = jbjgid.substring(0, jbjgid.length() - 1);
		}

		sqlBF.setLength(0);
		sqlBF.append(" select a.grbh, a.xm, a.shbzhm, c.dwbh, c.cbdwmc, ");
		sqlBF.append("        d.lb, b.dylqlb xzbz, b.dyfhsj dyhdrq, e.ltxrq, ");
		sqlBF.append("        b.dyxsksny, f.jbjgmc, '查看' cz, b.ryid");//增加cz、ryid.mod.zcc.20191118
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        si3u.orgn_reg c, ");
		sqlBF.append("        si3u.orgn_tfba d, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        be3u.agency_natl f ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.dwdjid = c.dwdjid ");
		sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
		sqlBF.append("    and b.ryid = e.ryid ");
		sqlBF.append("    and c.jbjgid = f.jbjgid ");
		sqlBF.append("    and c.jbjgid in (" + HsuTools.replaceC2QCQ(jbjgid) + ") ");
//		sqlBF.append("    and b.dyffzt in ('1', '2') ");// 支持查询暂停人员.mod.谈杰.20200316 // 不再限制人员的待遇发放状态.mod.谈杰.20200324
		sqlBF.append("    and b.dylqlb = '101' ");
		sqlBF.append("    and exists(select 1 ");
		sqlBF.append("                 from ad3u.per_cal_his g ");
		sqlBF.append("                where b.ryid = g.ryid ");
		sqlBF.append("                  and g.xh > 1) ");

		if(ryid != null && ryid!= ""){
			sqlBF.append("  and a.ryid = '" + ryid +"' ");
		}
		if(dwdjid != null && dwdjid!= ""){
			sqlBF.append("  and c.dwdjid = '" + dwdjid +"' ");
		}
		if(ltxrq != null && ltxrq!= ""){
			sqlBF.append("  and substr(e.ltxrq,0,6) = '" + ltxrq + "' ");
		}
		if(zfrylb != null && zfrylb!= ""){
			sqlBF.append("  and b.zfrylb = '" + zfrylb +"' ");
		}
		if(jbqsrq != null){
			sqlBF.append("  and nvl(to_char(b.dyfhsj, 'yyyyMMdd'), '190001') >= '" + jbqsrq + "' ");
		}
		if(jbzzrq != null){
			sqlBF.append("  and nvl(to_char(b.dyfhsj, 'yyyyMMdd'), '205012') <= '" + jbzzrq + "' ");
		}
		
		this.sql.setSql(sqlBF.toString());
		ds = sql.executeQuery();

		rdo.put("ryinfo", ds);

		return rdo;
		
	}

	/**
	 * 方法简介. 机关养老缺口查询，生成数据表
	 * 
	 * @author sjx 2019-11-7
	 */
	public DataObject doCreatTable(final DataObject para) throws Exception {
		Transaction tm = TransactionManager.getTransaction();

		String qsrq, zzrq, jbjgid, qsny, zzny, dwdjid, lsgx, zctype;
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsQk, dsTemp;
		int zzrs, ltxrs, rowCount;
		double yljfe, ylj, ycxje, fhje, ysbzf, zynj, zfylj, jjqk;
		double yljfesuml, yljsuml, ycxjesuml, fhjesuml, ysbzfsuml, zfyljsuml, jjqksuml;
		double yljfesumx, yljsumx, ycxjesumx, fhjesumx, ysbzfsumx, zfyljsumx, jjqksumx;
		String cbdwmc, dwbh, jjly, vjbjgid, sjph;

		// 接参
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		jbjgid = para.getString("jbjgid");

		// 判空
		if (qsrq == null || "".equals(qsrq)) {
			this.bizException("起始时间不能为空！");
		}
		if (zzrq == null || "".equals(zzrq)) {
			this.bizException("截止时间不能为空！");
		}
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("区划不能为空！");
		}

		// 取起始、终止年月
		qsny = qsrq.substring(0, 6);
		zzny = zzrq.substring(0, 6);

		// 查询该经办机构该终止年月是否存在数据 sjx 2019-11-28
		sqlBF.setLength(0);
		sqlBF.append(" select distinct sjph  ");
		sqlBF.append("   from si3u.agency_age_gap a  ");
		sqlBF.append("  where a.jbjgid = ? ");
		sqlBF.append("    and substr(a.zzrq,0,6) = ? ");
		if ("37529903".equals(jbjgid)) { // 市本级特殊处理，只删除不存在其他经办机构的数据批号的数据 sjx 2019-11-21
			sqlBF.append("    and not exists(select 1  ");
			sqlBF.append("    				   from si3u.agency_age_gap b  ");
			sqlBF.append("    				  where a.sjph = b.sjph ");
			sqlBF.append("    				    and a.jbjgid <> b.jbjgid )");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, jbjgid);
		this.sql.setString(2, zzny);
		DataStore ds = this.sql.executeQuery();

		// 如果不存在数据，则生成一条垃圾数据以用来锁表 sjx 2019-11-28
		if (ds.rowCount() <= 0) {
			sqlBF.setLength(0);
			sqlBF.append(" insert into si3u.agency_age_gap  ");
			sqlBF.append("   	  (sjph, jbjgid , dwdjid , zzrq )  ");
			sqlBF.append(" values ('*', ?, '*', '*') ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, jbjgid);
			this.sql.executeUpdate();
			tm.commit();
			sjph = HsuTools.getId("BE3U.SQ_JFSBID");
		} else {
			sjph = ds.getString(0, "sjph");
		}

		try {
			// 锁表
			sqlBF.setLength(0);
			sqlBF.append("select 1 from si3u.agency_age_gap where jbjgid = ? for update nowait ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, jbjgid);
			this.sql.executeQuery();
		} catch (Exception e) {
			this.bizException("该经办机构正在生成数据，请稍后再试！");
		}

		try {
			// 根据查询到的数据批号删除数据表数据
			sqlBF.setLength(0);
			sqlBF.append(" delete from si3u.agency_age_gap a  ");
			sqlBF.append("  where a.sjph = ? ");
			sqlBF.append("	   or (   a.sjph = '*' "); // 增加删除垃圾数据 sjx 2019-11-28
			sqlBF.append("	   	  and jbjgid = ? ");
			sqlBF.append("	      and dwdjid = '*' ");
			sqlBF.append("	      and zzrq = '*' )");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, sjph);
			this.sql.setString(2, jbjgid);
			this.sql.executeUpdate();		
			
			// ad3u1146，表示机关养老缺口不展示的单位 add by lyj 20201019
			String ad3u1146 = SiTools.getPara(jbjgid, "ad3u1146", "");
				
			// 获取该经办机构下的所有单位
			sqlBF.setLength(0);
			sqlBF.append(" select a.dwbh, a.cbdwmc, a.cbdwxz, a.jjly, c.lsgx, ");
			sqlBF.append("        c.dwxz, a.jbjgid, a.dwdjid ");
			sqlBF.append("   from si3u.orgn_reg a, ");
			sqlBF.append("        biuv.orgn c ");
			sqlBF.append("  where a.dwid = c.dwid ");
			sqlBF.append("    and a.jbjgid = ? ");
			sqlBF.append("    and (exists (select 1 ");
			sqlBF.append("                   from si3u.orgn_pay_genl d ");
			sqlBF.append("                  where a.dwdjid = d.dwdjid ");
			sqlBF.append("                    and d.xzbz in ('102', '109') ");
			sqlBF.append("                    and to_char(d.jfrq, 'yyyymmdd') between ? and ");
			sqlBF.append("                        ?) or exists ");
			sqlBF.append("         (select 1 ");
			sqlBF.append("            from ad3u.per_giv_detl e ");
			sqlBF.append("           where a.dwdjid = e.dwdjid ");
			sqlBF.append("             and e.ffny between ? and ?)) ");
			
            if (ad3u1146 != null && !"".equals(ad3u1146)) {//增加一个判断：若单位是用户在ad3u1146中设置了的，那么不对其进行查询 add by lyj 20201019
				sqlBF.append(" and  a.dwbh not in ( '");
				sqlBF.append(ad3u1146.replace(",", "','"));
				sqlBF.append("' )");
			}
            
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, jbjgid);
			this.sql.setString(2, qsrq);
			this.sql.setString(3, zzrq);
			this.sql.setString(4, qsny);

			this.sql.setString(5, zzny);
			dsQk = this.sql.executeQuery();

			// 循环，获取每个单位的信息
			yljfesuml = 0;
			zfyljsuml = 0;

			jjqksuml = 0;
			yljsuml = 0;
			ycxjesuml = 0;
			fhjesuml = 0;
			ysbzfsuml = 0;

			yljfesumx = 0;
			zfyljsumx = 0;

			jjqksumx = 0;
			yljsumx = 0;
			ycxjesumx = 0;
			fhjesumx = 0;
			ysbzfsumx = 0;

			rowCount = dsQk.rowCount();
			for (int i = 0; i < rowCount; i++) {

				dwdjid = dsQk.getString(i, "dwdjid");
				cbdwmc = dsQk.getString(i, "cbdwmc");
				dwbh = dsQk.getString(i, "dwbh");
				jjly = dsQk.getString(i, "jjly");
				lsgx = dsQk.getString(i, "lsgx");
				vjbjgid = dsQk.getString(i, "jbjgid");

				// 在职人数
				sqlBF.setLength(0);
				sqlBF.append(" select count(distinct a.ryid) zzrs ");
				sqlBF.append("   from si3u.per_reg a ");
				sqlBF.append("  where a.dwdjid = ? ");
				sqlBF.append("    and a.hdbz = '1' ");
				sqlBF.append("    and a.zglb = 'A0A' ");
				sqlBF.append("    and exists(select 1 ");
				sqlBF.append("      from si3u.per_reg_join b ");
				sqlBF.append("     where a.rydjid = b.rydjid ");
				sqlBF.append("       and b.xzbz in ('102', '109') ");
				sqlBF.append("       and nvl(b.zzrq, '20501231') >= ?) ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, dwdjid);
				this.sql.setString(2, zzrq);
				dsTemp = this.sql.executeQuery();

				zzrs = dsTemp.getInt(0, "zzrs");

				// 离退休人数，基本养老金，丧葬费、一次性抚恤金，遗属补助费的查询方法，不关联per_info查询单位了，改为用per_giv_detl的dwdjid查询 sjx 2019-12-06
				// 离退休人数  
				sqlBF.setLength(0);
				sqlBF.append(" select count(distinct b.ryid) ltxrs ");
				sqlBF.append("   from ad3u.per_giv_detl b, ");
				sqlBF.append("        ad3u.giv_item_config c ");
				sqlBF.append("  where b.btbh = c.btbh ");
				sqlBF.append("    and b.dwdjid = ? ");
				sqlBF.append("    and b.xzbz in ('102', '109') ");
				sqlBF.append("    and b.ffny between ? and ? ");
				sqlBF.append("    and c.jbjgid = ? ");
				sqlBF.append("    and(c.btbh in ('Q960') or c.jcyljbz = '1') ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, dwdjid);
				this.sql.setString(2, qsny);
				this.sql.setString(3, zzny);
				this.sql.setString(4, jbjgid);

				dsTemp = this.sql.executeQuery();
				ltxrs = dsTemp.getInt(0, "ltxrs");

				// 缴纳养老保险金
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(nvl(a.dwjfe, 0) + nvl(a.grjfe, 0) + nvl(a.dwlx, 0) + nvl(a.grlx, 0) + nvl(a.grznj, 0) + nvl(a.dwznj, 0)), 0) yljfe ");
				sqlBF.append("   from si3u.orgn_pay_genl a ");
				sqlBF.append("  where a.dwdjid = ? ");
				sqlBF.append("    and to_char(a.jfrq, 'yyyymmdd') between ? and ? ");
				sqlBF.append("    and a.xzbz in (102, 109) ");
				sqlBF.append("    and a.jfrq is not null ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, dwdjid);
				this.sql.setString(2, qsrq);
				this.sql.setString(3, zzrq);
				dsTemp = this.sql.executeQuery();

				yljfe = dsTemp.getDouble(0, "yljfe");

				// 基本养老金
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(b.btje), 0) ylj ");
				sqlBF.append("   from ad3u.per_giv_detl    b, ");
				sqlBF.append("        ad3u.giv_item_config c ");
				sqlBF.append("  where b.dwdjid = ? ");
				sqlBF.append("    and b.btbh = c.btbh ");
				sqlBF.append("    and b.btbh in (select h.btbh ");
				sqlBF.append("                     from ad3u.giv_item h ");
				sqlBF.append("                    where b.btbh = h.btbh ");
				sqlBF.append("                      and (h.btbh = 'Q367' or h.ffzq in ('1', '4')) ");
				sqlBF.append("                      and h.btbh not in ('B1D5', 'H739', 'H740')) ");
				sqlBF.append("    and b.xzbz in ('102', '109') ");
				sqlBF.append("    and b.ffny between ? and ? ");
				sqlBF.append("    and c.jbjgid = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, dwdjid);
				this.sql.setString(2, qsny);
				this.sql.setString(3, zzny);
				this.sql.setString(4, jbjgid);

				dsTemp = this.sql.executeQuery();

				ylj = dsTemp.getDouble(0, "ylj");

				// 丧葬费、一次性抚恤金
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(b.btje), 0) ycxje ");
				sqlBF.append("   from ad3u.per_giv_detl  b  ");
				sqlBF.append("  where b.dwdjid = ? ");
				sqlBF.append("    and b.btbh in ('B1D1', 'H727', 'B1D2', 'B107', 'Q964', 'Q966') ");
				sqlBF.append("    and b.xzbz in ('102', '109') ");
				sqlBF.append("    and b.ffny between ? and ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, dwdjid);
				this.sql.setString(2, qsny);
				this.sql.setString(3, zzny);
				dsTemp = this.sql.executeQuery();

				ycxje = dsTemp.getDouble(0, "ycxje");

				// 在职死亡机关账户返还的金额
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(a.btje), 0) fhje ");
				sqlBF.append("   from si3u.per_giv_once a, ");
				sqlBF.append("        si3u.per_reg b ");
				sqlBF.append("  where a.rydjid = b.rydjid ");
				sqlBF.append("    and a.btbh = 'A001' ");
				sqlBF.append("    and a.xzbz in ('102', '109') ");
				sqlBF.append("    and a.zhjqrq between ? and ? ");
				sqlBF.append("    and b.dwdjid = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, qsrq);
				this.sql.setString(2, zzrq);
				this.sql.setString(3, dwdjid);
				dsTemp = this.sql.executeQuery();

				fhje = dsTemp.getDouble(0, "fhje");

				ycxje = MathUtil.round(ycxje + fhje, 2);

				// 遗属补助费
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(a.btje), 0) ysbzf ");
				sqlBF.append("   from ad3u.per_giv_detl a, ");
				sqlBF.append("        ad3u.per_info b ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and a.xzbz in ('102', '109') ");
				sqlBF.append("    and b.sszfrq = 'B' ");
				sqlBF.append("    and a.ffny between ? and ? ");
				sqlBF.append("    and a.dwdjid = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, qsny);
				this.sql.setString(2, zzny);
				this.sql.setString(3, dwdjid);
				dsTemp = this.sql.executeQuery();

				ysbzf = dsTemp.getDouble(0, "ysbzf");

				// 支付保险养老金
				zfylj = MathUtil.round(ylj + ycxje + ysbzf, 2);

				// 基金缺口
				jjqk = MathUtil.round(zfylj - yljfe, 2);

				// 职业年金
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(nvl(a.dwjfe, 0)+nvl(a.grjfe, 0)+nvl(a.dwlx, 0)+nvl(a.grlx, 0)+nvl(a.dwznj, ");
				sqlBF.append("        0)+nvl(a.grznj, 0)), 0) zynj ");
				sqlBF.append("   from si3u.orgn_pay_genl a ");
				sqlBF.append("  where a.dwdjid = ? ");
				sqlBF.append("    and to_char(a.jfrq, 'yyyymmdd') between ? and ? ");
				sqlBF.append("    and a.xzbz = '108' ");
				sqlBF.append("    and a.jfrq is not null ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, dwdjid);
				this.sql.setString(2, qsrq);
				this.sql.setString(3, zzrq);
				dsTemp = this.sql.executeQuery();

				zynj = dsTemp.getDouble(0, "zynj");

//				if (lsgx == null) {
//					lsgx = "";
//				}

				if (!"".equals(lsgx) && null != lsgx) {
					// 央属、省属、市属、驻青区划都改成市本级
					if ("10,20,40,80".indexOf(lsgx) >= 0) {
						vjbjgid = "37529903";
					}
				}

				// 有职业年金，新政策
				if (zynj > 0) {
					zctype = "1";

					zfyljsumx = MathUtil.round(zfyljsumx + zfylj, 2);
					yljfesumx = MathUtil.round(yljfesumx + yljfe, 2);

					jjqksumx = MathUtil.round(jjqksumx + jjqk, 2);
					yljsumx = MathUtil.round(yljsumx + ylj, 2);
					ycxjesumx = MathUtil.round(ycxjesumx + ycxje, 2);
					fhjesumx = MathUtil.round(fhjesumx + fhje, 2);
					ysbzfsumx = MathUtil.round(ysbzfsumx + ysbzf, 2);

				} else {
					zctype = "0";
					zfyljsuml = MathUtil.round(zfyljsuml + zfylj, 2);
					yljfesuml = MathUtil.round(yljfesuml + yljfe, 2);

					jjqksuml = MathUtil.round(jjqksuml + jjqk, 2);
					yljsuml = MathUtil.round(yljsuml + ylj, 2);
					ycxjesuml = MathUtil.round(ycxjesuml + ycxje, 2);
					fhjesuml = MathUtil.round(fhjesuml + fhje, 2);
					ysbzfsuml = MathUtil.round(ysbzfsuml + ysbzf, 2);

				}

				// 插入到数据表agency_age_gap中
				sqlBF.setLength(0);
				sqlBF.append(" insert into si3u.agency_age_gap  ");
				sqlBF.append("        (sjph, jbjgid, dwbh, dwdjid, cbdwmc, ");
				sqlBF.append("        qsrq, zzrq, zzrs, ltxrs, yljfe,  ");
				sqlBF.append("        zfylj, ylj, ycxje, ysbzf, jjqk,  ");
				sqlBF.append("        zctype, jjly, fhje  ) ");
				sqlBF.append(" values (?, ?, ?, ?, ?, ");
				sqlBF.append("  	   ?, ?, ?, ?, ?, ");
				sqlBF.append("  	   ?, ?, ?, ?, ?, ");
				sqlBF.append("  	   ?, ?, ?) ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, sjph);
				this.sql.setString(2, vjbjgid);
				this.sql.setString(3, dwbh);
				this.sql.setString(4, dwdjid);
				this.sql.setString(5, cbdwmc);

				this.sql.setString(6, qsrq);
				this.sql.setString(7, zzrq);
				this.sql.setDouble(8, zzrs);
				this.sql.setDouble(9, ltxrs);
				this.sql.setDouble(10, yljfe);

				this.sql.setDouble(11, zfylj);
				this.sql.setDouble(12, ylj);
				this.sql.setDouble(13, ycxje);
				this.sql.setDouble(14, ysbzf);
				this.sql.setDouble(15, jjqk);

				this.sql.setString(16, zctype);
				this.sql.setString(17, jjly);
				this.sql.setDouble(18, fhje);

				this.sql.executeUpdate();
			}

		} catch (Exception e) {
			tm.rollback();
			this.bizException(e.getMessage());
		}

		return null;
	}
	/**
	 * 方法简介.生成企业养老财政补助统计数据
	 * 
	 * @author 高祥鹏 2019年11月4日
	 */
	public DataObject uploadQyylczbztj(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参
		String ywny = para.getDateToString("ywny", "yyyyMM"); // 费款所属期
		double jgavgtxgz = para.getDouble("jgavgtxgz"); // 机关月平均退休工资
		double qyavgtxgz = para.getDouble("qyavgtxgz"); // 企业月平均退休工资

		if (ywny == null || "".equals(ywny)) {
			this.bizException("费款所属期不能为空！");
		}
		String currentDate = DateUtil.dateToString(DateUtil.getDBDate(), "yyMMdd");
		String qyylczbztjid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate); // 统计ID
		Date qsrq = DateUtil.getDBTime();
		sqlBF.setLength(0);
		sqlBF.append(" insert into si3u.qyylczbztj ");
		sqlBF.append("        (qyylczbztjid, ywny, jgavgtxgz, qyavgtxgz, qsrq, ");
		sqlBF.append("         zzrq, yxbz, bz, jbr)");
		sqlBF.append(" values (?, ?, ?, ?, ?, ");
		sqlBF.append("         ?, ?, ?, ?)");
		String intjsql = sqlBF.toString();
		sqlBF.setLength(0);
		sqlBF.append(" insert into si3u.qyylczbztjmx ");
		sqlBF.append("        (qyylczbztjmxid, qyylczbztjid, tjxmmc, tjxmrs, tjxmje, bz) ");
		sqlBF.append(" values (?, ?, ?, ?, ?, ?) ");
		String intjmxsql = sqlBF.toString();
		Transaction tm = TransactionManager.getTransaction();
		try {
			// 初始化统计表
			this.sql.setSql(intjsql);
			this.sql.setString(1, qyylczbztjid);
			this.sql.setString(2, ywny);
			this.sql.setDouble(3, jgavgtxgz);
			this.sql.setDouble(4, qyavgtxgz);
			this.sql.setDateTime(5, qsrq);
			this.sql.setDateTime(6, null);
			this.sql.setString(7, "0");
			this.sql.setString(8, "后台正在生成企业养老保险财政补助统计信息");
			this.sql.setString(9, "");
			this.sql.executeUpdate();
			tm.commit();
			// 查询生成各项明细 , 查出来一项就插入一项
			String qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate); // 统计明细ID
			// 1. A2 本月市属及市内四区属离休人员人数 离休待遇差
			int a2 = 0;
			double b2 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select count(distinct a.ryid) a2 ");
			sqlBF.append("   from ad3u.per_info a ");
			sqlBF.append("  where a.dylqlb = '101' ");
			sqlBF.append("    and a.zfrylb in ('A11', 'A5C') ");
			sqlBF.append("    and exists ");
			sqlBF.append("  (select 1 ");
			sqlBF.append("           from si3u.orgn_reg b， biuv.orgn c ");
			sqlBF.append("          where a.dwdjid = b.dwdjid ");
			sqlBF.append("            and b.dwid = c.dwid ");
			sqlBF.append("            and ((c.lsgx = '40' or ");
			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
			sqlBF.append("                b.jbjgid in ");
			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301'))) or ");
			sqlBF.append("                c.dwid in ('1000061692', ");
			sqlBF.append("                            '1000034634', ");
			sqlBF.append("                            '1000033511', ");
			sqlBF.append("                            '1000028463', ");
			sqlBF.append("                            '1000036066'))) ");
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("                   from ad3u.per_giv_detl d ");
			sqlBF.append("                  where a.ryid = d.ryid ");
			sqlBF.append("                    and d.xzbz = '101' ");
			sqlBF.append("                    and d.ffny = ? ");
			sqlBF.append("                    and rownum = 1) ");
//			sqlBF.append("         (select 1 ");
//			sqlBF.append("            from ad3u.per_giv_detl_gived_his e ");
//			sqlBF.append("           where a.ryid = e.ryid ");
//			sqlBF.append("             and e.xzbz = '101' ");
//			sqlBF.append("             and e.ffny = ? ");
//			sqlBF.append("             and rownum = 1)) ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			DataStore ds = this.sql.executeQuery();
			if (ds.rowCount() > 0) {
				a2 = ds.getInt(0, "a2");
				b2 = MathUtil.round((jgavgtxgz - qyavgtxgz) * a2, 2);
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "    其中：离休待遇差");
			this.sql.setInt(4, a2);
			this.sql.setDouble(5, b2);
			this.sql.setInt(6, 2);
			this.sql.executeUpdate();
			// A3 提取系统中实际发放的市属及市内四区属离休人员和建国前老工人遗属发放的冬季取暖补助金额。
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a3 = 0;
			double b3 = 0;
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "                离休老工人遗属取暖补贴");
			this.sql.setInt(4, a3);
			this.sql.setDouble(5, b3);
			this.sql.setInt(6, 3);
			this.sql.executeUpdate();
			// A4 B4 实际发放的市属及市内四区属离休人员1-3个月生活补贴金额
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a4 = 0;
			double b4 = 0;
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "                离休1-3个月生活补贴");
			this.sql.setInt(4, a4);
			this.sql.setDouble(5, b4);
			this.sql.setInt(6, 4);
			this.sql.executeUpdate();
			// A5 B5 实际发放的市属及市内四区属建国前老工人房屋增量补贴的人数及金额
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a5 = 0;
			double b5 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b5, count(distinct a.ryid) a5 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and a.zfrylb in ('A2A', 'A5G') ");
			sqlBF.append("    and exists ");
			sqlBF.append("  (select 1 ");
			sqlBF.append("           from si3u.orgn_reg b, biuv.orgn c ");
			sqlBF.append("          where a.dwdjid = b.dwdjid ");
			sqlBF.append("            and b.dwid = c.dwid ");
			sqlBF.append("            and ((c.lsgx = '40' or ");
			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
			sqlBF.append("                b.jbjgid in ");
			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301'))) or ");
			sqlBF.append("                c.dwid in ('1000061692', ");
			sqlBF.append("                            '1000034634', ");
			sqlBF.append("                            '1000033511', ");
			sqlBF.append("                            '1000028463', ");
			sqlBF.append("                            '1000036066'))) ");
			sqlBF.append("    and d.ffny = ? ");
			sqlBF.append("    and d.xzbz = '101' ");
			sqlBF.append("    and d.btbh = 'Q545' ");
			sqlBF.append("    and d.fsyy in ('1', '2') ");
			sqlBF.append("    and d.fflb <> 'C' ");
			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append(" union all ");
//			sqlBF.append(" select sum(nvl(d.btje, 0)) b5, count(distinct a.ryid) a5 ");
//			sqlBF.append("   from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("  where a.ryid = d.ryid ");
//			sqlBF.append("    and a.dylqlb = '101' ");
//			sqlBF.append("    and a.zfrylb in ('A2A', 'A5G') ");
//			sqlBF.append("    and exists ");
//			sqlBF.append("  (select 1 ");
//			sqlBF.append("           from si3u.orgn_reg b, biuv.orgn c ");
//			sqlBF.append("          where a.dwdjid = b.dwdjid ");
//			sqlBF.append("            and b.dwid = c.dwid ");
//			sqlBF.append("            and ((c.lsgx = '40' or ");
//			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
//			sqlBF.append("                b.jbjgid in ");
//			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301'))) or ");
//			sqlBF.append("                c.dwid in ('1000061692', ");
//			sqlBF.append("                            '1000034634', ");
//			sqlBF.append("                            '1000033511', ");
//			sqlBF.append("                            '1000028463', ");
//			sqlBF.append("                            '1000036066'))) ");
//			sqlBF.append("    and d.ffny = ? ");
//			sqlBF.append("    and d.xzbz = '101' ");
//			sqlBF.append("    and d.btbh = 'Q545' ");
//			sqlBF.append("    and d.fsyy in ('1', '2') ");
//			sqlBF.append("    and d.fflb <> 'C' ");
//			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				a5 = a5 + ds.getInt(i, "a5");
				b5 = b5 + ds.getDouble(i, "b5");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "                建国前老工人住房增量");
			this.sql.setInt(4, a5);
			this.sql.setDouble(5, b5);
			this.sql.setInt(6, 5);
			this.sql.executeUpdate();
			// A1=A2+A5，B1=B2+B3+B4+B5
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a1 = a2 + a5;
			double b1 = MathUtil.round(b2 + b3 + b4 + b5, 2);
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "一、市财政负担离休人员款");
			this.sql.setInt(4, a1);
			this.sql.setDouble(5, b1);
			this.sql.setInt(6, 1);
			this.sql.executeUpdate();

			// B7 实际发放的市属及市内四区属离休人员节日补贴、规范性补贴金额的两项合计数
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a7 = a2;
			double b7 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b7 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and a.zfrylb in ('A11', 'A5C') ");
			sqlBF.append("    and exists ");
			sqlBF.append("  (select 1 ");
			sqlBF.append("           from si3u.orgn_reg b, biuv.orgn c ");
			sqlBF.append("          where a.dwdjid = b.dwdjid ");
			sqlBF.append("            and b.dwid = c.dwid ");
			sqlBF.append("            and ((c.lsgx = '40' or ");
			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
			sqlBF.append("                b.jbjgid in ");
			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301'))) or ");
			sqlBF.append("                c.dwid in ('1000061692', ");
			sqlBF.append("                            '1000034634', ");
			sqlBF.append("                            '1000033511', ");
			sqlBF.append("                            '1000028463', ");
			sqlBF.append("                            '1000036066'))) ");
			sqlBF.append("    and d.ffny = ? ");
			sqlBF.append("    and d.xzbz = '101' ");
			sqlBF.append("    and d.fsyy in ('1', '2') ");
			sqlBF.append("    and d.fflb <> 'C' ");
			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
			sqlBF.append("    and d.btbh in ('Q335', ");
			sqlBF.append("                   'Q337', ");
			sqlBF.append("                   'Q339', ");
			sqlBF.append("                   'Q341', ");
			sqlBF.append("                   'Q391', ");
			sqlBF.append("                   'Q393', ");
			sqlBF.append("                   'Q396', ");
			sqlBF.append("                   'Q398', ");
			sqlBF.append("                   'Q400', ");
			sqlBF.append("                   'Q409', ");
			sqlBF.append("                   'Q415') ");
//			sqlBF.append(" union all ");
//			sqlBF.append(" select sum(nvl(d.btje, 0)) b7 ");
//			sqlBF.append("   from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("  where a.ryid = d.ryid ");
//			sqlBF.append("    and a.dylqlb = '101' ");
//			sqlBF.append("    and a.zfrylb in ('A11', 'A5C') ");
//			sqlBF.append("    and exists ");
//			sqlBF.append("  (select 1 ");
//			sqlBF.append("           from si3u.orgn_reg b, biuv.orgn c ");
//			sqlBF.append("          where a.dwdjid = b.dwdjid ");
//			sqlBF.append("            and b.dwid = c.dwid ");
//			sqlBF.append("            and ((c.lsgx = '40' or ");
//			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
//			sqlBF.append("                b.jbjgid in ");
//			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301'))) or ");
//			sqlBF.append("                c.dwid in ('1000061692', ");
//			sqlBF.append("                            '1000034634', ");
//			sqlBF.append("                            '1000033511', ");
//			sqlBF.append("                            '1000028463', ");
//			sqlBF.append("                            '1000036066'))) ");
//			sqlBF.append("    and d.ffny = ? ");
//			sqlBF.append("    and d.xzbz = '101' ");
//			sqlBF.append("    and d.fsyy in ('1', '2') ");
//			sqlBF.append("    and d.fflb <> 'C' ");
//			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append("    and d.btbh in ('Q335', ");
//			sqlBF.append("                   'Q337', ");
//			sqlBF.append("                   'Q339', ");
//			sqlBF.append("                   'Q341', ");
//			sqlBF.append("                   'Q391', ");
//			sqlBF.append("                   'Q393', ");
//			sqlBF.append("                   'Q396', ");
//			sqlBF.append("                   'Q398', ");
//			sqlBF.append("                   'Q400', ");
//			sqlBF.append("                   'Q409', ");
//			sqlBF.append("                   'Q415') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				b7 = b7 + ds.getDouble(i, "b7");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "    其中：离休");
			this.sql.setInt(4, a7);
			this.sql.setDouble(5, b7);
			this.sql.setInt(6, 7);
			this.sql.executeUpdate();

			// B8 实际发放的市属及市内四区属建国前老工人节日补贴、规范性补贴金额的两项合计数。
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a8 = a5;
			double b8 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b8 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("     and a.dylqlb = '101' ");
			sqlBF.append("     and a.zfrylb in ('A2A', 'A5G') ");
			sqlBF.append("     and exists ");
			sqlBF.append("   (select 1 ");
			sqlBF.append("            from si3u.orgn_reg b, biuv.orgn c ");
			sqlBF.append("           where a.dwdjid = b.dwdjid ");
			sqlBF.append("             and b.dwid = c.dwid ");
			sqlBF.append("             and ((c.lsgx = '40' or ");
			sqlBF.append("                 (c.lsgx in ('50', '51', '52') and ");
			sqlBF.append("                 b.jbjgid in ");
			sqlBF.append("                 ('37520201', '37520301', '37520501', '37521301'))) or ");
			sqlBF.append("                 c.dwid in ('1000061692', ");
			sqlBF.append("                             '1000034634', ");
			sqlBF.append("                             '1000033511', ");
			sqlBF.append("                             '1000028463', ");
			sqlBF.append("                             '1000036066'))) ");
			sqlBF.append("     and d.ffny = ? ");
			sqlBF.append("     and d.xzbz = '101' ");
			sqlBF.append("     and d.fsyy in ('1', '2') ");
			sqlBF.append("     and d.fflb <> 'C' ");
			sqlBF.append("     and nvl(d.btje, 0) >= 0 ");
			sqlBF.append("     and d.btbh in ('Q335', ");
			sqlBF.append("                    'Q337', ");
			sqlBF.append("                    'Q339', ");
			sqlBF.append("                    'Q341', ");
			sqlBF.append("                    'Q391', ");
			sqlBF.append("                    'Q393', ");
			sqlBF.append("                    'Q396', ");
			sqlBF.append("                    'Q398', ");
			sqlBF.append("                    'Q400', ");
			sqlBF.append("                    'Q409', ");
			sqlBF.append("                    'Q415') ");
//			sqlBF.append("  union all ");
//			sqlBF.append("  select sum(nvl(d.btje, 0)) b8 ");
//			sqlBF.append("    from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("   where a.ryid = d.ryid ");
//			sqlBF.append("     and a.dylqlb = '101' ");
//			sqlBF.append("     and a.zfrylb in ('A2A', 'A5G') ");
//			sqlBF.append("     and exists ");
//			sqlBF.append("   (select 1 ");
//			sqlBF.append("            from si3u.orgn_reg b, biuv.orgn c ");
//			sqlBF.append("           where a.dwdjid = b.dwdjid ");
//			sqlBF.append("             and b.dwid = c.dwid ");
//			sqlBF.append("             and ((c.lsgx = '40' or ");
//			sqlBF.append("                 (c.lsgx in ('50', '51', '52') and ");
//			sqlBF.append("                 b.jbjgid in ");
//			sqlBF.append("                 ('37520201', '37520301', '37520501', '37521301'))) or ");
//			sqlBF.append("                 c.dwid in ('1000061692', ");
//			sqlBF.append("                             '1000034634', ");
//			sqlBF.append("                             '1000033511', ");
//			sqlBF.append("                             '1000028463', ");
//			sqlBF.append("                             '1000036066'))) ");
//			sqlBF.append("     and d.ffny = ? ");
//			sqlBF.append("     and d.xzbz = '101' ");
//			sqlBF.append("     and d.fsyy in ('1', '2') ");
//			sqlBF.append("     and d.fflb <> 'C' ");
//			sqlBF.append("     and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append("     and d.btbh in ('Q335', ");
//			sqlBF.append("                    'Q337', ");
//			sqlBF.append("                    'Q339', ");
//			sqlBF.append("                    'Q341', ");
//			sqlBF.append("                    'Q391', ");
//			sqlBF.append("                    'Q393', ");
//			sqlBF.append("                    'Q396', ");
//			sqlBF.append("                    'Q398', ");
//			sqlBF.append("                    'Q400', ");
//			sqlBF.append("                    'Q409', ");
//			sqlBF.append("                    'Q415') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				b8 = b8 + ds.getDouble(i, "b8");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "                建国前老工人");
			this.sql.setInt(4, a8);
			this.sql.setDouble(5, b8);
			this.sql.setInt(6, 8);
			this.sql.executeUpdate();

			// A9 B9 实际发放的市属及市内四区属原事业单位转企退休人员节日补贴、规范性补贴金额的两项合计数
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a9 = 0;
			double b9 = 0;
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "                退休");
			this.sql.setInt(4, a9);
			this.sql.setDouble(5, b9);
			this.sql.setInt(6, 9);
			this.sql.executeUpdate();

			// A6=A7+A8+A9，B6=B7+B8+B9
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a6 = a7 + a8 + a9;
			double b6 = MathUtil.round(b7 + b8 + b9, 2);
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "二、规范性补贴");
			this.sql.setInt(4, a6);
			this.sql.setDouble(5, b6);
			this.sql.setInt(6, 6);
			this.sql.executeUpdate();

			// --四项补贴人数（A10）：提取系统中市属及市内四区属国有、集体企业离退休人数
			// --四项补贴金额（B10）：提取系统中实际发放的市属及市内四区属国有、集体企业离退休人员四项补贴金额。
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a10 = 0;
			double b10 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b10, count(distinct a.ryid) a10 ");
			sqlBF.append("   from ad3u.per_info           a, ");
			sqlBF.append("        ad3u.per_giv_detl d, ");
			sqlBF.append("        ad3u.per_cmpl           e, ");
			sqlBF.append("        si3u.orgn_reg           b, ");
			sqlBF.append("        biuv.orgn               c ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("    and a.ryid = e.ryid(+) ");
			sqlBF.append("    and e.bcxmbh(+) = 'DYHDDW' ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and b.dwdjid = nvl(e.bcxmz, a.dwdjid) ");
			sqlBF.append("    and b.dwid = c.dwid ");
			sqlBF.append("    and (c.lsgx = '40' or ");
			sqlBF.append("        (c.lsgx in ('50', '51', '52') and ");
			sqlBF.append("        b.jbjgid in ('37520201', '37520301', '37520501', '37521301')) or ");
			sqlBF.append("        b.dwdjid in ('3702160025', '3702160042')) ");
			sqlBF.append("    and d.ffny = ? ");
			sqlBF.append("    and d.xzbz = '101' ");
			sqlBF.append("    and d.fsyy in ('1', '2') ");
			sqlBF.append("    and d.fflb <> 'C' ");
			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
			sqlBF.append("    and d.btbh in ('H704', 'H705', 'H706', 'H707') ");
//			sqlBF.append(" union all ");
//			sqlBF.append(" select sum(nvl(d.btje, 0)) b10, count(distinct a.ryid) a10 ");
//			sqlBF.append("   from ad3u.per_info           a, ");
//			sqlBF.append("        ad3u.per_giv_detl_gived_his d, ");
//			sqlBF.append("        ad3u.per_cmpl           e, ");
//			sqlBF.append("        si3u.orgn_reg           b, ");
//			sqlBF.append("        biuv.orgn               c ");
//			sqlBF.append("  where a.ryid = d.ryid ");
//			sqlBF.append("    and a.ryid = e.ryid(+) ");
//			sqlBF.append("    and e.bcxmbh(+) = 'DYHDDW' ");
//			sqlBF.append("    and a.dylqlb = '101' ");
//			sqlBF.append("    and b.dwdjid = nvl(e.bcxmz, a.dwdjid) ");
//			sqlBF.append("    and b.dwid = c.dwid ");
//			sqlBF.append("    and (c.lsgx = '40' or ");
//			sqlBF.append("        (c.lsgx in ('50', '51', '52') and ");
//			sqlBF.append("        b.jbjgid in ('37520201', '37520301', '37520501', '37521301')) or ");
//			sqlBF.append("        b.dwdjid in ('3702160025', '3702160042')) ");
//			sqlBF.append("    and d.ffny = ? ");
//			sqlBF.append("    and d.xzbz = '101' ");
//			sqlBF.append("    and d.fsyy in ('1', '2') ");
//			sqlBF.append("    and d.fflb <> 'C' ");
//			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append("    and d.btbh in ('H704', 'H705', 'H706', 'H707') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				a10 = a10 + ds.getInt(i, "a10");
				b10 = b10 + ds.getDouble(i, "b10");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "三、四项补贴");
			this.sql.setInt(4, a10);
			this.sql.setDouble(5, b10);
			this.sql.setInt(6, 10);
			this.sql.executeUpdate();

			// --早期归侨人员人数（A11）：提取系统中发放归侨补贴的人数。--早期归侨人员生活补贴（B11）：提取系统中实际发放的归侨补贴金额。
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a11 = 0;
			double b11 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b11, count(distinct a.ryid) a11 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and d.ffny = ? ");
			sqlBF.append("    and d.xzbz = '101' ");
			sqlBF.append("    and d.btbh = 'Q403' ");
			sqlBF.append("    and d.fsyy in ('1', '2') ");
			sqlBF.append("    and d.fflb <> 'C' ");
			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append(" union all ");
//			sqlBF.append(" select sum(nvl(d.btje, 0)) b11, count(distinct a.ryid) a11 ");
//			sqlBF.append("   from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("  where a.ryid = d.ryid ");
//			sqlBF.append("    and a.dylqlb = '101' ");
//			sqlBF.append("    and d.ffny = ? ");
//			sqlBF.append("    and d.xzbz = '101' ");
//			sqlBF.append("    and d.btbh = 'Q403' ");
//			sqlBF.append("    and d.fsyy in ('1', '2') ");
//			sqlBF.append("    and d.fflb <> 'C' ");
//			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				a11 = a11 + ds.getInt(i, "a11");
				b11 = b11 + ds.getDouble(i, "b11");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "四、早期归侨人员生活补贴");
			this.sql.setInt(4, a11);
			this.sql.setDouble(5, b11);
			this.sql.setInt(6, 11);
			this.sql.executeUpdate();

			// --园林环卫城建离退休人数（A13）：系统提取市内四区城市管理体制（园林环卫城建）已办理正常离退休人员和提前退休人员人数
			// --园林环卫城建离退休费（B13）：系统提取已办理正常离退休人员和提前退休人员的离退休费（含供热补贴、供养人员遗属补助费）
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a13 = 0;
			double b13 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b13, count(distinct a.ryid) a13 ");
			sqlBF.append("   from ad3u.per_info           a, ");
			sqlBF.append("        si3u.orgn_reg           b, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("     and a.dwdjid = b.dwdjid ");
			sqlBF.append("     and b.dwdjid in ");
			sqlBF.append("         ('3702302749', '3702302386', '3702302384', '3702302459') ");
			sqlBF.append("     and b.jbjgid in ('37520201', '37520301', '37520501', '37521301') ");
			sqlBF.append("     and a.dylqlb = '101' ");
			sqlBF.append("     and d.ffny = ? ");
			sqlBF.append("     and d.xzbz = '101' ");
			sqlBF.append("     and d.fsyy in ('1', '2') ");
			sqlBF.append("     and d.fflb <> 'C' ");
			sqlBF.append("     and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append("  union all ");
//			sqlBF.append("  select sum(nvl(d.btje, 0)) b13, count(distinct a.ryid) a13 ");
//			sqlBF.append("    from ad3u.per_info               a, ");
//			sqlBF.append("         si3u.orgn_reg               b, ");
//			sqlBF.append("         ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("   where a.ryid = d.ryid ");
//			sqlBF.append("     and a.dwdjid = b.dwdjid ");
//			sqlBF.append("     and b.dwdjid in ");
//			sqlBF.append("         ('3702302749', '3702302386', '3702302384', '3702302459') ");
//			sqlBF.append("     and b.jbjgid in ('37520201', '37520301', '37520501', '37521301') ");
//			sqlBF.append("     and a.dylqlb = '101' ");
//			sqlBF.append("     and d.ffny = ? ");
//			sqlBF.append("     and d.xzbz = '101' ");
//			sqlBF.append("     and d.fsyy in ('1', '2') ");
//			sqlBF.append("     and d.fflb <> 'C' ");
//			sqlBF.append("     and nvl(d.btje, 0) >= 0 ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				a13 = a13 + ds.getInt(i, "a13");
				b13 = b13 + ds.getDouble(i, "b13");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "  其中：离退休费");
			this.sql.setInt(4, a13);
			this.sql.setDouble(5, b13);
			this.sql.setInt(6, 13);
			this.sql.executeUpdate();

			// N_A12 := N_A13 + N_A14 + N_A15; N_B12 := N_B13 + N_B14 + N_B15;
			// 14 15属医疗不统计
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a12 = a13;
			double b12 = b13;
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "五、园林环卫城建部门资金");
			this.sql.setInt(4, a12);
			this.sql.setDouble(5, b12);
			this.sql.setInt(6, 12);
			this.sql.executeUpdate();

			// （A16）：系统提取二轻所属6个行政公司（家具、塑料、皮革、五金、工艺美术、家电）离退休人数。
			// 二轻所属6个行政公司待遇差（B16）：（给定的机关事业平均退休工资 元 - 给定的企业平均退休工资 元）*
			// 二轻所属6个行政公司（家具、塑料、皮革、五金、工艺美术、家电）离退休人数。
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a16 = 0;
			double b16 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select count(distinct a.ryid) a16 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("     and a.dylqlb = '101' ");
			sqlBF.append("     and d.ffny = ? ");
			sqlBF.append("     and d.xzbz = '101' ");
			sqlBF.append("     and d.btbh = 'Q368' ");
			sqlBF.append("     and d.fsyy in ('1', '2') ");
			sqlBF.append("     and d.fflb <> 'C' ");
			sqlBF.append("     and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append("  union all ");
//			sqlBF.append("  select count(distinct a.ryid) a16 ");
//			sqlBF.append("    from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("   where a.ryid = d.ryid ");
//			sqlBF.append("     and a.dylqlb = '101' ");
//			sqlBF.append("     and d.ffny = ? ");
//			sqlBF.append("     and d.xzbz = '101' ");
//			sqlBF.append("     and d.btbh = 'Q368' ");
//			sqlBF.append("     and d.fsyy in ('1', '2') ");
//			sqlBF.append("     and d.fflb <> 'C' ");
//			sqlBF.append("     and nvl(d.btje, 0) >= 0 ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				a16 = a16 + ds.getInt(i, "a16");
			}
			b16 = MathUtil.round((jgavgtxgz - qyavgtxgz) * a16, 2);
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "六、二轻所属6个行政公司");
			this.sql.setInt(4, a16);
			this.sql.setDouble(5, b16);
			this.sql.setInt(6, 16);
			this.sql.executeUpdate();

			// （1）人数（A17）：万通证券、石油公司指定人员人数。
			// （B17）：系统提取万通证券、石油公司指定人员实际发放待遇金额 - 给定的企业平均退休工资 元
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a17 = 0;
			double b17 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b17, count(distinct a.ryid) a17 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("    and a.ryid in ('99991036', '99991037') ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and d.ffny = ? ");
			sqlBF.append("    and d.xzbz = '101' ");
			sqlBF.append("    and d.fsyy in ('1', '2') ");
			sqlBF.append("    and d.fflb <> 'C' ");
			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append(" union all ");
//			sqlBF.append(" select sum(nvl(d.btje, 0)) b17, count(distinct a.ryid) a17 ");
//			sqlBF.append("   from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("  where a.ryid = d.ryid ");
//			sqlBF.append("    and a.ryid in ('99991036', '99991037') ");
//			sqlBF.append("    and a.dylqlb = '101' ");
//			sqlBF.append("    and d.ffny = ? ");
//			sqlBF.append("    and d.xzbz = '101' ");
//			sqlBF.append("    and d.fsyy in ('1', '2') ");
//			sqlBF.append("    and d.fflb <> 'C' ");
//			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				a17 = a17 + ds.getInt(i, "a17");
				b17 = b17 + ds.getDouble(i, "b17");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "七、万通证券、石油公司");
			this.sql.setInt(4, a17);
			this.sql.setDouble(5, b17);
			this.sql.setInt(6, 17);
			this.sql.executeUpdate();

			// A18 B18
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a18 = 0;
			double b18 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b18, count(distinct a.ryid) a18 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("     and a.dylqlb = '101' ");
			sqlBF.append("     and d.ffny = ? ");
			sqlBF.append("     and d.xzbz = '101' ");
			sqlBF.append("     and d.btbh in ('Q416', 'Q425') ");
			sqlBF.append("     and d.fsyy in ('1', '2') ");
			sqlBF.append("     and d.fflb <> 'C' ");
			sqlBF.append("     and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append("  union all ");
//			sqlBF.append("  select sum(nvl(d.btje, 0)) b18, count(distinct a.ryid) a18 ");
//			sqlBF.append("    from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("   where a.ryid = d.ryid ");
//			sqlBF.append("     and a.dylqlb = '101' ");
//			sqlBF.append("     and d.ffny = ? ");
//			sqlBF.append("     and d.xzbz = '101' ");
//			sqlBF.append("     and d.btbh in ('Q416', 'Q425') ");
//			sqlBF.append("     and d.fsyy in ('1', '2') ");
//			sqlBF.append("     and d.fflb <> 'C' ");
//			sqlBF.append("     and nvl(d.btje, 0) >= 0 ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				a18 = a18 + ds.getInt(i, "a18");
				b18 = b18 + ds.getDouble(i, "b18");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "八、军转干部补助");
			this.sql.setInt(4, a18);
			this.sql.setDouble(5, b18);
			this.sql.setInt(6, 18);
			this.sql.executeUpdate();

			// A19 B19
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a19 = a2 + a5;
			double b19 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b19 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and a.zfrylb in ('A11', 'A2A', 'A5C', 'A5G') ");
			sqlBF.append("    and exists ");
			sqlBF.append("  (select 1 ");
			sqlBF.append("           from si3u.orgn_reg b, biuv.orgn c ");
			sqlBF.append("          where a.dwdjid = b.dwdjid ");
			sqlBF.append("            and b.dwid = c.dwid ");
			sqlBF.append("            and (c.lsgx = '40' or ");
			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
			sqlBF.append("                b.jbjgid in ");
			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301')))) ");
			sqlBF.append("    and d.ffny = ? ");
			sqlBF.append("    and d.xzbz = '101' ");
			sqlBF.append("    and d.btbh in ('Q452', 'Q454') ");
			sqlBF.append("    and d.fsyy in ('1', '2') ");
			sqlBF.append("    and d.fflb <> 'C' ");
			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append(" union all ");
//			sqlBF.append(" select sum(nvl(d.btje, 0)) b19 ");
//			sqlBF.append("   from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("  where a.ryid = d.ryid ");
//			sqlBF.append("    and a.dylqlb = '101' ");
//			sqlBF.append("    and a.zfrylb in ('A11', 'A2A', 'A5C', 'A5G') ");
//			sqlBF.append("    and exists ");
//			sqlBF.append("  (select 1 ");
//			sqlBF.append("           from si3u.orgn_reg b, biuv.orgn c ");
//			sqlBF.append("          where a.dwdjid = b.dwdjid ");
//			sqlBF.append("            and b.dwid = c.dwid ");
//			sqlBF.append("            and (c.lsgx = '40' or ");
//			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
//			sqlBF.append("                b.jbjgid in ");
//			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301')))) ");
//			sqlBF.append("    and d.ffny = ? ");
//			sqlBF.append("    and d.xzbz = '101' ");
//			sqlBF.append("    and d.btbh in ('Q452', 'Q454') ");
//			sqlBF.append("    and d.fsyy in ('1', '2') ");
//			sqlBF.append("    and d.fflb <> 'C' ");
//			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
//			this.sql.setString(2, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				b19 = b19 + ds.getDouble(i, "b19");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "九、物业补贴");
			this.sql.setInt(4, a19);
			this.sql.setDouble(5, b19);
			this.sql.setInt(6, 19);
			this.sql.executeUpdate();

			// A20 B20
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a20 = a2 + a5 + a13;
			double b20 = 0;
			sqlBF.setLength(0);
			sqlBF.append(" select sum(nvl(d.btje, 0)) b20 ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.ryid = d.ryid ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and a.zfrylb in ('A11', 'A2A', 'A5C', 'A5G') ");
			sqlBF.append("    and exists ");
			sqlBF.append("  (select 1 ");
			sqlBF.append("           from si3u.orgn_reg b, biuv.orgn c ");
			sqlBF.append("          where a.dwdjid = b.dwdjid ");
			sqlBF.append("            and b.dwid = c.dwid ");
			sqlBF.append("            and (c.lsgx = '40' or ");
			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
			sqlBF.append("                b.jbjgid in ");
			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301')))) ");
			sqlBF.append("    and d.ffny = ? ");
			sqlBF.append("    and d.xzbz = '101' ");
			sqlBF.append("    and d.btbh = 'Q459' ");
			sqlBF.append("    and d.fsyy in ('1', '2') ");
			sqlBF.append("    and d.fflb <> 'C' ");
			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append(" union all ");
//			sqlBF.append(" select sum(nvl(d.btje, 0)) b20 ");
//			sqlBF.append("   from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("  where a.ryid = d.ryid ");
//			sqlBF.append("    and a.dylqlb = '101' ");
//			sqlBF.append("    and a.zfrylb in ('A11', 'A2A', 'A5C', 'A5G') ");
//			sqlBF.append("    and exists ");
//			sqlBF.append("  (select 1 ");
//			sqlBF.append("           from si3u.orgn_reg b, biuv.orgn c ");
//			sqlBF.append("          where a.dwdjid = b.dwdjid ");
//			sqlBF.append("            and b.dwid = c.dwid ");
//			sqlBF.append("            and (c.lsgx = '40' or ");
//			sqlBF.append("                (c.lsgx in ('50', '51', '52') and ");
//			sqlBF.append("                b.jbjgid in ");
//			sqlBF.append("                ('37520201', '37520301', '37520501', '37521301')))) ");
//			sqlBF.append("    and d.ffny = ? ");
//			sqlBF.append("    and d.xzbz = '101' ");
//			sqlBF.append("    and d.btbh = 'Q459' ");
//			sqlBF.append("    and d.fsyy in ('1', '2') ");
//			sqlBF.append("    and d.fflb <> 'C' ");
//			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
			sqlBF.append(" union all ");
			sqlBF.append(" select sum(nvl(d.btje, 0)) b20 ");
			sqlBF.append("   from ad3u.per_info           a, ");
			sqlBF.append("        si3u.orgn_reg           b, ");
			sqlBF.append("        ad3u.per_giv_detl d ");
			sqlBF.append("  where a.dwdjid = b.dwdjid ");
			sqlBF.append("    and a.ryid = d.ryid ");
			sqlBF.append("    and b.dwdjid in ('3702302749', '3702302386', '3702302384', '3702302459') ");
			sqlBF.append("    and b.jbjgid in ('37520201', '37520301', '37520501', '37521301') ");
			sqlBF.append("    and a.dylqlb = '101' ");
			sqlBF.append("    and d.ffny = ? ");
			sqlBF.append("    and d.xzbz = '101' ");
			sqlBF.append("    and d.btbh = 'Q459' ");
			sqlBF.append("    and d.fsyy in ('1', '2') ");
			sqlBF.append("    and d.fflb <> 'C' ");
			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//			sqlBF.append(" union all ");
//			sqlBF.append(" select sum(nvl(d.btje, 0)) b20 ");
//			sqlBF.append("   from ad3u.per_info               a, ");
//			sqlBF.append("        si3u.orgn_reg               b, ");
//			sqlBF.append("        ad3u.per_giv_detl_gived_his d ");
//			sqlBF.append("  where a.dwdjid = b.dwdjid ");
//			sqlBF.append("    and a.ryid = d.ryid ");
//			sqlBF.append("    and b.dwdjid in ('3702302749', '3702302386', '3702302384', '3702302459') ");
//			sqlBF.append("    and b.jbjgid in ('37520201', '37520301', '37520501', '37521301') ");
//			sqlBF.append("    and a.dylqlb = '101' ");
//			sqlBF.append("    and d.ffny = ? ");
//			sqlBF.append("    and d.xzbz = '101' ");
//			sqlBF.append("    and d.btbh = 'Q459' ");
//			sqlBF.append("    and d.fsyy in ('1', '2') ");
//			sqlBF.append("    and d.fflb <> 'C' ");
//			sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ywny);
			this.sql.setString(2, ywny);
//			this.sql.setString(3, ywny);
//			this.sql.setString(4, ywny);
			ds = this.sql.executeQuery();
			for (int i = 0; i < ds.rowCount(); i++) {
				b20 = b20 + ds.getDouble(i, "b20");
			}
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "十、津补贴");
			this.sql.setInt(4, a20);
			this.sql.setDouble(5, b20);
			this.sql.setInt(6, 20);
			this.sql.executeUpdate();

			// A21 B21
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a21 = 0;
			double b21 = 0;
			if ("201611".equals(ywny)) {
				sqlBF.setLength(0);
				sqlBF.append(" select sum(nvl(d.btje, 0)) b21, count(distinct a.ryid) a21 ");
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        ad3u.per_giv_detl d ");
				sqlBF.append("  where a.ryid = d.ryid ");
				sqlBF.append("    and a.dylqlb = '101' ");
				sqlBF.append("    and d.ffny BETWEEN '201608' AND '201611' ");
				sqlBF.append("    and d.xzbz = '101' ");
				sqlBF.append("    and a.dwdjid not in ('3702302749', '3702302384', '3702302386', '3702302459') ");
				sqlBF.append("    and d.btbh = 'Q363' ");
				sqlBF.append("    and d.fsyy in ('1', '2') ");
				sqlBF.append("    and d.fflb <> 'C' ");
				sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
//				sqlBF.append(" union all ");
//				sqlBF.append(" select sum(nvl(d.btje, 0)) b21, count(distinct a.ryid) a21 ");
//				sqlBF.append("   from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//				sqlBF.append("  where a.ryid = d.ryid ");
//				sqlBF.append("    and a.dylqlb = '101' ");
//				sqlBF.append("    and d.ffny BETWEEN '201608' AND '201611' ");
//				sqlBF.append("    and d.xzbz = '101' ");
//				sqlBF.append("    and a.dwdjid not in ('3702302749', '3702302384', '3702302386', '3702302459') ");
//				sqlBF.append("    and d.btbh = 'Q363' ");
//				sqlBF.append("    and d.fsyy in ('1', '2') ");
//				sqlBF.append("    and d.fflb <> 'C' ");
//				sqlBF.append("    and nvl(d.btje, 0) >= 0 ");
				this.sql.setSql(sqlBF.toString());
				ds = this.sql.executeQuery();
				for (int i = 0; i < ds.rowCount(); i++) {
					a21 = a21 + ds.getInt(i, "a21");
					b21 = b21 + ds.getDouble(i, "b21");
				}
				this.sql.setSql(intjmxsql);
				this.sql.setString(1, qyylczbztjmxid);
				this.sql.setString(2, qyylczbztjid);
				this.sql.setString(3, "离退休人员补贴（事转企非基数）");
				this.sql.setInt(4, a21);
				this.sql.setDouble(5, b21);
				this.sql.setInt(6, 21);
				this.sql.executeUpdate();
			} else if ("201611".compareTo(ywny) < 0) {
				sqlBF.setLength(0);
				sqlBF.append(" select sum(nvl(d.btje, 0)) b21, count(distinct a.ryid) a21 ");
				sqlBF.append("   from ad3u.per_info a, ");
				sqlBF.append("        ad3u.per_giv_detl d ");
				sqlBF.append("  where a.ryid = d.ryid ");
				sqlBF.append("      and a.dylqlb = '101' ");
				sqlBF.append("      and d.ffny = ? ");
				sqlBF.append("      and d.xzbz = '101' ");
				sqlBF.append("      and a.dwdjid not in ");
				sqlBF.append("          ('3702302749', '3702302384', '3702302386', '3702302459') ");
				sqlBF.append("      and d.btbh = 'Q363' ");
				sqlBF.append("      and d.fsyy in ('1', '2') ");
				sqlBF.append("      and d.fflb <> 'C' ");
				sqlBF.append("      and nvl(d.btje, 0) >= 0 ");
//				sqlBF.append("   union all ");
//				sqlBF.append("   select sum(nvl(d.btje, 0)) b21, count(distinct a.ryid) a21 ");
//				sqlBF.append("     from ad3u.per_info a, ad3u.per_giv_detl_gived_his d ");
//				sqlBF.append("    where a.ryid = d.ryid ");
//				sqlBF.append("      and a.dylqlb = '101' ");
//				sqlBF.append("      and d.ffny = ? ");
//				sqlBF.append("      and d.xzbz = '101' ");
//				sqlBF.append("      and a.dwdjid not in ");
//				sqlBF.append("          ('3702302749', '3702302384', '3702302386', '3702302459') ");
//				sqlBF.append("      and d.btbh = 'Q363' ");
//				sqlBF.append("      and d.fsyy in ('1', '2') ");
//				sqlBF.append("      and d.fflb <> 'C' ");
//				sqlBF.append("      and nvl(d.btje, 0) >= 0 ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ywny);
//				this.sql.setString(2, ywny);
				ds = this.sql.executeQuery();
				for (int i = 0; i < ds.rowCount(); i++) {
					a21 = a21 + ds.getInt(i, "a21");
					b21 = b21 + ds.getDouble(i, "b21");
				}
				this.sql.setSql(intjmxsql);
				this.sql.setString(1, qyylczbztjmxid);
				this.sql.setString(2, qyylczbztjid);
				this.sql.setString(3, "离退休人员补贴（事转企非基数）");
				this.sql.setInt(4, a21);
				this.sql.setDouble(5, b21);
				this.sql.setInt(6, 21);
				this.sql.executeUpdate();
			} else {
				this.sql.setSql(intjmxsql);
				this.sql.setString(1, qyylczbztjmxid);
				this.sql.setString(2, qyylczbztjid);
				this.sql.setString(3, "离退休人员补贴（事转企非基数）");
				this.sql.setInt(4, a21);
				this.sql.setDouble(5, b21);
				this.sql.setInt(6, 21);
				this.sql.executeUpdate();
			}
			// A22 B22
			qyylczbztjmxid = HsuTools.getIdWithDate("BE3U.SQ_JFSBID", currentDate);
			int a22 = a1 + a6 + a10 + a11 + a12 + a16 + a17 + a18 + a19 + a20
					+ a21;
			double b22 = b1 + b6 + b10 + b11 + b12 + b16 + b17 + b18 + b19
					+ b20 + b21;
			this.sql.setSql(intjmxsql);
			this.sql.setString(1, qyylczbztjmxid);
			this.sql.setString(2, qyylczbztjid);
			this.sql.setString(3, "十一、市财政补助资金（合计）");
			this.sql.setInt(4, a22);
			this.sql.setDouble(5, b22);
			this.sql.setInt(6, 22);
			this.sql.executeUpdate();

			// 更新统计主表
			sqlBF.setLength(0);
			sqlBF.append("update si3u.qyylczbztj ");
			sqlBF.append("   set zzrq = ?, yxbz = ?, bz = ?, jbr = ? ");
			sqlBF.append(" where qyylczbztjid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setDateTime(1, DateUtil.getDBTime());
			this.sql.setString(2, "1");
			this.sql.setString(3, "生成企业养老保险财政补助统计信息成功");
			this.sql.setString(4, this.getUser().getUserid());
			this.sql.setString(5, qyylczbztjid);
			this.sql.executeUpdate();
			tm.commit();
		} catch (Exception e) {
			tm.rollback();
			// 先将初始化的记录删除
			this.sql.setSql("delete from si3u.qyylczbztj where qyylczbztjid = ?");
			this.sql.setString(1, qyylczbztjid);
			this.sql.executeUpdate();
			// 插入失败信息
			this.sql.setSql(intjsql);
			this.sql.setString(1, qyylczbztjid);
			this.sql.setString(2, ywny);
			this.sql.setDouble(3, jgavgtxgz);
			this.sql.setDouble(4, qyavgtxgz);
			this.sql.setDateTime(5, qsrq);
			this.sql.setDateTime(6, DateUtil.getDBTime());
			this.sql.setString(7, "0");
			this.sql.setString(8, "生成企业养老保险财政补助统计信息失败");
			this.sql.setString(9, this.getUser().getUserid());
			this.sql.executeUpdate();
			tm.commit();
		}
		return null;
	}

	/**
	 * 方法简介. 查询企业养老保险财政补助统计数据
	 * 
	 * @author 高祥鹏 2019年11月4日
	 */
	public final DataObject queryQyylczbztjInfo(final DataObject para) throws Exception {
		DataObject pdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		// 接参
		String ywny = para.getDateToString("ywny","yyyyMM");
		sqlBF.setLength(0);
		sqlBF.append(" select a.qyylczbztjid, a.ywny, a.jgavgtxgz, a.qyavgtxgz, a.qsrq, ");
		sqlBF.append("        a.zzrq, a.yxbz, a.bz, (select b.yhxm from be3u.sysuser b where a.jbr = b.yhid ) jbr ");
		sqlBF.append("   from si3u.qyylczbztj a ");
		sqlBF.append("  where 1=1  ");
		if (ywny != null && !"".equals(ywny)) {
			sqlBF.append(" and a.ywny = '" + ywny + "'");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore ds = this.sql.executeQuery();

		pdo.clear();
		pdo.put("result", ds);
		return pdo;
	}
	/**
	 * 
	 * 方法简介.查询企业养老保险财政补助统计明细数据
	 * 
	 * @author 高祥鹏 2019年11月4日
	 */
	public final DataObject queryQyylczbztjmxInfo(final DataObject para) throws Exception {
		DataObject pdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		// 接参
		String qyylczbztjid = para.getString("qyylczbztjid");
		if(qyylczbztjid == null || "".equals(qyylczbztjid)){
			this.bizException("传入企业养老保险财政补助统计ID为空！");
		}
		sqlBF.setLength(0);
		sqlBF.append(" select a.qyylczbztjmxid, a.tjxmmc, a.tjxmrs, a.tjxmje, a.bz ");
		sqlBF.append("   from si3u.qyylczbztjmx a ");
		sqlBF.append("  where a.qyylczbztjid = ? ");
		sqlBF.append("  order by a.bz asc");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qyylczbztjid);
		DataStore ds = this.sql.executeQuery();
		pdo.clear();
		pdo.put("result", ds);
		return pdo;
	}

	/**
	 * 方法简介.跳转到企业养老待遇申请查询的JSP
	 * 
	 * @author rzs
	 * @date 创建时间 2019年11月16日
	 * @since V1.0
	 */
	public DataObject fwdAdQyyldysqcxQuery(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

		String vbiz = para.getString("biz");
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" select a.jbjgid value, a.jbjgmc content, a.jbjgid, a.jbjgmc ");
		sqlBF.append("   from be3u.agency_natl a                                   ");
		sqlBF.append("  where a.jbjgid like '3752%01'                              ");
		this.sql.setSql(sqlBF.toString());
		ds = this.sql.executeQuery();

		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}

		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}

	/**
	 * 方法简介.企业养老待遇申请查询
	 * 
	 * @author rzs 2019年11月16日
	 */
	public DataObject queryAdQyyldysqcxInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsTemp = new DataStore();

		String ryid = para.getString("cxryid");
		String dwdjid = para.getString("dwdjid");
		String shzt = para.getString("xshzt");
		String ltxlb = para.getString("ltxlb");
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String jbjgid = para.getString("jbjgid");
		String spr = para.getString("spr");
		String piid = "", dyhsr = "", dyfhr = "";
		
		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19000101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "21000101";
		}

		sqlBF.setLength(0);
		sqlBF.append("select a.ryid, '查看' ck , a.xm, b.grbh, a.zfrylb ltxlb,  ");
		sqlBF.append("       a.bz,d.jbjgid, d.dwbh, d.cbdwmc dwmc, decode(h.zglb,'A0C','1','0') sfzzztx,");
		sqlBF.append("       a.rydjid, a.spr, a.cjgzrq, a.ltxrq ");
		sqlBF.append("  from si3u.retd_identity a, biuv.person b, si3u.orgn_reg d, si3u.per_reg h ");
		sqlBF.append(" where a.ryid = b.ryid ");
		sqlBF.append("   and a.dwdjid = d.dwdjid ");
		sqlBF.append("   and a.rydjid = h.rydjid ");
		sqlBF.append("   and instr(h.tblb,'101') > 0 ");
		sqlBF.append("   and to_char(a.fhsj, 'yyyyMMdd') between '" + qsrq
				+ "' and '" + zzrq + "' ");
		//必须办理过待遇申请业务的人才能查询出来 -- zkj modify 2019/11/30
		sqlBF.append("  and exists(  select 1 from si3u.retd_identity i ");
		sqlBF.append("                 where a.ryid = i.ryid ) ");
		sqlBF.append("   and nvl(a.blltxny,'201801') > '201811' ");//只查询2018年12月1号之后的申请信息.mod.zcc.20191206
		if (ltxlb != null && !"".equals(ltxlb)) {
			sqlBF.append("   and a.zfrylb = '" + ltxlb + "' ");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and a.dwdjid = '" + dwdjid + "' ");
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("   and d.jbjgid = '" + jbjgid + "' ");
		} else {
			sqlBF.append("   and d.jbjgid like '3752%01' ");
		}
		if (spr != null && !"".equals(spr)) {
			sqlBF.append("   and a.spr = '" + spr + "' ");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and b.ryid = '" + ryid + "' ");
		}
		if (shzt != null && !"".equals(shzt)) {
			
			if ("0".equals(shzt)) {
				sqlBF.append("and not exists (select 1 ");
				sqlBF.append("           from ad3u.per_info i ");
				sqlBF.append("          where a.ryid = i.ryid )");
			} else {
				sqlBF.append("and exists (select 1 ");
				sqlBF.append("           from si3u.per_natl_cmpl i, ");
				sqlBF.append("                sicp3uws.adtxdyhd      j ");
				sqlBF.append("          where i.bcxmbh = 'SQBSCLCBH' ");
				sqlBF.append("            and a.ryid = i.ryid ");
				sqlBF.append("            and i.bcxmz = j.piid ");

				if ("1".equals(shzt)) {
					sqlBF.append("  and exists (select 1 ");//加上点击计算待遇时存上的dyhsr.mod.zcc.20200116
					sqlBF.append("  from activiti.act_ru_task k ");
					sqlBF.append(" where k.proc_inst_id_ = j.piid");
					sqlBF.append("   and k.task_def_key_ like '%AdTxdyhdQyTxdyhs%') ) ");
				} else if ("2".equals(shzt)) {
					sqlBF.append("            and j.dyhsr is not null  ");
					sqlBF.append("            and j.dyfhr is null  ");
					sqlBF.append("and not exists (select 1 ");//排除点击计算待遇时存上的dyhsr.mod.zcc.20200116
					sqlBF.append("  from activiti.act_ru_task k ");
					sqlBF.append(" where k.proc_inst_id_ = j.piid");
					sqlBF.append("   and k.task_def_key_ like '%AdTxdyhdQyTxdyhs%') ) ");
				} else if ("3".equals(shzt)) {
					sqlBF.append("            and j.dyfhr is not null ) ");
				}
			}

		}
		this.sql.setSql(sqlBF.toString());
		DataStore ryxx = this.sql.executeQuery();
		
		for (int i = 0; i < ryxx.rowCount(); i++) {
			ryid = ryxx.getString(i, "ryid");
			spr = ryxx.getString(i, "spr");
			spr = HsuTools.getCzyxmByUserId(ryxx.getString(i, "spr"));
			if (spr != null && !"".equals(spr)) {
				ryxx.put(i, "spr", HsuTools.getCzyxmByUserId(spr));
			}

			if (ryid != null && !"".equals(ryid)) {
				this.sql.setSql(" select min(qsny) sccbny from si3u.per_decl where xzbz = '101' and ryid = ? and tfsbid is null and jfrq is not null ");
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					ryxx.put(i, "sccbny", dsTemp.getString(0, "sccbny"));
				}
				ryxx.put(i, "zhjlny", SiTools.getPerNatlByRyid(ryid).getString("jlgrzhnya"));
				String tcwzrbz = "0";
				sqlBF.setLength(0);
				sqlBF.append(" select substr(b.qsny, 1, 4), substr(b.zzny, 1, 4)                   ");
				sqlBF.append("   from si3u.per_move a, si3u.aged_pay_his b                         ");
				sqlBF.append("  where a.ryid = b.ryid                                              ");
				sqlBF.append("    and a.zyfx = '0'                                                 ");
				sqlBF.append("    and a.blwjbz = '1'                                               ");
				sqlBF.append("    and '1990' between substr(b.qsny, 1, 4) and substr(b.zzny, 1, 4) ");
				sqlBF.append("    and a.ryid = ?			                                       ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					tcwzrbz = "1";
				}
				ryxx.put(i, "tcwzrbz", tcwzrbz);
				// 取机关事业工作经历
				String jgsygzbs = SiTools.getPerNatlCmpl(ryid, "JGSYGZBS", "0");
				ryxx.put(i, "jgsygzbs", jgsygzbs);
				// 固定名单中单位先默认为否
				ryxx.put(i, "sfgdmdzdw", "0");
				// 取视同缴费月数
				double stjfnx = Double.valueOf(SiTools.getPerNatlCmpl(ryid, "STJFNX", "0"));
				int stjfys = (int) MathUtil.round(stjfnx * 12, 0);
				ryxx.put(i, "stjfys", stjfys);

				if (!"".equals(shzt) && shzt != null) {
					if ("0".equals(shzt)) {
						ryxx.put(i, "sctxspb", "0");
					} else {
						ryxx.put(i, "sctxspb", "1");
					}
					ryxx.put(i, "shzt", shzt);
				} else {
					this.sql.setSql(" select bcxmz from si3u.per_natl_cmpl where bcxmbh = 'SQBSCLCBH' and  ryid = ?  ");
					this.sql.setString(1, ryid);
					dsTemp = this.sql.executeQuery();
					if (dsTemp.rowCount() > 0) {
						piid = dsTemp.getString(0, "bcxmz");
						ryxx.put(i, "piid", piid);
						if (piid != null && !"".equals(piid)) {
							this.sql.setSql(" select dyhsr, dyfhr from sicp3uws.adtxdyhd where piid = ? ");
							this.sql.setString(1, piid);
							dsTemp = this.sql.executeQuery();
							if (dsTemp.rowCount() > 0) {
								dyhsr = dsTemp.getString(0, "dyhsr");
								dyfhr = dsTemp.getString(0, "dyfhr");
								if (dyhsr == null || "".equals(dyhsr)) {
									shzt = "1";
								} else if (dyhsr != null && !"".equals(dyhsr)
										&& (dyfhr == null || "".equals(dyfhr))) {
									shzt = "2";
									//查询是否存在在办流程，判断审核状态（初审点击计算待遇时，存在dyhsr）.mod.zcc.20200116
									this.sql.setSql(" select 1 from activiti.act_ru_task where proc_inst_id_ = ? and task_def_key_ like '%AdTxdyhdQyTxdyhs%' ");
									this.sql.setString(1, piid);
									DataStore dsTrue =this.sql.executeQuery();
									if(dsTrue.rowCount() > 0){
										shzt = "1";
									}
								} else if (dyfhr != null && !"".equals(dyfhr)) {
									shzt = "3";
								}
								ryxx.put(i, "sctxspb", "1");
								ryxx.put(i, "shzt", shzt);
							} 
							//不存在per_info,即未上传（更正流程开启但未上传）.mod.zcc.20200116
							this.sql.setSql(" select '1' from ad3u.per_info where ryid = ?");
							this.sql.setString(1, ryid);
							dsTemp = this.sql.executeQuery();
							if (dsTemp.rowCount() <= 0) {
								ryxx.put(i, "sctxspb", "0");
								ryxx.put(i, "shzt", "0");
							}
						}
					} else {
						this.sql.setSql(" select dyspbz from ad3u.per_info where ryid = ? ");
						this.sql.setString(1, ryid);
						dsTemp = this.sql.executeQuery();
						if (dsTemp.rowCount() > 0) {
							if ("1".equals(dsTemp.getString(0, "dyspbz"))) {
								ryxx.put(i, "sctxspb", "1");
								ryxx.put(i, "shzt", "3");
							} else {
								ryxx.put(i, "sctxspb", "0");
								ryxx.put(i, "shzt", "0");
							}
						} else {
							ryxx.put(i, "sctxspb", "0");
							ryxx.put(i, "shzt", "0");
						}
					}
					shzt = "";
				}
			}

		}
		HsuTools.genJbjgxxDataStore(ryxx, "jbjgid", "jbjgbh", "jbjgmc");
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}

	/**
	 * 方法简介.查询企业养老待遇申请详细信息
	 * 
	 * @author rzs 2019年11月18日
	 */
	public DataObject queryAdQyyldysqxxxx(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsTemp = new DataStore(), spxxDs = new DataStore(), jfzhxxDs = new DataStore(), lnzsxxDs = new DataStore(), yhxxDs = new DataStore(), ryzhxxDs = new DataStore(), jbyljmxDs = new DataStore(), btxmmxDs = new DataStore(), dybkfmxDs = new DataStore();
		DataObject rdo = new DataObject();
		String dacsrq = "", csrq = "", xb = "", jlgrzhny = "", grbh = "", sfzhm = "", ltxrq = "", jbjgid = "", ltxlb, dyxsksny, blltxny;
		// 接参数
		String ryid = para.getString("ryid");
		String rydjid = para.getString("rydjid");
		String piid = para.getString("piid");
		String shzt = para.getString("shzt");
		if (ryid == null || "".equals(ryid)) {
			this.bizException("传入的人员ID为空");
		}
		if (rydjid == null || "".equals(rydjid)) {
			this.bizException("传入的人员登记ID为空");
		}
		if (shzt == null || "".equals(shzt)) {
			this.bizException("传入的审核状态为空");
		}
		sqlBF.setLength(0);
		sqlBF.append(" select b.grbh, b.xm, b.yxzjlx, b.yxzjhm, a.shbzhm, ");
		sqlBF.append("        a.zglb, a.cjgzrq, b.hkszd, a.tblbmc, c.dwbh, ");
		sqlBF.append("        a.csrq, a.xb, c.cbdwmc dwmc,c.jbjgid, d.jjlxmx,  ");
		sqlBF.append("        d.lsgx, d.dwxz, f.zfrylb ltxlb, f.blltxny, f.gsztxbz, ");
		sqlBF.append("        f.wwhwtxbz, f.nctxbz, f.ltxrq, f.dyxsksny, f.dacsrq, ");
		sqlBF.append("        f.jdid, f.bz, f.sfzhm, f.spr, f.spsj, ");
		sqlBF.append("        f.fhr, f.fhsj ");
		sqlBF.append("   from si3u.per_reg a, ");
		sqlBF.append("        biuv.person b, ");
		sqlBF.append("        si3u.orgn_reg c, ");
		sqlBF.append("        biuv.orgn d, ");
		sqlBF.append("        si3u.retd_identity f    ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.dwdjid = c.dwdjid ");
		sqlBF.append("    and c.dwid = d.dwid ");
		sqlBF.append("    and a.ryid = f.ryid ");
		sqlBF.append("    and a.rydjid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, rydjid);
		DataStore dsperinfo = this.sql.executeQuery();
		if (dsperinfo.rowCount() == 0) {
			this.bizException("未取到该人员的基本信息！");
		}
		HsuTools.genJbjgxxDataStore(dsperinfo, "jbjgid", "jbjgbh", "jbjgmc");
		HsuTools.genSysUserDataStore(dsperinfo, "spr", "sprbh", "sprxm");
		HsuTools.genSysUserDataStore(dsperinfo, "fhr", "fhrbh", "fhrxm");

		csrq = dsperinfo.getString(0, "csrq");
		xb = dsperinfo.getString(0, "xb");
		dacsrq = dsperinfo.getString(0, "dacsrq");
		jlgrzhny = SiTools.getPerNatlByRyid(ryid).getString("jlgrzhnya");
		grbh = dsperinfo.getString(0, "grbh");
		
		sfzhm = dsperinfo.getString(0, "sfzhm");
		ltxrq = dsperinfo.getString(0, "ltxrq");
		jbjgid = dsperinfo.getString(0, "jbjgid");
		ltxlb = dsperinfo.getString(0, "ltxlb");
		dyxsksny = dsperinfo.getString(0, "dyxsksny");
		blltxny = dsperinfo.getString(0, "blltxny");
		dsperinfo.put(0, "jlgrzhny", jlgrzhny);
		int sjnl = 0;
		if (dacsrq != null && !"".equals(dacsrq)) {
			sqlBF.setLength(0);
			sqlBF.append(" select CEIL(MONTHS_BETWEEN(to_date(?, 'YYYYMM'), TO_DATE(SUBSTR(?, 1, 6), 'YYYYMM')) / 12 *  ");
			sqlBF.append("             POWER(10, 0)) / POWER(10, 0) nl                                       ");
			sqlBF.append("   from dual                                                                     ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM"));
			this.sql.setString(2, dacsrq);
			dsTemp = this.sql.executeQuery();
			sjnl = dsTemp.getInt(0, "nl");
		} else {
			if (csrq != null && !"".equals(csrq)) {
				sqlBF.setLength(0);
				sqlBF.append(" select CEIL(MONTHS_BETWEEN(to_date(?, 'YYYYMM'), TO_DATE(SUBSTR(?, 1, 6), 'YYYYMM')) / 12 *  ");
				sqlBF.append("             POWER(10, 0)) / POWER(10, 0) nl                                       ");
				sqlBF.append("   from dual                                                                     ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM"));
				this.sql.setString(2, csrq);
				dsTemp = this.sql.executeQuery();
				sjnl = dsTemp.getInt(0, "nl");
			}
		}
		dsperinfo.put(0, "sjnl", sjnl);

		// 取干部身份
		String gbsf = SiTools.getPerNatlCmpl(ryid, "SFGBSF", "");
		dsperinfo.put(0, "gbsf", gbsf);
		// 取法定退休年龄 根据离退休类别取年龄对应关系表中的数据
		sqlBF.setLength(0);
		sqlBF.append(" select ylzdjfys, fdtxnl         ");
		sqlBF.append("   from ad3u.per_ltxlbynlcsb     ");
		sqlBF.append("  where ltxlb = ?                ");
		sqlBF.append("    and sfgbsf = ?               ");
		sqlBF.append("    and xb = ?                   ");
		sqlBF.append("    and xzbz = ?                 ");
		sqlBF.append("    and ? between qsrq and zzrq  ");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ltxlb);
		this.sql.setString(2, gbsf);
		this.sql.setString(3, xb);
		this.sql.setString(4, "101");
		this.sql.setString(5, blltxny);
		
		dsTemp = this.sql.executeQuery();
		int ylzdjfys = 0, fdtxnl = 0;
		if (dsTemp.rowCount() > 0) {
			ylzdjfys = dsTemp.getInt(0, "ylzdjfys");
			fdtxnl = dsTemp.getInt(0, "fdtxnl");
		}
		dsperinfo.put(0, "fdtxnl", fdtxnl);
		// 取养老最低缴费月数， 先默认120个月
		dsperinfo.put(0, "ylzdjfys", ylzdjfys);
		
		//取最早缴费年月
		sqlBF.setLength(0);
		sqlBF.append(" select min(qsny) zzjfny ");
		sqlBF.append("   from si3u.per_decl        ");
		sqlBF.append("  where ryid = ?                 ");
		sqlBF.append("    and tfsbid is null          ");
		sqlBF.append("    and jfrq is not null          ");
		sqlBF.append("    and xzbz in ('101','102')          ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		dsTemp = this.sql.executeQuery();
		String zzjfny = dsTemp.getString(0, "zzjfny");
		dsperinfo.put(0, "zzjfny", zzjfny);

		HsuTools.genJdxxDataStore(dsperinfo, "jdid", "jdbh", "jdmc");

		String tcwzrbz = "0";
		sqlBF.setLength(0);
		sqlBF.append(" select substr(b.qsny, 1, 4), substr(b.zzny, 1, 4)                   ");
		sqlBF.append("   from si3u.per_move a, si3u.aged_pay_his b                         ");
		sqlBF.append("  where a.ryid = b.ryid                                              ");
		sqlBF.append("    and a.zyfx = '0'                                                 ");
		sqlBF.append("    and a.blwjbz = '1'                                               ");
		sqlBF.append("    and '1990' between substr(b.qsny, 1, 4) and substr(b.zzny, 1, 4) ");
		sqlBF.append("    and a.ryid = ?			                                       ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		dsTemp = this.sql.executeQuery();
		if (dsTemp.rowCount() > 0) {
			tcwzrbz = "1";
		}
		dsperinfo.put(0, "tcwzrbz", tcwzrbz);
		// 取机关事业工作经历
		String jgsygzbs = SiTools.getPerNatlCmpl(ryid, "JGSYGZBS", "0");
		dsperinfo.put(0, "jgsygzbs", jgsygzbs);
		// 固定名单中单位先默认为否
		dsperinfo.put(0, "sfgdmdzdw", "0");

		DataObject pdo = new DataObject();
		DataObject rdotemp = new DataObject();
		try {
			pdo.clear();
			pdo.put("grbh", grbh);
			pdo.put("shbzhm", sfzhm);
			rdotemp = LocalServiceClient.invokeService("ICAUService", "queryAuthInfo", pdo);
		} catch (Exception e) {
			this.bizException(e.getMessage());
		}
		String errflag = rdotemp.getString("errflag");
		String errtext = rdotemp.getString("errtext");
		if (!"0".equals(errflag)) {
			this.bizException(errtext);
		}
		DataStore dsgsjdjg = rdotemp.getDataStore("jdinfods");
		// 循环只取gsjdslxm 为08和11的 因病或者退职劳动能力鉴定
		//增加06、12、20、21 供养亲属劳动能力鉴定、委托劳动能力鉴定(病伤)、医疗期满劳动能力鉴定、职工退休劳动能力鉴定
		for (int i = dsgsjdjg.rowCount() - 1; i >= 0; i--) {
			String gsjdslxm = dsgsjdjg.getString(i, "gsjdslxm");
			if ("06,08,11,12,20,21".indexOf(gsjdslxm) < 0) {
				dsgsjdjg.delRow(i);
				continue;
			}
			String jdrq = dsgsjdjg.getDateToString(i, "jdrq", "yyyyMMdd");
			dsgsjdjg.put(i, "jdrq", jdrq);
		}
		dsgsjdjg.sort("gsjdslxm");
		// 取退休资格审批信息
		String yqtxyy = SiTools.getPerNatlCmpl(ryid, "YQTXYY", "");
		String splb = SiTools.getPerNatlCmpl(ryid, "TXZGQRLB", "");
		String ntxrq = SiTools.getPerNatlCmpl(ryid, "LTXRQ", "");
		String pzzysj = SiTools.getPerNatlCmpl(ryid, "PZZYSJ", "");
		String pzzyjg = SiTools.getPerNatlCmpl(ryid, "PZZYJG", "");

		DataStore dstxzgspxx = new DataStore();

		if (splb != null && !"".equals(splb)) {
			String[] splbArr = splb.split(",");
			for (int i = 0; i < splbArr.length; i++) {
				if ("1".equals(splbArr[i])) {
					splb = "企业军转干退休资格审批";
					dstxzgspxx.addRow();
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "pzzysj", pzzysj);
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "pzzyjg", pzzyjg);
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "ntxrq", ntxrq);
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "splb", splb);
				} else if ("2".equals(splbArr[i])) {
					splb = "企业特殊工种退休资格审批";
					dstxzgspxx.addRow();
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "ntxrq", ntxrq);
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "splb", splb);
				} else if ("3".equals(splbArr[i])) {
					splb = "企业事业转企退休资格审批";
					dstxzgspxx.addRow();
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "ntxrq", ntxrq);
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "splb", splb);
				} else if ("4".equals(splbArr[i])) {
					splb = "企业延期退休资格审批";
					dstxzgspxx.addRow();
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "ntxrq", ntxrq);
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "splb", splb);
					dstxzgspxx.put(dstxzgspxx.rowCount() - 1, "yqtxyy", yqtxyy);
				}
			}
		}
		// 审批信息（工伤等标志未取）
		sqlBF.setLength(0);
		sqlBF.append(" select a.dyxsksny, b.ltxlb, b.ltxrq, dyxsksny dyscffny      ");
		sqlBF.append("   from ad3u.per_info a, ad3u.emp_info b  ");
		sqlBF.append("  where a.ryid = b.ryid                   ");
		sqlBF.append("    and a.ryid = ?                          ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		spxxDs = this.sql.executeQuery();
		// 检测退休情况
		this.sql.setSql(" select nctxbz , gsztxbz, wwhwtxbz from si3u.retd_identity where ryid = ? ");
		this.sql.setString(1, ryid);
		dsTemp = this.sql.executeQuery();
		String nctxbz = "0";
		String gsztxbz = "0";
		String wwhwtxbz = "0";
		if (dsTemp.rowCount() > 0) {
			gsztxbz = dsTemp.getString(0, "gsztxbz");
			wwhwtxbz = dsTemp.getString(0, "wwhwtxbz");
			nctxbz = dsTemp.getString(0, "nctxbz");
		}
		spxxDs.put(0, "gsztxbz", gsztxbz);
		spxxDs.put(0, "wwhwtxbz", wwhwtxbz);
		spxxDs.put(0, "nctxbz", nctxbz);

		// 取缴费年限信息
		this.sql.setSql(" select min(qsny) qsny, max(zzny) zzny from si3u.per_decl where ryid = ? and jfrq is not null and tfsbid is null and xzbz in('101','102') ");
		this.sql.setString(1, ryid);
		dsTemp = this.sql.executeQuery();
		String yljfqsny = dsTemp.getString(0, "qsny");
		String yljfzzny = dsTemp.getString(0, "zzny");

		rdo.clear();
		rdo.put("ryid", ryid);
		rdo.put("ltxrq", ltxrq);
		rdo.put("jlgrzhny", jlgrzhny);
		rdo.put("ltxlb", ltxlb);
		rdo.put("dyxsksny", dyxsksny);
		rdo = iGetNxInfo4ZzACO.doEntry(jbjgid, rdo);
		double stjfnx = rdo.getDouble( "stjfnx");
		double zhqnx = rdo.getDouble( "zhqjfnx");
		double zhhnx = rdo.getDouble( "zhhjfnx");
		int jzqjfys = (int) MathUtil.round(zhqnx * 12, 0);
		int jzhjfys = (int) MathUtil.round(zhhnx * 12, 0);
		int stjfys = (int) MathUtil.round(stjfnx * 12, 0);

 		jzqjfys = jzqjfys - stjfys;
		// 取养老累计缴费月数	
		sqlBF.setLength(0);
		sqlBF.append(" select a.qsny, a.zzny, nvl(a.grjfjs,0) grjfjs, a.sbfsyy ");
		sqlBF.append("	 from si3u.per_decl a ");
		sqlBF.append("  where a.xzbz in ('101', '102', '109') ");
		sqlBF.append("	  and a.jfrq is not null ");
		sqlBF.append("	  and a.ryid = ? ");
		sqlBF.append("	  and a.tfsbid is null ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);

		dsTemp = this.sql.executeQuery();
		PerDeclVAPBPO iPerDeclVAPBPO = this.newBPO(PerDeclVAPBPO.class);
		int ylljjfys = iPerDeclVAPBPO.getJfysByDsDecl(dsTemp);
		ylljjfys = ylljjfys + stjfys;
		dsperinfo.put(0, "ylljjfys", ylljjfys);
		dsperinfo.put(0, "stjfys", stjfys);
		dsperinfo.put(0, "jzqjfys", jzqjfys);

		if ("2".equals(shzt) || "3".equals(shzt)) {
			// 发放账号信息
			DataObject perInfo = AdTools.getPerInfoByRyid(ryid);
			String yhhm = perInfo.getString("yhhm");
			String yhzh = perInfo.getString("yhzh");
			String yhmc = perInfo.getString("yhmc");
			String dfjglb = perInfo.getString("dfjglb");
			String dfjgid = perInfo.getString("dfjgid");
			String dfjgmc = "";
			String dfjgbh = "";
			if (dfjglb != null && !"".equals(dfjglb)) {
				if ("B".equals(dfjglb)) {
					// 单位代发
					sqlBF.setLength(0);
					sqlBF.append(" select cbdwmc dfjgmc, dwbh dfjgbh ");
					sqlBF.append("   from si3u.orgn_reg              ");
					sqlBF.append("  where dwdjid = ?                 ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, dfjgid);
					DataStore dsDfjgMc = this.sql.executeQuery();

					if (dsDfjgMc.rowCount() <= 0) {
						dfjgmc = "";
						dfjgbh = "";
					} else {
						dfjgmc = dsDfjgMc.getString(0, "dfjgmc");
						dfjgbh = dsDfjgMc.getString(0, "dfjgbh");
					}
				} else if ("G".equals(dfjglb)) {
					// 代发机构代发
					sqlBF.setLength(0);
					sqlBF.append(" select dfjgmc, dfjgbh ");
					sqlBF.append("   from be3u.provide_natl        ");
					sqlBF.append("  where dfjgid = ?               ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, dfjgid);
					DataStore dsDfjgMc = this.sql.executeQuery();

					if (dsDfjgMc.rowCount() <= 0) {
						dfjgmc = "";
						dfjgbh = "";
					} else {
						dfjgmc = dsDfjgMc.getString(0, "dfjgmc");
						dfjgbh = dsDfjgMc.getString(0, "dfjgbh");
					}
				} else {
					dfjgmc = "";
					dfjgbh = "";
				}
			} else {
				// 青岛默认代发机构发放
				dfjglb = "G";
			}
			yhxxDs.addRow();
			yhxxDs.put(0, "yhhm", yhhm);
			yhxxDs.put(0, "yhzh", yhzh);
			yhxxDs.put(0, "yhmc", yhmc);
			yhxxDs.put(0, "dfjgid", dfjgid);
			yhxxDs.put(0, "dfjglb", dfjglb);
			yhxxDs.put(0, "dfjgbh", dfjgbh);
			yhxxDs.put(0, "dfjgmc", dfjgmc);

			if (piid != null && !"".equals(piid)) {
				//审批信息
				sqlBF.setLength(0);
				sqlBF.append(" select cjgzrq, yljfqsny, yljfzzny, jlgrzhny, ltxlb, ");
				sqlBF.append("        ltxrq, dyxsksny, xzzw, zyjszwjb, tsgzbs, ");
				sqlBF.append("        dacsrq, dfjglb, dfjgid, yhzh, yhmc, ");
				sqlBF.append("        yhhm, dyhsr, dyhssj, dyfhr, dyfhsj, ");
				sqlBF.append("        wwhwtxbz, gsztxbz, to_char(slsj, 'yyyyMM') dyscffny ");
				sqlBF.append("   from sicp3uws.adtxdyhd ");
				sqlBF.append("  where piid = ? ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, piid);
				spxxDs = this.sql.executeQuery();
				if (spxxDs.rowCount() <= 0) {
					this.bizException("不存在工单编号为【" + piid + "】的工单信息");
				}
				spxxDs = HsuTools.genSysUserDataStore(spxxDs, "dyhsr", "jbrbh", "csrname");
				spxxDs = HsuTools.genSysUserDataStore(spxxDs, "dyfhr", "jbrbh", "fsrname");
				ltxrq = spxxDs.getString(0, "ltxrq");
				
				//检测是否年初退休
				pdo.clear();
				pdo.put("ryid", ryid);
				pdo.put("ltxrq", ltxrq);
				AdQytxsqbscUTO iAdQytxsqbscUTO = this.newUTO(AdQytxsqbscUTO.class);
				rdo = iAdQytxsqbscUTO.doMethod(jbjgid, "checkSfnctx", pdo, this.getUser());
				nctxbz = rdo.getString("nctxbz");
				spxxDs.put(0, "nctxbz", nctxbz);
				
				// 取历年指数信息
				sqlBF.setLength(0);
				sqlBF.append(" select nf, zslx, jfys, spgz, jfjs, ");
				sqlBF.append("        zs, yjys, jrzsnxbz ");
				sqlBF.append("   from sicp3uws.adtxdyhd_nzs ");
				sqlBF.append("  where piid = ? ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, piid);
				lnzsxxDs = this.sql.executeQuery();
				lnzsxxDs = lnzsxxDs.sort("nf");
				double pjzs = 0;
//				double zs_sum = 0;
//				int count = 0;
//				//循环计算平均指数
//				for (int i = 0; i < lnzsxxDs.rowCount(); i++) {
//					double zs = lnzsxxDs.getDouble(i, "zs");
//					zs_sum = MathUtil.round(zs_sum + zs, 3);
//					count++;
//				}
//				
//				if (count != 0) {
//					pjzs = MathUtil.round(zs_sum / count ,  3);
//				}
				
				jfzhxxDs.addRow();
				jfzhxxDs.put(0, "yljfqsny", yljfqsny);
				jfzhxxDs.put(0, "yljfzzny", yljfzzny);
				jfzhxxDs.put(0, "jlgrzhny", jlgrzhny);
				jfzhxxDs.put(0, "jzqjfys", jzqjfys);
				jfzhxxDs.put(0, "jzhjfys", jzhjfys);
				jfzhxxDs.put(0, "stjfys", stjfys);

				
				// 取待遇计算结果
				this.sql.setSql(" select dyxmbh, dyxmz from sicp3uws.adtxdyhd_calchis where piid = ? ");
				this.sql.setString(1, piid);
				DataStore dsCalcHis = this.sql.executeQuery();
				double ltxszhze = 0,pjgz_new = 0;
				// 组装指数界面数据
				for (int i = 0; i < dsCalcHis.rowCount(); i++) {
					String dyxmbh = dsCalcHis.getString(i, "dyxmbh");
					double dyxmz = dsCalcHis.getDouble(i, "dyxmz");
					if ("PJZS".equals(dyxmbh)) {
						pjzs = dyxmz;
					}else if("6063".equals(dyxmbh)){//个人账户总额
						ltxszhze = dyxmz;
					}else if("606538".equals(dyxmbh)){// 新办法指数化平均工资
						pjgz_new = dyxmz;
					}
				}
				jfzhxxDs.put(0, "pjzs", pjzs);
				
				//2013年新办法计算时，精确判断当时是否年初退休.mod.zcc.20200116
				if("2013".compareTo(ltxrq.substring(0,4))<=0){
					int ad301008 = Integer.valueOf(SiTools.getPara(jbjgid, "ad301008"));//养老金精确度
					String preyear = DateUtil.addMonthToString(ltxrq.substring(0, 4), "yyyy", -12);
					// 取离退休日期社平工资
					pdo.clear();
					pdo.put("xzbz", "101");
					pdo.put("nf", preyear);
					pdo.put("lx", "month");
					pdo.put("type", "2");
					pdo.put("ryid", ryid);
					double pjgz = this.iGetAvgSalary4JfACO
						.doEntry(jbjgid, pdo)
						.getDouble("pjgz");
					pjgz = MathUtil.round(pjgz * pjzs, ad301008);
					if(pjgz_new == pjgz){
						nctxbz = "0";
					}else{
						nctxbz = "1";
					}
				}
				 spxxDs.put(0, "nctxbz", nctxbz);
				
				// 取离退休日期上年社平工资
				String preyear = DateUtil.addMonthToString(ltxrq.substring(0, 4), "yyyy", -12);
				if ("1".equals(nctxbz)) {
					preyear = DateUtil.addMonthToString(preyear, "yyyy", -12);

					String ad3u1135 = SiTools.getPara(jbjgid, "ad3u1135", "0"); // 2020年使用2017年社平工资计算临时待遇标志 sjx 2020-06-18
					if ("1".equals(ad3u1135) && "2020".equals(ltxrq.substring(0, 4))) {
						preyear = "2017";
					}
				}
				pdo.clear();
				pdo.put("xzbz", "101");
				pdo.put("nf", preyear);
				pdo.put("lx", "month");
				pdo.put("type", "2");
				pdo.put("ryid", ryid);
				double pjgz_pre = iGetAvgSalary4JfACO.doEntry(jbjgid, pdo)
					.getDouble("pjgz");
				ryzhxxDs.addRow();
				ryzhxxDs.put(0, "ltxszhze", ltxszhze);
				ryzhxxDs.put(0, "txsndzgypjgz", pjgz_pre);

				// 历年指数信息
				// 取缴费年限信息
				sqlBF.setLength(0);
				sqlBF.append(" select zhqnx, zhhnx, tqtxnx, zhzje grzhze, grjze grzhgr,  ");
				sqlBF.append("        zsjze grzhzs, stjfnx, sjjfnx                       ");
				sqlBF.append("   from sicp3uws.adtxdyhd_empinfo                   ");
				sqlBF.append("  where piid = ?                                    ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, piid);
				DataStore dsEmpInfo = this.sql.executeQuery();

				// 基本养老金明细
				sqlBF.setLength(0);
				sqlBF.append("  select a.btbh, a.btje, a.qsny ksny, b.btmc               ");
				sqlBF.append("   from sicp3uws.adtxdyhd_monthstd a, ad3u.giv_item b      ");
				sqlBF.append("  where a.piid = ?                                         ");
				sqlBF.append("    and a.btbh = b.btbh                                    ");
				sqlBF.append("    and a.czdkbtbz is null                                 ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, piid);
				DataStore dsjbyljxx = this.sql.executeQuery();
				for (int i = 0; i < dsjbyljxx.rowCount(); i++) {
					String btbh = dsjbyljxx.getString(i, "btbh");
					double btje = dsjbyljxx.getDouble(i, "btje");
					if (btje != 0) {
						pdo.clear();
						pdo.put("btbh", btbh);
						pdo.put("ryid", ryid);
						pdo.put("nctxbz", nctxbz);
						pdo.put("jbjgid", jbjgid);
						pdo.put("dsCalcHis", dsCalcHis);
						pdo.put("dsEmpInfo", dsEmpInfo);
						DataObject dsyljjsmx = iDoCalcDyMxInfoACO.doEntry(jbjgid, pdo);
						double je = 0;
						if (dsyljjsmx.containsKey("btje")) {
							je = dsyljjsmx.getDouble("btje");
						}
						if (je > 0) {
							jbyljmxDs.addRow(dsyljjsmx);
						} else {// 调资项目通过 DoCalcDyMxInfoACO
								// 获取不到计算明细信息，所以btje>0就直接返回了 -- zkj modify
								// 2019/10/07
							jbyljmxDs.addRow(dsjbyljxx.getRow(i));
						}
					}
				}
				jbyljmxDs.sort("jsgs");
				// 补贴项目明细
				// 增加取财政四项补贴信息
				sqlBF.setLength(0);
				sqlBF.append("  select a.btbh, b.btmc, a.qsny, a.zzny, a.btje, '1' dqbz, b.ffyf  ");// mod.zcc.20191020.增加补贴有效月份ffyf
				sqlBF.append("   from sicp3uws.adtxdyhd_monthstd a, ad3u.giv_item b  ");
				sqlBF.append("  where piid = ?                                           ");
				sqlBF.append("    and czdkbtbz = '1'                                     ");
				sqlBF.append("    and a.btbh = b.btbh                                    ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, piid);
				btxmmxDs = this.sql.executeQuery();
				// 取年待遇
				sqlBF.setLength(0);
				sqlBF.append("  select a.btbh, b.btmc, a.qsnd||ffyf qsny, decode(a.zznd, null, a.zznd, a.zznd||ffyf) zzny, a.btje, '0' dqbz, b.ffyf  ");// mod.zcc.20191020.增加补贴有效月份ffyf
				sqlBF.append("		   from sicp3uws.adtxdyhd_yearstd a, ad3u.giv_item b                                                     ");
				sqlBF.append("		  where piid = ?                                                                                         ");
				sqlBF.append("		    and czdkbtbz = '1'                                                                                   ");
				sqlBF.append("		    and a.btbh = b.btbh                                                                                  ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, piid);
				btxmmxDs.combineDatastore(this.sql.executeQuery());
				// 待遇补扣发明细
				sqlBF.setLength(0);
				sqlBF.append(" select btbh, qsny, zzny, btje bkje, bz, btmc, zje bkzje  ");
				sqlBF.append("    from sicp3uws.adbfdywh_detl a                         ");
				sqlBF.append("  where  a.piid = ?                                       ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, piid);
				dybkfmxDs = this.sql.executeQuery();
				dybkfmxDs.sort("qsny");
				dybkfmxDs.sort("btbh");
			}
		}

		rdo.clear();
		rdo.put("perform", dsperinfo);
		rdo.put("dyhdperform", spxxDs);
		rdo.put("dsgsjdjg", dsgsjdjg);
		rdo.put("dstxzgspxx", dstxzgspxx);
		rdo.put("spxxds", spxxDs);
		rdo.put("zzztxform", dsperinfo);
		rdo.put("yhxxds", yhxxDs);
		rdo.put("jfzhxxds", jfzhxxDs);
		rdo.put("lnzsxxds", lnzsxxDs);
		rdo.put("ryzhxxds", ryzhxxDs);
		rdo.put("jbyljmxds", jbyljmxDs);
		rdo.put("btxmmxds", btxmmxDs);
		rdo.put("dybkfmxds", dybkfmxDs);
		return rdo;
	}
	/**
	 * 方法简介.查询企业待追回待遇
	 * 
	 * @author zcc
	 * @date 2019-11-16
	 */
	public final DataObject queryAdQydzhdycx(final DataObject para) throws Exception {
		DataObject pdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		// 接参
		String dwdjid = para.getString("dwdjid", "");
		String dzhje = para.getString("dzhje", "");
		String ryid = para.getString("ryid", "");

		sqlBF.setLength(0);
		sqlBF.append("select a.xzbz, a.qsny, a.zzny, a.btbh, a.btje,");
		sqlBF.append("       a.ye, a.yzhje, a.zhlx, a.zhrq, a.bz,");
		sqlBF.append("       b.btmc, f.grbh, c.xm, c.shbzhm, c.ryid,");
		sqlBF.append("       d.dwbh, d.cbdwmc dwmc, e.jbjgmc");
		sqlBF.append("  from ad3u.per_giv_back a,");
		sqlBF.append("       ad3u.giv_item     b,");
		sqlBF.append("       ad3u.per_info     c,");
		sqlBF.append("       si3u.orgn_reg     d,");
		sqlBF.append("       be3u.agency_natl      e,");
		sqlBF.append("       biuv.person           f");
		sqlBF.append(" where a.btbh = b.btbh");
		sqlBF.append("   and a.ryid = c.ryid");
		sqlBF.append("   and c.dwdjid = d.dwdjid");
		sqlBF.append("   and d.jbjgid = e.jbjgid");
		sqlBF.append("   and c.ryid = f.ryid");

		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and c.dwdjid = ? ");
		}
		if (dzhje != null && !"".equals(dzhje)) {
			if ("1".equals(dzhje)) {
				sqlBF.append("   and a.ye > 0 ");
			} else if ("2".equals(dzhje)) {
				sqlBF.append("   and a.ye = 0 ");
			}
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and a.ryid = ? ");
		}
		this.sql.setSql(sqlBF.toString());
		int num = 1;
		if (dwdjid != null && !"".equals(dwdjid)) {
			this.sql.setString(num++, dwdjid);
		}

		if (ryid != null && !"".equals(ryid)) {
			this.sql.setString(num++, ryid);
		}

		DataStore ds = this.sql.executeQuery();
		ds.sort("ryid");
		pdo.clear();
		pdo.put("dsinfo", ds);
		return pdo;
	}
	
	/**
	 * 方法简介.跳转到企业职幼教人员查询的JSP
	 *
	 * @author 谈杰 2019年11月16日
	 */
	public DataObject fwdAdQyzyjrycx(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();
		
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if("1".equals(ad3u1059)){
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);

		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.企业职幼教人员查询
	 * @author 谈杰
	 * @date 创建时间 2019-11-16
	 * @since V1.0
	 */
	public final DataObject queryAdQyzyjryInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore ds = new DataStore();
		
		// 接收参数
		String ryid = para.getString("ryid");
		String dwdjid = para.getString("dwdjid");
		String dyffzt = para.getString("dyffzt");
		String shhglbz = para.getString("shhglbz");
		String xzbz = para.getString("xzbz");
		String sszfrq = para.getString("sszfrq");
		String ltxlb = para.getString("ltxlb");
		String jbjgid = para.getString("jbjgid");
		String tssf = para.getString("tssf");
		String zyjrybs = para.getString("zyjrybs");
		String swqssj = para.getDateToString("swqssj", "yyyyMMdd");
		String swzzsj = para.getDateToString("swzzsj", "yyyyMMdd");
		
		if ((!"".equals(swqssj) && swqssj != null)
				&& (!"".equals(swzzsj) && swzzsj != null)) {
			if (swqssj.compareTo(swzzsj) > 0) {
				this.bizException("死亡起始时间大于死亡终止时间，请检查！");
			}
		}

		// 查询除补充信息以外的人员信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.grbh, b.xm, b.xb, b.csrq, b.shbzhm, ");
		sqlBF.append("        c.dwbh, c.cbdwmc dwmc, d.lb tfbz, b.dyffzt, b.zfrylb ltxlb, ");
		sqlBF.append("        b.dylqlb xzbz, b.dyfhsj dyhdny, b.sszfrq, '' zyjydwmc, ");
		sqlBF.append("        decode(e.ryzt, '2', e.ztfsrq, '') swsj, ");
		sqlBF.append("        sum((case ");
		sqlBF.append("          when f.btbh = 'Q432' and f.zzny is null then f.btje ");
		sqlBF.append("        else 0 ");
		sqlBF.append("          end)) zyjshbt, ");
//		sqlBF.append("        sum((case ");
//		sqlBF.append("          when f.btbh = 'Q433' and f.zzny is null then f.btje ");
//		sqlBF.append("        else 0 ");
//		sqlBF.append("          end)) zyjqnfce, ");
		sqlBF.append("        sum((case ");
		sqlBF.append("           when f.btbh = g.btbh and g.jcyljbz = '1' and f.zzny is null then f.btje ");
		sqlBF.append("        else 0 ");
		sqlBF.append("          end)) jbyljje, ");
		sqlBF.append("        sum((case ");
		sqlBF.append("          when f.zzny is null then f.btje ");
		sqlBF.append("        else 0 ");
		sqlBF.append("          end)) yljje, ");
		sqlBF.append("        h.jbjgmc, b.ryid, c.jbjgid, c.dwdjid, '查看' ckmx, b.dqdydjid dydjid ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        si3u.orgn_reg c, ");
		sqlBF.append("        si3u.orgn_tfba d, ");
		sqlBF.append("        si3u.per_natl e, ");
		sqlBF.append("        ad3u.per_giv_month_std f, ");
		sqlBF.append("        ad3u.giv_item_config g, ");
		sqlBF.append("        be3u.agency_natl h, ");
		sqlBF.append("        ad3u.per_cmpl i ");
		sqlBF.append("  where b.ryid = a.ryid ");
		sqlBF.append("    and b.dwdjid = c.dwdjid ");
		sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
		sqlBF.append("    and b.ryid = e.ryid ");
		sqlBF.append("    and b.ryid = f.ryid ");
		sqlBF.append("    and f.btbh = g.btbh ");
		sqlBF.append("    and c.jbjgid = h.jbjgid ");
		sqlBF.append("    and b.ryid = i.ryid ");
		sqlBF.append("    and c.jbjgid = g.jbjgid ");//mod.谈杰.20191118
		sqlBF.append("    and i.bcxmbh = 'ZYJRYBS' ");
		sqlBF.append("    and i.bcxmz is not null ");
		
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and b.ryid = '" + ryid + "'");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and c.dwdjid = '" + dwdjid + "'");
		}
		if(dyffzt != null && !"".equals(dyffzt)){
			sqlBF.append("   and b.dyffzt = '" + dyffzt + "'");
		}
		if (xzbz != null && !"".equals(xzbz)) {
			sqlBF.append("   and b.dylqlb = '" + xzbz + "'");
		}
		if(sszfrq != null && !"".equals(sszfrq)){
			sqlBF.append("   and b.sszfrq = '" + sszfrq + "'");
		}
		if(ltxlb != null && !"".equals(ltxlb)){
			sqlBF.append("   and b.zfrylb = '" + ltxlb + "' ");
		}
		if(jbjgid != null && !"".equals(jbjgid)){
			sqlBF.append("   and c.jbjgid = '" + jbjgid + "' ");
		}
		if (swqssj !=null && !"".equals(swqssj)){
			sqlBF.append(" and nvl(decode(e.ryzt, '2', e.ztfsrq, null),'190001') >= '" + swqssj + "' ");
		}
		if (swzzsj !=null && !"".equals(swzzsj)){
			sqlBF.append(" and nvl(decode(e.ryzt, '2', e.ztfsrq, null),'205012') <= '" + swzzsj + "' ");
		}
		// where条件中的补充信息
		if(shhglbz != null && !"".equals(shhglbz)){
			if ("1".equals(shhglbz)) {
				sqlBF.append("           and exists (select 1 ");
				sqlBF.append("                    from ad3u.per_cmpl j ");
				sqlBF.append("                   where a.ryid = j.ryid ");
				sqlBF.append("                     and j.bcxmbh = 'NRSQGLBZ' ");
				sqlBF.append("                     and j.bcxmz = '" + shhglbz + "') ");
			}else {
				sqlBF.append("           and not exists (select 1 ");
				sqlBF.append("                     from ad3u.per_cmpl j ");
				sqlBF.append("                    where a.ryid = j.ryid ");
				sqlBF.append("                      and j.bcxmbh = 'NRSQGLBZ' ");
				sqlBF.append("                      and j.bcxmz = '1') ");
			}
		}
		if(tssf != null && !"".equals(tssf)){
			tssf = "%" + tssf +"%";
			sqlBF.append("           and exists (select 1 ");
			sqlBF.append("                    from ad3u.per_cmpl j ");
			sqlBF.append("                   where a.ryid = j.ryid ");
			sqlBF.append("                     and j.bcxmbh = 'TSSF' ");
			sqlBF.append("                     and j.bcxmz like ('" + tssf + "'))");
		}
		if(zyjrybs != null && !"".equals(zyjrybs)){
			sqlBF.append("           and exists (select 1 ");
			sqlBF.append("                    from ad3u.per_cmpl j ");
			sqlBF.append("                   where a.ryid = j.ryid ");
			sqlBF.append("                     and j.bcxmbh = 'ZYJRYBS' ");
			sqlBF.append("                     and j.bcxmz = '" + zyjrybs + "') ");
		}
		sqlBF.append(" group by a.grbh, b.xm, b.xb, b.csrq, b.shbzhm, ");
		sqlBF.append("          c.dwbh, c.cbdwmc, d.lb, b.dyffzt, b.zfrylb, ");
		sqlBF.append("          b.dylqlb, b.dyfhsj, b.sszfrq, h.jbjgmc, b.ryid, ");
//		sqlBF.append("          c.jbjgid, c.dwdjid, e.ryzt, e.ztfsrq, b.dqdydjid ");
		sqlBF.append("          c.jbjgid, c.dwdjid, decode(e.ryzt, '2', e.ztfsrq, ''), b.dqdydjid ");

		this.sql.setSql(sqlBF.toString());
		ds = this.sql.executeQuery();
		
		// 循环查询职幼教人员的补充信息
		for (int i = 0; i < ds.rowCount(); i++) {
			ryid = ds.getString(i, "ryid");
			if(ryid != null && !"".equals(ryid)){
				// 职幼教取暖费差额改为在循环中查询.add.谈杰.20191118
				sqlBF.setLength(0);
				sqlBF.append(" select sum(btje) zyjqnfce ");
				sqlBF.append("   from ad3u.per_giv_year_std ");
				sqlBF.append("  where zznd is null ");
				sqlBF.append("    and btbh = 'Q433' ");
				sqlBF.append("    and ryid = ? ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsZyjqnfce = this.sql.executeQuery();
				if (dsZyjqnfce.rowCount() > 0) {
					ds.put(i, "zyjqnfce", dsZyjqnfce.getDouble(0, "zyjqnfce"));
				}
				
				sqlBF.setLength(0);
				sqlBF.append(" select bcxmz ");
				sqlBF.append("   from ad3u.per_cmpl  ");
				sqlBF.append("  where bcxmbh = 'TSSF' ");
				sqlBF.append("    and ryid = ?  ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsTssf = this.sql.executeQuery();
				if (dsTssf.rowCount() > 0) {
					ds.put(i, "tssf", dsTssf.getString(0, "bcxmz"));
				}

				sqlBF.setLength(0);
				sqlBF.append(" select bcxmz ");
				sqlBF.append("   from ad3u.per_cmpl  ");
				sqlBF.append("  where bcxmbh = 'ZYJRYBS' ");
				sqlBF.append("    and ryid = ?  ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsZyjrybs = this.sql.executeQuery();
				if (dsZyjrybs.rowCount() > 0) {
					ds.put(i, "zyjrybs", dsZyjrybs.getString(0, "bcxmz"));
				}
				
				sqlBF.setLength(0);
				sqlBF.append(" select bcxmz ");
				sqlBF.append("   from ad3u.per_cmpl  ");
				sqlBF.append("  where bcxmbh = 'JSZGZSBH' ");
				sqlBF.append("    and ryid = ?  ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsJszgzsbh = this.sql.executeQuery();
				if (dsJszgzsbh.rowCount() > 0) {
					ds.put(i, "jszgzsbh", dsJszgzsbh.getString(0, "bcxmz"));
				}
				
				sqlBF.setLength(0);
				sqlBF.append(" select bcxmz ");
				sqlBF.append("   from ad3u.per_cmpl  ");
				sqlBF.append("  where bcxmbh = 'TXSJYJGMC' ");
				sqlBF.append("    and ryid = ?  ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsTxsjyjgmc = this.sql.executeQuery();
				if (dsTxsjyjgmc.rowCount() > 0) {
					ds.put(i, "txsjyjgmc", dsTxsjyjgmc.getString(0, "bcxmz"));
				}
				
				sqlBF.setLength(0);
				sqlBF.append(" select bcxmz ");
				sqlBF.append("   from ad3u.per_cmpl  ");
				sqlBF.append("  where bcxmbh = 'ZBQYMC' ");
				sqlBF.append("    and ryid = ?  ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsZbqymc = this.sql.executeQuery();
				if (dsZbqymc.rowCount() > 0) {
					ds.put(i, "zbqymc", dsZbqymc.getString(0, "bcxmz"));
				}
				
				sqlBF.setLength(0);
				sqlBF.append(" select bcxmz ");
				sqlBF.append("   from ad3u.per_cmpl  ");
				sqlBF.append("  where bcxmbh = 'JYJGLB' ");
				sqlBF.append("    and ryid = ?  ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsJyjglb = this.sql.executeQuery();
				if (dsJyjglb.rowCount() > 0) {
					ds.put(i, "jyjglb", dsJyjglb.getString(0, "bcxmz"));
				}
				
				sqlBF.setLength(0);
				sqlBF.append(" select bcxmz ");
				sqlBF.append("   from ad3u.per_cmpl  ");
				sqlBF.append("  where bcxmbh = 'SJJTGSMC' ");
				sqlBF.append("    and ryid = ?  ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dsSjjtgsmc = this.sql.executeQuery();
				if (dsSjjtgsmc.rowCount() > 0) {
					ds.put(i, "sjjtgsmc", dsSjjtgsmc.getString(0, "bcxmz"));
				}
			}
		}
		
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ds);
		return rdo;
		
	}
	
	/**
	 * 
	  * @Description: 调用机关养新办法计算养老金接口
	  *
	  *
	  * @version: v1.0.0
	  * @author: ZKJ
	  * @date: 2019年11月20日 下午7:00:47
	 */
	public DataObject genJgylxbfsj(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		DataObject pdo = new DataObject();
		Transaction tm = TransactionManager.getTransaction();
		SM4Utils sm4 = new SM4Utils();
		//查询需要计算人员信息
		sqlBF.setLength(0);
		sqlBF.append(" select shbzhm, xm, rylb, ltxrq, nvl(zw, '') zw, ");
		sqlBF.append("        nvl(jb, '') jb, nvl(dc, '') dc, stys, sjys, txrybt,  ");
		sqlBF.append("        jfsjd, iftype                ");
		sqlBF.append("   from si0001.rsjk_20191120_temp    ");
		sqlBF.append("  where nvl(jswcbz, '0') = '0'       ");
		
		this.sql.setSql(sqlBF.toString());
		DataStore dsryxx = this.sql.executeQuery();
		
		for (int i = 0; i < dsryxx.rowCount(); i++) {
			String shbzhm = dsryxx.getString(i, "shbzhm");
			String xm = dsryxx.getString(i, "xm");
			String rylb = dsryxx.getString(i, "rylb");
			String ltxrq = dsryxx.getString(i, "ltxrq");
			String zw = dsryxx.getString(i, "zw");
			String jb = dsryxx.getString(i, "jb");
			String dc = dsryxx.getString(i, "dc");
			int stys = dsryxx.getInt(i, "stys");
			int sjys = dsryxx.getInt(i, "sjys");
			double txrybt = dsryxx.getDouble(i, "txrybt");
			String jfsjd = dsryxx.getString(i, "jfsjd");
			String iftype = dsryxx.getString(i, "iftype");
			if (zw == null) {
				zw = "";
			}
			if (jb == null) {
				jb = "";
			}
			if (dc == null) {
				dc = "";
			}
			
			//组装入参
			JSONObject jsontemp = new JSONObject();
			jsontemp.put("data01", shbzhm);
			jsontemp.put("data02", xm);
			jsontemp.put("data03", rylb);
			jsontemp.put("data04", ltxrq);
			jsontemp.put("data05", zw);
			jsontemp.put("data06", jb);
			jsontemp.put("data07", dc);
			jsontemp.put("data08", stys);
			jsontemp.put("data09", sjys);
			jsontemp.put("data10", txrybt);
			jsontemp.put("data11", jfsjd);
			jsontemp.put("data12", "");
			
			String paramJson = jsontemp.toString();
			//加密
		    paramJson = sm4.getEncStr_GBK(paramJson, "FOMfmeF8Us2Y99wH");
		    paramJson = java.net.URLEncoder.encode(paramJson, "utf-8");
			
		    iftype = sm4.getEncStr_GBK(iftype, "FOMfmeF8Us2Y99wH");
		    iftype = java.net.URLEncoder.encode(iftype, "utf-8");
		
		    pdo.clear();
		    pdo.put("paramJson", paramJson);
		    pdo.put("iftype", iftype);
		    pdo.put("rsxtid", "3752");
		    try {
		    	  AdXbfjfyljRsjkSIO sio = new AdXbfjfyljRsjkSIO();
				  sio.doMethod(this.getBizInstitution(), "getXbfjfyljRsjk", pdo, this.getUser());
		    }catch (Exception e) {
		    	String errifno = e.getMessage();
		    	if (e.getMessage().length() > 1000) {
		    		errifno = errifno.substring(0, 500);
		    	}
				this.sql.setSql(" update si0001.rsjk_20191120_temp  set jswcbz = '2', retmsg = ?  where shbzhm = ? and xm = ? ");
				this.sql.setString(1, errifno);
				this.sql.setString(2, shbzhm);
				this.sql.setString(3, xm);
				this.sql.executeUpdate();
				
				tm.commit();
		    	continue;
			}
		  
		    //循环完将该shbzhm对应的数据标志更新为1
		    this.sql.setSql(" update si0001.rsjk_20191120_temp  set jswcbz = '1' where shbzhm = ? and xm = ? ");
		    this.sql.setString(1, shbzhm);
		    this.sql.setString(2, xm);
		    this.sql.executeUpdate();
		    tm.commit();
		}
		return null;
	}

	/**
	 * 
	 * 方法简介.单位人员发放渠道信息查询获取经办机构
	 * 
	 * @author sjx 2019-11-26
	 */
	public DataObject fwdAddwryffqdxxcx(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String biz = para.getString("biz");
		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		rdo.put("jbjgid", biz);
		rdo.put("biz", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}

	/**
	 * 方法简介.单位人员发放渠道信息查询方法
	 * 
	 * @author sjx 2019-11-26
	 */
	public final DataObject queryAddwryffqdxxcx(final DataObject para) throws Exception {
		DataObject pdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		// 接参
		String dwdjid = para.getString("dwdjid", "");
		String jbjgid = para.getString("jbjgid", "");
		String ryid = para.getString("ryid", "");

		// dwdjid、jbjgid、ryid三者不能同时为空
		if (("".equals(dwdjid) || null == dwdjid)
				&& ("".equals(jbjgid) || null == jbjgid)
				&& ("".equals(ryid) || null == ryid)) {
			this.bizException("经办机构、单位、个人不可同时为空!");
		}

		sqlBF.setLength(0);
		sqlBF.append("select a.ffxxid, c.jbjgid, d.grbh, d.xm, d.xb,");
		sqlBF.append("       c.dwbh, c.cbdwmc, b.dyffzt, b.dfjgid, '操作' cz, ");
		sqlBF.append("       a.yhzh, a.yhhm, b.dyxsksny dyfhny ");
		sqlBF.append("  from ad3u.giv_way a,");
		sqlBF.append("       ad3u.per_info b,");
		sqlBF.append("       si3u.orgn_reg c,");
		sqlBF.append("       biuv.person d ");
		sqlBF.append(" where a.ffxxid = b.ffxxid");
		sqlBF.append("   and a.ryid = b.ryid");
		sqlBF.append("   and b.dwdjid = c.dwdjid");
		sqlBF.append("   and b.ryid = d.ryid");

		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and b.dwdjid = ? ");
		}

		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and a.ryid = ? ");
		}

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("   and c.jbjgid = ? ");
		}
		this.sql.setSql(sqlBF.toString());
		int num = 1;
		if (dwdjid != null && !"".equals(dwdjid)) {
			this.sql.setString(num++, dwdjid);
		}

		if (ryid != null && !"".equals(ryid)) {
			this.sql.setString(num++, ryid);
		}

		if (jbjgid != null && !"".equals(jbjgid)) {
			this.sql.setString(num++, jbjgid);
		}

		DataStore ds = this.sql.executeQuery();

		// 查询经办机构名称
		ds = HsuTools.genJbjgxxDataStore(ds, "jbjgid", "jbjgbh", "jbjgmc");

		// 代发机构名称
		for (int i = 0; i < ds.rowCount(); i++) {
			String dfjgid = ds.getString(i, "dfjgid");
			String dfjgmc = HsuTools.getDfjgmc(dfjgid);
			ds.put(i, "dfjgmc", dfjgmc);
		}

		ds.sort("ryid");
		pdo.clear();
		pdo.put("dsinfo", ds);
		return pdo;
	}

	/**
	 * 
	 * 方法简介.查询单位人员发放渠道信息查询详细
	 * 
	 * @author sjx 2019-11-26
	 */
	public final DataObject queryAddwryffqdxxcxDetl(final DataObject para) throws Exception {
		DataObject pdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		// 接参
		String ffxxid = para.getString("ffxxid");
		String dfjgmc = para.getString("dfjgmc");

		sqlBF.setLength(0);
		sqlBF.append("select b.ffqd, b.dfjglb, ? dfjgmc, a.yhhm, a.yhzh,");
		sqlBF.append("       a.khszs, a.khszshi, a.khzhmc, a.lqrxm, a.lqrzjlx, ");
		sqlBF.append("       a.lqrzjhm, a.dz, a.yzbm ");
		sqlBF.append("  from ad3u.giv_way a,");
		sqlBF.append("       ad3u.per_info b ");
		sqlBF.append(" where a.ffxxid = b.ffxxid ");
		sqlBF.append("   and a.ryid = b.ryid ");
		sqlBF.append("   and a.ffxxid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjgmc);
		this.sql.setString(2, ffxxid);
		DataStore ds = this.sql.executeQuery();

		if (ds.rowCount() <= 0) {
			this.bizException("未查询到该人的发放渠道信息，请检查！");
		}

		// 查询开户所在省名称
		for (int i = 0; i < ds.rowCount(); i++) {
			String khszs = ds.getString(i, "khszs");
			this.sql.setSql("select xzqhmc from be3u.district_natl where xzqhdm = ? ");
			this.sql.setString(1, khszs);
			DataStore dsXzqhmc = this.sql.executeQuery();

			if (dsXzqhmc.rowCount() > 0) {
				String khszsmc = dsXzqhmc.getString(0, "xzqhmc");
				ds.put(i, "khszsmc", khszsmc);
			} else {
				ds.put(i, "khszsmc", khszs);
			}
		}

		pdo.clear();
		pdo.put("dsinfo", ds);
		return pdo;
	}
	
	/**
	 * 查询到龄人员信息  单位汇总
	 * 查询各单位下档案出生日期起，男满60，女55的
	 * 
	 * @author lixinyu 2019年11月26日
	 */
	public DataObject queryAdDlryInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		String querylogid = QueryLogTool.saveQueryLog("到龄人员退休情况统计", "职工养老支付-到龄人员退休情况统计", this.getUser().getUserid(), para);

		String jbjgid = this.getBizInstitution();
		String dwdjid = para.getString("dwdjid");
		String dwxz = para.getString("dwxz");
		dwxz = HsuTools.replaceC2QCQ(dwxz);
		jbjgid = jbjgid + "%";

		SPrompt prompt = SPromptUtil.getSPrompt();

		sqlBF.setLength(0);
		sqlBF.append(" select r.dwbh, r.dwdjid, r.cbdwmc dwmc ");
		sqlBF.append("   from si3u.orgn_reg r  ");
		sqlBF.append("  where r.jbjgid like ? ");
		if (dwdjid != null && !dwdjid.trim().isEmpty()) {
			sqlBF.append("  and r.dwdjid = '" + dwdjid + "' ");
		}
		if (dwxz != null && !dwxz.trim().isEmpty()) {
			sqlBF.append(" and r.cbdwxz in (").append(dwxz).append(") ");
		}
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, jbjgid);
		DataStore dwds = this.readonlysql.executeQuery();

		if (dwds.rowCount() == 0) {
			this.bizException("本社保机构不存在任何单位或者输入的单位不在本社保机构中!");
		}

		prompt.setTotalSteps(dwds.rowCount());

		dwds.sort("dwbh");
		DataStore ds_temp = new DataStore();
		for (int i = 0; i < dwds.rowCount(); i++) {
			String vdwdjid = dwds.getString(i, "dwdjid");
			String vdwmc = dwds.getString(i, "dwmc");
			String vdwbh = dwds.getString(i, "dwbh");

			prompt.moveForword(1);
			prompt.prompt("正在查询[" + vdwbh + "][" + vdwmc + "]的退休信息...");
			prompt.prompt("查询进度：第[" + (i + 1) + "]个单位/共[" + dwds.rowCount()
					+ "]个单位");

			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) txzgrs ");
			sqlBF.append("   from si3u.per_reg e  ");
			sqlBF.append("  where e.hdbz = '1'");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and exists (select '' ");
			sqlBF.append("                  from si3u.per_natl_cmpl c1 ");
			sqlBF.append("                 where c1.ryid = e.ryid ");
			sqlBF.append("                   and c1.bcxmbh = 'TXXXCJBZ' ");
			sqlBF.append("                   and c1.bcxmz = '1') ");
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("                  from si3u.per_natl_cmpl c2 ");
			sqlBF.append("                 where c2.ryid = e.ryid ");
			sqlBF.append("                   and c2.bcxmbh = 'DACSRQ' ");
			sqlBF.append("                   and c2.bcxmz <= to_char(add_months(sysdate, -12 * decode(e.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd')) ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vtxzgrs = ds_temp.getInt(0, "txzgrs");
			dwds.put(i, "txzgrs", vtxzgrs);

			// 缴费历史初审人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) csrs ");
			sqlBF.append("   from si3u.per_reg e ");
			sqlBF.append("  where e.hdbz = '1' ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and exists (select '' ");
			sqlBF.append("                  from si3u.per_natl_cmpl c1 ");
			sqlBF.append("                 where c1.ryid = e.ryid ");
			sqlBF.append("                   and c1.bcxmbh = 'JFLSCSBZ' ");
			sqlBF.append("                   and c1.bcxmz = '1') ");
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("                  from si3u.per_natl_cmpl c2 ");
			sqlBF.append("                 where c2.ryid = e.ryid ");
			sqlBF.append("                   and c2.bcxmbh = 'DACSRQ' ");
			sqlBF.append("                   and c2.bcxmz <= to_char(add_months(sysdate, -12 * decode(e.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd')) ");


			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vcsrs = ds_temp.getInt(0, "csrs");
			dwds.put(i, "csrs", vcsrs);

			// 缴费历史复审人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) fsrs ");
			sqlBF.append("   from si3u.per_reg e  ");
			sqlBF.append("  where e.hdbz = '1' ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and exists (select '' ");
			sqlBF.append("                  from si3u.per_natl_cmpl c1 ");
			sqlBF.append("                 where c1.ryid = e.ryid ");
			sqlBF.append("                   and c1.bcxmbh = 'JFLSFSBZ' ");
			sqlBF.append("                   and c1.bcxmz = '1') ");
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("                  from si3u.per_natl_cmpl c2 ");
			sqlBF.append("                 where c2.ryid = e.ryid ");
			sqlBF.append("                   and c2.bcxmbh = 'DACSRQ' ");
			sqlBF.append("                   and c2.bcxmz <= to_char(add_months(sysdate, -12 * decode(e.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd')) ");
			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vfsrs = ds_temp.getInt(0, "fsrs");
			dwds.put(i, "fsrs", vfsrs);

			// 减员人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) jyrs ");
			sqlBF.append("   from si3u.per_reg e  ");
			sqlBF.append("  where e.hdbz = '1' ");
			sqlBF.append("    and e.rydjlb in ('A0B','A0C','A0D') ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and exists (select 1 ");
			sqlBF.append("                  from si3u.per_natl_cmpl c2 ");
			sqlBF.append("                 where c2.ryid = e.ryid ");
			sqlBF.append("                   and c2.bcxmbh = 'DACSRQ' ");
			sqlBF.append("                   and c2.bcxmz <= to_char(add_months(sysdate, -12 * decode(e.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd')) ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vjyrs = ds_temp.getInt(0, "jyrs");
			dwds.put(i, "jyrs", vjyrs);

			// 账户结清人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(distinct a.rydjid) zhjqrs ");
			sqlBF.append("   from si3u.aged_settle a, ");
			sqlBF.append("        si3u.per_reg p ");
			sqlBF.append("  where a.ryid = p.ryid ");
			sqlBF.append("    and p.dwdjid = ? ");
			sqlBF.append("    and not exists (select '1' ");
			sqlBF.append("                      from si3u.aged_pay_his b ");
			sqlBF.append("                     where a.ryid = b.ryid ");
			sqlBF.append("                       and b.btcxlnt is null ");
			sqlBF.append("                       and b.btbntcx is null) ");
			sqlBF.append("    and not exists (select '1' ");
			sqlBF.append("                      from si3u.aged_account_sum e ");
			sqlBF.append("                     where a.ryid = e.ryid) ");
			sqlBF.append("    and exists (select '1' ");
			sqlBF.append("                  from si3u.per_natl_cmpl c2 ");
			sqlBF.append("                 where p.ryid = c2.ryid ");
			sqlBF.append("                   and c2.bcxmbh = 'DACSRQ' ");
			sqlBF.append("                   and c2.bcxmz <= to_char(add_months(sysdate, -12 * decode(p.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd')) ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vzhjqrs = ds_temp.getInt(0, "zhjqrs");
			dwds.put(i, "zhjqrs", vzhjqrs);

			// 退休新增人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) txxzrs ");
			sqlBF.append("   from ad3u.emp_info e, ");
			sqlBF.append("        ad3u.per_info p, ");
			sqlBF.append("        si3u.per_reg r ");
			sqlBF.append("  where e.ryid = p.ryid ");
			sqlBF.append("    and e.ryid = r.ryid ");
			sqlBF.append("    and p.dwdjid = r.dwdjid ");
			sqlBF.append("    and r.hdbz = '1' ");
			sqlBF.append("    and p.dwdjid = ? ");
			sqlBF.append("    and e.dacsrq <= to_char(add_months(sysdate, -12 * decode(p.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd') ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vtxxzrs = ds_temp.getInt(0, "txxzrs");
			dwds.put(i, "txxzrs", vtxxzrs);

			// 退休待遇计算人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) dyjsrs ");
			sqlBF.append("   from ad3u.emp_info e, ");
			sqlBF.append("        ad3u.per_info p, ");
			sqlBF.append("        si3u.per_reg r ");
			sqlBF.append("  where p.dwdjid = ? ");
			sqlBF.append("    and e.ryid = r.ryid ");
			sqlBF.append("    and e.ryid = p.ryid ");
			sqlBF.append("    and r.hdbz = '1' ");
			sqlBF.append("    and p.dwdjid = r.dwdjid ");
			sqlBF.append("    and e.dacsrq <= to_char(add_months(sysdate, -12 * decode(p.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd') ");
			sqlBF.append("    and (exists ");
			sqlBF.append("         (select '*' from ad3u.per_giv_month_std s where e.ryid = s.ryid) or exists ");
			sqlBF.append("         (select 'x' from ad3u.per_giv_month_std_buffer b where e.ryid = b.ryid) or exists");
			sqlBF.append("         (select 'x' from ad3u.per_cal_his p where e.ryid=p.ryid and p.dyxmbh = 'PJZS_38'))   ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vdyjsrs = ds_temp.getInt(0, "dyjsrs");
			dwds.put(i, "dyjsrs", vdyjsrs);

			// 纳入统筹人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(e.ryid) nrtcrs ");
			sqlBF.append("   from ad3u.emp_info e, ");
			sqlBF.append("        ad3u.per_info p, ");
			sqlBF.append("        si3u.per_reg r ");
			sqlBF.append("  where e.ryid = p.ryid  ");
			sqlBF.append("    and e.ryid = r.ryid ");
			sqlBF.append("    and r.hdbz = '1' ");
			sqlBF.append("    and p.dwdjid = r.dwdjid ");
			sqlBF.append("    and p.dwdjid = ? ");
			sqlBF.append("    and e.dacsrq <= to_char(add_months(sysdate, -12 * decode(p.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd') ");
			sqlBF.append("    and (exists ");
			sqlBF.append("         (select '*' from ad3u.per_giv_month_std s where e.ryid = s.ryid and nvl(p.dyspbz,'0') = '1') or exists ");
			sqlBF.append("         (select 'x' from ad3u.per_giv_month_std_buffer b where e.ryid = b.ryid)) ");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vnrtcrs = ds_temp.getInt(0, "nrtcrs");
			dwds.put(i, "nrtcrs", vnrtcrs);

			// 预发人数
			sqlBF.setLength(0);
			sqlBF.append(" select count(distinct e.ryid) yfrs ");
			sqlBF.append("   from ad3u.emp_info e, ");
			sqlBF.append("        si3u.per_reg r, ");
			sqlBF.append("        ad3u.per_giv_month_std s ");
			sqlBF.append("  where e.ryid = s.ryid ");
			sqlBF.append("    and e.ryid = r.ryid ");
			sqlBF.append("    and e.dwdjid = r.dwdjid ");
			sqlBF.append("    and r.hdbz = '1' ");
			sqlBF.append("    and s.btbh = 'A1L2' ");
			sqlBF.append("    and e.dwdjid = ? ");
			sqlBF.append("    and exists (select '1' ");
			sqlBF.append("                  from ad3u.per_info p ");
			sqlBF.append("                 where p.ryid = e.ryid ");
			sqlBF.append("                   and e.dacsrq <= to_char(add_months(sysdate, -12 * decode(p.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd')) ");


			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, vdwdjid);
			ds_temp = this.readonlysql.executeQuery();

			int vyfrs = ds_temp.getInt(0, "yfrs");
			dwds.put(i, "yfrs", vyfrs);
		}

		prompt.complete();
		prompt.close();

		DataObject rdo = new DataObject();
		rdo.put("ds", dwds);
		
		QueryLogTool.updateQueryLog(querylogid, dwds.rowCount());
		
		return rdo;
	}
	
	/**
	 * 查询单位下到龄人员各项信息
	 * 
	 * @author lixinyu 2019年11月26日
	 */
	public DataObject queryAdDlryDetlInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String dwdjid = para.getString("dwdjid");
		
		if ("".equals(dwdjid) || dwdjid == null){
			this.bizException("传入参数单位登记ID为空，请检查！");
		}
		
		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.xm, p.shbzhm, nvl(p.dyspbz, 0) txfhzt, '1' txxzzt, r.rydjlb ");
		sqlBF.append("   from ad3u.per_info p,  ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.per_reg r ");
		sqlBF.append("  where p.ryid = e.ryid ");
		sqlBF.append("    and p.ryid = r.ryid ");
		sqlBF.append("    and r.hdbz = '1' ");//modify 限制活动标志   weichao 20160418
		sqlBF.append("    and p.dwdjid = r.dwdjid ");
		sqlBF.append("    and p.dwdjid = ? ");
		sqlBF.append("    and e.dacsrq <= to_char(add_months(sysdate, -12 * decode(p.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd') ");
		sqlBF.append(" union  ");
		sqlBF.append(" select p.ryid, p.xm, p.shbzhm, '0' txfhzt, '0' txxzzt, r.rydjlb ");
		sqlBF.append("   from si3u.per_natl p, ");
		sqlBF.append("        si3u.per_reg r ");
		sqlBF.append("  where r.ryid = p.ryid ");
		sqlBF.append("    and r.hdbz = '1' ");
		sqlBF.append("    and r.dwdjid = ? ");
		sqlBF.append("    and not exists ( select '' ");
		sqlBF.append("                       from ad3u.per_info p1 ");
		sqlBF.append("                      where p1.ryid = p.ryid) ");
		sqlBF.append("    and exists (select 1 ");
		sqlBF.append("                  from si3u.per_natl_cmpl c2 ");
		sqlBF.append("                 where c2.ryid = r.ryid ");
		sqlBF.append("                   and c2.bcxmbh = 'DACSRQ' ");
		sqlBF.append("                   and c2.bcxmz <= to_char(add_months(sysdate, -12 * decode(r.xb, '1', 60, '2', 55, 60)), 'yyyyMMdd')) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		this.sql.setString(2, dwdjid);
		DataStore vds = this.sql.executeQuery();

		if (vds.rowCount() == 0) {
			this.bizException("未查到任何符合条件的人员。");
		}
		
		DataStore vds_temp = new DataStore();
		String vryid = null, vzgshzt = null, vjyzt = null, vzhjqzt = null;
		String vcszt = null, vfszt = null, vdyjszt = null, vzglb = null;
		String vnrtczt = null, vyfzt = null;
		for (int vi = 0; vi < vds.rowCount(); vi++) {
			vryid = vds.getString(vi, "ryid");
			String txxzzt = vds.getString(vi, "txxzzt");
			vzglb = vds.getString(vi, "rydjlb");

			// 资格审核状态、缴费历史初审状态、缴费历史复审状态
			vzgshzt = SiTools.getPerNatlCmpl(vryid, "TXXXCJBZ", "0");
			vcszt = SiTools.getPerNatlCmpl(vryid, "JFLSCSBZ", "0");
			vfszt = SiTools.getPerNatlCmpl(vryid, "JFLSFSBZ", "0");

			if (vzgshzt == null || "".equals(vzgshzt)) {
				vzgshzt = "0";
			}

			if (vcszt == null || "".equals(vcszt)) {
				vcszt = "0";
			}

			if (vfszt == null || "".equals(vfszt)) {
				vfszt = "0";
			}
			
			// 减员状态
			if ("A0A,A0G".indexOf(vzglb) >= 0 && "0".equals(txxzzt)) {
				vjyzt = "0";
			} else {
				vjyzt = "1";
			}
			
			// 账户结清状态
			sqlBF.setLength(0);
			sqlBF.append(" select '*' ");
			sqlBF.append("   from si3u.aged_settle a ");
			sqlBF.append("  where ryid = ? ");
			sqlBF.append("    and not exists (select '1' ");
			sqlBF.append("                      from si3u.aged_pay_his d ");
			sqlBF.append("                     where a.ryid = d.ryid ");
			sqlBF.append("                       and d.btcxlnt is null ");
			sqlBF.append("                       and d.btbntcx is null ");
			sqlBF.append("                       and d.ryid = ?) ");
			sqlBF.append("    and not exists (select '1' ");
			sqlBF.append("                      from si3u.aged_account_sum e ");
			sqlBF.append("                     where a.ryid = e.ryid ");
			sqlBF.append("                       and e.ryid = ?) ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vryid);
			this.sql.setString(2, vryid);
			this.sql.setString(3, vryid);
			vds_temp = this.sql.executeQuery();

			if (vds_temp.rowCount() > 0) {
				vzhjqzt = "1";
			} else {
				vzhjqzt = "0";
			}
			// 退休待遇计算状态
			sqlBF.setLength(0);
			sqlBF.append("select ryid "); 
			sqlBF.append("  from (select ryid ");
			sqlBF.append("          from ad3u.per_giv_month_std ");
			sqlBF.append("         where ryid = ? ");
			sqlBF.append("         union all ");
			sqlBF.append("        select ryid ");
			sqlBF.append("          from ad3u.per_giv_month_std_buffer ");
			sqlBF.append("         where ryid = ? ");
			sqlBF.append("         union all ");
			sqlBF.append("        select ryid ");
			sqlBF.append("          from ad3u.per_cal_his ");
			sqlBF.append("         where dyxmbh = 'PJZS_38' ");
			sqlBF.append("           and ryid = ?) ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vryid);
			this.sql.setString(2, vryid);
			this.sql.setString(3, vryid);//增加对PJZS_38的查询，防止职工死亡后无待遇情况  LG-20160408

			vds_temp = this.sql.executeQuery();

			if (vds_temp.rowCount() > 0) {
				vdyjszt = "1";
			} else {
				vdyjszt = "0";
			}
			
			// 是否纳入统筹
			sqlBF.setLength(0);
			sqlBF.append("select ryid "); 
			sqlBF.append("  from (select a.ryid ");
			sqlBF.append("          from ad3u.per_giv_month_std a, ");
			sqlBF.append("                ad3u.per_info p ");
			sqlBF.append("         where a.ryid = p.ryid ");
			sqlBF.append("           and a.ryid = ? ");
			sqlBF.append("           and nvl(p.dyspbz,'0') = '1' ");
			sqlBF.append("         union all ");
			sqlBF.append("        select b.ryid ");
			sqlBF.append("          from ad3u.per_giv_month_std_buffer b ");
			sqlBF.append("         where b.ryid = ?) ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vryid);
			this.sql.setString(2, vryid);
			vds_temp = this.sql.executeQuery();

			if (vds_temp.rowCount() > 0) {
				vnrtczt = "1";
			} else {
				vnrtczt = "0";
			}

			// 预发状态
			sqlBF.setLength(0);
			sqlBF.append(" select 1 ");
			sqlBF.append("   from ad3u.per_giv_month_std s ");
			sqlBF.append("  where s.ryid = ? ");
			sqlBF.append("    and s.btbh = 'A1L2' ");
			
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vryid);
			vds_temp = this.sql.executeQuery();

			if (vds_temp.rowCount() > 0) {
				vyfzt = "1";
			} else {
				vyfzt = "0";
			}

			vds.put(vi, "zgshzt", vzgshzt);
			vds.put(vi, "jyzt", vjyzt);
			vds.put(vi, "zhjqzt", vzhjqzt);
			vds.put(vi, "cszt", vcszt);
			vds.put(vi, "fszt", vfszt);
			vds.put(vi, "dyjszt", vdyjszt);
			vds.put(vi, "nrtczt", vnrtczt);
			vds.put(vi, "yfzt", vyfzt);
		}

		// mod lixinyu 20191030 增加oldryid列
		vds = SiTools.addOldRyidForDs(vds);

		DataObject vdo = new DataObject();
		vdo.put("ds", vds);

		return vdo;
	}

	/**
	 * 方法简介. 新增供养人员花名册查询
	 * 
	 * @author sjx 2019-11-29
	 */
	public DataObject queryAdAddgyryhmc(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String gyrylb = "1";
		// 接参数
		String biz = para.getString("biz");
		if (biz == null || "".equals(biz)) {
			this.bizException("获取的经办机构为空");
		}
		String jbjg = "'" + biz + "01'";

		String dyqsny = para.getDateToString("dyqsny", "yyyyMM");
		String dyzzny = para.getDateToString("dyzzny", "yyyyMM");

		String csrid = para.getString("csrid", "");
		Date csqsrq = para.getDate("csqsrq");
		Date cszzrq = para.getDate("cszzrq");
		String csrname = para.getString("csrname", "");// 新增支持name查询.add.zcc.20191113

		String fsrid = para.getString("fsrid", "");
		Date fsqsrq = para.getDate("fsqsrq");
		Date fszzrq = para.getDate("fszzrq");
		String fsrname = para.getString("fsrname", "");

		String xzbz = para.getString("xzbz", "");
		String jbjgid = para.getString("jbjgid", "");

		// 检测参数、时间合法性
		if ("".equals(xzbz) || xzbz == null) {
			this.bizException("险种类型为空，请检查！");
		}
		if ((!"".equals(dyqsny) && dyqsny != null)
				&& (!"".equals(dyzzny) && dyzzny != null)) {
			if (dyqsny.compareTo(dyzzny) > 0) {
				this.bizException("离退休起始日期大于终止日期，请检查！");
			}
		}

		if (csqsrq != null && cszzrq != null) {
			if (csqsrq.compareTo(cszzrq) > 0) {
				this.bizException("初审起始日期大于终止日期，请检查！");
			}
		}
		if (fsqsrq != null && fszzrq != null) {
			if (fsqsrq.compareTo(fszzrq) > 0) {
				this.bizException("复审起始日期大于终止日期，请检查！");
			}
		}
		if (xzbz.indexOf("102") >= 0) {
			jbjg = "'" + biz + "03'";
		}
		if ("".equals(jbjgid) || jbjgid == null) {
			jbjgid = jbjg;
		}

		if ("102".equals(xzbz)) {
			gyrylb = "2";
		}

		sqlBF.setLength(0);
		sqlBF.append("select b.grbh, a.ryid, a.xm, a.xb, a.shbzhm, ");
		sqlBF.append("       c.dwbh, c.cbdwmc dwmc, a.dyxsksny dyqsny, ? gyrylb, d.gygx, ");
		sqlBF.append("       b.hkxz, nvl(d.ggbz,0) ggbz, a.dyspr csr, a.dyspsj cssj, a.dyfhr fsr, ");
		sqlBF.append("       a.dyfhsj fssj, c.jbjgid, d.swryid ");
		sqlBF.append("  from ad3u.per_info a, ");
		sqlBF.append("       biuv.person b, ");
		sqlBF.append("       si3u.orgn_reg c, ");
		sqlBF.append("       ad3u.supp_info d ");
		sqlBF.append(" where a.ryid = b.ryid  ");
		sqlBF.append("   and a.ryid = d.ryid ");
		sqlBF.append("   and a.dwdjid = c.dwdjid");
		sqlBF.append("   and a.ryid = d.ryid ");
		sqlBF.append("   and c.jbjgid in (").append(jbjgid).append(") ");

		if (!"".equals(dyqsny) && dyqsny != null) {
			sqlBF.append("  and a.dyxsksny >=  ? ");
		}
		if (!"".equals(dyzzny) && dyzzny != null) {
			sqlBF.append("  and a.dyxsksny <=  ? ");
		}
		if (!"".equals(csrname) && csrname != null) {
			sqlBF.append("  and a.dyspr in (?, ?) ");
		}
		if (csqsrq != null) {
			sqlBF.append("  and nvl(to_char(a.dyspsj,'yyyyMMdd'),'19000101') >=  ? ");
		}
		if (cszzrq != null) {
			sqlBF.append("  and nvl(to_char(a.dyspsj,'yyyyMMdd'),'19000101') <=  ? ");
		}
		if (!"".equals(fsrname) && fsrname != null) {
			sqlBF.append("  and a.dyfhr in (?, ?)");
		}
		if (fsqsrq != null) {
			sqlBF.append("  and nvl(to_char(a.dyfhsj,'yyyyMMdd'),'19000101') >=  ? ");
		}
		if (fszzrq != null) {
			sqlBF.append("  and nvl(to_char(a.dyfhsj,'yyyyMMdd'),'19000101') <=  ? ");
		}
		if (!"".equals(xzbz) && xzbz != null) {
			sqlBF.append("  and a.dylqlb = ?");
		}
		this.sql.setSql(sqlBF.toString());
		int num = 1;
		this.sql.setString(num++, gyrylb);
		if (!"".equals(dyqsny) && dyqsny != null) {
			this.sql.setString(num++, dyqsny);
		}
		if (!"".equals(dyzzny) && dyzzny != null) {
			this.sql.setString(num++, dyzzny);
		}
		if (!"".equals(csrname) && csrname != null) {
			this.sql.setString(num++, csrid);
			this.sql.setString(num++, csrname);
		}
		if (csqsrq != null) {
			this.sql.setString(num++, DateUtil.FormatDate(csqsrq, "yyyyMMdd"));
		}
		if (cszzrq != null) {
			this.sql.setString(num++, DateUtil.FormatDate(cszzrq, "yyyyMMdd"));
		}
		if (!"".equals(fsrname) && fsrname != null) {
			this.sql.setString(num++, fsrid);
			this.sql.setString(num++, fsrname);
		}
		if (fsqsrq != null) {
			this.sql.setString(num++, DateUtil.FormatDate(fsqsrq, "yyyyMMdd"));
		}
		if (fszzrq != null) {
			this.sql.setString(num++, DateUtil.FormatDate(fszzrq, "yyyyMMdd"));
		}
		if (!"".equals(xzbz) && xzbz != null) {
			this.sql.setString(num++, xzbz);
		}
		DataStore ryinfo = this.sql.executeQuery();

		for (int i = 0; i < ryinfo.rowCount(); i++) {
			String ryid = ryinfo.getString(i, "ryid");

			// 从补充信息中获取待遇计发系数
			String dyjfxs = AdTools.getPerCmpl(ryid, "DYJFXS", "1");
			double sjxsbl = StringUtil.stringToDouble(dyjfxs);
			ryinfo.put(i, "sjxsbl", sjxsbl);
		}

		// 转换经办机构名称
		HsuTools.genJbjgxxDataStore(ryinfo, "jbjgid", "jbjgbh", "jbjgmc");
		ryinfo = ryinfo.sort("dyqsny");
		// 转换审核人
		ryinfo = HsuTools.genSysUserDataStore(ryinfo, "csr", "dysprbh", "csr");
		ryinfo = HsuTools.genSysUserDataStore(ryinfo, "fsr", "dysprbh", "fsr");

		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryinfo);
		return rdo;
	}
	/**
	 *  
	  * @Description: 企業待遇申請查詢转到查看明细界面
	  * 查看明细需要查询工单表中的数据所以在这里查询 工单表中sjsj最晚的那条piid
	  *
	  * @version: v1.0.0
	  * @author: ZKJ
	  * @date: 2019年12月1日 上午11:14:30
	 */
	public DataObject fwdQyyldysqxxxxRES(DataObject para) throws Exception{
		String piid = "";
		// 接参数
		String ryid = para.getString("ryid");
		//由于重算和申请表上传用的一个工单表，所以先判断是否存在记账的工单表，存在则取第一次记账的，剩下的应该都是重算记账
		this.sql.setSql(" select a.piid from sicp3uws.adtxdyhd a,bpzone.pi_hi_view b where a.ryid = ? and a.txdyhdjzbz = '1' and a.piid = b.piid and b.pdid like 'adQytxsqbsc%' order by a.slsj ");//增加限定办理业务.mod.zcc.2020.01.02
		this.sql.setString(1, ryid);
		DataStore dsTemp = this.sql.executeQuery();
		if (dsTemp.rowCount() > 0) {
			piid = dsTemp.getString(0, "piid");
		} else {
			//不存在记账的  取受理时间最晚的那条
			this.sql.setSql(" select a.piid from sicp3uws.adtxdyhd a,bpzone.pi_hi_view b where a.ryid = ? and a.piid = b.piid and b.pdid like 'adQytxsqbsc%'  order by a.slsj desc");//增加限定办理业务.mod.zcc.2020.01.02
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				piid = dsTemp.getString(0, "piid");
			}
		}
		
		//增加返回劳鉴信息CODE.add.zcc.20200115
		this.sql.setSql(" select code value, content from icau.code_config a where a.dmbh = 'GSJDSLXM' and dbid = '130' ");
		DataStore dsGsjdslxm = this.sql.executeQuery();
		
		//工伤认定的表在数据库里面是不加后缀的
		DataStore dsjdjl = new DataStore();
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "01");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残壹级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "02");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残贰级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "03");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残叁级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "04");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残肆级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "05");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残伍级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "06");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残陆级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "07");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残柒级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "08");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残捌级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "09");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残玖级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "10");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "伤残拾级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "11");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "未达等级");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "12");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "符合完全丧失劳动能力的标准");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "13");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "符合大部分丧失劳动能力的标准");
		dsjdjl.addRow();
		dsjdjl.put(dsjdjl.rowCount() - 1, "value", "14");
		dsjdjl.put(dsjdjl.rowCount() - 1, "content", "未达到部颁鉴定标准");
		
		
		para.put("dsjdjl", dsjdjl);
		para.put("dsgsjdslxm", dsGsjdslxm);
		para.put("piid", piid);
		
		return para;
	}

	/**
	 * 方法简介.待遇补扣发查询（企业、机关） 查询方法
	 * 
	 * @author sjx 2019-11-30
	 */
	public DataObject queryDwdybkfInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String fkssq = para.getDateToString("fkssq", "yyyyMM");
		String dwdjid = para.getString("dwdjid", "");
		String xzbz = para.getString("xzbz", "");

		// 检测参数、时间合法性
		if ("".equals(xzbz) || xzbz == null) {
			this.bizException("险种类型为空，请检查！");
		}

		if ("".equals(fkssq) || fkssq == null) {
			this.bizException("费款所属期为空，请检查！");
		}

		sqlBF.setLength(0);
		sqlBF.append("select sum(b.je) je, b.dwdjid, b.ffny fkssq, b.xzbz, b.xzbz qsybz,  ");
		sqlBF.append("       a.dwbh, a.cbdwmc dwmc, a.jbjgid , '查看' cz ");
		sqlBF.append("  from si3u.orgn_reg a, ");
		sqlBF.append("	(select sum(a.btje) je, b.dwdjid, a.ffny, a.xzbz  ");
		sqlBF.append("     from ad3u.per_giv_detl_gived a, ");
		sqlBF.append("          ad3u.per_info b ");
		sqlBF.append("    where a.ffxxid = b.ffxxid  ");
		sqlBF.append("      and a.ryid = b.ryid ");
		sqlBF.append("      and a.xzbz = ? ");
		sqlBF.append("      and a.fflb in ('A','D') and nvl(a.bz, '***') not like '待遇追回产生%' ");
		sqlBF.append("      and a.fsyy = '2' ");
		sqlBF.append("      and a.ffny = ? ");

		if (!"".equals(dwdjid) && null != dwdjid) {
			sqlBF.append("  and b.dwdjid = ? ");
		}

		sqlBF.append("    group by b.dwdjid, a.ffny, a.xzbz ");
		sqlBF.append("    union all ");
		sqlBF.append("   select sum(a.btje) je, b.dwdjid, a.ffny, a.xzbz  ");
		sqlBF.append("     from ad3u.per_giv_detl_ungiv a, ");
		sqlBF.append("          ad3u.per_info b ");
		sqlBF.append("    where a.ffxxid = b.ffxxid  ");
		sqlBF.append("      and a.ryid = b.ryid ");
		sqlBF.append("      and a.xzbz = ? ");
		sqlBF.append("      and a.fflb in ('A','D') and nvl(a.bz, '***') not like '待遇追回产生%' ");
		sqlBF.append("      and a.fsyy = '2' ");
		sqlBF.append("      and a.ffny = ? ");

		if (!"".equals(dwdjid) && null != dwdjid) {
			sqlBF.append("  and b.dwdjid = ? ");
		}

		sqlBF.append("    group by b.dwdjid, a.ffny, a.xzbz) b ");
		sqlBF.append("    where a.dwdjid = b.dwdjid ");
		sqlBF.append("    group by b.dwdjid, b.ffny, b.xzbz, a.dwbh, a.cbdwmc, a.jbjgid ");

		this.sql.setSql(sqlBF.toString());
		int num = 1;
		this.sql.setString(num++, xzbz);
		this.sql.setString(num++, fkssq);
		if (!"".equals(dwdjid) && dwdjid != null) {
			this.sql.setString(num++, dwdjid);
		}
		this.sql.setString(num++, xzbz);
		this.sql.setString(num++, fkssq);
		if (!"".equals(dwdjid) && dwdjid != null) {
			this.sql.setString(num++, dwdjid);
		}

		DataStore dsOrgn = this.sql.executeQuery();

		// 转换经办机构名称
		HsuTools.genJbjgxxDataStore(dsOrgn, "jbjgid", "jbjgbh", "jbjgmc");

		DataObject rdo = new DataObject();
		rdo.put("dsorgn", dsOrgn);
		return rdo;
	}

	/**
	 * 方法简介. 人员补扣发名单查询
	 * 
	 * @author sjx 2019-11-30
	 */
	public DataObject queryDybkfPerDetl(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String fkssq = para.getDateToString("fkssq", "yyyyMM");
		String dwdjid = para.getString("dwdjid", "");
		String xzbz = para.getString("xzbz", "");

		// 检测参数、时间合法性
		if ("".equals(xzbz) || xzbz == null) {
			this.bizException("险种类型为空，请检查！");
		}

		if ("".equals(fkssq) || fkssq == null) {
			this.bizException("费款所属期为空，请检查！");
		}

		if ("".equals(dwdjid) || dwdjid == null) {
			this.bizException("单位登记ID为空，请检查！");
		}

		sqlBF.setLength(0);
		sqlBF.append("select sum(b.je) je, b.dwdjid, b.ffny fkssq, b.xzbz, b.xzbz qsybz,  ");
		sqlBF.append("       a.dwbh, a.cbdwmc dwmc, a.jbjgid , '查看' ckmx, b.ryid, ");
		sqlBF.append("       c.grbh, c.xm, c.yxzjhm , min(b.qsny) qsny, max(b.zzny) zzny,  ");
		sqlBF.append("       b.fffs, b.ffqd  ");
		sqlBF.append("  from si3u.orgn_reg a, ");
		sqlBF.append("	(select sum(a.btje) je, b.dwdjid, a.ffny, a.xzbz, a.ryid,  ");
		sqlBF.append(" 		 	min(a.yfny) qsny, max(a.yfny) zzny, nvl(a.fffs,'1') fffs, a.ffqd ");
		sqlBF.append("     from ad3u.per_giv_detl_gived a, ");
		sqlBF.append("          ad3u.per_info b ");
		sqlBF.append("    where a.ffxxid = b.ffxxid  ");
		sqlBF.append("      and a.ryid = b.ryid ");
		sqlBF.append("      and a.xzbz = ? ");
		sqlBF.append("      and a.fflb in ('A','D') and nvl(a.bz, '***') not like '待遇追回产生%' ");
		sqlBF.append("      and a.fsyy = '2' ");
		sqlBF.append("      and a.ffny = ? ");
		sqlBF.append("  	and b.dwdjid = ? ");
		sqlBF.append("    group by b.dwdjid, a.ffny, a.xzbz, a.ryid, a.fffs, a.ffqd ");
		sqlBF.append("    union all ");
		sqlBF.append("   select sum(a.btje) je, b.dwdjid, a.ffny, a.xzbz, a.ryid,  ");
		sqlBF.append(" 		 	min(a.yfny) qsny, max(a.yfny) zzny, nvl(a.fffs,'1') fffs, a.ffqd ");
		sqlBF.append("     from ad3u.per_giv_detl_ungiv a, ");
		sqlBF.append("          ad3u.per_info b ");
		sqlBF.append("    where a.ffxxid = b.ffxxid  ");
		sqlBF.append("      and a.ryid = b.ryid ");
		sqlBF.append("      and a.xzbz = ? ");
		sqlBF.append("      and a.fflb in ('A','D') and nvl(a.bz, '***') not like '待遇追回产生%' ");
		sqlBF.append("      and a.fsyy = '2' ");
		sqlBF.append("      and a.ffny = ? ");
		sqlBF.append("  	and b.dwdjid = ? ");
		sqlBF.append("    group by b.dwdjid, a.ffny, a.xzbz, a.ryid, a.fffs, a.ffqd ) b, ");
		sqlBF.append("          biuv.person c ");
		sqlBF.append("    where a.dwdjid = b.dwdjid ");
		sqlBF.append("	    and b.ryid = c. ryid ");
		sqlBF.append("    group by b.dwdjid, b.ffny, b.xzbz, a.dwbh, a.cbdwmc,  ");
		sqlBF.append("             a.jbjgid, b.ryid, c.grbh, c.xm, c.yxzjhm, b.fffs, b.ffqd ");

		this.sql.setSql(sqlBF.toString());
		int num = 1;
		this.sql.setString(num++, xzbz);
		this.sql.setString(num++, fkssq);
		this.sql.setString(num++, dwdjid);
		this.sql.setString(num++, xzbz);
		this.sql.setString(num++, fkssq);
		this.sql.setString(num++, dwdjid);

		DataStore dsPer = this.sql.executeQuery();

		// 转换经办机构名称
		HsuTools.genJbjgxxDataStore(dsPer, "jbjgid", "jbjgbh", "jbjgmc");

		DataObject rdo = new DataObject();
		rdo.put("dsper", dsPer);
		return rdo;
	}
	
	/**
	 * 方法简介.企业社会化管理服务信息统计（按经办机构）查询方法
	 *
	 * @author 谈杰 2019年12月9日
	 */
	public DataObject queryAdQyshhglfwxxtjjbjg(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String lmbz = para.getString("lmbz");
		String glbz = para.getString("glbz");
		String ggbz = para.getString("ggbz");
		String zbbz = para.getString("zbbz");
		String zzmm = para.getString("zzmm");

		sqlBF.setLength(0);
		sqlBF.append(" select d.jbjgid, e.jbjgmc, count(a.ryid) rs ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.emp_info b, ");
		sqlBF.append("        biuv.person c, ");
		sqlBF.append("        si3u.orgn_reg d, ");
		sqlBF.append("        be3u.agency_natl e ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.dwdjid = d.dwdjid ");
		sqlBF.append("    and d.jbjgid = e.jbjgid ");
		sqlBF.append("    and d.jbjgid like '%01' ");
		
		if (lmbz != null && !"".equals(lmbz)) {// 劳模
			if ("1".equals(lmbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl f ");
				sqlBF.append("                 where a.ryid = f.ryid ");
				sqlBF.append("                   and f.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and f.bcxmz like '%4%') ");
			} else if ("0".equals(lmbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl f ");
				sqlBF.append("                 where a.ryid = f.ryid ");
				sqlBF.append("                   and f.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and f.bcxmz not like '%4%') ");
			}
		}

		if (glbz != null && !"".equals(glbz)) {// 八十岁以上高龄
			if ("1".equals(glbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl f ");
				sqlBF.append("                 where a.ryid = f.ryid ");
				sqlBF.append("                   and f.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and f.bcxmz like '%1%') ");
			} else if ("0".equals(glbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl f ");
				sqlBF.append("                 where a.ryid = f.ryid ");
				sqlBF.append("                   and f.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and f.bcxmz not like '%1%') ");
			}
		}

		if (ggbz != null && !"".equals(ggbz)) {// 孤寡
			if ("1".equals(ggbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl f ");
				sqlBF.append("                 where a.ryid = f.ryid ");
				sqlBF.append("                   and f.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and f.bcxmz like '%2%') ");
			} else if ("0".equals(glbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl f ");
				sqlBF.append("                 where a.ryid = f.ryid ");
				sqlBF.append("                   and f.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and f.bcxmz not like '%2%') ");
			}
		}

		if (zbbz != null && !"".equals(zbbz)) {// 重病
			if ("1".equals(zbbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl f ");
				sqlBF.append("                 where a.ryid = f.ryid ");
				sqlBF.append("                   and f.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and f.bcxmz like '%3%') ");
			} else if ("0".equals(zbbz)) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("                  from ad3u.per_cmpl f ");
				sqlBF.append("                 where a.ryid = f.ryid ");
				sqlBF.append("                   and f.bcxmbh = 'TSRYQK' ");
				sqlBF.append("                   and f.bcxmz not like '%3%') ");
			}
		}

		if (zzmm != null && !"".equals(zzmm)) {// 政治面貌
			sqlBF.append("   and c.zzmm = '" + zzmm + "'");
		}
		sqlBF.append("  group by d.jbjgid, e.jbjgmc ");
		
		this.sql.setSql(sqlBF.toString());		
		DataStore ryxx = this.sql.executeQuery();
		ryxx.sort("jbjgid");

		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
		
	}
	/**
	 * 方法简介.查询 养老待遇短信通知名单 信息
	 * 
	 * @author zcc
	 * @date 2019-12-11
	 */
	public DataObject queryYldydxtzmdInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数

		String ryid = para.getString("ryid", "");
		String sxlx = para.getString("sxlx");// 1:退休上传业务,2:退休终止业务,3:在职一次性支付业务
		String dwdjid = para.getString("dwdjid", "");
		String jbjgid = para.getString("jbjgid", "");
		String fsrname = para.getString("fsrname", "");
		String fsrid = para.getString("fsrid", "");
		Date fsqsrq = para.getDate("fsqsrq");
		Date fszzrq = para.getDate("fszzrq");
		// 检测时间合法性
		Date currentTime = DateUtil.getDBTime();
		if (fsqsrq != null) {
			if (fsqsrq.compareTo(currentTime) > 0) {
				this.bizException("复审起始日期大于当前日期，请检查！");
			}
		}
		if (fszzrq != null) {
			if (fszzrq.compareTo(currentTime) > 0) {
				this.bizException("复审终止日期大于当前日期，请检查！");
			}
		}
		if (fsqsrq != null && fszzrq != null) {
			if (fsqsrq.compareTo(fszzrq) > 0) {
				this.bizException("复审起始日期大于终止时间，请检查！");
			}
		}

		DataStore dsPerInfo = new DataStore();
		// 退休上传信息查询
		if ("1".equals(sxlx)) {
			sqlBF.setLength(0);
			sqlBF.append("select '1' sxlx, a.ryid, a.shbzhm, a.xm, b.grbh, ");
			sqlBF.append("       b.lxrdh, c.cbdwmc dwmc, c.dwbh, c.dwdjid, '' spid");
			sqlBF.append("  from ad3u.per_info a, biuv.person b, si3u.orgn_reg c");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and a.dwdjid = c.dwdjid");
			sqlBF.append("   and a.dyspbz = '1'");
			sqlBF.append("   and a.dyffzt <> '3'");

			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ?");
			}
			if (dwdjid != null && !"".equals(dwdjid)) {
				sqlBF.append("   and a.dwdjid = ?");
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				sqlBF.append("   and c.jbjgid = ?");
			}
			if (fsrname != null && !"".equals(fsrname)) {
				sqlBF.append("   and a.dyfhr = ?");
			}
			if (fsqsrq != null) {
				sqlBF.append("   and to_char(a.dyfhsj, 'yyyyMMdd') >= to_char(?, 'yyyyMMdd')");
			}
			if (fszzrq != null) {
				sqlBF.append("   and to_char(a.dyfhsj, 'yyyyMMdd') <= to_char(?, 'yyyyMMdd')");
			}
			this.sql.setSql(sqlBF.toString());
			int index = 1;
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}
			if (dwdjid != null && !"".equals(dwdjid)) {
				this.sql.setString(index++, dwdjid);
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				this.sql.setString(index++, jbjgid);
			}
			if (fsrname != null && !"".equals(fsrname)) {
				if (fsrid != null && !"".equals(fsrid)) {
					this.sql.setString(index++, fsrid);
				} else {
					this.sql.setString(index++, fsrname);
				}
			}
			if (fsqsrq != null) {
				this.sql.setDate(index++, fsqsrq);
			}
			if (fszzrq != null) {
				this.sql.setDate(index++, fszzrq);
			}
			DataStore dsTxsc = this.sql.executeQuery();
			dsPerInfo.combineDatastore(dsTxsc);
		}
		// 退休终止信息查询
		if ("2".equals(sxlx)) {
			sqlBF.setLength(0);
			sqlBF.append("select '2' sxlx, a.ryid, a.shbzhm, a.xm, b.grbh,");
			sqlBF.append("       d.bcxmz lxrdh, c.cbdwmc dwmc, c.dwbh, c.dwdjid, '' spid");
			sqlBF.append("  from ad3u.per_info a,");
			sqlBF.append("       biuv.person       b,");
			sqlBF.append("       si3u.orgn_reg c,");
			sqlBF.append("       ad3u.per_cmpl d");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and a.dwdjid = c.dwdjid");
			sqlBF.append("   and a.ryid = d.ryid");
			sqlBF.append("   and a.dyffzt = '3'");
			sqlBF.append("   and d.bcxmbh = 'LQRLXDH'");
			sqlBF.append("   and exists (select '1'");
			sqlBF.append("          from ad3u.per_reg e");
			sqlBF.append("         where a.ryid = e.ryid");
			sqlBF.append("           and a.dwdjid = e.dwdjid");
			sqlBF.append("           and e.bljyyy in ('631', '632'))");
			sqlBF.append("   and exists (select '1'");
			sqlBF.append("          from  ad3u.per_cmpl f");
			sqlBF.append("         where f.bcxmbh = 'DYZZFSR'");
			sqlBF.append("           and a.ryid = f.ryid");
			if(fsrname != null && !"".equals(fsrname)){
				sqlBF.append("           and f.bcxmz = ?");
			}
			sqlBF.append("           )");
			sqlBF.append("   and exists (select '1'");
			sqlBF.append("          from  ad3u.per_cmpl f");
			sqlBF.append("         where f.bcxmbh = 'DYZZFSSJ'");
			sqlBF.append("           and a.ryid = f.ryid");
			if (fsqsrq != null) {
				sqlBF.append("   and f.bcxmz >= to_char(?, 'yyyyMMdd')");
			}
			if (fszzrq != null) {
				sqlBF.append("   and f.bcxmz <= to_char(?, 'yyyyMMdd')");
			}
			sqlBF.append("           )");
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ?");
			}
			if (dwdjid != null && !"".equals(dwdjid)) {
				sqlBF.append("   and a.dwdjid = ?");
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				sqlBF.append("   and c.jbjgid = ?");
			}
			
			this.sql.setSql(sqlBF.toString());
			int index = 1;
			if (fsrname != null && !"".equals(fsrname)) {
				if (fsrid != null && !"".equals(fsrid)) {
					this.sql.setString(index++, fsrid);
				} else {
					this.sql.setString(index++, fsrname);
				}
			}
			if (fsqsrq != null) {
				this.sql.setDate(index++, fsqsrq);
			}
			if (fszzrq != null) {
				this.sql.setDate(index++, fszzrq);
			}
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}
			if (dwdjid != null && !"".equals(dwdjid)) {
				this.sql.setString(index++, dwdjid);
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				this.sql.setString(index++, jbjgid);
			}
			
			DataStore dsTxsw = this.sql.executeQuery();
			dsPerInfo.combineDatastore(dsTxsw);
		}
		// 在职一次性支付信息查询
		if ("3".equals(sxlx)) {
			sqlBF.setLength(0);
			sqlBF.append("select '3' sxlx, a.ryid, a.shbzhm, a.xm, b.grbh,");
			sqlBF.append("       d.jcrlxdh lxrdh, c.cbdwmc dwmc, c.dwbh, c.dwdjid, d.spid");
			sqlBF.append("  from si3u.per_reg      a,");
			sqlBF.append("       biuv.person           b,");
			sqlBF.append("       si3u.orgn_reg     c,");
			sqlBF.append("       si3u.per_giv_exam d");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and a.ryid = d.ryid");
			sqlBF.append("   and a.rydjid = d.rydjid");
			sqlBF.append("   and a.dwdjid = c.dwdjid");
			sqlBF.append("   and d.splb in ('A01', 'A02', 'A05')  ");
			sqlBF.append("   and exists (select '1'");
			sqlBF.append("          from si3u.per_giv_once f, si3u.pay_bill g");
			sqlBF.append("         where d.spid = f.spid");
			sqlBF.append("           and f.zdlsh = g.zdlsh)");
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ?");
			}
			if (dwdjid != null && !"".equals(dwdjid)) {
				sqlBF.append("   and a.dwdjid = ?");
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				sqlBF.append("   and c.jbjgid = ?");
			}
			if (fsrname != null && !"".equals(fsrname)) {
				sqlBF.append("   and d.jbr = ?");
			}
			if (fsqsrq != null) {
				sqlBF.append("   and to_char(d.jbsj, 'yyyyMMdd') >= to_char(?, 'yyyyMMdd')");
			}
			if (fszzrq != null) {
				sqlBF.append("   and to_char(d.jbsj, 'yyyyMMdd') <= to_char(?, 'yyyyMMdd')");
			}
			this.sql.setSql(sqlBF.toString());
			int index = 1;
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}
			if (dwdjid != null && !"".equals(dwdjid)) {
				this.sql.setString(index++, dwdjid);
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				this.sql.setString(index++, jbjgid);
			}
			if (fsrname != null && !"".equals(fsrname)) {
				if (fsrid != null && !"".equals(fsrid)) {
					this.sql.setString(index++, fsrid);
				} else {
					this.sql.setString(index++, fsrname);
				}
			}
			if (fsqsrq != null) {
				this.sql.setDate(index++, fsqsrq);
			}
			if (fszzrq != null) {
				this.sql.setDate(index++, fszzrq);
			}
			DataStore dsZzycx = this.sql.executeQuery();
			dsPerInfo.combineDatastore(dsZzycx);
		}
		// dsPerInfo = HsuTools.genSysUserDataStore(dsPerInfo, "slr", "dysprbh", "slr");

		DataObject rdo = new DataObject();
		rdo.put("ds", dsPerInfo);
		return rdo;
	}
	/**
	 * 方法简介.发送短信息
	 * 
	 * @author zcc
	 * @date 2019-12-13
	 */
	public DataObject sendMessage(DataObject para) throws Exception {
		DataStore dsTemp = new DataStore();
		DataStore dsDxmd = para.getDataStore("dwMdResult");
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append(" insert into ad3u.message_info ");
		sqlBF.append("   (ryid, sxlx, fszt, sjhm, jbr, ");
		sqlBF.append("   fssj, fssbyy, fsnr, dwdjid) ");
		sqlBF.append(" values ");
		sqlBF.append("   (?, ?, ?, ?, ?, ");
		sqlBF.append("   ?, ?, ?, ?) ");

		String insert_sql = sqlBF.toString();

		Pattern pt = Pattern.compile("^[1][3,4,5,6,7,8,9][0-9]{9}$"); // 验证手机号
		DataObject pdo = new DataObject();
		DataStore dsPer = new DataStore();

		String dxmb = "",year="",month="",fsdxInfo="";
		double btje = 0.00;
		String ryid,xm,sxlx,sjhm, spid, shbzhm, dwdjid, grbh;
		for (int i = 0; i < dsDxmd.rowCount(); i++) {
			ryid = dsDxmd.getString(i, "ryid");
			xm = dsDxmd.getString(i, "xm");
			sxlx = dsDxmd.getString(i, "sxlx");
			sjhm = dsDxmd.getString(i, "lxrdh").trim();
			spid = dsDxmd.getString(i, "spid");
			shbzhm = dsDxmd.getString(i, "shbzhm");
			dwdjid = dsDxmd.getString(i, "dwdjid");
			grbh = dsDxmd.getString(i, "grbh");
			if("1".equals(sxlx)){//退休上传人员
				dxmb = "YldydxtzTxsp";
				this.sql.setSql("select dyxsksny from ad3u.per_info where ryid = ?");
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				String dyxsksny = dsTemp.getString(0, "dyxsksny");
				if(dyxsksny != null && dyxsksny.length()>5){
					year = dyxsksny.substring(0,4);
					month = dyxsksny.substring(4,6);
				}
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(btje),0) btje ");
				sqlBF.append("   from ad3u.per_giv_month_std ");
				sqlBF.append("  where ryid = ? ");
				sqlBF.append("    and ? between qsny and nvl(zzny,'999999') ");
				sqlBF.append("    and btbh not in ('A1L0','H041') ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				this.sql.setString(2, dyxsksny);
				DataStore ds = this.sql.executeQuery();

			    btje = ds.getDouble(0, "btje");
			    
			    if(btje == 0){
			    	sqlBF.setLength(0);
					sqlBF.append(" select nvl(sum(btje),0) btje ");
					sqlBF.append("   from ad3u.per_giv_month_std ");
					sqlBF.append("  where ryid = ? ");
					sqlBF.append("    and zzny is null ");
					sqlBF.append("    and btbh not in ('A1L0','H041') ");
					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, ryid);
					ds = this.sql.executeQuery();

				    btje = ds.getDouble(0, "btje");
			    }
			    pdo.clear();
			    pdo.put("xm", xm);
			    pdo.put("year", year);
			    pdo.put("month", month);
			    pdo.put("btje", btje+"");
			}
			if("2".equals(sxlx)){//退休终止死亡人员
				dxmb = "YldydxtzTxzz";
				String qsxm = AdTools.getPerCmpl(ryid, "LQRMC");
				sqlBF.setLength(0);
				sqlBF.append("select nvl(sum(a.btje), 0) btje");
				sqlBF.append("  from ad3u.per_giv_detl a, ad3u.giv_item b");
				sqlBF.append(" where a.btbh = b.btbh");
				sqlBF.append("   and b.ffzq = '5'");
				sqlBF.append("   and a.ryid = ? ");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				btje = dsTemp.getDouble(0, "btje");
				pdo.clear();
				pdo.put("qsxm", qsxm);
				pdo.put("xm", xm);
				pdo.put("btje", btje+"");
			}
			if("3".equals(sxlx)){//在职一次性人员
				dxmb = "YldydxtzZzycxzhfh";
				this.sql.setSql("select splb, fhje, jcrxm from si3u.per_giv_exam where spid = ?");
				this.sql.setString(1, spid);
				dsTemp = this.sql.executeQuery();
				String splb = dsTemp.getString(0, "splb");
				btje = dsTemp.getDouble(0, "fhje");
				String qsxm = dsTemp.getString(0, "jcrxm");
				if("A01".equals(splb)){
					dxmb = "YldydxtzZzycxfxj";
				}
				pdo.clear();
				pdo.put("qsxm", qsxm);
				pdo.put("xm", xm);
				pdo.put("btje", btje+"");
			}
			String err = "";
			if (sjhm == null || "".equals(sjhm)) {
				err += "手机号码为空;";
			} else if (!pt.matcher(sjhm).matches()) {
				err += "手机号码格式不正确;";
			} else {
				try {
					SmsUtil.sendSMS(this.getBizInstitution(), dxmb, pdo, sjhm, "**");
					fsdxInfo = SmsUtil.getMessageContentBySep(this.getBizInstitution(), dxmb, pdo);
				} catch (Exception e) {
					err += "短信发送失败：" + e.getMessage();
				}
			}
			
			this.sql.setSql(insert_sql);
			this.sql.setString(1, ryid);
			this.sql.setString(2, sxlx);
			this.sql.setString(3, "".equals(err) ? "1" : "2");
			this.sql.setString(4, sjhm);
			this.sql.setString(5, this.getUser().getUserid());
			this.sql.setDateTime(6, DateUtil.getCurrentDate());
			this.sql.setString(7, err);
			this.sql.setString(8, fsdxInfo);
			this.sql.setString(9, dwdjid);
			this.sql.executeUpdate();
			
			dsPer.put(i, "result", "".equals(err) ? "成功" : "失败");
			dsPer.put(i, "msg", err);
			dsPer.put(i, "xm", xm);
			dsPer.put(i, "sfzh", shbzhm);
			dsPer.put(i, "grbh", grbh);
			dsPer.put(i, "sjhm", sjhm);
			dsPer.put(i, "fsnr", fsdxInfo);
		}
		DataObject vdo = new DataObject();
		vdo.put("ds", dsPer);
		return vdo;
	}
	/**
	 * 方法简介.查询 养老待遇短信通知 短信发送历史信息
	 * 
	 * @author zcc
	 * @date 2019-12-13
	 */
	public DataObject queryYldydxtzDxlsInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String ryid = para.getString("ryiddx", "");
		String sxlx = para.getString("sxlxdx");// 1:退休上传业务,2:退休终止业务,3:在职一次性支付业务
		String dwdjid = para.getString("dwdjiddx", "");
		String jbjgid = para.getString("jbjgiddx", "");
		String dxfszt = para.getString("dxfszt", "");
		Date dxfsyf = para.getDate("dxfsyf");
		// 检测时间合法性
		Date currentTime = DateUtil.getDBTime();
		if (dxfsyf != null) {
			if (dxfsyf.compareTo(currentTime) > 0) {
				this.bizException("短信发送月份大于当前日期，请检查！");
			}
		}
		DataStore dsPerInfo = new DataStore();
		sqlBF.setLength(0);
		sqlBF.append("select sxlx, a.ryid, b.shbzhm, b.xm, b.grbh,");
		sqlBF.append("       a.sjhm, c.cbdwmc dwmc, c.dwbh, a.fssj, a.fszt, ");
		sqlBF.append("       a.fsnr, a.fssbyy ");
		sqlBF.append("  from ad3u.message_info a, biuv.person b, si3u.orgn_reg c");
		sqlBF.append(" where a.ryid = b.ryid");
		sqlBF.append("   and a.dwdjid = c.dwdjid");
		if (!"".equals(sxlx) && null != sxlx) {
			sqlBF.append("    and a.sxlx = ?");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and a.ryid = ?");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and a.dwdjid = ?");
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("   and c.jbjgid = ?");
		}
		if (!"".equals(dxfszt) && null != dxfszt) {
			sqlBF.append("    and a.fszt = ?");
		}
		if (null != dxfsyf) {
			sqlBF.append("    and to_char(a.fssj, 'yyyyMM') = to_char(?, 'yyyyMM')");
		}
		this.sql.setSql(sqlBF.toString());
		int index=1;
		if (!"".equals(sxlx) && null != sxlx) {
			this.sql.setString(index++, sxlx);
		}
		if (ryid != null && !"".equals(ryid)) {
			this.sql.setString(index++, ryid);
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			this.sql.setString(index++, dwdjid);
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			this.sql.setString(index++, jbjgid);
		}
		if (!"".equals(dxfszt) && null != dxfszt) {
			this.sql.setString(index++, dxfszt);
		}
		if (null != dxfsyf) {
			this.sql.setDate(index++, dxfsyf);
		}
		dsPerInfo = this.sql.executeQuery();
		dsPerInfo.sortdesc("fssj");

		DataObject rdo = new DataObject();
		rdo.put("ds", dsPerInfo);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.企业单位退休人员信息查询
	 * 
	 * @author 谈杰 2019-12-14
	 */
	public DataObject queryQydwtxryxxcx(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		
		String ryid = para.getString("ryid", "");
		String dwdjid = para.getString("dwdjid", "");
		String vbiz = para.getString("biz", "");
		
		if((ryid == null || "".equals(ryid)) && (dwdjid == null || "".equals(dwdjid))){
			this.bizException("传入的人员ID和单位登记ID同时为空，请检查！");
		}
		
		if(vbiz == null || "".equals(vbiz)){
			this.bizException("获取的经办机构为空");
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}

		sqlBF.setLength(0);
		
		sqlBF.append(" select b.grbh, b.xm, b.shbzhm, d.dwbh," );
		sqlBF.append("        d.cbdwmc, e.bcxmz, a.yhzh, c.cjgzrq, " );
		sqlBF.append("        c.ltxrq, b.hkszd, b.jtzz, b.lxrdh, " );
		sqlBF.append("        a.dyffzt, b.swrq, a.dyzzny, a.ryid, " );
		sqlBF.append("        b.lxrxm,b.sjhm,b.gddh " );
		sqlBF.append("   from ad3u.per_info a, " );
		sqlBF.append("        biuv.person   b, " );
		sqlBF.append("        ad3u.emp_info c, " );
		sqlBF.append("        si3u.orgn_reg d, " );
		sqlBF.append("        ad3u.per_cmpl e " );
		sqlBF.append("  where a.ryid = b.ryid " );
		sqlBF.append("    and a.ryid = c.ryid " );
		sqlBF.append("    and a.dwdjid = d.dwdjid " );
		sqlBF.append("    and a.ryid = e.ryid " );
		sqlBF.append("    and e.bcxmbh = 'YGZDW' " );
		
		if(ryid != null && !"".equals(ryid)){
			sqlBF.append("   and a.ryid = '" + ryid + "' ");
		}
		if(dwdjid != null && !"".equals(dwdjid)){
			sqlBF.append("   and e.bcxmz = '" + dwdjid + "' ");
			sqlBF.append("   and a.dwdjid <> '" + dwdjid + "' ");
		}

		sqlBF.append("  union all ");
		sqlBF.append(" select b.grbh, b.xm, b.shbzhm, d.dwbh, d.cbdwmc, ");
		sqlBF.append("        '' bcxmz, a.yhzh, c.cjgzrq, c.ltxrq, b.hkszd, ");
		sqlBF.append("        b.jtzz, b.lxrdh, a.dyffzt, b.swrq, a.dyzzny, ");
		sqlBF.append("        a.ryid,b.lxrxm,b.sjhm,b.gddh ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        biuv.person b, ");
		sqlBF.append("        ad3u.emp_info c, ");
		sqlBF.append("        si3u.orgn_reg d ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = c.ryid(+) ");
		sqlBF.append("    and a.dwdjid = d.dwdjid ");
		if(ryid != null && !"".equals(ryid)){
			sqlBF.append("   and a.ryid = '" + ryid + "' ");
		}
		if(dwdjid != null && !"".equals(dwdjid)){
			sqlBF.append("   and a.dwdjid = '" + dwdjid + "' ");
		}

		this.sql.setSql(sqlBF.toString());
		
		DataStore vds = this.sql.executeQuery();
		for (int i = 0; i < vds.rowCount(); i++) {
			ryid = vds.getString(i, "ryid");
			String dyzzny = vds.getString(i, "dyzzny");
			sqlBF.setLength(0);
			sqlBF.append(" select sum(btje) btje ");
			sqlBF.append("    from ad3u.per_giv_month_std ");
			sqlBF.append("   where ryid = ? ");
			sqlBF.append("     and least(nvl( ? , '204912'), '"
					+ DateUtil.dateToString(new Date(), "yyyyMM")
					+ "') between qsny and nvl(zzny, '204912') ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, dyzzny);
			DataStore ds = this.sql.executeQuery();
			if (ds.rowCount() > 0) {
				double btje = ds.getDouble(0, "btje");
				vds.put(i, "yljze", btje);
			}
		}
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", vds);
		return rdo;
	}
	
	/**
	 * 方法简介.跳转 企业待遇人员调整花名册 页面
	 * 
	 * @author 谈杰
	 * @date 2019年12月16日
	 */
	public DataObject fwdAdQydyrytzhmc(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String biz = para.getString("biz");
		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		// 只显示企业的
		for (int i = 0; i < ds.rowCount(); i++) {
			String jbjgid = ds.getString(i, "value");
			if ("03".equals(jbjgid.substring(jbjgid.length() - 2))) {
				ds.delRow(i);
				i--;
			}
		}
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.企业待遇人员调整花名册 查询
	 * 
	 * @author 谈杰
	 * @date 2019年12月17日
	 */
	public DataObject queryAdQydyrytzhmc(DataObject para) throws Exception {
		// 接参
		StringBuffer sqlBF = new StringBuffer();
		String ryid = para.getString("ryid", "");
		String sszfrq = para.getString("sszfrq", "");
		String jbjgid = para.getString("jbjgid", "");
		String csrid = para.getString("csrid", "");
		String csqsrq = para.getDateToString("csqsrq", "yyyyMMdd");
		String cszzrq = para.getDateToString("cszzrq", "yyyyMMdd");
		String fsrid = para.getString("fsrid", "");
		String fsqsrq = para.getDateToString("fsqsrq", "yyyyMMdd");
		String fszzrq = para.getDateToString("fszzrq", "yyyyMMdd");
		String tzny = para.getDateToString("tzny", "yyyyMM");
		
		// 如果前台没有选择经办机构，则取操作员有权限的经办机构
		if(jbjgid == null || "".equals(jbjgid)){
			DataStore dsJbjg = SiTools.getOperateJbjgidByUserId(this.getUser().getUserid());
			if (dsJbjg.rowCount() == 0) {
				dsJbjg = SiTools.getSjJbjgidByUserId(this.getUser());// mod.谈杰.20191112
			} 
				for (int j = 0; j < dsJbjg.rowCount(); j++) {
					// 只取企业的
					String jbjgidTemp = dsJbjg.getString(j, "value");
					if(jbjgidTemp.endsWith("01")){
						jbjgid = jbjgid + jbjgidTemp + ",";
					}
				}
				jbjgid = jbjgid.substring(0, jbjgid.length() - 1);
		}
		
		// 检测初审日期和复审日期
		if ((!"".equals(csqsrq) && csqsrq != null)
				&& (!"".equals(cszzrq) && cszzrq != null)) {
			if (csqsrq.compareTo(cszzrq) > 0) {
				this.bizException("初审起始日期大于终止日期，请检查！");
			}
		}
		
		if ((!"".equals(fsqsrq) && fsqsrq != null)
				&& (!"".equals(fszzrq) && fszzrq != null)) {
			if (fsqsrq.compareTo(fszzrq) > 0) {
				this.bizException("复审起始日期大于终止日期，请检查！");
			}
		}
		
		// 查询人员信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.grbh, b.xm, b.shbzhm, d.lb tfbz, c.dwbh, ");
		sqlBF.append("        c.cbdwmc dwmc, '101' xzbz, e.tzny, b.sszfrq, e.jbr csr, ");
		sqlBF.append("        to_char(e.jbsj, 'yyyyMMdd') cssj, e.fsr, to_char(e.fssj, 'yyyyMMdd') fssj, f.jbjgmc, '查看' cz, ");
		sqlBF.append("        b.ryid, e.dybgid ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        si3u.orgn_reg c, ");
		sqlBF.append("        si3u.orgn_tfba d, ");
		sqlBF.append("        ad3u.per_giv_std_chng e, ");
		sqlBF.append("        be3u.agency_natl f ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.dwdjid = c.dwdjid ");
		sqlBF.append("    and c.dwdjid = d.dwdjid(+) ");
		sqlBF.append("    and b.ryid = e.ryid ");
		sqlBF.append("    and c.jbjgid = f.jbjgid ");
		sqlBF.append("    and b.dylqlb = '101' ");
		sqlBF.append("    and c.jbjgid in (").append(jbjgid).append(") ");
		if(!"".equals(ryid) && ryid != null){
			sqlBF.append("  and b.ryid = '" + ryid + "' ");
		}
		
		if(!"".equals(sszfrq) && sszfrq != null){
			sqlBF.append("  and b.sszfrq = '" + sszfrq + "' ");
		}
		
		if(!"".equals(csrid) && csrid != null){
			sqlBF.append("  and e.jbr = '" + csrid + "' ");
		}
		
		if (!"".equals(csqsrq) && csqsrq != null) {
			sqlBF.append("  and nvl(to_char(e.jbsj,'yyyyMMdd'),'19000101') >=  '" + csqsrq + "' ");
		}
		
		if (!"".equals(cszzrq) && cszzrq != null) {
			sqlBF.append("  and nvl(to_char(e.jbsj,'yyyyMMdd'),'20501231') <=  '" + cszzrq + "' ");
		}
		
		if(!"".equals(fsrid) && fsrid != null){
			sqlBF.append("  and e.fsr = '" + fsrid + "' ");
		}
		
		if (!"".equals(fsqsrq) && fsqsrq != null) {
			sqlBF.append("  and nvl(to_char(e.fssj,'yyyyMMdd'),'19000101') >=  '" + fsqsrq + "' ");
		}
		
		if (!"".equals(fszzrq) && fszzrq != null) {
			sqlBF.append("  and nvl(to_char(e.fssj,'yyyyMMdd'),'20501231') <=  '" + fszzrq + "' ");
		}
		
		if(!"".equals(tzny) && tzny != null){
			sqlBF.append("  and e.tzny = '" + tzny + "' ");
		}
		this.sql.setSql(sqlBF.toString());
		DataStore ryinfo = this.sql.executeQuery();
		
		ryinfo = ryinfo.sort("ryid");
		//转换审核人
		ryinfo = HsuTools.genSysUserDataStore(ryinfo, "csr", "dysprbh", "csr");
		ryinfo = HsuTools.genSysUserDataStore(ryinfo, "fsr", "dysprbh", "fsr");
		
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryinfo);
		return rdo;
	}
	/**
	 * 方法简介.退休年龄预报 查询
	 * 
	 * @author zcc
	 * @date 2019-12-16
	 */
	public DataObject queryAdTxnlybInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String jbjgid = para.getString("jbjgid", "");
		String ltxlb = para.getString("ltxlb", "");
		String dwdjid = para.getString("dwdjid", "");
		int jlfdtxnlys = para.getInt("jlfdtxnlys", 0);
		// 检测参数
		if (ltxlb == null || "".equals(ltxlb)) {
			this.bizException("离退休类别为空，请检查！");
		}

		DataStore dsPerInfo = new DataStore();
		sqlBF.setLength(0);
		sqlBF.append("select a.ryid, a.grbh, b.xm, b.shbzhm, b.xb,");
		sqlBF.append("       c.dwbh, c.cbdwmc, d.jbjgmc, e.ltxlb,nvl(g.bcxmz, b.csrq) csrq");
		sqlBF.append("  from biuv.person              a,");
		sqlBF.append("       si3u.per_reg         b,");
		sqlBF.append("       si3u.orgn_reg        c,");
		sqlBF.append("       be3u.agency_natl         d,");
		sqlBF.append("       ad3u.per_ltxlbynlcsb e,");
		sqlBF.append("       si3u.per_natl_cmpl   f,");
		sqlBF.append("       si3u.per_natl_cmpl   g");
		sqlBF.append(" where a.ryid = b.ryid");
		sqlBF.append("   and b.hdbz = '1'");
		sqlBF.append("   and (instr(b.tblb, '101') > 0 or instr(b.tblb, '102') > 0)");
		sqlBF.append("   and b.dwdjid = c.dwdjid");
		sqlBF.append("   and c.jbjgid = d.jbjgid");
		sqlBF.append("   and b.xb in ('1','2')");
		sqlBF.append("   and b.ryid = f.ryid(+)");
		sqlBF.append("   and b.ryid = g.ryid(+)");
		sqlBF.append("   and f.bcxmbh(+) = 'SFGBSF'");
		sqlBF.append("   and g.bcxmbh(+) = 'DACSRQ'");
		sqlBF.append("   and e.ltxlb = ?");
		sqlBF.append("   and b.xb = e.xb");
		sqlBF.append("   and e.sfgbsf = nvl(f.bcxmz, '0')");
		sqlBF.append("   and instr(b.tblb, xzbz) > 0");
		sqlBF.append("   and (substr(nvl(g.bcxmz, b.csrq), 1, 2) = '19' or");
		sqlBF.append("       substr(nvl(g.bcxmz, b.csrq), 1, 2) = '20')");
		sqlBF.append("   and substr(nvl(g.bcxmz, b.csrq), 5, 2) >= '01'");
		sqlBF.append("   and substr(nvl(g.bcxmz, b.csrq), 5, 2) <= '12'");
		sqlBF.append("   and to_char(sysdate,'yyyyMMdd') between e.qsrq and e.zzrq");
		sqlBF.append("   and months_between(to_date(?, 'yyyyMM'),");
		sqlBF.append("                     si0001.char_to_date(substr(nvl(g.bcxmz, b.csrq), 1, 6), 'yyyyMM')) >=");
		sqlBF.append("       e.fdtxnl * 12");
		sqlBF.append("   and months_between(to_date(?, 'yyyyMM'),");
		sqlBF.append("                     si0001.char_to_date(substr(nvl(g.bcxmz, b.csrq), 1, 6), 'yyyyMM')) <=");
		sqlBF.append("       (e.fdtxnl * 12 + ?)");
		sqlBF.append("   and not exists");
		sqlBF.append(" (select '1' from ad3u.per_info h where b.ryid = h.ryid)");

		if (!"".equals(jbjgid) && null != jbjgid) {
			sqlBF.append("    and c.jbjgid = ?");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and c.dwdjid = ?");
		}
		
		this.sql.setSql(sqlBF.toString());
		int index = 1;
		this.sql.setString(index++, ltxlb);
		this.sql.setString(index++, DateUtil.dateToString(DateUtil.addMonth(DateUtil.getDBDate(), jlfdtxnlys), "yyyyMM"));
		this.sql.setString(index++, DateUtil.dateToString(DateUtil.addMonth(DateUtil.getDBDate(), jlfdtxnlys), "yyyyMM"));
		this.sql.setInt(index++, jlfdtxnlys);
		
		if (!"".equals(jbjgid) && null != jbjgid) {
			this.sql.setString(index++, jbjgid);
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			this.sql.setString(index++, dwdjid);
		}
		
		dsPerInfo = this.sql.executeQuery();
		//校验病退、特殊工种退休
		String ryid,grbh,shbzhm;
		DataObject pdo = new DataObject();
		DataObject rdotemp = new DataObject();
		for(int i=0; i<dsPerInfo.rowCount(); i++){
			ryid = dsPerInfo.getString(i, "ryid");
			ltxlb = dsPerInfo.getString(i, "ltxlb");
			grbh = dsPerInfo.getString(i, "grbh");
			shbzhm = dsPerInfo.getString(i, "shbzhm");
			if("A24,A4A,A54,A5D".indexOf(ltxlb) >= 0){//病退
				try {
					pdo.clear();
					pdo.put("grbh", grbh);
					pdo.put("shbzhm", shbzhm);
					rdotemp = LocalServiceClient.invokeService("ICAUService", "queryAuthInfo", pdo);
				} catch (Exception e) {
//					this.bizException(e.getMessage());
//					System.out.println(e.getMessage());
					dsPerInfo.delRow(i);
					i--;
					continue;
				}	
				String errflag = rdotemp.getString("errflag");
				String errtext = rdotemp.getString("errtext");
				if (!"0".equals(errflag)) {
//					this.bizException(errtext);
//					System.out.println(shbzhm+errtext);
					dsPerInfo.delRow(i);
					i--;
					continue;
				}
				DataStore dsgsjdjg = rdotemp.getDataStore("jdinfods");
				int find = -1;
				String jdjl ,gsjdslxm;
				//判断是否存在病退鉴定
				for(int j=0;j<dsgsjdjg.rowCount();j++){
					jdjl = dsgsjdjg.getString(j, "jdjl");
					gsjdslxm = dsgsjdjg.getString(j, "gsjdslxm");
					if(!"12".equals(jdjl)){//符合完全丧失劳动能力的标准
						continue;
					}
					if("06,08,11,12,20,21".indexOf(gsjdslxm) >= 0){
						find++;
						break;
					}
				}
				if(find < 0){
					dsPerInfo.delRow(i);
					i--;
					continue;
				}
			}
			if("A25,A4D,A52".indexOf(ltxlb) >= 0){//特殊工种
				String txzgqrlb = SiTools.getPerNatlCmpl(ryid, "TXZGQRLB", "");
				if (txzgqrlb.indexOf("2") < 0) {
					dsPerInfo.delRow(i);
					i--;
					continue;
				}
			}
		}

		DataObject rdo = new DataObject();
		rdo.put("ds", dsPerInfo);
		return rdo;
	}
	/**
	 * 方法简介.企业死亡账户返还差额查询
	 * 
	 * @author zcc
	 * @date 2019-12-18
	 */
	public DataObject queryAdQyswzhfhceInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String ryid = para.getString("ryid", "");
		String jbjgid = para.getString("jbjgid", "");

		DataStore dsPerInfo = new DataStore();
		sqlBF.setLength(0);
		sqlBF.append("select '打印' pjdy,'打印' spbdy,a.ryid,b.grbh,b.xm,");
		sqlBF.append("       d.dwbh,d.cbdwmc,d.dwdjid,d.dwid,a.yfje,");
		sqlBF.append("       a.sfje,a.ce,e.jbjgmc");
		sqlBF.append("  from ad3u.ylzhfh   a,");
		sqlBF.append("       biuv.person       b,");
		sqlBF.append("       si3u.orgn_reg d,");
		sqlBF.append("       be3u.agency_natl  e");
		sqlBF.append(" where a.ryid = b.ryid");
		sqlBF.append("   and a.dwdjid = d.dwdjid");
		sqlBF.append("   and d.jbjgid = e.jbjgid");

		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and a.ryid = ?");
		}
		if (!"".equals(jbjgid) && null != jbjgid) {
			sqlBF.append("    and d.jbjgid = ?");
		}
		
		this.sql.setSql(sqlBF.toString());
		int index = 1;
		if (ryid != null && !"".equals(ryid)) {
			this.sql.setString(index++, ryid);
		}
		if (!"".equals(jbjgid) && null != jbjgid) {
			this.sql.setString(index++, jbjgid);
		}
		
		dsPerInfo = this.sql.executeQuery();

		DataObject rdo = new DataObject();
		rdo.put("ds", dsPerInfo);
		return rdo;
	}
	/**
	 * 方法简介.获取 企业死亡账户返还差额 审批表 数据
	 * 
	 * @author zcc
	 * @date 2019-12-18
	 */
	public DataObject getAdDyswzhfhcespxx(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();

		DataStore dwResult = para.getDataStore("dwResult",new DataStore());
		if(dwResult.rowCount() <= 0){
			this.bizException("请先选择一行，再进行打印！");
		}
		String ryid = dwResult.getString(0,"ryid");
		double ce = dwResult.getDouble(0,"ce");
		String dwdjid = dwResult.getString(0,"dwdjid");
		if ("".equals(ryid) || null == ryid) {
			this.bizException("传入的人员ID为空，请检查！");
		}
		// 获取人员基本信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.grbh, a.xm, a.swrq, a.xb, b.cjgzrq, ");
		sqlBF.append("		  c.dwdjid, c.zfrylb, c.ffqd, d.bljyyy, d.jbjgid, ");
		sqlBF.append("		  d.jyrq, c.sszfrq "); 
		sqlBF.append("   from biu.person a, ");
		sqlBF.append("  	  ad3u.emp_info b, ");
		sqlBF.append("  	  ad3u.per_info c, ");
		sqlBF.append("  	  ad3u.per_reg d ");
		sqlBF.append("  where a.ryid = b.ryid(+) ");
		sqlBF.append("    and a.ryid = c.ryid  ");
		sqlBF.append("    and a.ryid = d.ryid  ");
		sqlBF.append("    and a.ryid = ?  ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore ds = this.sql.executeQuery();

		if (ds.rowCount() <= 0) {
			this.bizException("未查询到该人员的养老退休登记信息！");
		}

		String grbh = ds.getString(0, "grbh");
		String xm = ds.getString(0, "xm");
		String swrq = ds.getString(0, "swrq");
		String xb = ds.getString(0, "xb");
		String cjgzrq = ds.getString(0, "cjgzrq");
		String sszfrq = ds.getString(0, "sszfrq");
		if (cjgzrq == null || "".equals(cjgzrq)) {
			cjgzrq = SiTools.getPerRegWithOrgnInfoByRyidNoException(ryid)
				.getString("cjgzrq", "");
		}
		String zfrylb = ds.getString(0, "zfrylb");
		String ffqd = ds.getString(0, "ffqd");
		String bljyyy = ds.getString(0, "bljyyy");
		String jyrq = ds.getString(0, "jyrq");
		if(null == dwdjid || "".equals(dwdjid)){
			dwdjid = ds.getString(0, "dwdjid");
		}
		
		if (jyrq == null || "".equals(jyrq) || jyrq.length() < 6) {
			this.bizException("未查询到该人员的减员日期！");
		}
		String dwbh = "",dwmc = "",yfny="";
		if (!"".equals(dwdjid) && null != dwdjid) {
			// 获取单位信息
			sqlBF.setLength(0);
			sqlBF.append(" select a.cbdwmc, a.dwbh, a.jbjgid ");
			sqlBF.append("   from si3u.orgn_reg a ");
			sqlBF.append("  where a.dwdjid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();

			if (ds.rowCount() > 0) {
				dwmc = ds.getString(0, "cbdwmc");
				dwbh = ds.getString(0, "dwbh");
			}
		}
		sqlBF.setLength(0);
		sqlBF.append("select a.xzbz, a.btbh, b.btmc, a.btje, a.yfny, a.ffny, a.ffqd");
		sqlBF.append("      from ad3u.per_giv_detl a, ");
		sqlBF.append("      ad3u.giv_item b");
		sqlBF.append("     where a.btbh = b.btbh");
		sqlBF.append("       and a.fflb = 'C' ");
		sqlBF.append("       and a.yfny >= '" + jyrq.substring(0, 6) + "' ");
		sqlBF.append("       and a.ryid = ?");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsOnce = this.sql.executeQuery();

		if (dsOnce.rowCount() > 0) {
			//已经办结的打印审批表   打印发放年月
			yfny = dsOnce.getString(0, "ffny");
			ffqd = dsOnce.getString(0, "ffqd");
		}
		
		DataStore dsCe = new DataStore();
		dsCe.addRow();
		dsCe.put(0, "btmc", "退休账户一次性支付差额");
		dsCe.put(0, "btje", ce);
		//获取领取人相关信息
		String lqrxm = SiTools.getPerNatlCmpl(ryid, "LQRMC", "");
		String lqgx = SiTools.getPerNatlCmpl(ryid, "LQRGX", "");
		String lqrsfzh = SiTools.getPerNatlCmpl(ryid, "LQRSFZHM", "");
		String dygs = "AdQyswzhfhcespxx";
		//组装 打印标题
		String title = "离退休（职）人员死亡丧葬费和一次性救济费核准表";
		SPrinter printer = new SPrinter();
		printer.putPara("title", title);
		printer.putPara("dwmc", dwmc);
		printer.putPara("dwbh", dwbh);
		printer.putPara("grbh", grbh);
		printer.putPara("xm", xm);
		printer.putPara("xb", HsuTools.discode("XB", xb, xb));
		printer.putPara("zfrylb", HsuTools.discode("ZFRYLB", zfrylb, zfrylb));
		printer.putPara("sszfrq", HsuTools.discode("SSZFRQ", sszfrq, sszfrq));
		printer.putPara("cjgzrq", cjgzrq);
		printer.putPara("swrq", swrq);
		printer.putPara("lqrxm", lqrxm);
		printer.putPara("lqgx", HsuTools.discode("RYGX", lqgx, lqgx));
		printer.putPara("lqrsfzh", lqrsfzh);
		printer.putPara("yfny", yfny);
		printer.putPara("bljyyy", HsuTools.discode("YLZFBGYY", bljyyy, bljyyy));
		printer.putPara("ffqd", HsuTools.discode("FFQD", ffqd, ffqd));
		printer.putPara("hj", DataFormat.formatDouble(ce, 2));
		printer.putPara("dsOnce", dsCe);
		printer.putPara("jbr", this.getUser().getUsername());
		printer.putPara("jbsj", DateUtil.dateToString(DateUtil.getDBTime(), "yyyyMMdd"));
		
		
		String printhtml = printer.print(this.getBizInstitution(), dygs);
		rdo.clear();
		rdo.put("printhtml", printhtml);

		return rdo;
	}
	/**
	 * 方法简介.获取 企业死亡账户返还差额 票据 数据
	 * 
	 * @author zcc
	 * @date 2019-12-18
	 */
	public DataObject getAdDyswzhfhcepjxx(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();
		int lxrs=0,txrs=0,tzrs=0,ysrs=0,yczfrs=0;
		double ltxfyh = 0,gydyyh = 0,bcbx = 0;
		double dwdf = 0,dwdk = 0;
		double ltxfdw = 0,gydydw = 0,ycxtxbt = 0,dwzzycx = 0,dwtxycx = 0,dwtze = 0;

		DataStore dwResult = para.getDataStore("dwResult",new DataStore());
		if(dwResult.rowCount() <= 0){
			this.bizException("请先选择一行，再进行打印！");
		}
		String ryid = dwResult.getString(0,"ryid");
		if ("".equals(ryid) || null == ryid) {
			this.bizException("传入的人员ID为空，请检查！");
		}
		
		sqlBF.setLength(0);
		sqlBF.append("select count(a.ryid) yczfrs,sum(a.ce) ltxf,b.dwbh,b.cbdwmc,c.jjlx,");
		sqlBF.append("       d.jyrq,e.ffqd");
		sqlBF.append("  from ad3u.ylzhfh   a,");
		sqlBF.append("       si3u.orgn_reg b,");
		sqlBF.append("       biuv.orgn         c,");
		sqlBF.append("       ad3u.per_reg  d,");
		sqlBF.append("       ad3u.per_info  e");
		sqlBF.append(" where a.dwdjid = b.dwdjid");
		sqlBF.append("   and b.dwid = c.dwid");
		sqlBF.append("   and a.ryid = d.ryid");
		sqlBF.append("   and a.ryid = e.ryid");
		sqlBF.append("   and a.ryid = ?");
		sqlBF.append(" group by b.dwbh, b.cbdwmc, c.jjlx, d.jyrq, e.ffqd");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore ds = this.sql.executeQuery();

		if (ds.rowCount() <= 0) {
			this.bizException("未查询到该人员的凭据信息！");
		}
		yczfrs = ds.getInt(0, "yczfrs");
		double ltxf = ds.getDouble(0, "ltxf");
		String dwbh = ds.getString(0, "dwbh");
		String dwmc = ds.getString(0, "cbdwmc");
		String jjlx = ds.getString(0, "jjlx");
		String jyrq = ds.getString(0, "jyrq");
//		String ffqd = ds.getString(0, "ffqd");
		
		if (jyrq == null || "".equals(jyrq) || jyrq.length() < 6) {
			this.bizException("未查询到该人员的减员日期！");
		}
		
		String ffny="";
		sqlBF.setLength(0);
		sqlBF.append("select a.xzbz, a.btbh, b.btmc, a.btje, a.yfny, a.ffny, a.ffqd");
		sqlBF.append("      from ad3u.per_giv_detl a, ");
		sqlBF.append("      ad3u.giv_item b");
		sqlBF.append("     where a.btbh = b.btbh");
		sqlBF.append("       and a.fflb = 'C' ");
		sqlBF.append("       and a.yfny >= '" + jyrq.substring(0, 6) + "' ");
		sqlBF.append("       and a.ryid = ?");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsOnce = this.sql.executeQuery();

		if (dsOnce.rowCount() > 0) {
			ffny = dsOnce.getString(0, "ffny");
//			ffqd = dsOnce.getString(0, "ffqd");
		}
//		if("1".equals(ffqd)){//银行代发
//			ltxfyh = ltxf;
//		}else{//单位代发
			ltxfdw = ltxf;
//		}
		
		String dygs = "AdQyswzhfhcepjxx";
		//组装 打印
		SPrinter printer = new SPrinter();
		printer.putPara("dwbh", dwbh);
		printer.putPara("dwmc", dwmc);
		printer.putPara("jjlxmc", HsuTools.discode("JJLX", jjlx, jjlx));
		printer.putPara("date", DateUtil.dateToString(DateUtil.getDBTime(), "yyyy年MM月dd日"));
		printer.putPara("ffny", ffny);
		int rshj = lxrs+txrs+tzrs+ysrs+yczfrs;
		printer.putPara("rshj", rshj);
		printer.putPara("lxrs", lxrs);
		printer.putPara("txrs", txrs);
		printer.putPara("tzrs", tzrs);
		printer.putPara("ysrs", ysrs);
		printer.putPara("ycrs", yczfrs);
		printer.putPara("ltxf", ltxfyh);
		printer.putPara("gydy", gydyyh);
		printer.putPara("bcbx", bcbx);
		printer.putPara("ltxfyhhj", MathUtil.round(ltxfyh+gydyyh+bcbx, 2));
		printer.putPara("dwdf", dwdf);
		printer.putPara("dwdk", dwdk);
		printer.putPara("dfdkhj", MathUtil.round(dwdf+dwdk, 2));
		double yhyfze = MathUtil.round(ltxfyh+gydyyh+bcbx+dwdf+dwdk, 2);
		printer.putPara("yhyfze", yhyfze);
		printer.putPara("yhyfzedx", DataFormat.numberToChinese(yhyfze));
		printer.putPara("ltxszfdw", ltxfdw);
		printer.putPara("gyszfdw", gydydw);
		printer.putPara("ycxtxbt", ycxtxbt);
		printer.putPara("dwzzycx", dwzzycx);
		printer.putPara("dwtxycx", dwtxycx);
		printer.putPara("dwtze", dwtze);
		double dwdfhj = MathUtil.round(ltxfdw+gydydw+ycxtxbt+dwzzycx+dwtxycx+dwtze, 2);
		printer.putPara("dwdfhj", dwdfhj);
		printer.putPara("dwdfhjdx", DataFormat.numberToChinese(dwdfhj));
		printer.putPara("bz", "");
		
		String printhtml = printer.print(this.getBizInstitution(), dygs);
		rdo.clear();
		rdo.put("printhtml", printhtml);

		return rdo;
	}
	/**
	 * 方法简介.企业离退休人员增减查询
	 * 
	 * @author zcc
	 * @date 2019-12-19
	 */
	public DataObject queryAdQyltxryzjInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String ryid = para.getString("ryid", "");
		String xzbz = para.getString("xzbz", "");
		String dyrylx = para.getString("dyrylx", "");
		String bglx = para.getString("bglx", "");
		String bgqsny = para.getDateToString("bgqsny", "yyyyMM");
		String bgzzny = para.getDateToString("bgzzny", "yyyyMM");
		String jbjgid = para.getString("jbjgid", "");
		
		if ((!"".equals(bgqsny) && bgqsny != null)
				&& (!"".equals(bgzzny) && bgzzny != null)) {
			if (bgqsny.compareTo(bgzzny) > 0) {
				this.bizException("变更年月起晚于至年月，请检查！");
			}
		}
		
		String dqny = DateUtil.dateToString(DateUtil.getDBDate(),"yyyyMM");
		DataStore dsPerInfo = new DataStore();
		
		if(bglx == null || "".equals(bglx) || "1".equals(bglx)){//新增
			sqlBF.setLength(0);
			sqlBF.append("select '查看' cz,'1' bglx,a.ryid,b.grbh,a.xm,");
			sqlBF.append("       a.shbzhm,c.dwbh,c.cbdwmc,a.sszfrq dyrylx,to_char(a.dyspsj, 'yyyyMM') bgny,");
			sqlBF.append("       '101' bgyy,nvl(sum(d.btje), 0) btje,a.dyspr jbr,a.dyspsj jbsj,e.jbjgmc,");
			sqlBF.append("       a.dqdydjid dydjid,e.jbjgid,b.yxzjhm");
			sqlBF.append("  from ad3u.per_info          a,");
			sqlBF.append("       biuv.person                b,");
			sqlBF.append("       si3u.orgn_reg          c,");
			sqlBF.append("       ad3u.per_giv_month_std d,");
			sqlBF.append("       be3u.agency_natl           e");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and a.dwdjid = c.dwdjid");
			sqlBF.append("   and a.ryid = d.ryid(+)");
			sqlBF.append("   and c.jbjgid = e.jbjgid");
			sqlBF.append("   and a.dyffzt = '1'");
			sqlBF.append("   and (? between d.qsny(+) and nvl(d.zzny(+), '205012') or d.zzny(+) is null)");
			sqlBF.append("   and d.btbh(+) not in ('A1L0', 'H041')");
			sqlBF.append("   and not exists (select '1'");//去除待遇恢复的
			sqlBF.append("          from ad3u.per_pause f");
			sqlBF.append("         where a.ryid = f.ryid");
			sqlBF.append("          and f.hfsj is not null)");
			if("101".equals(xzbz)){//只查企业
				sqlBF.append("   and c.jbjgid like '%01'");
			}else  if("102".equals(xzbz)){//只查机关
				sqlBF.append("   and c.jbjgid like '%03'");
			}
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ?");
			}
			if (dyrylx != null && !"".equals(dyrylx)) {
				sqlBF.append("   and a.sszfrq = ?");
			}
			if(!"".equals(bgqsny) && bgqsny != null){
				sqlBF.append("   and to_char(a.dyspsj, 'yyyyMM') >= ?");
			}
			if(!"".equals(bgzzny) && bgzzny != null){
				sqlBF.append("   and to_char(a.dyspsj, 'yyyyMM') <= ?");
			}
			if (!"".equals(jbjgid) && null != jbjgid) {
				sqlBF.append("    and c.jbjgid = ?");
			}
			sqlBF.append(" group by  a.ryid,b.grbh,a.xm,a.shbzhm,c.dwbh,");
			sqlBF.append("          c.cbdwmc,a.sszfrq,to_char(a.dyspsj, 'yyyyMM'),a.dyspr,a.dyspsj,e.jbjgmc,a.dqdydjid,e.jbjgid,b.yxzjhm");
			this.sql.setSql(sqlBF.toString());
			
			int index = 1;
			this.sql.setString(index++, dqny);
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}
			if (dyrylx != null && !"".equals(dyrylx)) {
				this.sql.setString(index++, dyrylx);
			}
			if(!"".equals(bgqsny) && bgqsny != null){
				this.sql.setString(index++, bgqsny);
			}
			if(!"".equals(bgzzny) && bgzzny != null){
				this.sql.setString(index++, bgzzny);
			}
			if (!"".equals(jbjgid) && null != jbjgid) {
				this.sql.setString(index++, jbjgid);
			}
			DataStore dsNormal = this.sql.executeQuery();
			
			dsPerInfo.combineDatastore(dsNormal);
		}
		if (bglx == null || "".equals(bglx) || "2".equals(bglx)) {//待遇暂停
			sqlBF.setLength(0);
			sqlBF.append("select '查看' cz,'2' bglx,a.ryid,b.grbh,a.xm,");
			sqlBF.append("       a.shbzhm,c.dwbh,c.cbdwmc,a.sszfrq dyrylx,to_char(f.ztsj, 'yyyyMM') bgny,");
			sqlBF.append("       f.ztyy bgyy,nvl(sum(d.btje), 0) btje,f.ztr jbr,f.ztsj jbsj,e.jbjgmc,");
			sqlBF.append("       a.dqdydjid dydjid,e.jbjgid,b.yxzjhm");
			sqlBF.append("  from ad3u.per_info  a,");
			sqlBF.append("       biuv.person        b,");
			sqlBF.append("       si3u.orgn_reg  c,");
			sqlBF.append("       ad3u.per_giv_month_std d,");
			sqlBF.append("       be3u.agency_natl   e,");
			sqlBF.append("       ad3u.per_pause f");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and a.dwdjid = c.dwdjid");
			sqlBF.append("   and a.ryid = d.ryid(+)");
			sqlBF.append("   and c.jbjgid = e.jbjgid");
			sqlBF.append("   and a.ryid = f.ryid");
			sqlBF.append("   and a.dyffzt = '2'");
			sqlBF.append("   and (? between d.qsny(+) and nvl(d.zzny(+), '205012') or d.zzny(+) is null)");
			sqlBF.append("   and d.btbh(+) not in ('A1L0', 'H041')");
			sqlBF.append("   and f.ztsj is not null");
			sqlBF.append("   and f.hfsj is null");
			if("101".equals(xzbz)){
				sqlBF.append("   and c.jbjgid like '%01'");
			}else  if("102".equals(xzbz)){
				sqlBF.append("   and c.jbjgid like '%03'");
			}
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ?");
			}
			if (dyrylx != null && !"".equals(dyrylx)) {
				sqlBF.append("   and a.sszfrq = ?");
			}
			if(!"".equals(bgqsny) && bgqsny != null){
				sqlBF.append("   and to_char(f.ztsj, 'yyyyMM') >= ?");
			}
			if(!"".equals(bgzzny) && bgzzny != null){
				sqlBF.append("   and to_char(f.ztsj, 'yyyyMM') <= ?");
			}
			if (!"".equals(jbjgid) && null != jbjgid) {
				sqlBF.append("    and c.jbjgid = ?");
			}
			sqlBF.append("group by a.ryid,b.grbh,a.xm,a.shbzhm,c.dwbh,");
			sqlBF.append("          c.cbdwmc,a.sszfrq,to_char(f.ztsj, 'yyyyMM'),f.ztyy,f.ztr,f.ztsj,e.jbjgmc,a.dqdydjid,e.jbjgid,b.yxzjhm");

			this.sql.setSql(sqlBF.toString());
			
			int index = 1;
			this.sql.setString(index++, dqny);
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}
			if (dyrylx != null && !"".equals(dyrylx)) {
				this.sql.setString(index++, dyrylx);
			}
			if(!"".equals(bgqsny) && bgqsny != null){
				this.sql.setString(index++, bgqsny);
			}
			if(!"".equals(bgzzny) && bgzzny != null){
				this.sql.setString(index++, bgzzny);
			}
			if (!"".equals(jbjgid) && null != jbjgid) {
				this.sql.setString(index++, jbjgid);
			}
			DataStore dsZt = this.sql.executeQuery();
			
			dsPerInfo.combineDatastore(dsZt);
		}
		if (bglx == null || "".equals(bglx) || "3".equals(bglx)) {//待遇恢复
			sqlBF.setLength(0);
			sqlBF.append("select  '查看' cz,'3' bglx,a.ryid,b.grbh,a.xm,");
			sqlBF.append("       a.shbzhm,c.dwbh,c.cbdwmc,a.sszfrq dyrylx,to_char(f.hfsj, 'yyyyMM') bgny,");
			sqlBF.append("       f.hfyy bgyy,nvl(sum(d.btje), 0) btje,f.hfr jbr,f.hfsj jbsj,e.jbjgmc,");
			sqlBF.append("       a.dqdydjid dydjid,e.jbjgid,b.yxzjhm");
			sqlBF.append("  from ad3u.per_info          a,");
			sqlBF.append("       biuv.person                b,");
			sqlBF.append("       si3u.orgn_reg          c,");
			sqlBF.append("       ad3u.per_giv_month_std d,");
			sqlBF.append("       be3u.agency_natl           e,");
			sqlBF.append("       ad3u.per_pause         f");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and a.dwdjid = c.dwdjid");
			sqlBF.append("   and a.ryid = d.ryid(+)");
			sqlBF.append("   and c.jbjgid = e.jbjgid");
			sqlBF.append("   and a.ryid = f.ryid");
			sqlBF.append("   and a.dyffzt = '1'");
			sqlBF.append("   and (? between d.qsny(+) and nvl(d.zzny(+), '205012') or d.zzny(+) is null)");
			sqlBF.append("   and d.btbh(+) not in ('A1L0', 'H041')");
			sqlBF.append("   and f.hfsj is not null");
			sqlBF.append("   and f.ztsj = (select max(g.ztsj)");//去除之前多次暂停恢复数据
			sqlBF.append("                   from ad3u.per_pause g");
			sqlBF.append("                  where a.ryid = g.ryid");
			sqlBF.append("                    and g.hfsj is not null)");
			if("101".equals(xzbz)){
				sqlBF.append("   and c.jbjgid like '%01'");
			}else  if("102".equals(xzbz)){
				sqlBF.append("   and c.jbjgid like '%03'");
			}
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ?");
			}
			if (dyrylx != null && !"".equals(dyrylx)) {
				sqlBF.append("   and a.sszfrq = ?");
			}
			if(!"".equals(bgqsny) && bgqsny != null){
				sqlBF.append("   and to_char(f.hfsj, 'yyyyMM') >= ?");
			}
			if(!"".equals(bgzzny) && bgzzny != null){
				sqlBF.append("   and to_char(f.hfsj, 'yyyyMM') <= ?");
			}
			if (!"".equals(jbjgid) && null != jbjgid) {
				sqlBF.append("    and c.jbjgid = ?");
			}
			sqlBF.append(" group by a.ryid,b.grbh,a.xm,a.shbzhm,c.dwbh,");
			sqlBF.append("         c.cbdwmc,a.sszfrq,to_char(f.hfsj, 'yyyyMM'),f.hfyy,f.hfr,f.hfsj,e.jbjgmc,a.dqdydjid,e.jbjgid,b.yxzjhm");
			this.sql.setSql(sqlBF.toString());
			
			int index = 1;
			this.sql.setString(index++, dqny);
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}
			if (dyrylx != null && !"".equals(dyrylx)) {
				this.sql.setString(index++, dyrylx);
			}
			if(!"".equals(bgqsny) && bgqsny != null){
				this.sql.setString(index++, bgqsny);
			}
			if(!"".equals(bgzzny) && bgzzny != null){
				this.sql.setString(index++, bgzzny);
			}
			if (!"".equals(jbjgid) && null != jbjgid) {
				this.sql.setString(index++, jbjgid);
			}
			DataStore dsHf = this.sql.executeQuery();
			
			dsPerInfo.combineDatastore(dsHf);
		}
		if (bglx == null || "".equals(bglx) || "4".equals(bglx)) {//待遇终止
			sqlBF.setLength(0);
			sqlBF.append("select '查看' cz,'4' bglx,a.ryid,b.grbh,a.xm,");
			sqlBF.append("       a.shbzhm,c.dwbh,c.cbdwmc,a.sszfrq dyrylx,to_char(f.bljysj, 'yyyyMM') bgny,");
			sqlBF.append("       f.bljyyy bgyy,nvl(sum(d.btje), 0) btje,f.bljyjbr jbr,f.bljysj jbsj,e.jbjgmc,");
			sqlBF.append("       a.dqdydjid dydjid,e.jbjgid,b.yxzjhm");
			sqlBF.append("  from ad3u.per_info a,");
			sqlBF.append("       biuv.person       b,");
			sqlBF.append("       si3u.orgn_reg c,");
			sqlBF.append("       ad3u.per_giv_month_std d,");
			sqlBF.append("       be3u.agency_natl  e,");
			sqlBF.append("       ad3u.per_reg  f");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and a.dwdjid = c.dwdjid");
			sqlBF.append("   and a.ryid = d.ryid(+)");
			sqlBF.append("   and c.jbjgid = e.jbjgid");
			sqlBF.append("   and a.ryid = f.ryid");
			sqlBF.append("   and a.dyffzt = '3'");
			sqlBF.append("   and (? between d.qsny(+) and nvl(d.zzny(+), '205012') or d.zzny(+) is null)");
			sqlBF.append("   and d.btbh(+) not in ('A1L0', 'H041')");
			if("101".equals(xzbz)){
				sqlBF.append("   and c.jbjgid like '%01'");
			}else  if("102".equals(xzbz)){
				sqlBF.append("   and c.jbjgid like '%03'");
			}
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ?");
			}
			if (dyrylx != null && !"".equals(dyrylx)) {
				sqlBF.append("   and a.sszfrq = ?");
			}
			if(!"".equals(bgqsny) && bgqsny != null){
				sqlBF.append("   and to_char(f.bljysj, 'yyyyMM') >= ?");
			}
			if(!"".equals(bgzzny) && bgzzny != null){
				sqlBF.append("   and to_char(f.bljysj, 'yyyyMM') <= ?");
			}
			if (!"".equals(jbjgid) && null != jbjgid) {
				sqlBF.append("    and c.jbjgid = ?");
			}
			sqlBF.append("   group by  a.ryid,b.grbh,a.xm,a.shbzhm,c.dwbh,");
			sqlBF.append("          c.cbdwmc,a.sszfrq,to_char(f.bljysj, 'yyyyMM'), f.bljyyy,f.bljyjbr,f.bljysj,e.jbjgmc,a.dqdydjid,e.jbjgid,b.yxzjhm");
			this.sql.setSql(sqlBF.toString());
			
			int index = 1;
			this.sql.setString(index++, dqny);
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}
			if (dyrylx != null && !"".equals(dyrylx)) {
				this.sql.setString(index++, dyrylx);
			}
			if(!"".equals(bgqsny) && bgqsny != null){
				this.sql.setString(index++, bgqsny);
			}
			if(!"".equals(bgzzny) && bgzzny != null){
				this.sql.setString(index++, bgzzny);
			}
			if (!"".equals(jbjgid) && null != jbjgid) {
				this.sql.setString(index++, jbjgid);
			}
			DataStore dsZz = this.sql.executeQuery();
			
			dsPerInfo.combineDatastore(dsZz);
		}

		dsPerInfo = HsuTools.genSysUserDataStore(dsPerInfo, "jbr", "dysprbh", "jbr");
		DataObject rdo = new DataObject();
		rdo.put("ds", dsPerInfo);
		return rdo;
	}

	/**
	 * 
	 * 方法简介.跳转养老待遇申报页面
	 *
	 * @author gaopeng
	 * @date 创建时间 2019年12月30日
	 * @since V1.0
	 */
	public DataObject fwdPrinteYldysbPage(final DataObject para) throws Exception {
		DataObject vdo = new DataObject();
		String userid = para.getString("userid");
		DataStore dsjd = HsuTools.getJdByUserid(userid);
		vdo.put("dsjd", dsjd);
		return vdo;
	}
	


	/**
	 * 方法简介.企业退休人员转移轨迹查询（不分机关、企业）
	 * 
	 * @author zcc
	 * @date 2019-12-23
	 */
	public DataObject queryAdQytxryzygjInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String ryid = para.getString("ryid");
		String dwdjid = para.getString("dwdjid");

		DataStore dsPerInfo = new DataStore();
		int index = 1;
		// 单位转移信息
		sqlBF.setLength(0);
		sqlBF.append("select c.ryid,f.grbh,c.xm,c.xb,c.shbzhm,");
		sqlBF.append("       i.dwbh,i.cbdwmc dwmc,a.zylx,e.dwbh zyqbh,e.cbdwmc zyq,");
		sqlBF.append("       h.jbjgmc zyqjbjgmc,d.dwbh zyhbh,d.cbdwmc zyh,g.jbjgmc zyhjbjgmc,a.slr jbr,");
		sqlBF.append("       a.slsj jbsj");
		sqlBF.append("  from sicp3uws.siplddflhb     a,");
		sqlBF.append("       sicp3uws.siplddflhb_per b,");
		sqlBF.append("       ad3u.per_info       c,");
		sqlBF.append("       si3u.orgn_reg       d,");
		sqlBF.append("       si3u.orgn_reg       e,");
		sqlBF.append("       biuv.person             f,");
		sqlBF.append("       be3u.agency_natl        g,");
		sqlBF.append("       be3u.agency_natl        h,");
		sqlBF.append("       si3u.orgn_reg       i");
		sqlBF.append(" where a.piid = b.piid");
		sqlBF.append("   and b.ryid = c.ryid");
		// sqlBF.append(" and a.xdwdjid = c.dwdjid");
		sqlBF.append("   and a.xdwdjid = d.dwdjid");
		sqlBF.append("   and a.ydwdjid = e.dwdjid");
		sqlBF.append("   and b.ryid = f.ryid");
		sqlBF.append("   and d.jbjgid = g.jbjgid");
		sqlBF.append("   and e.jbjgid = h.jbjgid");
		sqlBF.append("   and c.dwdjid = i.dwdjid");
		sqlBF.append("   and a.jzbz = '1'");
		sqlBF.append("   and a.zylx = '0'");
		sqlBF.append("   and b.jzbz = '1'");
		sqlBF.append("    and exists(select 1 ");//增加限定办理业务.mod.zcc.2020.01.02
		sqlBF.append("                 from bpzone.pi_hi_view m ");
		sqlBF.append("                where a.piid = m.piid ");
		sqlBF.append("                  and (m.pdid like 'AdTxAndGyryZy%' or m.pdid like 'AdQdQyTxryPlzy%' or m.pdid like 'AdQdJgTxryPlzy%') )");
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and b.ryid = ? ");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and c.dwdjid = ? ");
		}
		this.sql.setSql(sqlBF.toString());
		index = 1;
		if (ryid != null && !"".equals(ryid)) {
			this.sql.setString(index++, ryid);
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			this.sql.setString(index++, dwdjid);
		}
		DataStore dsDw = this.sql.executeQuery();
		dsPerInfo.combineDatastore(dsDw);

		// 街道转移信息
		sqlBF.setLength(0);
		sqlBF.append("select c.ryid,f.grbh,c.xm,c.xb,c.shbzhm,");
		sqlBF.append("       i.dwbh,i.cbdwmc dwmc,a.zylx,e.jdbh zyqbh,e.jdmc zyq,");
		sqlBF.append("       h.jbjgmc zyqjbjgmc,d.jdbh zyhbh,d.jdmc zyh,g.jbjgmc zyhjbjgmc,a.slr jbr,");
		sqlBF.append("       a.slsj jbsj");
		sqlBF.append("  from sicp3uws.siplddflhb     a,");
		sqlBF.append("       sicp3uws.siplddflhb_per b,");
		sqlBF.append("       ad3u.per_info       c,");
		sqlBF.append("       be3u.street_natl        d,");
		sqlBF.append("       be3u.street_natl        e,");
		sqlBF.append("       biuv.person             f,");
		sqlBF.append("       be3u.agency_natl        g,");
		sqlBF.append("       be3u.agency_natl        h,");
		sqlBF.append("       si3u.orgn_reg       i");
		sqlBF.append(" where a.piid = b.piid");
		sqlBF.append("   and b.ryid = c.ryid");
		// sqlBF.append(" and a.xjdid = c.jdid");
		sqlBF.append("   and a.xjdid = d.jdid");
		sqlBF.append("   and a.yjdid = e.jdid");
		sqlBF.append("   and b.ryid = f.ryid");
		sqlBF.append("   and i.jbjgid = g.jbjgid");
		sqlBF.append("   and i.jbjgid = h.jbjgid");
		sqlBF.append("   and c.dwdjid = i.dwdjid");
		sqlBF.append("   and a.jzbz = '1'");
		sqlBF.append("   and a.zylx = '1'");
		sqlBF.append("   and b.jzbz = '1'");
		sqlBF.append("    and exists(select 1 ");//增加限定办理业务.mod.zcc.2020.01.02
		sqlBF.append("                 from bpzone.pi_hi_view m ");
		sqlBF.append("                where a.piid = m.piid ");
		sqlBF.append("                  and (m.pdid like 'AdTxAndGyryZy%' or m.pdid like 'AdQdQyTxryPlzy%' or m.pdid like 'AdQdJgTxryPlzy%') )");
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and b.ryid = ? ");
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and c.dwdjid = ? ");
		}
		this.sql.setSql(sqlBF.toString());
		index = 1;
		if (ryid != null && !"".equals(ryid)) {
			this.sql.setString(index++, ryid);
		}
		if (dwdjid != null && !"".equals(dwdjid)) {
			this.sql.setString(index++, dwdjid);
		}
		DataStore dsJd = this.sql.executeQuery();
		dsPerInfo.combineDatastore(dsJd);

		dsPerInfo.sort("jbsj");
		dsPerInfo = HsuTools.genSysUserDataStore(dsPerInfo, "jbr", "dysprbh", "jbr");

		DataObject rdo = new DataObject();
		rdo.put("ds", dsPerInfo);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.企业社会化发放统计一 查询
	 * 
	 * @author 谈杰
	 * @date 2019年12月23日
	 */
	public DataObject queryAdQyshhfftj(DataObject para) throws Exception {
		// 接参
		StringBuffer sqlBF = new StringBuffer();
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String dwdjid = para.getString("dwdjid", "");
		String jjlxmx = para.getString("jjlxmx", "");
		String lsgx = para.getString("lsgx", "");
		
		// 检测起始日期和终止日期
		if ((!"".equals(qsrq) && qsrq != null)
				&& (!"".equals(zzrq) && zzrq != null)) {
			if (qsrq.compareTo(zzrq) > 0) {
				this.bizException("起始日期大于终止日期，请检查！");
			}
		}
		
		// 查询单位信息
		sqlBF.setLength(0);
		sqlBF.append(" select b.dwbh, b.cbdwmc dwmc, c.jjlxmx, c.lsgx, d.jbjgmc, ");
		sqlBF.append("        count(distinct a.ryid) rs, '查看' cz, b.dwdjid, b.jbjgid ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        si3u.orgn_reg b, ");
		sqlBF.append("        biuv.orgn c, ");
		sqlBF.append("        be3u.agency_natl d ");
		sqlBF.append("  where a.bcxmz = b.dwdjid ");
		sqlBF.append("    and b.dwid = c.dwid ");
		sqlBF.append("    and b.jbjgid = d.jbjgid ");
		sqlBF.append("    and a.bcxmbh = 'YGZDW' ");
		sqlBF.append("    and exists(select 1 ");
		sqlBF.append("                 from ad3u.per_cmpl e ");
		sqlBF.append("                where a.ryid = e.ryid ");
		sqlBF.append("                  and e.bcxmbh = 'NRSQGLBZ' ");
		sqlBF.append("                  and e.bcxmz = '1') ");
		if (!"".equals(qsrq) && qsrq != null) {
			sqlBF.append("    and exists(select 1 ");
			sqlBF.append("                 from ad3u.per_info f ");
			sqlBF.append("                where a.ryid = f.ryid ");
			sqlBF.append("                  and nvl(f.nrsqglrq, '19000101') >=  '" + qsrq + "') ");
		}
		
		if (!"".equals(zzrq) && zzrq != null) {
			sqlBF.append("    and exists(select 1 ");
			sqlBF.append("                 from ad3u.per_info f ");
			sqlBF.append("                where a.ryid = f.ryid ");
			sqlBF.append("                  and nvl(f.nrsqglrq, '20501231') <=  '" + zzrq + "') ");
		}
		
		if(!"".equals(dwdjid) && dwdjid != null){
			sqlBF.append("  and b.dwdjid = '" + dwdjid + "' ");
		}
		
		if(!"".equals(jjlxmx) && jjlxmx != null){
			sqlBF.append("  and c.jjlxmx = '" + jjlxmx + "' ");
		}
		
		if(!"".equals(lsgx) && lsgx != null){
			sqlBF.append("  and c.lsgx = '" + lsgx + "' ");
		}
		sqlBF.append("  group by b.dwbh, b.cbdwmc, c.jjlxmx, c.lsgx, d.jbjgmc, ");
		sqlBF.append("           b.dwdjid, b.jbjgid ");
		this.sql.setSql(sqlBF.toString());
		DataStore dsDwinfo = this.sql.executeQuery();
		
		// 循环查询结果计算单位数和人数
		int yjdwzs = 0, wzyjdws = 0, snyjdws = 0, sbyjdws = 0, lcyjdws = 0,
			shhffzrs = 0, wzshhffrs = 0, snshhffrs = 0, sbshhffrs = 0, lcshhffrs = 0;
		yjdwzs = dsDwinfo.rowCount();
		
		for(int i = 0; i < dsDwinfo.rowCount(); i++){
			int rsTemp = dsDwinfo.getInt(i, "rs");
			String jjlxmxTemp = dsDwinfo.getString(i, "jjlxmx");
			String jbjgidTemp = dsDwinfo.getString(i, "jbjgid");
			
			if("330".equals(jjlxmxTemp)){// 外资
				wzyjdws++;
				wzshhffrs += rsTemp;
			}
			if("375202".equals(jbjgidTemp.substring(0, 6))){// 市南
				snyjdws++;
				snshhffrs += rsTemp;
			}
			if("375203".equals(jbjgidTemp.substring(0, 6))){// 市北
				sbyjdws++;
				sbshhffrs += rsTemp;
			}
			if("375213".equals(jbjgidTemp.substring(0, 6))){// 李沧
				lcyjdws++;
				lcshhffrs += rsTemp;
			}
			shhffzrs += rsTemp;
		}
		
		DataStore dsDw = new DataStore();
		dsDw.put(0, "yjdwzs", yjdwzs);// 移交单位总数
		dsDw.put(0, "wzyjdws", wzyjdws);// 外资移交单位数
		dsDw.put(0, "snyjdws", snyjdws);// 市南移交单位数
		dsDw.put(0, "sbyjdws", sbyjdws);// 市北移交单位数
		dsDw.put(0, "lcyjdws", lcyjdws);// 李沧移交单位数
		dsDw.put(0, "shhffzrs", shhffzrs);// 社会化发放总人数
		dsDw.put(0, "wzshhffrs", wzshhffrs);// 外资社会化发放人数
		dsDw.put(0, "snshhffrs", snshhffrs);// 市南社会化发放人数
		dsDw.put(0, "sbshhffrs", sbshhffrs);// 市北社会化发放人数
		dsDw.put(0, "lcshhffrs", lcshhffrs);// 李沧社会化发放人数
		
		DataObject rdo = new DataObject();
		rdo.put("dwgrid", dsDwinfo);
		rdo.put("dwform", dsDw);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.企业社会化发放统计一 查看明细 查询
	 * 
	 * @author 谈杰
	 * @date 2019年12月23日
	 */
	public DataObject queryAdQyshhfftjCkmx(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String dwdjid = para.getString("dwdjid", "");
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		
		if(dwdjid == null || "".equals(dwdjid)){
			this.bizException("传入的单位登记ID为空，请检查！");
		}

		// 检测起始日期和终止日期
		if ((!"".equals(qsrq) && qsrq != null)
				&& (!"".equals(zzrq) && zzrq != null)) {
			if (qsrq.compareTo(zzrq) > 0) {
				this.bizException("起始日期大于终止日期，请检查！");
			}
		}
		
		
		// 查询人员明细
		sqlBF.setLength(0);
		sqlBF.append(" select b.grbh, b.xm, b.xb, b.shbzhm, d.dwbh, ");
		sqlBF.append("        d.cbdwmc dwmc, e.jdmc, c.zfrylb, f.ltxrq, c.dyxsksny, ");
		sqlBF.append("        c.dyzzny, c.yhzh, c.ffqd, c.dyffzt, g.xzzw, ");
		sqlBF.append("        b.txdz, b.hkszd ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        biuv.person b, ");
		sqlBF.append("        ad3u.per_info c, ");
		sqlBF.append("        si3u.orgn_reg d, ");
		sqlBF.append("        be3u.street_natl e, ");
		sqlBF.append("        ad3u.emp_info f, ");
		sqlBF.append("        si3u.per_natl g ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and c.jdid = e.jdid(+) ");
		sqlBF.append("    and a.ryid = f.ryid(+) ");
		sqlBF.append("    and a.ryid = g.ryid(+) ");
		sqlBF.append("    and a.bcxmbh = 'YGZDW' ");
		sqlBF.append("    and c.dwdjid = d.dwdjid ");
		sqlBF.append("    and a.bcxmz = ? ");
		sqlBF.append("    and exists(select 1 ");
		sqlBF.append("                 from ad3u.per_cmpl h ");
		sqlBF.append("                where a.ryid = h.ryid ");
		sqlBF.append("                  and h.bcxmbh = 'NRSQGLBZ' ");
		sqlBF.append("                  and h.bcxmz = '1') ");
		if (!"".equals(qsrq) && qsrq != null) {
			sqlBF.append("    and nvl(c.nrsqglrq, '19000101') >=  '" + qsrq + "' ");
		}
		
		if (!"".equals(zzrq) && zzrq != null) {
			sqlBF.append("    and nvl(c.nrsqglrq, '20501231') <=  '" + zzrq + "' ");
		}

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dwdjid);
		DataStore dsRyinfo = this.sql.executeQuery();
		
		DataObject rdo = new DataObject();
		rdo.put("dsryinfo", dsRyinfo);
		return rdo;
	}
	
	/**
	 * 方法简介.跳转到企业社会化发放统计二 页面 
	 * 
	 * @author 谈杰
	 * @date 2019年12月24日
	 */
	public DataObject fwdAdQyshhfftj2(final DataObject para) throws Exception {
		DataStore ds = new DataStore();
		DataObject rdo = new DataObject();

		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		String vbiz = para.getString("biz");
		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		// 只显示企业的
		for (int i = 0; i < ds.rowCount(); i++) {
			String jbjgid = ds.getString(i, "value");
			if ("03".equals(jbjgid.substring(jbjgid.length() - 2))) {
				ds.delRow(i);
				i--;
			}
		}
		rdo.put("jbjgid", biz);
		rdo.put("dsjbjg", ds);
		return rdo;
	}
	
	/**
	 * 方法简介.企业社会化发放统计二 查询
	 *
	 * @author 谈杰 2019年12月24日
	 */
	public DataObject queryAdQyshhfftj2(DataObject para) throws Exception {
		// 接参
		StringBuffer sqlBF = new StringBuffer();
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String jbjgid = para.getString("jbjgid", ""); 
		
		// 检测起始日期和终止日期
		if ((!"".equals(qsrq) && qsrq != null)
				&& (!"".equals(zzrq) && zzrq != null)) {
			if (qsrq.compareTo(zzrq) > 0) {
				this.bizException("起始日期大于终止日期，请检查！");
			}
		}
		
		String rsjid = SiTools.getRsjidByjbjgid(jbjgid);
		
		// 查询街道-人数
		sqlBF.setLength(0);
		sqlBF.append(" select c.jdmc, count(distinct a.ryid) rs, e.jbjgmc, c.rsjid||'01' jbjgid ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        be3u.street_natl c, ");
//		sqlBF.append("        si3u.orgn_reg d, ");
		sqlBF.append("        be3u.agency_natl e ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.jdid = c.jdid ");
//		sqlBF.append("    and b.dwdjid = d.dwdjid ");
//		sqlBF.append("    and d.jbjgid = e.jbjgid ");
		sqlBF.append("    and c.rsjid||'01' = e.jbjgid ");
		sqlBF.append("    and a.bcxmbh = 'NRSQGLBZ' ");
		sqlBF.append("    and a.bcxmz = '1' ");
		if (!"".equals(jbjgid) && jbjgid != null) {
			sqlBF.append("    and c.rsjid in (").append(HsuTools.replaceC2QCQ(rsjid)).append(") ");
		}
		if (!"".equals(qsrq) && qsrq != null) {
			sqlBF.append("    and nvl(b.nrsqglrq, '19000101') >=  '" + qsrq + "' ");
		}
		
		if (!"".equals(zzrq) && zzrq != null) {
			sqlBF.append("    and nvl(b.nrsqglrq, '20501231') <=  '" + zzrq + "' ");
		}

		sqlBF.append("  group by c.jdmc, e.jbjgmc, c.rsjid||'01' ");
		this.sql.setSql(sqlBF.toString());
		DataStore dsInfo = this.sql.executeQuery();
		dsInfo.sort("jbjgid");
		
		DataObject rdo = new DataObject();
		rdo.put("dsinfo", dsInfo);
		return rdo;
	}
	/**
	 * 方法简介.企业社会化发放统计三 数据查询
	 * 
	 * @author zcc
	 * @date 2019-12-25
	 */
	public DataObject queryAdQyshhfftj3Info(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String ryid = para.getString("ryid");
		String jbjgid = para.getString("jbjgid");
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");

		// 检测起始日期和终止日期
		String currentDate = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMMdd");
		if(qsrq != null && !"".equals(qsrq)){
			if (qsrq.compareTo(currentDate) > 0) {
				this.bizException("起始日期大于当前日期，请检查！");
			}
		}
		if(zzrq != null && !"".equals(zzrq)){
			if (zzrq.compareTo(currentDate) > 0) {
				this.bizException("终止日期大于当前日期，请检查！");
			}
		}
		if ((qsrq != null && !"".equals(qsrq))
				&& (zzrq != null && !"".equals(zzrq))) {
			if (qsrq.compareTo(zzrq) > 0) {
				this.bizException("起始日期大于终止日期，请检查！");
			}
		}

		int index = 1;
		// 社会化街道转移信息
		sqlBF.setLength(0);
		sqlBF.append("select c.ryid, f.grbh, c.xm, c.shbzhm, e.jdmc xzjd,");
		sqlBF.append("       d.jdmc yjd, a.bz zyyy");
		sqlBF.append("  from sicp3uws.siplddflhb     a,");
		sqlBF.append("       sicp3uws.siplddflhb_per b,");
		sqlBF.append("       ad3u.per_info       c,");
		sqlBF.append("       be3u.street_natl        d,");
		sqlBF.append("       be3u.street_natl        e,");
		sqlBF.append("       biuv.person             f");
		sqlBF.append(" where a.piid = b.piid");
		sqlBF.append("   and b.ryid = c.ryid");
		sqlBF.append("   and a.xjdid = d.jdid");
		sqlBF.append("   and a.yjdid = e.jdid");
		sqlBF.append("   and b.ryid = f.ryid");
		sqlBF.append("   and a.jzbz = '1'");
		sqlBF.append("   and a.zylx = '1'");
		sqlBF.append("   and b.jzbz = '1'");
		sqlBF.append("   and exists (select '1'");
		sqlBF.append("          from ad3u.per_cmpl g");
		sqlBF.append("         where g.ryid = c.ryid");
		sqlBF.append("           and g.bcxmbh = 'NRSQGLBZ'");
		sqlBF.append("           and g.bcxmz = '1')");
		sqlBF.append("    and exists(select 1 ");//增加限定办理业务.mod.zcc.2020.01.02
		sqlBF.append("                 from bpzone.pi_hi_view m ");
		sqlBF.append("                where a.piid = m.piid ");
		sqlBF.append("                  and (m.pdid like 'AdTxAndGyryZy%' or m.pdid like 'AdQdQyTxryPlzy%' or m.pdid like 'AdQdJgTxryPlzy%') )");

		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and b.ryid = ? ");
		}
		if(qsrq != null && !"".equals(qsrq)){
			sqlBF.append("   and nvl(c.nrsqglrq, '19000101') >= ? ");
		}
		if(zzrq != null && !"".equals(zzrq)){
			sqlBF.append("   and nvl(c.nrsqglrq, '20501231') <= ? ");
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("   and exists (select '1'");
			sqlBF.append("          from si3u.orgn_reg h");
			sqlBF.append("         where c.dwdjid = h.dwdjid");
			sqlBF.append("           and h.jbjgid = ?)");
		}

		this.sql.setSql(sqlBF.toString());
		index = 1;
		if (ryid != null && !"".equals(ryid)) {
			this.sql.setString(index++, ryid);
		}
		if(qsrq != null && !"".equals(qsrq)){
			this.sql.setString(index++, qsrq);
		}
		if(zzrq != null && !"".equals(zzrq)){
			this.sql.setString(index++, zzrq);
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			this.sql.setString(index++, jbjgid);
		}
		
		DataStore dsJd = this.sql.executeQuery();

		// 社会化单位转移信息
		sqlBF.setLength(0);
		sqlBF.append("select c.ryid, f.grbh, c.xm, c.shbzhm, e.cbdwmc xdw,");
		sqlBF.append("       d.cbdwmc ydw, a.bz zyyy");
		sqlBF.append("  from sicp3uws.siplddflhb     a,");
		sqlBF.append("       sicp3uws.siplddflhb_per b,");
		sqlBF.append("       ad3u.per_info       c,");
		sqlBF.append("       si3u.orgn_reg       d,");
		sqlBF.append("       si3u.orgn_reg       e,");
		sqlBF.append("       biuv.person             f");
		sqlBF.append(" where a.piid = b.piid");
		sqlBF.append("   and b.ryid = c.ryid");
		sqlBF.append("   and a.xdwdjid = d.dwdjid");
		sqlBF.append("   and a.ydwdjid = e.dwdjid");
		sqlBF.append("   and b.ryid = f.ryid");
		sqlBF.append("   and a.jzbz = '1'");
		sqlBF.append("   and a.zylx = '0'");
		sqlBF.append("   and b.jzbz = '1'");
		sqlBF.append("   and exists (select '1'");
		sqlBF.append("          from ad3u.per_cmpl g");
		sqlBF.append("         where g.ryid = c.ryid");
		sqlBF.append("           and g.bcxmbh = 'NRSQGLBZ'");
		sqlBF.append("           and g.bcxmz = '1')");
		sqlBF.append("    and exists(select 1 ");//增加限定办理业务.mod.zcc.2020.01.02
		sqlBF.append("                 from bpzone.pi_hi_view m ");
		sqlBF.append("                where a.piid = m.piid ");
		sqlBF.append("                  and (m.pdid like 'AdTxAndGyryZy%' or m.pdid like 'AdQdQyTxryPlzy%' or m.pdid like 'AdQdJgTxryPlzy%') )");

		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("   and b.ryid = ? ");
		}
		if(qsrq != null && !"".equals(qsrq)){
			sqlBF.append("   and nvl(c.nrsqglrq, '19000101') >= ? ");
		}
		if(zzrq != null && !"".equals(zzrq)){
			sqlBF.append("   and nvl(c.nrsqglrq, '20501231') <= ? ");
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("   and exists (select '1'");
			sqlBF.append("          from si3u.orgn_reg h");
			sqlBF.append("         where c.dwdjid = h.dwdjid");
			sqlBF.append("           and h.jbjgid = ?)");
		}
		this.sql.setSql(sqlBF.toString());
		index = 1;
		if (ryid != null && !"".equals(ryid)) {
			this.sql.setString(index++, ryid);
		}
		if(qsrq != null && !"".equals(qsrq)){
			this.sql.setString(index++, qsrq);
		}
		if(zzrq != null && !"".equals(zzrq)){
			this.sql.setString(index++, zzrq);
		}
		if (jbjgid != null && !"".equals(jbjgid)) {
			this.sql.setString(index++, jbjgid);
		}
		DataStore dsDw = this.sql.executeQuery();

		DataObject rdo = new DataObject();
		rdo.put("dsjd", dsJd);
		rdo.put("dsdw", dsDw);
		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.企业待遇拨付增减变化对照表 查询
	 * 
	 * @author 谈杰
	 * @date 2019年12月25日
	 */
	public DataObject queryAdQydybfzjbhdzb(DataObject para) throws Exception {
		DataStore dsByinfo, dsSyinfo;
		// 接参
		StringBuffer sqlBF = new StringBuffer();
		String ffny = para.getDateToString("ffny", "yyyyMM");// 当月
		
		// 检测入参
		if(ffny == null || "".equals(ffny)){
			this.bizException("发放年月为空，请检查！");
		}
		String ffsy =  DateUtil.addMonthToString(ffny, "yyyyMM", -1);// 上月
		
		String ad3u1025 = SiTools.getPara(this.getBizInstitution(), "ad3u1025", "1");//养老已拨付台账表存放发放信息月数(不包括当月)
		String dqny = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		String bczwny = DateUtil.addMonthToString(dqny, "yyyyMM", Integer.parseInt(ad3u1025) * -1);//giv保存最晚年月
		// 查询本月的待遇拨付情况
		if (ffny.equals(dqny)) {
			sqlBF.setLength(0);
			sqlBF.append("  select dfjgid, dfjgmc, sum(rs) rs, sum(je) je, jbjgid, jbjgmc, dfjgbh ");
			sqlBF.append("    from ");
			sqlBF.append(" (select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, d.jbjgid, ");
			sqlBF.append("         e.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_ungiv a, ");
			sqlBF.append("         ad3u.per_info b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         si3u.orgn_reg d, ");
			sqlBF.append("         be3u.agency_natl e ");
			sqlBF.append("   where a.ryid = b.ryid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and b.dwdjid = d.dwdjid ");
			sqlBF.append("     and d.jbjgid = e.jbjgid ");
			sqlBF.append("     and d.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, d.jbjgid, e.jbjgmc, c.dfjgbh ");
			sqlBF.append("   union all ");
			sqlBF.append("  select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, e.jbjgid, ");
			sqlBF.append("         f.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_ungiv a, ");
			sqlBF.append("         ad3u.giv_way b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         ad3u.per_info d, ");
			sqlBF.append("         si3u.orgn_reg e, ");
			sqlBF.append("         be3u.agency_natl f ");
			sqlBF.append("   where a.ffxxid = b.ffxxid ");
			sqlBF.append("     and a.ryid = b.ryid ");
			sqlBF.append("     and a.ryid = d.ryid ");
			sqlBF.append("     and d.dwdjid = e.dwdjid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and e.jbjgid = f.jbjgid ");
			sqlBF.append("     and e.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is not null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, e.jbjgid, f.jbjgmc, c.dfjgbh) ");
			sqlBF.append("   group by dfjgid, dfjgmc, jbjgid, jbjgmc, dfjgbh ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffny);
			this.sql.setString(2, ffny);
			dsByinfo = this.sql.executeQuery();
		} else if (ffny.compareTo(bczwny) >= 0) {//查询gived
			sqlBF.setLength(0);
			sqlBF.append("  select dfjgid, dfjgmc, sum(rs) rs, sum(je) je, jbjgid, jbjgmc, dfjgbh ");
			sqlBF.append("    from ");
			sqlBF.append(" (select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, d.jbjgid, ");
			sqlBF.append("         e.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_gived a, ");
			sqlBF.append("         ad3u.per_info b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         si3u.orgn_reg d, ");
			sqlBF.append("         be3u.agency_natl e ");
			sqlBF.append("   where a.ryid = b.ryid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and b.dwdjid = d.dwdjid ");
			sqlBF.append("     and d.jbjgid = e.jbjgid ");
			sqlBF.append("     and d.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, d.jbjgid, e.jbjgmc, c.dfjgbh ");
			sqlBF.append("   union all ");
			sqlBF.append("  select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, e.jbjgid, ");
			sqlBF.append("         f.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_gived a, ");
			sqlBF.append("         ad3u.giv_way b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         ad3u.per_info d, ");
			sqlBF.append("         si3u.orgn_reg e, ");
			sqlBF.append("         be3u.agency_natl f ");
			sqlBF.append("   where a.ffxxid = b.ffxxid ");
			sqlBF.append("     and a.ryid = b.ryid ");
			sqlBF.append("     and a.ryid = d.ryid ");
			sqlBF.append("     and d.dwdjid = e.dwdjid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and e.jbjgid = f.jbjgid ");
			sqlBF.append("     and e.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is not null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, e.jbjgid, f.jbjgmc, c.dfjgbh) ");
			sqlBF.append("   group by dfjgid, dfjgmc, jbjgid, jbjgmc, dfjgbh ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffny);
			this.sql.setString(2, ffny);
			dsByinfo = this.sql.executeQuery();
		} else { //查询gived_his
			sqlBF.setLength(0);
			sqlBF.append("  select dfjgid, dfjgmc, sum(rs) rs, sum(je) je, jbjgid, jbjgmc, dfjgbh ");
			sqlBF.append("    from ");
			sqlBF.append(" (select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, d.jbjgid, ");
			sqlBF.append("         e.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_gived_his a, ");
			sqlBF.append("         ad3u.per_info b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         si3u.orgn_reg d, ");
			sqlBF.append("         be3u.agency_natl e ");
			sqlBF.append("   where a.ryid = b.ryid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and b.dwdjid = d.dwdjid ");
			sqlBF.append("     and d.jbjgid = e.jbjgid ");
			sqlBF.append("     and d.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, d.jbjgid, e.jbjgmc, c.dfjgbh ");
			sqlBF.append("   union all ");
			sqlBF.append("  select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, e.jbjgid, ");
			sqlBF.append("         f.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_gived_his a, ");
			sqlBF.append("         ad3u.giv_way b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         ad3u.per_info d, ");
			sqlBF.append("         si3u.orgn_reg e, ");
			sqlBF.append("         be3u.agency_natl f ");
			sqlBF.append("   where a.ffxxid = b.ffxxid ");
			sqlBF.append("     and a.ryid = b.ryid ");
			sqlBF.append("     and a.ryid = d.ryid ");
			sqlBF.append("     and d.dwdjid = e.dwdjid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and e.jbjgid = f.jbjgid ");
			sqlBF.append("     and e.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is not null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, e.jbjgid, f.jbjgmc, c.dfjgbh) ");
			sqlBF.append("   group by dfjgid, dfjgmc, jbjgid, jbjgmc, dfjgbh ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffny);
			this.sql.setString(2, ffny);
			dsByinfo = this.sql.executeQuery();
		}
	
		if (ffsy.equals(dqny)) {//这种情况应该不存在
			sqlBF.setLength(0);
			sqlBF.append("  select dfjgid, dfjgmc, sum(rs) rs, sum(je) je, jbjgid, jbjgmc, dfjgbh ");
			sqlBF.append("    from ");
			sqlBF.append(" (select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, d.jbjgid, ");
			sqlBF.append("         e.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_ungiv a, ");
			sqlBF.append("         ad3u.per_info b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         si3u.orgn_reg d, ");
			sqlBF.append("         be3u.agency_natl e ");
			sqlBF.append("   where a.ryid = b.ryid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and b.dwdjid = d.dwdjid ");
			sqlBF.append("     and d.jbjgid = e.jbjgid ");
			sqlBF.append("     and d.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, d.jbjgid, e.jbjgmc, c.dfjgbh ");
			sqlBF.append("   union all ");
			sqlBF.append("  select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, e.jbjgid, ");
			sqlBF.append("         f.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_ungiv a, ");
			sqlBF.append("         ad3u.giv_way b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         ad3u.per_info d, ");
			sqlBF.append("         si3u.orgn_reg e, ");
			sqlBF.append("         be3u.agency_natl f ");
			sqlBF.append("   where a.ffxxid = b.ffxxid ");
			sqlBF.append("     and a.ryid = b.ryid ");
			sqlBF.append("     and a.ryid = d.ryid ");
			sqlBF.append("     and d.dwdjid = e.dwdjid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and e.jbjgid = f.jbjgid ");
			sqlBF.append("     and e.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is not null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, e.jbjgid, f.jbjgmc, c.dfjgbh) ");
			sqlBF.append("   group by dfjgid, dfjgmc, jbjgid, jbjgmc, dfjgbh ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffsy);
			this.sql.setString(2, ffsy);
			dsSyinfo = this.sql.executeQuery();
		} else if (ffsy.compareTo(bczwny) >= 0) {//查询gived
			sqlBF.setLength(0);
			sqlBF.append("  select dfjgid, dfjgmc, sum(rs) rs, sum(je) je, jbjgid, jbjgmc, dfjgbh ");
			sqlBF.append("    from ");
			sqlBF.append(" (select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, d.jbjgid, ");
			sqlBF.append("         e.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_gived a, ");
			sqlBF.append("         ad3u.per_info b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         si3u.orgn_reg d, ");
			sqlBF.append("         be3u.agency_natl e ");
			sqlBF.append("   where a.ryid = b.ryid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and b.dwdjid = d.dwdjid ");
			sqlBF.append("     and d.jbjgid = e.jbjgid ");
			sqlBF.append("     and d.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, d.jbjgid, e.jbjgmc, c.dfjgbh ");
			sqlBF.append("   union all ");
			sqlBF.append("  select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, e.jbjgid, ");
			sqlBF.append("         f.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_gived a, ");
			sqlBF.append("         ad3u.giv_way b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         ad3u.per_info d, ");
			sqlBF.append("         si3u.orgn_reg e, ");
			sqlBF.append("         be3u.agency_natl f ");
			sqlBF.append("   where a.ffxxid = b.ffxxid ");
			sqlBF.append("     and a.ryid = b.ryid ");
			sqlBF.append("     and a.ryid = d.ryid ");
			sqlBF.append("     and d.dwdjid = e.dwdjid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and e.jbjgid = f.jbjgid ");
			sqlBF.append("     and e.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is not null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, e.jbjgid, f.jbjgmc, c.dfjgbh) ");
			sqlBF.append("   group by dfjgid, dfjgmc, jbjgid, jbjgmc, dfjgbh ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffsy);
			this.sql.setString(2, ffsy);
			dsSyinfo = this.sql.executeQuery();
		} else { //查询gived_his
			sqlBF.setLength(0);
			sqlBF.append("  select dfjgid, dfjgmc, sum(rs) rs, sum(je) je, jbjgid, jbjgmc, dfjgbh ");
			sqlBF.append("    from ");
			sqlBF.append(" (select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, d.jbjgid, ");
			sqlBF.append("         e.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_gived_his a, ");
			sqlBF.append("         ad3u.per_info b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         si3u.orgn_reg d, ");
			sqlBF.append("         be3u.agency_natl e ");
			sqlBF.append("   where a.ryid = b.ryid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and b.dwdjid = d.dwdjid ");
			sqlBF.append("     and d.jbjgid = e.jbjgid ");
			sqlBF.append("     and d.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, d.jbjgid, e.jbjgmc, c.dfjgbh ");
			sqlBF.append("   union all ");
			sqlBF.append("  select b.dfjgid, c.dfjgmc, count(distinct a.ryid) rs, sum(a.btje) je, e.jbjgid, ");
			sqlBF.append("         f.jbjgmc, c.dfjgbh  ");
			sqlBF.append("    from ad3u.per_giv_detl_gived_his a, ");
			sqlBF.append("         ad3u.giv_way b, ");
			sqlBF.append("         be3u.provide_natl c, ");
			sqlBF.append("         ad3u.per_info d, ");
			sqlBF.append("         si3u.orgn_reg e, ");
			sqlBF.append("         be3u.agency_natl f ");
			sqlBF.append("   where a.ffxxid = b.ffxxid ");
			sqlBF.append("     and a.ryid = b.ryid ");
			sqlBF.append("     and a.ryid = d.ryid ");
			sqlBF.append("     and d.dwdjid = e.dwdjid ");
			sqlBF.append("     and b.dfjgid = c.dfjgid ");
			sqlBF.append("     and e.jbjgid = f.jbjgid ");
			sqlBF.append("     and e.jbjgid like '%01' ");// 限制企业
			sqlBF.append("     and a.ffxxid is not null ");
			sqlBF.append("     and a.ffny = ? ");
			sqlBF.append("   group by b.dfjgid, c.dfjgmc, e.jbjgid, f.jbjgmc, c.dfjgbh) ");
			sqlBF.append("   group by dfjgid, dfjgmc, jbjgid, jbjgmc, dfjgbh ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffsy);
			this.sql.setString(2, ffsy);
			dsSyinfo = this.sql.executeQuery();
		}
		
		// 比对和转移本月与上月的ds数据
		for(int i = 0; i < dsSyinfo.rowCount(); i++){
			String dfjgid = dsSyinfo.getString(i, "dfjgid");
			String jbjgid = dsSyinfo.getString(i, "jbjgid");
			int find = dsByinfo.find(" dfjgid == " + dfjgid + " and jbjgid == " + jbjgid );
			if(find < 0){// 上月有而本月没有，则将上月的数据加到本月ds中
				DataObject doTemp = dsSyinfo.getRow(i);
				dsByinfo.addRow(doTemp);
				// 将上月的人数和金额作为上月人数syrs和上月金额syje
				dsByinfo.put(dsByinfo.rowCount() - 1, "syrs", dsByinfo.getInt(dsByinfo.rowCount() - 1, "rs"));
				dsByinfo.put(dsByinfo.rowCount() - 1, "syje", dsByinfo.getDouble(dsByinfo.rowCount() - 1, "je"));
				// 将人数和金额置为0作为本月人数rs和本月金额je
				dsByinfo.put(dsByinfo.rowCount() - 1, "rs", 0);
				dsByinfo.put(dsByinfo.rowCount() - 1, "je", 0);
			}else{// 上月有且本月也有，则将上月的人数和金额作为上月人数syrs和上月金额syje加到本月对应数据中
				dsByinfo.put(find, "syrs", dsSyinfo.getInt(i, "rs"));
				dsByinfo.put(find, "syje", dsSyinfo.getDouble(i, "je"));
			}
		}
		
		// 再对本月ds数据循环计算
		for(int j = 0; j < dsByinfo.rowCount(); j++){
			// 在上个循环中，本月有而上月没有的数据会没有syrs和syje，将其置为0
			if(!dsByinfo.containsItem(j, "syrs")){
				dsByinfo.put(j, "syrs", 0);
			}
			if(!dsByinfo.containsItem(j, "syje")){
				dsByinfo.put(j, "syje", 0);
			}
			int byrs = dsByinfo.getInt(j, "rs");// 本月人数
			int syrs = dsByinfo.getInt(j, "syrs");// 上月人数
			double byje = dsByinfo.getDouble(j, "je");// 本月金额
			double syje = dsByinfo.getDouble(j, "syje");// 上月金额
			
			// 计算人数差和金额差
			dsByinfo.put(j, "rsc", byrs - syrs);
			dsByinfo.put(j, "jec", MathUtil.round(byje - syje, 2));
		}
		
		dsByinfo.sort("dfjgid");
		DataObject rdo = new DataObject();
		rdo.put("dsinfo", dsByinfo);
		return rdo;
	}
	/**
	 * 方法简介.企业统计应拨付进度查询
	 * 
	 * @author zcc
	 * @date 2019-12-25
	 */
	public DataObject queryAdQytjybfjdInfo(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接参数
		String qsybz = para.getString("qsybz");
		String fkssq = para.getDateToString("fkssq", "yyyyMM");
		
		//校验参数
		if(qsybz == null || "".equals(qsybz)){
			this.bizException("请选择企事业标志！");
		}
		//获取操作员的经办机构
		String jbjgid = "";
		DataStore dsJbjg = SiTools.getOperateJbjgidByUserId(this.getUser().getUserid());
		if (dsJbjg.rowCount() == 0) {
			this.bizException("未查询到您有操作权限的经办机构！");
		} else {
			for (int j = 0; j < dsJbjg.rowCount(); j++) {
				jbjgid = jbjgid + dsJbjg.getString(j, "value") + ",";
			}
			jbjgid = jbjgid.substring(0, jbjgid.length() - 1);
		}
		DataStore dsPerInfo = new DataStore();
		
		sqlBF.setLength(0);
		sqlBF.append("select '查看' cz,a.jsny fkssq,decode(?, '1', '101', '2', '102', null) xzbz,nvl(a.dwzs, 0) dwzs,a.piid,");
		sqlBF.append("       sum(decode(b.bfcgbz,'1',nvl(b.cgdws, 0),'9',nvl(b.cgdws, 0),0)) cgdws,0 sbdws,a.slr jbr,a.slsj jbsj");
		sqlBF.append("  from sicp3uws.adtjybf a, sicp3uws.adtjybf_detl b, bpzone.pi_hi_view c ");
		sqlBF.append(" where a.tjybfjzbz in('7', '9')");
		sqlBF.append("   and substr(a.lsjgid,7,2) = ? ");
		sqlBF.append("   and a.lsjgid like '3752%' ");//只查询青岛
		sqlBF.append("   and a.piid = b.piid ");
		sqlBF.append("   and a.piid = c.piid ");
		sqlBF.append("   and c.pdid like 'AdTjybf%' ");//增加限定办理业务
		
		if(fkssq != null || "".equals(fkssq)){
			sqlBF.append("   and a.jsny = ? ");
		}
		sqlBF.append("   group by a.jsny,a.dwzs,a.piid,a.slr,a.slsj ");
		this.sql.setSql(sqlBF.toString());
		int index = 1;
		this.sql.setString(index++, qsybz);
		if("1".equals(qsybz)){
			this.sql.setString(index++, "01");
		}else{
			this.sql.setString(index++, "03");
		}
		if(fkssq != null || "".equals(fkssq)){
			this.sql.setString(index++, fkssq);
		}
		dsPerInfo = this.sql.executeQuery();
		dsPerInfo.sortdesc("jbsj");
		
		dsPerInfo = HsuTools.genSysUserDataStore(dsPerInfo, "jbr", "dysprbh", "jbr");

		DataObject rdo = new DataObject();
		rdo.put("ds", dsPerInfo);
		return rdo;
	}
	/**
	 * 方法简介.企业统计应拨付详细进度查看
	 * 
	 * @author zcc
	 * @date 2019-12-26
	 */
	public DataObject fwdAdtjybfXxjdxx(final DataObject para) throws Exception {
		String piid = para.getString("piid");
		String fkssq = para.getDateToString("fkssq", "yyyyMM");
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append("select distinct b.dwdjid,c.dwbh,'单位' dsrlb, '1' yxjg, '拨付成功：人数为' || count(b.ryid) bz, b.dfjgid ");
		sqlBF.append("  from sicp3uws.adtjybf_detl a, ad3u.per_info b, si3u.orgn_reg c");
		sqlBF.append(" where b.jsdyybfzny >= ?");
		sqlBF.append("   and b.dyxsksny <= ?");
		sqlBF.append("   and b.dwdjid = c.dwdjid");
		sqlBF.append("   and c.jbjgid = a.jbjgid");
		sqlBF.append("   and nvl(b.dyzzny, '205012') >= ?");
		sqlBF.append("   and piid = ?");
		sqlBF.append("   and c.jbjgid = a.jbjgid");
		sqlBF.append("   and b.jsdyybfzny is not null");
		sqlBF.append("   and a.jgid = b.dfjgid");
		sqlBF.append("   and a.bfcgbz in( '1','9')");
		sqlBF.append("   and a.cgdws > 0");
		sqlBF.append(" group by b.dwdjid, c.dwbh, b.dfjgid");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, fkssq);
		this.sql.setString(2, fkssq);
		this.sql.setString(3, fkssq);
		this.sql.setString(4, piid);
		
		DataStore dwInfo = this.sql.executeQuery();
		
		DataObject rdo = new DataObject();
		rdo.put("ds", dwInfo);
		return rdo;
	}
	
	/**
	 * 方法简介.获取 企业数据采集统计 打印企业退休人员社会化管理服务基本信息表 数据
	 * 
	 * @author 谈杰
	 * @date 2019-12-28
	 */
	public DataObject getQysjcjtjPrintInfo(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();
		
		String ryid = para.getString("ryid", "");
		if(ryid == null || "".equals(ryid)){
			this.bizException("传入的人员ID为空，请检查！");
		}
		
		String ygzdw = "", ydwbh = "", tcjn = "", xqah = "", fhzy = "",
			   tsry = "", txzgqrlb = "", ydbz = "", poxm = "", pocsrq = "",
			   podh = "", podw = "", pomqzk = "", pojkzk = "", qtxm = "",
			   qtgx = "", qtdw = "", qtdh = "", qtxxdz = "", qtyzbm = "",
			   fhzyString = "", tsryString = "", jzgbString = "", jzqkString = "", qtdzString = "";
			
		// 基本信息
		sqlBF.setLength(0);
		sqlBF.append(" select f.jdmc, a.grbh, b.jdid, g.sqid, g.sqmc, a.xm, ");
		sqlBF.append("        a.xb, a.mz, a.csrq, a.shbzhm, a.zzmm, ");
		sqlBF.append("        a.grsf, c.xzzw, d.cjgzrq, d.ltxrq, a.whcd, ");
		sqlBF.append("        b.zfrylb, c.ryzt, h.jbjgmc, e.jbjgid, a.hkszd, ");
		sqlBF.append("        a.jtzz, a.gddh, a.sjhm ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        si3u.per_natl c, ");
		sqlBF.append("        ad3u.emp_info d, ");
		sqlBF.append("        si3u.orgn_reg e, ");
		sqlBF.append("        be3u.street_natl f, ");
		sqlBF.append("        be3u.community_natl g, ");
		sqlBF.append("        be3u.agency_natl h ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.ryid = c.ryid(+) ");
		sqlBF.append("    and b.ryid = d.ryid(+) ");
		sqlBF.append("    and b.dwdjid = e.dwdjid ");
		sqlBF.append("    and b.jdid = f.jdid(+) ");
		sqlBF.append("    and b.sqid = g.sqid(+) ");
		sqlBF.append("    and e.jbjgid = h.jbjgid ");
		sqlBF.append("    and a.ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsJbxx = this.sql.executeQuery();
		
		if (dsJbxx.rowCount() <= 0) {
			this.bizException("未查询到该人员的养老退休登记信息！");
		}
		
		String jdmc = dsJbxx.getString(0, "jdmc");
		String grbh = dsJbxx.getString(0, "grbh");
		String jdid = dsJbxx.getString(0, "jdid");
		String sqmc = dsJbxx.getString(0, "sqmc");
		String xm = dsJbxx.getString(0, "xm");
		String xb = dsJbxx.getString(0, "xb");
		String mz = dsJbxx.getString(0, "mz");
		String csrq = dsJbxx.getString(0, "csrq");
		String shbzhm = dsJbxx.getString(0, "shbzhm");
		String zzmm = dsJbxx.getString(0, "zzmm");
		String grsf = dsJbxx.getString(0, "grsf");
		String xzzw = dsJbxx.getString(0, "xzzw");
		String cjgzrq = dsJbxx.getString(0, "cjgzrq");
		String ltxrq = dsJbxx.getString(0, "ltxrq");
		String whcd = dsJbxx.getString(0, "whcd");
		String zfrylb = dsJbxx.getString(0, "zfrylb");
		String ryzt = dsJbxx.getString(0, "ryzt");
		String jbjgmc = dsJbxx.getString(0, "jbjgmc");
		String jbjgid = dsJbxx.getString(0, "jbjgid");
		String hkszd = dsJbxx.getString(0, "hkszd");
		String jtzz = dsJbxx.getString(0, "jtzz");
		String gddh = dsJbxx.getString(0, "gddh");
		String sjhm = dsJbxx.getString(0, "sjhm");

		// 原工作单位及其编号
		sqlBF.setLength(0);
		sqlBF.append(" select b.cbdwmc, b.dwbh ");
		sqlBF.append("   from ad3u.per_cmpl a, ");
		sqlBF.append("        si3u.orgn_reg b ");
		sqlBF.append("  where a.bcxmbh = 'YGZDW' "); 
		sqlBF.append("    and a.bcxmz = b.dwdjid ");
		sqlBF.append("    and a.ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsYgzdw = this.sql.executeQuery();
		
		if(dsYgzdw.rowCount() > 0){
			ygzdw = dsYgzdw.getString(0, "cbdwmc");
			ydwbh = dsYgzdw.getString(0, "dwbh");
		}
		
		// 特长技能
		sqlBF.setLength(0);
		sqlBF.append(" select bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl ");
		sqlBF.append("  where bcxmbh = 'TCJN' ");
		sqlBF.append("    and ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsTcjn = this.sql.executeQuery();
		
		if(dsTcjn.rowCount() > 0){
			tcjn = dsTcjn.getString(0, "bcxmz");
		}
		
		// 兴趣爱好
		sqlBF.setLength(0);
		sqlBF.append(" select bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl ");
		sqlBF.append("  where bcxmbh = 'XQAH' ");
		sqlBF.append("    and ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsXqah = this.sql.executeQuery();
		
		if(dsXqah.rowCount() > 0){
			xqah = dsXqah.getString(0, "bcxmz");
		}
		
		// 发挥作用情况
		sqlBF.setLength(0);
		sqlBF.append(" select bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl ");
		sqlBF.append("  where bcxmbh = 'FHZY' ");
		sqlBF.append("    and ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsFhzy = this.sql.executeQuery();
		
		if(dsFhzy.rowCount() > 0){
			fhzy = dsFhzy.getString(0, "bcxmz");
		}
		
		// 发挥作用情况字符串的组装
		fhzyString = "从事专业技术服务";
		if("1".equals(fhzy)){
			fhzyString += "√";
		}else {
			fhzyString += "□";
		}
		
		fhzyString += "创办经济实体";
		if("2".equals(fhzy)){
			fhzyString += "√";
		}else {
			fhzyString += "□";
		}
		
		fhzyString += "从事社会公益活动";
		if("3".equals(fhzy)){
			fhzyString += "√";
		}else {
			fhzyString += "□";
		}
		
		
		// 特殊人员情况
		sqlBF.setLength(0);
		sqlBF.append(" select bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl ");
		sqlBF.append("  where bcxmbh = 'TSRYQK' ");
		sqlBF.append("    and ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsTsry = this.sql.executeQuery();
		
		if(dsTsry.rowCount() > 0){
			tsry = dsTsry.getString(0, "bcxmz");
		}
		
		// 特殊人员情况字符串的组装（多选
		tsryString = "八十岁以上高龄";
		if(tsry.indexOf("1") >= 0){
			tsryString += "√";
		}else {
			tsryString += "□";
		}
		
		tsryString += "孤寡老人";
		if(tsry.indexOf("2") >= 0){
			tsryString += "√";
		}else {
			tsryString += "□";
		}
		
		tsryString += "省市劳模";
		if(tsry.indexOf("4") >= 0){
			tsryString += "√";
		}else {
			tsryString += "□";
		}
		
		tsryString += "重病";
		if(tsry.indexOf("3") >= 0){
			tsryString += "√";
		}else {
			tsryString += "□";
		}
		
		
		// 军转干部
		sqlBF.setLength(0);
		sqlBF.append(" select bcxmz ");
		sqlBF.append("   from si3u.per_natl_cmpl ");
		sqlBF.append("  where bcxmbh = 'TXZGQRLB' ");
		sqlBF.append("    and ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsJzgb = this.sql.executeQuery();
		
		if(dsJzgb.rowCount() > 0){
			txzgqrlb = dsJzgb.getString(0, "bcxmz");
		}
		
		if (txzgqrlb.indexOf("1") >= 0) {// 包含军转干部
			jzgbString = "√";
		}else {
			jzgbString = "□";
		}
		
		
		// 异地人员
		sqlBF.setLength(0);
		sqlBF.append(" select bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl ");
		sqlBF.append("  where bcxmbh = 'YDBZ' ");
		sqlBF.append("    and ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsYdry = this.sql.executeQuery();
		
		if(dsYdry.rowCount() > 0){
			ydbz = dsYdry.getString(0, "bcxmz");
		}
		
		// 居住情况字符串的组装
		jzqkString = "市内四区人员";
		if(jbjgid.startsWith("375299") || jbjgid.startsWith("375202")// 市内四区
				|| jbjgid.startsWith("375203") || jbjgid.startsWith("375213")){
			jzqkString += "√";
		}else {
			jzqkString += "□";
		}
		
		jzqkString += "五市三区人员";
		if(!jbjgid.startsWith("375299") && !jbjgid.startsWith("375202")
				&& !jbjgid.startsWith("375203") && !jbjgid.startsWith("375213")){// 五市三区
			jzqkString += "√";
		}else {
			jzqkString += "□";
		}
		
		jzqkString += "异地人员";
		if("1".equals(ydbz)){// 异地标志为1表示该人员为异地人员
			jzqkString += "√";
		}else {
			jzqkString += "□";
		}
		
		jzqkString += "出国定居□";
		
		
		// 配偶情况
		sqlBF.setLength(0);
		sqlBF.append(" select xm, csrq, lxdh, qsdw, mqzk, jkzk, rygx ");
		sqlBF.append("   from ad3u.fami_natl ");
		sqlBF.append("  where dyryid = ? ");
		sqlBF.append("    and rygx = '10' ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsPoqk = this.sql.executeQuery();
		
		if(dsPoqk.rowCount() > 0){
			poxm = dsPoqk.getString(0, "xm");
			pocsrq = dsPoqk.getString(0, "csrq");
			podh = dsPoqk.getString(0, "lxdh");
			podw = dsPoqk.getString(0, "qsdw");
			pomqzk = dsPoqk.getString(0, "mqzk");
			pojkzk = dsPoqk.getString(0, "jkzk");
		}
		
		// 家庭其他联系人
		sqlBF.setLength(0);
		sqlBF.append(" select xm, rygx, qsdw, lxdh, txdz, yzbm ");
		sqlBF.append("   from ad3u.fami_natl ");
		sqlBF.append("  where dyryid = ? ");
		sqlBF.append("    and rygx <> '10' ");
		
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsqtqk = this.sql.executeQuery();
		
		if(dsqtqk.rowCount() > 0){
			qtxm = dsqtqk.getString(0, "xm");
			qtgx = dsqtqk.getString(0, "rygx");
			qtdw = dsqtqk.getString(0, "qsdw");
			qtdh = dsqtqk.getString(0, "lxdh");
			qtxxdz = dsqtqk.getString(0, "txdz");
			qtyzbm = dsqtqk.getString(0, "yzbm");
		}
		
		// 详细地址及邮政编码字符串的组装
		qtdzString = qtxxdz;
		if(qtyzbm != null && !"".equals(qtyzbm)){
			qtdzString += "  邮政编码： " + qtyzbm;
		}
		
		
		// 组装打印信息
		if(jdmc == null || "".equals(jdmc)){
			jdmc = "";
		}
		
		String dygs = "adQytxryshhglfwjbxxb";
		SPrinter printer = new SPrinter();
		printer.putPara("jdmc", "青岛市 " + jdmc + " ");
		printer.putPara("grbh", grbh);
		printer.putPara("jdid", jdid);
		printer.putPara("sqmc", sqmc);
		printer.putPara("xm", xm);
		printer.putPara("xb", HsuTools.discode("XB", xb, ""));
		printer.putPara("mz", HsuTools.discode("MZ", mz, ""));
		
		if(csrq != null && !"".equals(csrq)){
			printer.putPara("csny", csrq.substring(0, 6));
		}
		
		printer.putPara("shbzhm", shbzhm);
		printer.putPara("zzmm", HsuTools.discode("ZZMM", zzmm, ""));
		printer.putPara("ygzdw", ygzdw);
		printer.putPara("grsf", HsuTools.discode("GRSF", grsf, ""));
		printer.putPara("xzzw", HsuTools.discode("XZZW", xzzw, ""));
		printer.putPara("cjgzrq", cjgzrq);
		printer.putPara("ltxrq", ltxrq);
		printer.putPara("ydwbh", ydwbh);
		printer.putPara("whcd", HsuTools.discode("WHCD", whcd, ""));
		printer.putPara("tcjn", tcjn);
		printer.putPara("xqah", xqah);
		printer.putPara("zfrylb", HsuTools.discode("ZFRYLB", zfrylb, ""));
		
		printer.putPara("fhzyqk", fhzyString);
		printer.putPara("jzgb", jzgbString);
		printer.putPara("hq", "□");
		printer.putPara("tsryqk", tsryString);
		
		printer.putPara("sczt", HsuTools.discode("RYSCZT", ryzt, ""));
		printer.putPara("shbxgxszd", jbjgmc);
		printer.putPara("cbqk", "养老□医疗□工伤□");
		
		printer.putPara("jzqk", jzqkString);
		printer.putPara("hkszd", hkszd);
		printer.putPara("jtzz", jtzz);
		printer.putPara("gddh", gddh);
		printer.putPara("sjhm", sjhm);
		
		printer.putPara("poxm", poxm);
		printer.putPara("pocsrq", pocsrq);
		printer.putPara("polxdh", podh);
		printer.putPara("podw", podw);
		printer.putPara("pomqzk", HsuTools.discode("MQZK", pomqzk, ""));
		printer.putPara("pojkzk", HsuTools.discode("JKZK", pojkzk, ""));
		
		printer.putPara("qtxm", qtxm);
		printer.putPara("qtgx", HsuTools.discode("RYGX", qtgx, ""));
		printer.putPara("qtdw", qtdw);
		printer.putPara("qtdh", qtdh);
		printer.putPara("qtdz", qtdzString);
		
		String printhtml = printer.print(this.getBizInstitution(), dygs);
		rdo.clear();
		rdo.put("printhtml", printhtml);

		return rdo;
	}
	
	/**
	 *  查询退休预发人员按钮
	 * @author qiukai
	 * @date 创建时间 20200111
	 * @since V1.0
	 */
	public final DataObject queryAdYfInfo(final DataObject para)
			throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		// 接收参数
		String qsltxrq = para.getDateToString("qsltxrq", "yyyymmdd");
		String zzltxrq = para.getDateToString("zzltxrq", "yyyymmdd");
		String ryid = para.getString("ryid", "");

		String dwdjid = para.getString("dwdjid", "");

		// 检查条件
		if (ryid == null || "".equals(ryid)) { // 如果ryid为空时，需要输入时间段
			if (qsltxrq == null || qsltxrq.trim().isEmpty()) {
				this.bizException("起始离退休日期不能为空。");
			}
			if (zzltxrq == null || zzltxrq.trim().isEmpty()) {
				this.bizException("终止离退休日期不能为空。");
			}
			if (qsltxrq.substring(0, 4).compareTo(zzltxrq.substring(0, 4)) != 0) {
				this.bizException("离退休起止时间必须在同一年度！");
			}
			if (qsltxrq.compareTo("20140101") < 0) {
				this.bizException("起始离退休日期不能早于2014-01-01。");
			}
			if (qsltxrq.compareTo(zzltxrq) > 0) {
				this.bizException("离退休起始日期晚于终止日期！");
			}
		}

		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.xm, p.shbzhm, nvl(p.dyspbz, 0) txfhzt, '1' txxzzt,  ");
		sqlBF.append("        r.rydjlb, d.grbh, r.rydjid, d.grsf, q.dwbh,  ");
		sqlBF.append("        z.zgbmhzjg, q.cbdwmc, r.jdid ");
		sqlBF.append("   from ad3u.per_info p,  ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.per_reg r, ");
		sqlBF.append("        biuv.person  d, ");
		sqlBF.append("        si3u.orgn_reg q, ");
		sqlBF.append("        biuv.orgn z ");
		sqlBF.append("  where p.ryid = e.ryid ");
		sqlBF.append("    and p.ryid = r.ryid ");
		sqlBF.append("    and d.ryid = r.ryid ");
		sqlBF.append("    and q.dwdjid = r.dwdjid ");
		sqlBF.append("    and q.dwid = z.dwid ");
		sqlBF.append("    and r.hdbz = '1' ");
		sqlBF.append("    and p.dwdjid = r.dwdjid ");
		if (dwdjid != null && dwdjid.trim().isEmpty() == false
				&& !"".equals(dwdjid)) {
			sqlBF.append("    and p.dwdjid = '" + dwdjid + "' ");
		}
		if (ryid != null && ryid.trim().isEmpty() == false) {
			sqlBF.append("    and p.ryid = '" + ryid + "' ");
		}
		if (ryid == null || "".equals(ryid)) { // 具体到某人查询时不限制时间
			sqlBF.append("    and e.ltxrq between '" + qsltxrq + "' and '"
					+ zzltxrq + "' ");
		}

		sqlBF.append(" union  ");
		sqlBF.append(" select p.ryid, p.xm, p.shbzhm, '0' txfhzt, '0' txxzzt, ");
		sqlBF.append("        r.rydjlb, d.grbh, r.rydjid, d.grsf, e.dwbh,  ");
		sqlBF.append("        z.zgbmhzjg, e.cbdwmc, r.jdid  ");
		sqlBF.append("   from si3u.per_natl p, ");
		sqlBF.append("        si3u.per_reg r, ");
		sqlBF.append("        si3u.per_natl_cmpl c, ");
		sqlBF.append("        biuv.person  d, ");
		sqlBF.append("        si3u.orgn_reg  e, ");
		sqlBF.append("        biuv.orgn z ");
		sqlBF.append("  where p.ryid = c.ryid ");
		sqlBF.append("    and r.ryid = p.ryid ");
		sqlBF.append("    and d.ryid = r.ryid ");
		sqlBF.append("    and r.dwdjid = e.dwdjid ");
		sqlBF.append("    and e.dwid = z.dwid ");
		sqlBF.append("    and r.hdbz = '1' ");
		sqlBF.append("    and c.bcxmbh = 'LTXRQ' ");
		if (dwdjid != null && dwdjid.trim().isEmpty() == false
				&& !"".equals(dwdjid)) {
			sqlBF.append("    and r.dwdjid = '" + dwdjid + "' ");
		}
		if (ryid != null && ryid.trim().isEmpty() == false) {
			sqlBF.append("    and p.ryid = '" + ryid + "' ");
		}
		if (ryid == null || "".equals(ryid)) { // 具体到某人查询时不限制时间
			sqlBF.append("    and c.bcxmz between '" + qsltxrq + "' and '"
					+ zzltxrq + "' ");
		}
		sqlBF.append("    and not exists ( select '' ");
		sqlBF.append("                       from ad3u.per_info p1 ");
		sqlBF.append("                      where p1.ryid = p.ryid) ");

		this.sql.setSql(sqlBF.toString());
		DataStore vds = this.sql.executeQuery();

		if (vds.rowCount() == 0) {
			this.bizException("未查到任何符合条件的人员。");
		}

		DataStore vds_temp = new DataStore();
		String vryid = null, vzgshzt = null, vjyzt = null, vzhjqzt = null;
		String vzglb = null, sftx = null, sfyf = null, yhmc = "", yhhm = "", yhzh = "";
		double btje = 0;
		for (int vi = 0; vi < vds.rowCount(); vi++) {
			vryid = vds.getString(vi, "ryid");
			String txxzzt = vds.getString(vi, "txxzzt");
			vzglb = vds.getString(vi, "rydjlb");

			// 资格审核状态、缴费历史初审状态、缴费历史复审状态
			String txzgysbz = SiTools.getPerNatlCmpl(vryid, "TXZGYSBZ", "");
			if ("1".equals(txzgysbz)) {
				vzgshzt = "1";
			} else {
				vzgshzt = "0";
			}

			// 减员状态
			if ("A0A,A0G".indexOf(vzglb) >= 0 && "0".equals(txxzzt)) {
				vjyzt = "0";
			} else {
				vjyzt = "1";
			}
			// 账户结清状态
			sqlBF.setLength(0);
			sqlBF.append(" select '*' ");
			sqlBF.append("   from si3u.aged_settle a ");
			sqlBF.append("  where ryid = ? ");
			sqlBF.append("    and not exists (select '1' ");// 跟退休登记保持一致，增加两个表
															// weichao 20160418
			sqlBF.append("           from si3u.aged_pay_his d ");
			sqlBF.append("          where a.ryid = d.ryid ");
			sqlBF.append("            and d.btcxlnt is null ");
			sqlBF.append("            and d.btbntcx is null ");
			sqlBF.append("            and d.ryid = ?) ");
			sqlBF.append("    and not exists (select '1' ");
			sqlBF.append("           from si3u.aged_account_sum e ");
			sqlBF.append("          where a.ryid = e.ryid ");
			sqlBF.append("            and e.ryid = ?) ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vryid);
			this.sql.setString(2, vryid);
			this.sql.setString(3, vryid);
			vds_temp = this.sql.executeQuery();

			if (vds_temp.rowCount() > 0) {
				vzhjqzt = "1";
			} else {
				vzhjqzt = "0";
			}

			// 查询是否退休
			sqlBF.setLength(0);
			sqlBF.append(" select b.dfjgmc  yhmc, nvl(a.yhhm, a.xm) yhhm, a.yhzh ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        be3u.provide_natl b ");
			sqlBF.append("  where a.dfjgid = b.dfjgid ");
			sqlBF.append("    and b.xzbz = '101' ");
			sqlBF.append("    and a.ryid = ? ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vryid);

			vds_temp = this.sql.executeQuery();

			if (vds_temp.rowCount() > 0) {
				sftx = "1";
				yhmc = vds_temp.getString(0, "yhmc");
				yhhm = vds_temp.getString(0, "yhhm");
				yhzh = vds_temp.getString(0, "yhzh");
			} else {
				sftx = "0";
				yhmc = "";
				yhhm = "";
				yhzh = "";
			}

			// 查询是否预发
			sqlBF.setLength(0);
			sqlBF.append(" select a.btje from ad3u.per_giv_month_std a where a.ryid=? and a.btbh='A1L2' order by a.qsny desc ");
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, vryid);
			vds_temp = this.sql.executeQuery();
			if (vds_temp.rowCount() > 0) {
				sfyf = "1";
				btje = vds_temp.getDouble(0, "btje");
			} else {
				sfyf = "0";
				btje = 0;
			}

			vds.put(vi, "zgshzt", vzgshzt);
			vds.put(vi, "jyzt", vjyzt);
			vds.put(vi, "zhjqzt", vzhjqzt);
			vds.put(vi, "sftx", sftx);
			vds.put(vi, "sfyf", sfyf);
			vds.put(vi, "btje", btje);
			vds.put(vi, "yhmc", yhmc);
			vds.put(vi, "yhhm", yhhm);
			vds.put(vi, "yhzh", yhzh);
			
		}

		HsuTools.genJdxxDataStore(vds, "jdid", "jdbh", "jdmc");
		
		// 返回参数
		DataObject rdo = new DataObject();
		rdo.put("vds", vds);
		return rdo;
	}
	
	/**
	 * 大纬养老认证信息查询
	 * 
	 * @author zxk 2020年1月9日
	 * @midofy by tfq 20200409 增加居民经办机构
	 */
	public DataObject fwdDwylrzxxUTC(final DataObject para) throws Exception {
		// 取经办机构信息，修改获取经办机构ds的方法，该方法可以获取查询权限经办机构
		DataStore dsJbjg = SiTools.getQueryJbjgidByUserId(this.getUser().getUserid());
		DataStore dsjbjgjm = HsuTools.getQueryJbjgDs(this.getUser(), "702");
		dsJbjg.combineDatastore(dsjbjgjm);
		dsJbjg.sort("value");

		String jbjgid = "";
		if (dsJbjg.rowCount() == 1) {
			jbjgid = dsJbjg.getString(0, "value");
		}

		DataObject rdo = new DataObject();
		rdo.put("dsjbjg", dsJbjg);
		rdo.put("jbjgid", jbjgid);
		
		return rdo;
	}
	
	/**
	 *  查询退休预发人员明细按钮
	 * @author qiukai
	 * @date 创建时间 2020-02-26
	 * @since V1.0
	 */
	public final DataObject queryYfInfoDetl(final DataObject para)
			throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		// 接收参数
		String ryid = para.getString("ryid", "");
		
		if(ryid == null || "".equals(ryid)){
			this.bizException("查询明细时ryid为空！");
		}
		
		
		//查询此人基本信息
		sqlBF.append(" select a.shbzhm, a.xm, a.xb, b.grbh, a.csrq, ");
		sqlBF.append("        c.cjgzrq, a.ygxs, b.mz, b.grsf, b.hkxz, ");
		sqlBF.append("        b.lxrdh, b.jtzz,  b.yxzjhm,  a.xzzw, c.zglb,");
		sqlBF.append("        b.yzbm,  a.yhzh,  a.yhid, b.zyjszwjb, b.gjzyzgdj ");
		sqlBF.append("   from si3u.per_natl a, ");
		sqlBF.append("   	  biuv.person b, ");
		sqlBF.append("   	  si3u.per_reg c ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and b.ryid = c.ryid ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);
		DataStore dsPerNatl = this.sql.executeQuery();
		
		HsuTools.genYhxxDataStore(dsPerNatl, "yhid", "yhbh", "yhmc");
		
		String bcxmz = SiTools.getPerNatlCmpl(ryid, "DACSRQ", null);
		dsPerNatl.put(0, "dacsrq", bcxmz);
		
		//个人的履历信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.qsny, a.zzny, a.dwmc, a.gw, a.tsgzbs, ");
		sqlBF.append(" 	      a.glzdlb, a.bz");
		sqlBF.append("   from si3u.per_rec a");
		sqlBF.append("  where a.ryid = ? ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);

		DataStore dsPerRec = this.sql.executeQuery();
		dsPerRec = dsPerRec.sort("qsny");
		
		//缴费历史信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.qsny, a.zzny, a.jfjs, a.dwjfe, a.grjfe, ");
		sqlBF.append("        a.yljflslb ");
		sqlBF.append("   from ad3u.per_pay_his a ");
		sqlBF.append("  where a.ryid = ? ");
		sqlBF.append("    and a.bz = '养老缴费历史单机版导入' ");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ryid);

		DataStore dsPerHis = this.sql.executeQuery();
		dsPerHis = dsPerHis.sort("qsny");
		
		
		// 返回参数
		DataObject rdo = new DataObject();
		rdo.put("dsPerNatl", dsPerNatl);
		rdo.put("dsPerRec", dsPerRec);
		rdo.put("dsPerHis", dsPerHis);
		
		return rdo;
	}
	
	/**
	 * 方法简介.退休增员明细查询
	 * 
	 * @author qiukai 2020-04-01
	 */
	public DataObject queryTxzymxInfo_3795(final DataObject para) throws Exception {
		String zfrylb, jbjgid, blzyyy, cxyfhbz, fhr, qsrq, zzrq, fhqsrq, fhzzrq,dyfhqsrq,dyfhzzrq, yfxxbz;
		double stjfnx, sjjfnx, zjfnx;
		DataStore ds = new DataStore(), dsOrgn, dsPer, xzbzDs, dsStd, ds_bf, ds_csbz, ds_sf, ds_ndy, ds_txz, dsTcnw;
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String ryid, xzbz, txzbh = "";
		String fhrSql, fhrqSql, dyfhrqSql;
		String jdid; // add xiagn 20200213
		double txj = 0, zfbt = 0, bfje = 0, ndyje = 0, ylj, zynj, txjtcn = 0, txjtcw = 0;
		int maxxh = 0;
		String cxwfhrybz;//用来控制查询流程中走完审批没有复核的人员 滨州现在用
		
		String querylogid = QueryLogTool.saveQueryLog("退休增员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		jbjgid = para.getString("jbjgid", "");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		blzyyy = para.getString("blzyyy");
		fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		jdid = para.getString("jdid", "");// add xiagn 20200213
		// 增加传入字段dyfhqsrq 的判断 add by blp
		if (para.containsKey("dyfhqsrq")) {
			dyfhqsrq = para.getDateToString("dyfhqsrq", "yyyyMMdd");
		} else {
			dyfhqsrq = "";
		}
		if (para.containsKey("dyfhzzrq")) {
			dyfhzzrq = para.getDateToString("dyfhzzrq", "yyyyMMdd");
		} else {
			dyfhzzrq = "";
		}
		zfrylb = para.getString("zfrylb");
		fhr = para.getString("yhid", "");
		cxyfhbz = para.getString("cxyfhbz", "false");
		cxwfhrybz = para.getString("cxwfhrybz", "false");
		xzbzDs = getBillXzbzDs().getDataStore("xzbzds");
		
		yfxxbz = para.getString("yfxxbz", "false"); // 只查询预发人员信息
		
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		blzyyy = HsuTools.replaceC2QCQ(blzyyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}

		// modi by guanll 2016.12.15 去掉fhqsrq、fhzzrq赋初始值部分 这样才可以查出未复核的人员
		// 如果复核日期为空，就不加复核日期的限制，这样可以查出未复核的人员
//		if (fhqsrq == null || "".equals(fhqsrq)) {
//			fhqsrq = "19500101";
//		}
//		if (fhzzrq == null || "".equals(fhzzrq)) {
//			fhzzrq = "25001231";
//		}
		fhrSql = "";
		if (fhr != null && !"".equals(fhr)) {
			fhrSql = " and a.dyspr = '" + fhr + "' ";
		}

		fhrqSql = "";
		if ((fhqsrq != null && !"".equals(fhqsrq))
				&& (fhzzrq != null && !"".equals(fhzzrq))) {
			fhrqSql = "and to_char(a.dyspsj, 'yyyyMMdd') between '" + fhqsrq
					+ "' and '" + fhzzrq + "'";
		}
		//增加复核日期判断 --add by blp 20160907
		dyfhrqSql = "";
		if ((dyfhqsrq != null && !"".equals(dyfhqsrq))
				&& (dyfhzzrq != null && !"".equals(dyfhzzrq))) {
			dyfhrqSql = "and to_char(a.dyfhsj, 'yyyyMMdd') between '"
					+ dyfhqsrq + "' and '" + dyfhzzrq + "'";
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		// 查询有养老支付人员的单位
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.dwbh, a.cbdwmc, a.cbdwxz, c.jjlx  ");
		sqlBF.append("   from si3u.orgn_reg a, biu.orgn c ");
		sqlBF.append("  where a.dwid = c.dwid ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   a.jbjgid in (" + jbjgid + ") ");
		}
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid) ");
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		dsOrgn = this.readonlysql.executeQuery();

		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, a.dyffzt, ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz, ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq, ");
		sqlBF.append("        ? dwbh, ? cbdwmc, ? cbdwxz, a.dyxsksny, a.yhzh, ");
		sqlBF.append("        e.sjjfnx, e.stjfnx, 0 zjfnx, '' cjgzrq, a.dylqlb, ");
		sqlBF.append("        b.rydjid, a.dfjglb, '' dfjgbh, '' dfjgmc, a.shbzhm, ");
		sqlBF.append("        0 bfje, dyspr, dyspsj, ? jjlx, e.dacsrq, e.jfbl, ");
		sqlBF.append("        e.tgyy, a.dyfhr, a.xm, a.xb, a.csrq,  ");
		sqlBF.append("        p.grsf, p.zyjszwjb, a.xzzw, p.gjzyzgdj, a.ygxs,   ");
		sqlBF.append("        p.lxrdh lxdh, p.txdz, e.cjgzrq, a.dfjgid, ");
		sqlBF.append("        a.sqid, a.jdid, e.tsgzbs, e.tsgznx, e.dacsrq, ");//add by gzh 20161114 增加查询特殊工种标识、特殊工种年限等。// 增加档案出生日期的查询展示 add by zhanghao 2018.02.09
		sqlBF.append("        e.jzgzj, p.sjhm ");//add by wbj 20180313 增加军转干职级  gzh mod 20180413 增加手机号码
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        biuv.person  p ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.ryid = p.ryid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and a.dwdjid = ? ");
		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   b.jbjgid in (" + jbjgid + ") ");
		}
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}
		if (jdid != null && !"".equals(jdid)) { //add xiagn 20200213
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		if ("true".equals(cxyfhbz)) {
			sqlBF.append(" and a.dyspbz = '1' ");
		}
		if ("true".equals(yfxxbz)) { // 如果要是true，只则查询预发人员
			sqlBF.append(" and exists(  ");
			sqlBF.append("     select 1  ");
			sqlBF.append("       from ad3u.per_cmpl f ");
			sqlBF.append("      where a.ryid = f.ryid ");
			sqlBF.append("        and bcxmbh ='LSDYBZ' ");
			sqlBF.append("        and bcxmz = '1' ) ");
		} else { // 否则查询的人员不包括预发人员
			sqlBF.append(" and not exists(  ");
			sqlBF.append("         select 1  ");
			sqlBF.append("           from ad3u.per_cmpl f ");
			sqlBF.append("          where a.ryid = f.ryid ");
			sqlBF.append("            and bcxmbh ='LSDYBZ' ");
			sqlBF.append("            and bcxmz = '1' ) ");

		}
		if("false".equals(cxwfhrybz)){
		    sqlBF.append(fhrqSql);
			sqlBF.append(dyfhrqSql);
		}
		sqlBF.append(fhrSql);

		sqlBF.append(" union all ");
		sqlBF.append(" select b.dydjid, a.ryid, e.yslb zfrylb, '' ltxrq, a.dyffzt, ");
		sqlBF.append("        nvl(a.dyspbz, '0') spbz, nvl(a.dyspbz, '0') fhbz, ");
		sqlBF.append("        b.blzyyy, to_char(b.blzysj, 'yyyyMMdd') blzyrq, ");
		sqlBF.append("        ? dwbh, ? cbdwmc, ? cbdwxz, a.dyxsksny, a.yhzh, ");
		sqlBF.append("        0 sjjfnx, 0 stjfnx, 0 zjfnx, '' cjgzrq, a.dylqlb, ");
		sqlBF.append("        b.rydjid, a.dfjglb, '' dfjgbh, '' dfjgmc, a.shbzhm, ");
		sqlBF.append("        0 bfje, dyspr, dyspsj, ? jjlx, '' dacsrq, 0 jfbl,  ");
		sqlBF.append("        '' tgyy, a.dyfhr, a.xm, a.xb, a.csrq,  ");
		sqlBF.append("        p.grsf, p.zyjszwjb, a.xzzw, p.gjzyzgdj, a.ygxs,   ");
		sqlBF.append("        p.lxrdh lxdh, p.txdz, '' cjgzrq, a.dfjgid, ");
		sqlBF.append("        a.sqid, a.jdid, '' tsgzbs, 0 tsgznx, '' dacsrq, ");//add by gzh 增加查询街道社区银行账号。// 增加档案出生日期的查询展示(遗属的置为空) add by zhanghao 2018.02.09
		sqlBF.append("        '' jzgzj, p.sjhm  ");//add by wbj 20180313 增加军转干职级  gzh mod 20180413 增加查询手机号码
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info e, ");
		sqlBF.append("        biuv.person  p ");
		sqlBF.append("  where a.dqdydjid = b.dydjid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.ryid = p.ryid ");
		sqlBF.append("    and a.sszfrq = 'B' ");
		sqlBF.append("    and a.dwdjid = ? ");
		sqlBF.append("    and to_char(b.blzysj, 'yyyyMMdd') between ? and ? ");
		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append(" and   b.jbjgid in (" + jbjgid + ") ");
		}
		if (blzyyy != null && !"".equals(blzyyy)) {
			sqlBF.append("	  and b.blzyyy in (").append(blzyyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.yslb in (").append(zfrylb).append(") ");
		}
		if (jdid != null && !"".equals(jdid)) { //add xiagn 20200213
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		if ("true".equals(cxyfhbz)) {
		      sqlBF.append(" and a.dyspbz = '1' ");
		}
		if ("true".equals(yfxxbz)) { // 如果要是true，只则查询预发人员
			sqlBF.append(" and exists(  ");
			sqlBF.append("     select 1  ");
			sqlBF.append("       from ad3u.per_cmpl f ");
			sqlBF.append("      where a.ryid = f.ryid ");
			sqlBF.append("        and bcxmbh ='LSDYBZ' ");
			sqlBF.append("        and bcxmz = '1' ) ");
		} else { // 否则查询的人员不包括预发人员
			sqlBF.append(" and not exists(  ");
			sqlBF.append("         select 1  ");
			sqlBF.append("           from ad3u.per_cmpl f ");
			sqlBF.append("          where a.ryid = f.ryid ");
			sqlBF.append("            and bcxmbh ='LSDYBZ' ");
			sqlBF.append("            and bcxmz = '1' ) ");

		}
		if("false".equals(cxwfhrybz)){
			sqlBF.append(fhrqSql);
			sqlBF.append(dyfhrqSql);
		}
		sqlBF.append(fhrSql);
		String perInfoSql = sqlBF.toString();// 查询人员信息的sql
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) txj, ");
		for (int m = 0, len = xzbzDs.rowCount(); m < len; m++) {
			xzbz = xzbzDs.getString(m, "code");
			sqlBF.append("    nvl(sum(decode(xzbz,'" + xzbz
					+ "', btje, 0)), 0)  txj" + xzbz + ",");
		}
		sqlBF.append("        nvl(sum(decode(btbh, 'B1F3', btje, 'A1F3', btje, 0)),0) zfbt, ");// add.yxt.20140620.增加查询住房补贴。威海需求【WHXM-606】
		sqlBF.append("        nvl(sum(decode(btbh,'B305', btje, 0)),0) zynj, ");// gzh mod 20170413 潍坊:职业年金跟养老金分开展示，职业年金+养老金=退休金。
		sqlBF.append("        nvl(sum(decode(btbh,'B305', 0, btje)),0) ylj ");//养老金
		sqlBF.append("   from ad3u.per_giv_month_std s");
		sqlBF.append("	where s.ryid = ? ");
		sqlBF.append("	  and (select min(a.qsny) from ad3u.per_giv_month_std a where a.ryid = s.ryid) between s.qsny and nvl(s.zzny, '205012') ");
		String txjSql = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) bfje ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.ryid = ? ");
		sqlBF.append("    and p.fsyy = '2' ");
		sqlBF.append("    and p.fflb = 'A'  ");
		String bfSql = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) ndyje ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.ryid = ? ");
		sqlBF.append("    and p.fflb = 'D'  ");// 年待遇
		sqlBF.append("    and p.zdlsh is null  ");
		String ndySql1 = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) ndyje ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.ryid = ? ");
		sqlBF.append("    and p.fflb = 'D'  ");// 年待遇
		sqlBF.append("    and p.ffny between ? and ?  ");
		String ndySql2 = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select max(h.xh) maxxh ");
		sqlBF.append("   from ad3u.per_cal_his h ");
		sqlBF.append("  where h.ryid = ? ");
		String csbzSql = sqlBF.toString();
		
		//查询补充信息 add by gzh 20161114
		sqlBF.setLength(0);
		sqlBF.append(" select a.bcxmbh, a.bcxmz                  ");
		sqlBF.append("   from ad3u.per_cmpl a                        ");
		sqlBF.append("  where a.ryid = ?                             ");
		sqlBF.append("    and a.bcxmbh in ('SHBZ', 'JDJLTZSWH','TXDAH') ");
		String bcxx = sqlBF.toString();
		
		// wbj 20161115 滨州增加查询实发金额，查询detl 不限制发放类别和发生原因
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) sfje ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.ryid = ? ");
		sqlBF.append("    and p.fflb = 'A' ");
		String sfSql = sqlBF.toString();
		// wbj 20161115 end

		// add by gd 2020-03-06 增加查询退休证编号
		sqlBF.setLength(0);
		sqlBF.append(" select bcxmz ");
		sqlBF.append("   from ad3u.per_cmpl ");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and bcxmbh = 'TXZBH' ");
		String txzSql = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) txj   ");
		sqlBF.append("   from ad3u.per_giv_month_std s");
		sqlBF.append("	where s.ryid = ? ");
		sqlBF.append("	  and (select min(a.qsny) from ad3u.per_giv_month_std a where a.ryid = s.ryid) between s.qsny and nvl(s.zzny, '205012') ");
		sqlBF.append("	  and exists(select 'x' from ad3u.giv_item g where s.btbh = g.btbh and nvl(g.ftcjjbz,'0') = ? )  ");
		String txjTcnw = sqlBF.toString();
		
		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String cbdwmc = dsOrgn.getString(i, "cbdwmc");
			String dwdjid = dsOrgn.getString(i, "dwdjid");
			String dwbh = dsOrgn.getString(i, "dwbh");
			String cbdwxz = dsOrgn.getString(i, "cbdwxz");
			String jjlx = dsOrgn.getString(i, "jjlx");
			prompt.prompt("正在查询单位【" + cbdwmc + "】的人员信息...");

			// 1、查询基本信息。
			this.readonlysql.setSql(perInfoSql.toString());
			this.readonlysql.setString(1, dwbh);
			this.readonlysql.setString(2, cbdwmc);
			this.readonlysql.setString(3, cbdwxz);
			this.readonlysql.setString(4, jjlx);
			this.readonlysql.setString(5, dwdjid);
			this.readonlysql.setString(6, qsrq);
			this.readonlysql.setString(7, zzrq);
			this.readonlysql.setString(8, dwbh);
			this.readonlysql.setString(9, cbdwmc);
			this.readonlysql.setString(10, cbdwxz);
			this.readonlysql.setString(11, jjlx);
			this.readonlysql.setString(12, dwdjid);
			this.readonlysql.setString(13, qsrq);
			this.readonlysql.setString(14, zzrq);
			dsPer = this.readonlysql.executeQuery();
			
			if(dsPer.rowCount()==0){
				continue;
			}

			//对人员循环，补充其他信息
			for (int j = 0, length = dsPer.rowCount(); j < length; j++) {
				ryid = dsPer.getString(j, "ryid");
				
				// 查询退休金、住房补贴
				this.readonlysql.setSql(txjSql);
				this.readonlysql.setString(1, ryid);
				dsStd = this.readonlysql.executeQuery();
				txj = dsStd.getDouble(0, "txj");
				zfbt = dsStd.getDouble(0, "zfbt");
				zynj = dsStd.getDouble(0, "zynj");
				ylj = dsStd.getDouble(0, "ylj");
				
				dsPer.put(j, "txj", txj);
				dsPer.put(j, "zfbt", zfbt);
				dsPer.put(j, "txjsbff", MathUtil.round(txj - zfbt, 2));
				dsPer.put(j, "zynj", zynj);
				dsPer.put(j, "ylj", ylj);

				stjfnx = dsPer.getDouble(j, "stjfnx");
				sjjfnx = dsPer.getDouble(j, "sjjfnx");
				// 由于存在四舍五入的问题，故总的年限如果等于视同实际缴费年限保留两位小数之后的和，那么和实际上的总年限就会有误差。所有对这个地方进行了更改
				zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);
				dsPer.put(j, "zjfnx", zjfnx);
				
				this.readonlysql.setSql(txjTcnw);
				this.readonlysql.setString(1, ryid);
				this.readonlysql.setString(2, "0");
				dsTcnw = this.readonlysql.executeQuery();
				txjtcn = dsTcnw.getDouble(0, "txj");
				dsPer.put(j, "txjtcn", txjtcn);
				
				this.readonlysql.setString(1, ryid);
				this.readonlysql.setString(2, "1");
				dsTcnw = this.readonlysql.executeQuery();
				txjtcw = dsTcnw.getDouble(0, "txj");
				dsPer.put(j, "txjtcw", txjtcw);
				
				// 查询补发
				this.readonlysql.setSql(bfSql);
				this.readonlysql.setString(1, ryid);
				ds_bf = this.readonlysql.executeQuery();
				bfje = ds_bf.getDouble(0, "bfje");
				dsPer.put(j, "bfje", bfje);
				
				// 查询年待遇 add by guanll 2018.04.09 泰安东平要对数，项目同事hold不住，给他加上年待遇
				this.readonlysql.setSql(ndySql1);
				this.readonlysql.setString(1, ryid);
				ds_ndy = this.readonlysql.executeQuery();
				ndyje = ds_ndy.getDouble(0, "ndyje");
				if(ndyje == 0){// 防止退休转在职之后数据取多
					this.readonlysql.setSql(ndySql2);
					this.readonlysql.setString(1, ryid);
					this.readonlysql.setString(2, qsrq.substring(0, 6));
					this.readonlysql.setString(3, zzrq.substring(0, 6));
					ds_ndy = this.readonlysql.executeQuery();
					ndyje = ds_ndy.getDouble(0, "ndyje");
				}
				dsPer.put(j, "ndyje", ndyje);
				
				// wbj 20161115 查询实发 滨州用
				this.readonlysql.setSql(sfSql);
				this.readonlysql.setString(1, ryid);
				ds_sf = this.readonlysql.executeQuery();
				if(ds_sf.rowCount() > 0){
					dsPer.put(j, "sfje", ds_sf.getDouble(0, "sfje"));
				} else {
					dsPer.put(j, "sfje", 0);
				}
				// wbj 20161115  end
				
				//淮南新增 档案存放地列 QK 20190710
				dsPer.put(j, "dacfd", AdTools.getPerCmpl(ryid, "DACFD", ""));
				// end -QK 20190710

				// 重算标志
				this.readonlysql.setSql(csbzSql);
				this.readonlysql.setString(1, ryid);
				ds_csbz = this.readonlysql.executeQuery();
				maxxh = ds_csbz.getInt(0, "maxxh");
				if (maxxh > 1) {
					dsPer.put(j, "csbz", "1");
				} else {
					dsPer.put(j, "csbz", "0");
				}
				
				String shbz = "", jdjltzswh = "", txdah = "";
				//查询补充信息		
				this.readonlysql.setSql(bcxx);
				this.readonlysql.setString(1, ryid);
				DataStore ds_bcxx = this.readonlysql.executeQuery();
				int find = ds_bcxx.find("bcxmbh == SHBZ");
				
				if(find >= 0){
					shbz = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "shbz", shbz);
				}else{
					dsPer.put(j, "shbz", shbz);
				}
				
				find = ds_bcxx.find("bcxmbh == JDJLTZSWH");
				if(find >= 0){
					jdjltzswh = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "jdjltzswh", jdjltzswh);
				}else{
					dsPer.put(j, "jdjltzswh", jdjltzswh);
				}
				
				find = ds_bcxx.find("bcxmbh == TXDAH");
				if(find >= 0){
					txdah = ds_bcxx.getString(find, "bcxmz");
					dsPer.put(j, "txdah", txdah);
				}else{
					dsPer.put(j, "txdah", txdah);
				}
				
				//查询退休时岗位 add by gzh 20161114
				this.readonlysql.setSql("select gw,nvl(zzny,'20501231') zzny from si3u.per_rec  where ryid = ?");
				this.readonlysql.setString(1, ryid);
				DataStore ds_gw = this.readonlysql.executeQuery();
				
				if(ds_gw.rowCount()>0){
					ds_gw.sortdesc("zzny");
					dsPer.put(j, "gw", ds_gw.getString(0, "gw"));
				}
				
				// add by gd 2020-03-06 增加退休证编号的查询
				txzbh = "";
				this.readonlysql.setSql(txzSql);
				this.readonlysql.setString(1, ryid);
				ds_txz = this.readonlysql.executeQuery();
				if (ds_txz.rowCount() > 0) {
					txzbh = ds_txz.getString(0, "bcxmz");
				}
				dsPer.put(j, "txzbh", txzbh);
			}
			if (dsPer.rowCount() > 0) {
				ds = ds.combineDatastore(dsPer);
			}
			prompt.moveForword(1);
		}

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		ds = ds.sort("dwbh");
		ds = AdTools.genDfjgxxDataStore(ds, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		ds = HsuTools.genSysUserDataStore(ds, "dyspr", "dysprbh", "dysprxm");
		ds = HsuTools.genSysUserDataStore(ds, "dyfhr", "dyfhrbh", "dyfhrxm");
		ds = HsuTools.genJdxxDataStore(ds, "jdid", "jdbh", "jdmc");
		ds = HsuTools.genSqxxDataStore(ds, "sqid", "sqbh", "sqmc");
		rdo.put("dsperinfo", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
		
		return rdo;
	}
	
	/**
	 * 已核定待遇退休人员查询
	 * 
	 * @author lixinyu 20200413
	 */
	public DataObject fwdAdYhddytxrycx(final DataObject para) throws Exception {
		DataStore dsJbjg = AdTools.getQueryJbjgidByUser(this.getUser());

		DataObject rdo = new DataObject();
		rdo.put("dsjbjg", dsJbjg);
		rdo.put("biz", this.getUser().getAppRuntimeInstitution());
		return rdo;
	}

	/**
	 * 已核定待遇退休人员查询
	 * 
	 * @author lixinyu 20200413
	 */
	public final DataObject queryAdYhddytxrycx_rowCount(final DataObject para) throws Exception {
		DataObject result = this.queryAdYhddytxrycx_allRows(para);
		
		DataStore dsPerInfo = result.getDataStore("vds");
		// 接收参数
		DataObject rdo = new DataObject();
		rdo.put("row_count", dsPerInfo.rowCount());
		return rdo;
	}
	
	/**
	 * 已核定待遇退休人员查询
	 * 
	 * @author lixinyu 20200413
	 */
	public final DataObject queryAdYhddytxrycx_pageRow(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		// 接收参数
		String jbjgid = para.getString("jbjgid");
		String wyhzh = para.getString("wyhzh");
		String dwdjid = para.getString("dwdjid", "");
		
		int g_startRowNumber = para.getInt("g_startRowNumber");
		int g_endRowNumber = para.getInt("g_endRowNumber");

		// 查询此人基本信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.ryid, a.shbzhm, a.xm, a.dyxsksny, ");
		sqlBF.append("        b.dacsrq, b.cjgzrq, b.ltxrq ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.emp_info b ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.dyspbz = '1' ");
		sqlBF.append("    and instr(a.dylqlb, '102') > 0 ");
		sqlBF.append("    and exists ( select 1 ");
		sqlBF.append("                   from si3u.orgn_reg c ");
		sqlBF.append("                  where a.dwdjid = c.dwdjid ");
		sqlBF.append("                    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(")");
		sqlBF.append("               )");
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("    and a.dwdjid = ? ");
		}
		if ("true".equals(wyhzh)) {
			sqlBF.append("    and a.yhzh is null ");
		} else {
			sqlBF.append("    and a.yhzh is not null ");
		}

		this.sql.setSql(sqlBF.toString());
		if (dwdjid != null && !"".equals(dwdjid)) {
			this.sql.setString(1, dwdjid);
		}
		DataStore dsPerInfo = this.sql.selectPageRows(g_startRowNumber, g_endRowNumber, "dwdjid,shbzhm");
		
		SiTools.genOrgnRegInfoDataStore(dsPerInfo, "dwdjid", "dwbh", "cbdwmc");
		
		DataObject rdo = new DataObject();
		rdo.put("vds", dsPerInfo);
		return rdo;
	}
	
	/**
	 * 已核定待遇退休人员查询
	 * 
	 * @author lixinyu 20200413
	 */
	public final DataObject queryAdYhddytxrycx_allRows(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();

		// 接收参数
		String jbjgid = para.getString("jbjgid");
		String wyhzh = para.getString("wyhzh");
		String dwdjid = para.getString("dwdjid", "");

		// 查询此人基本信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.ryid, a.shbzhm, a.xm, a.dyxsksny, ");
		sqlBF.append("        b.dacsrq, b.cjgzrq, b.ltxrq ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.emp_info b ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.dyspbz = '1' ");
		sqlBF.append("    and instr(a.dylqlb, '102') > 0 ");
		sqlBF.append("    and exists ( select 1 ");
		sqlBF.append("                   from si3u.orgn_reg c ");
		sqlBF.append("                  where a.dwdjid = c.dwdjid ");
		sqlBF.append("                    and c.jbjgid in (").append(HsuTools.replaceC2QCQ(jbjgid)).append(")");
		sqlBF.append("               )");
		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("    and a.dwdjid = ? ");
		}
		if ("true".equals(wyhzh)) {
			sqlBF.append("    and a.yhzh is null ");
		} else {
			sqlBF.append("    and a.yhzh is not null ");
		}

		this.sql.setSql(sqlBF.toString());
		if (dwdjid != null && !"".equals(dwdjid)) {
			this.sql.setString(1, dwdjid);
		}
		DataStore dsPerInfo = this.sql.executeQuery();
		
		SiTools.genOrgnRegInfoDataStore(dsPerInfo, "dwdjid", "dwbh", "cbdwmc");
		
		dsPerInfo.sort("dwdjid,shbzhm");
		DataObject rdo = new DataObject();
		rdo.put("vds", dsPerInfo);
		return rdo;
	}
	
	/**
	 * 方法简介.查询退休人员明细(胜利油田)
	 * 
	 * @author qiukai
	 * @date 创建时间 2020-04-10
	 * @since V1.0
	 */
	public DataObject queryTxrymxInfo_3795(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String spSql, jbjgSql, dwSql, ryztSql, dyffztSql,jyrqSql, ltxtjSql, yfxxSql;//增加ad3u.per_reg 表中jyrq的限制sql   张超  modify 20161031
		DataStore dsTemp = new DataStore();            //增加离退休条件  add by blp  20161111  
		String jdSql,sqSql;        //增加社区、街道查询条件 add-李琪-20161118
		
		String querylogid = QueryLogTool.saveQueryLog("退休人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 接参数
		String jbjgid = HsuTools.replaceC2QCQ(para.getString("jbjgid"));
		String dwdjid = para.getString("dwdjid");
		String zfrylb = para.getString("zfrylb");
		String zyqsrq = para.getDateToString("zyqsrq", "yyyyMMdd");
		String zyzzrq = para.getDateToString("zyzzrq", "yyyyMMdd");

		String spbz = para.getString("spbz");
		String spqsrq = para.getDateToString("spqsrq", "yyyyMMdd");
		String spzzrq = para.getDateToString("spzzrq", "yyyyMMdd");
		String dyxsqsny = para.getDateToString("dyxsqsny", "yyyyMM");
		String dyxszzny = para.getDateToString("dyxszzny", "yyyyMM");

		String ltxqsrq = para.getDateToString("ltxqsrq", "yyyyMMdd");
		String ltxzzrq = para.getDateToString("ltxzzrq", "yyyyMMdd");
		String csqsrq = para.getDateToString("csqsrq", "yyyyMMdd");
		String cszzrq = para.getDateToString("cszzrq", "yyyyMMdd");
		String cjgzqsrq = para.getDateToString("cjgzqsrq", "yyyyMMdd");

		String cjgzzzrq = para.getDateToString("cjgzzzrq", "yyyyMMdd");
		String ryzt = para.getString("ryzt");
		String dyffzt = para.getString("dyffzt");
		String spr = para.getString("yhid");

		// add 增加复核人、复核起始、终止时间 20151105
		String fhqsrq = para.getDateToString("fhqsrq", "yyyyMMdd");
		String fhzzrq = para.getDateToString("fhzzrq", "yyyyMMdd");
		String fhr = para.getString("fhid");
		String ltxtj = para.getString("ltxtj","");  // add by blp 20161111
		// add end
		String jdid = para.getString("jdid", ""); // add-李琪-20161118
		String sqid = para.getString("sqid", "");
		String yfxxbz = para.getString("yfxxbz", "false"); // 只查询预发人员信息

		// 参数校验
		if (jbjgid == null || "".equals(jbjgid)) {
			this.bizException("传入的经办机构为空");
		}
		if (zyqsrq == null || "".equals(zyqsrq)) {
			zyqsrq = "19000101";
		}
		if (zyzzrq == null || "".equals(zyzzrq)) {
			zyzzrq = "20501231";
		}
		if (zyqsrq.compareTo(zyzzrq) > 0) {
			this.bizException("传入的增员起始日期不能晚于增员终止日期");
		}
		// 审批日期
		if (spqsrq == null || "".equals(spqsrq)) {
			spqsrq = "19000101";
		}
		if (spzzrq == null || "".equals(spzzrq)) {
			spzzrq = "20501231";
		}

		// 复核日期
		if (fhqsrq == null || "".equals(fhqsrq)) {
			fhqsrq = "19000101";
		}
		if (fhzzrq == null || "".equals(fhzzrq)) {
			fhzzrq = "20501231";
		}

		if ("19000101".compareTo(spqsrq) > 0) {
			this.bizException("传入的审批起始日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(spqsrq) < 0) {
			this.bizException("传入的审批终止日期不能晚于2050年12月31日");
		}
		if (spqsrq.compareTo(spzzrq) > 0) {
			this.bizException("传入的审批起始日期不能晚于审批终止日期");
		}
		// 待遇享受开始年月
		if (dyxsqsny == null || "".equals(dyxsqsny)) {
			dyxsqsny = "190001";
		}
		if (dyxszzny == null || "".equals(dyxszzny)) {
			dyxszzny = "205012";
		}
		if ("190001".compareTo(dyxsqsny) > 0) {
			this.bizException("传入的待遇享受开始年月不能早于1900年1月");
		}
		if ("205012".compareTo(dyxszzny) < 0) {
			this.bizException("传入的待遇享受开始年月不能晚于2050年12月");
		}
		if (dyxsqsny.compareTo(dyxszzny) > 0) {
			this.bizException("传入的待遇享受开始年月起始年月不能晚于终止年月");
		}

		// 离退休日期
		if (ltxqsrq == null || "".equals(ltxqsrq)) {
			ltxqsrq = "19000101";
		}
		if (ltxzzrq == null || "".equals(ltxzzrq)) {
			ltxzzrq = "20501231";
		}
		if ("19000101".compareTo(ltxqsrq) > 0) {
			this.bizException("传入的离退休日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(ltxzzrq) < 0) {
			this.bizException("传入的离退休日期不能晚于2050年12月31日");
		}
		if (ltxqsrq.compareTo(ltxzzrq) > 0) {
			this.bizException("传入的离退休日期起始日期不能晚于终止日期");
		}

		// 出生日期
		if (csqsrq == null || "".equals(csqsrq)) {
			csqsrq = "19000101";
		}
		if (cszzrq == null || "".equals(cszzrq)) {
			cszzrq = "20501231";
		}
		if ("19000101".compareTo(csqsrq) > 0) {
			this.bizException("传入的出生日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(cszzrq) < 0) {
			this.bizException("传入的出生日期不能晚于2050年12月31日");
		}
		if (csqsrq.compareTo(cszzrq) > 0) {
			this.bizException("传入的出生日期起始日期不能晚于终止日期");
		}

		// 参加工作日期
		if (cjgzqsrq == null || "".equals(cjgzqsrq)) {
			cjgzqsrq = "19000101";
		}
		if (cjgzzzrq == null || "".equals(cjgzzzrq)) {
			cjgzzzrq = "20501231";
		}
		if ("19000101".compareTo(cjgzqsrq) > 0) {
			this.bizException("传入的参加工作日期不能早于1900年1月1日");
		}
		if ("20501231".compareTo(cjgzzzrq) < 0) {
			this.bizException("传入的参加工作日期不能晚于2050年12月31日");
		}
		if (cjgzqsrq.compareTo(cjgzzzrq) > 0) {
			this.bizException("传入的参加工作日期起始日期不能晚于终止日期");
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		// 先查单位，然后循环单位
		// 单位
		if (dwdjid == null || "".equals(dwdjid)) {
			dwSql = "";
		} else {
			dwSql = " and a.dwdjid = '" + dwdjid + "' ";
		}
		sqlBF.setLength(0);
		sqlBF.append(" select a.dwdjid, a.cbdwmc ");
		sqlBF.append("   from si3u.orgn_reg a ");
		sqlBF.append("  where a.jbjgid in (" + jbjgid + ")");
		sqlBF.append(dwSql);
		sqlBF.append("   and exists (select 1 ");
		sqlBF.append("           from ad3u.per_info b ");
		sqlBF.append("          where a.dwdjid = b.dwdjid) ");
		this.readonlysql.setSql(sqlBF.toString());
		DataStore dsOrgn = this.readonlysql.executeQuery();
		prompt.setTotalSteps(dsOrgn.rowCount()); // 设置步数
		// 审批标志
		if ("0".equals(spbz)) {
			spSql = " and nvl(a.dyspbz, '0') = '0' ";
		} else if ("1".equals(spbz)) {
			spSql = " and a.dyspbz = '1' and to_char(a.dyspsj, 'yyyymmdd') between '"
					+ spqsrq + "' and '" + spzzrq + "' ";
			if (spr != null && !"".equals(spr)) {
				spSql = spSql + " and a.dyspr = '" + spr + "' ";
			}
			// add 增加复核人、复核起始、终止时间 20151105
			spSql = spSql + " and to_char(a.dyfhsj, 'yyyymmdd') between '"
					+ fhqsrq + "' and '" + fhzzrq + "' ";
			if (fhr != null && !"".equals(fhr)) {
				spSql = spSql + " and a.dyfhr = '" + fhr + "' ";
			}
			// end
		} else {
			spSql = "";
		}
		// 经办机构
		jbjgSql = " and c.jbjgid in (" + jbjgid + ")";

		// 离退休类别
		if (zfrylb == null || "".equals(zfrylb)) {
			zfrylb = "%";
		}

		// 人员状态
		if (ryzt == null || "".equals(ryzt)) {
			ryztSql = "";
			jyrqSql = "";
		} else {
			ryztSql = " and b.ryzt = '" + ryzt + "' ";
			//如果是正常   张超   add   20161031
			if("1".equals(ryzt)){
				jyrqSql = " and c.jyrq is null  ";
			}
			//如果是死亡，出国或退休转外     张超   add   20161031
			else{
				jyrqSql = " and c.jyrq is not null  ";
			}
			
		}

		// 待遇发放状态
		if (dyffzt == null || "".equals(dyffzt)) {
			dyffztSql = "";
		} else {
			dyffztSql = " and a.dyffzt = '" + dyffzt + "' ";
		}
		
		// 离退休条件 add by blp  20161111
		if (ltxtj == null || "".equals(ltxtj)) {
			ltxtjSql = "";
		} else {
			ltxtjSql = " and d.ltxtj = '" + ltxtj + "'";
		}
		//街道、社区 add-李琪-20161118
		if (jdid == null || "".equals(jdid)) {
			jdSql = "";
		} else {
			jdSql = " and a.jdid = '" + jdid + "' ";
		}
		if (sqid == null || "".equals(sqid)) {
			sqSql = "";
		} else {
			sqSql = " and a.sqid = '" + sqid + "' ";
		}
		
		//预发sql
		if ("true".equals(yfxxbz)) { // 如果要是true，只则查询预发人员
			yfxxSql = " and exists( select 1  from ad3u.per_cmpl f  where a.ryid = f.ryid    and bcxmbh ='LSDYBZ'   and bcxmz = '1' ) ";
		} else { // 否则查询的人员不包括预发人员
			yfxxSql =  "and not exists(   select 1  from ad3u.per_cmpl f  where a.ryid = f.ryid  and bcxmbh ='LSDYBZ' and bcxmz = '1' )  ";

		}
	
		// 开始循环单位
		DataStore dsPerMx = new DataStore();
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			String perdwdjid = dsOrgn.getString(i, "dwdjid");
			String dwmc = dsOrgn.getString(i, "cbdwmc");
			prompt.prompt("正在查询单位【" + dwmc + "】的人员信息...");
			sqlBF.setLength(0);
			sqlBF.append(" select  a.xm,a.ryid,a.xb,a.csrq,d.ltxlb  zfrylb, ");
			sqlBF.append("         d.ltxrq,c.blzyyy,e.dwbh,e.cbdwmc  dwmc,e.cbdwxz  dwxz, ");
			sqlBF.append("         a.dyspsj spsj,a.sszfrq,c.blzysj,a.yhzh,d.cjgzrq, ");
			sqlBF.append("         a.dyxsksny,a.ryid,a.dylqlb,a.dyspr spr,a.dfjglb, ");
			sqlBF.append("         a.dfjgid,a.dyffzt,a.xzzw,nvl(a.dyspbz,  '0')  spbz, ");
			sqlBF.append("         nvl(sum(p.btje),  0)  dqje, ");
			//mod by nx 20190114 增加查询机关补贴 B301~B305
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A111',  p.btje, 'B301', p.btje,  0)),  0)  jcxylj, ");// 基础性养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A112',  p.btje, 'B302', p.btje, 0)),  0)  gdxylj, ");// 过渡性养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,'A102',p.btje,'A103',p.btje,'A10D',p.btje,'B303',p.btje,'B304',p.btje,0)),0)  zhylj, ");// 账户养老金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A113',  p.btje,  0)),  0)  gdxtjj, ");// 过渡性调节金
			sqlBF.append("         nvl(sum(decode(p.btbh,  'B305',  p.btje,  0)),  0)  zynj, ");// 职业年金  
			sqlBF.append("         nvl(sum(decode(p.btbh,  'H007',  p.btje,  0)),  0)  zfbt, ");// 住房补贴   add rzs-20190419
			sqlBF.append("         nvl(sum(decode(p.btbh,  'H011',  p.btje,  0)),  0)  wybt, ");// 物业补贴   add rzs-20190419
			sqlBF.append("         nvl(sum(decode(p.btbh,  'H776',  p.btje,  0)),  0)  sgdbt, ");// 省规定补贴
			sqlBF.append("         nvl(sum(decode(p.btbh,  'H767',  p.btje,  0)),  0)  cebt, ");// 差额补贴 
			sqlBF.append("         nvl(sum(decode(p.btbh,  'H756',  p.btje,  0)),  0)  jqnbt, ");// 局取暖补贴 
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A148',  p.btje,  0)),  0)  sqnbt, ");
			sqlBF.append("         nvl(sum(decode(p.btbh,  'A10B',  p.btje,  'A10E',  p.btje,  0)),  0)  ce, ");// 差额
			sqlBF.append("         nvl(sum(decode(p.btbh,'A111',0,'A112',0,'A102',0,'A103',0,'A10D',0,'A113',0,'A10B',0,'A10E',0,'B301',0,'B302',0,'B303',0,'B304',0,'B305',0,'H007',0,'H011',0,p.btje)),0)  qtylj, ");// 其他养老金
			sqlBF.append("         a.jdid, a.sqid,a.dyffzt,d.dacsrq,d.stjfnx, ");
			sqlBF.append("		   d.sjjfnx, d.sjjfnx+d.stjfnx zjfnx,c.rydjid,b.ryzt,d.jzgbz,");
			sqlBF.append("		   a.dyfhsj, a.dyfhr,'' ssjd,'' sssq");
			sqlBF.append("     from  ad3u.per_info  a, ");
			sqlBF.append("           si3u.per_natl   b, ");
			sqlBF.append("           ad3u.per_reg    c, ");
			sqlBF.append("           ad3u.emp_info  d, ");
			sqlBF.append("           si3u.orgn_reg  e, ");
			sqlBF.append("           ad3u.per_giv_month_std  p ");
			sqlBF.append("   where  a.dqdydjid  =  c.dydjid ");
			sqlBF.append("       and  c.dwdjid  =  e.dwdjid ");
			sqlBF.append("       and  a.ryid  =  d.ryid ");
			sqlBF.append("       and  a.sszfrq = 'A' ");
			sqlBF.append("       and  a.ryid  =  b.ryid(+) ");
			sqlBF.append("       and  a.ryid  =  p.ryid(+) ");
			sqlBF.append("       and  to_char(sysdate,  'yyyyMM')  between  p.qsny(+)  and ");
			sqlBF.append("               nvl(p.zzny(+),  '205012') ");
			sqlBF.append("       and  d.ltxlb  like  ? ");
			sqlBF.append("       and  to_char(c.blzysj,  'yyyyMMdd')  between  ?  and  ? ");
			sqlBF.append("       and  a.dyxsksny  between  ?  and  ? ");
			sqlBF.append("       and  d.ltxrq  between  ?  and  ? ");
			sqlBF.append("       and  a.csrq  between  ?  and  ? ");
			sqlBF.append("       and  d.cjgzrq  between  ?  and  ? ");
			sqlBF.append("       and  a.dwdjid ='" + perdwdjid + "' ");
			sqlBF.append(dyffztSql);
			sqlBF.append(ryztSql);
			sqlBF.append(jbjgSql);
			sqlBF.append(spSql);
			sqlBF.append(ltxtjSql);
			sqlBF.append(jdSql);
			sqlBF.append(sqSql);
			sqlBF.append(yfxxSql);
			sqlBF.append("   group  by  a.xm,a.ryid,a.xb,a.csrq,d.ltxlb, ");
			sqlBF.append("              d.ltxrq,c.blzyyy,  e.dwbh,e.cbdwmc,e.cbdwxz, ");
			sqlBF.append("              a.dyspsj,a.sszfrq,c.blzysj,a.yhzh,d.cjgzrq, ");
			sqlBF.append("              a.dyxsksny,a.ryid,a.dylqlb,a.dyspr,a.dfjglb, ");
			sqlBF.append("              a.dfjgid,a.dyffzt,a.xzzw,a.dyspbz,a.jdid, ");
			sqlBF.append("              a.sqid,a.dyffzt,d.dacsrq,d.stjfnx, d.sjjfnx, ");
			sqlBF.append("				c.rydjid,b.ryzt,d.jzgbz,a.dyfhr,a.dyfhsj");
			sqlBF.append(" union all");
			sqlBF.append(" select  a.xm,a.ryid,a.xb,a.csrq,d.yslb  zfrylb, ");
			sqlBF.append("         '' ltxrq,c.blzyyy,e.dwbh,e.cbdwmc  dwmc,e.cbdwxz  dwxz, ");
			sqlBF.append("         a.dyspsj spsj,a.sszfrq,c.blzysj,a.yhzh,'' cjgzrq, ");
			sqlBF.append("         a.dyxsksny,a.ryid,a.dylqlb,a.dyspr spr,a.dfjglb, ");
			sqlBF.append("         a.dfjgid,a.dyffzt,a.xzzw,nvl(a.dyspbz,  '0')  spbz, ");
			sqlBF.append("         nvl(sum(p.btje),  0)  dqje, ");
			sqlBF.append("         0  jcxylj, ");// 基础性养老金
			sqlBF.append("         0  gdxylj, ");// 过渡性养老金
			sqlBF.append("         0  zhylj, ");// 账户养老金
			sqlBF.append("         0  gdxtjj, ");// 过渡性调节金
			sqlBF.append("         0  zynj, ");// 职业年金
			sqlBF.append("         0  zfbt, ");// 住房补贴
			sqlBF.append("         0  wybt, ");// 物业补贴
			sqlBF.append("         0  sgdbt, ");// 省规定补贴
			sqlBF.append("         0  cebt, ");// 差额补贴
			sqlBF.append("         0  jqnbt, ");// 局取暖补贴	
			sqlBF.append("         0  sqnbt, ");// 局取暖补贴	
			sqlBF.append("         0  ce, ");// 差额
			sqlBF.append("         nvl(sum(decode(p.btbh,'A111',0,'A112',0,'A102',0,'A103',0,'A10D',0,'A113',0,'A10B',0,'A10E',0,'B301',0,'B302',0,'B303',0,'B304',0,'B305',0,'H007',0,'H011',0,p.btje)),0)  qtylj, ");// 其他养老金
			sqlBF.append("         a.jdid, a.sqid,a.dyffzt,'' dacsrq,0 stjfnx, ");
			sqlBF.append("		   0 sjjfnx, 0 zjfnx,c.rydjid,'1' ryzt,'' jzgbz, ");
			sqlBF.append("		   a.dyfhsj, a.dyfhr,'' ssjd,'' sssq");
			sqlBF.append("     from  ad3u.per_info  a, ");
			sqlBF.append("           ad3u.per_reg    c, ");
			sqlBF.append("           ad3u.supp_info  d, ");
			sqlBF.append("           si3u.orgn_reg  e, ");
			sqlBF.append("           ad3u.per_giv_month_std  p ");
			sqlBF.append("   where  a.dqdydjid  =  c.dydjid ");
			sqlBF.append("       and  c.dwdjid  =  e.dwdjid ");
			sqlBF.append("       and  a.ryid  =  d.ryid ");
			sqlBF.append("       and  a.sszfrq = 'B' ");
			sqlBF.append("       and  a.ryid  =  p.ryid(+) ");
			sqlBF.append("       and  to_char(sysdate,  'yyyyMM')  between  p.qsny(+)  and ");
			sqlBF.append("               nvl(p.zzny(+),  '205012') ");
			sqlBF.append("       and  d.yslb  like  ? ");
			sqlBF.append("       and  to_char(c.blzysj,  'yyyyMMdd')  between  ?  and  ? ");
			sqlBF.append("       and  a.dyxsksny  between  ?  and  ? ");
			sqlBF.append("       and  d.dyqsny||'01'  between  ?  and  ? ");
			sqlBF.append("       and  a.csrq  between  ?  and  ? ");
			sqlBF.append("       and  a.dwdjid ='" + perdwdjid + "' ");
			sqlBF.append(dyffztSql);
			sqlBF.append(jyrqSql);//改为限制ad3u.per_reg 表中jyrq字段   张超   modify   20161031
			sqlBF.append(jbjgSql);
			sqlBF.append(spSql);
			sqlBF.append(jdSql);
			sqlBF.append(sqSql);
			sqlBF.append(yfxxSql);
			sqlBF.append("   group  by  a.xm,a.ryid,a.xb,a.csrq,d.yslb, d.dyqsny,");
			sqlBF.append("              c.blzyyy,  e.dwbh,e.cbdwmc,e.cbdwxz, ");
			sqlBF.append("              a.dyspsj,a.sszfrq,c.blzysj,a.yhzh, ");
			sqlBF.append("              a.dyxsksny,a.ryid,a.dylqlb,a.dyspr,a.dfjglb, ");
			sqlBF.append("              a.dfjgid,a.dyffzt,a.xzzw,a.dyspbz,a.jdid, ");
			sqlBF.append("              a.sqid,a.dyffzt, c.rydjid,a.dyfhr,a.dyfhsj");

			this.readonlysql.setSql(sqlBF.toString());
			this.readonlysql.setString(1, zfrylb);
			this.readonlysql.setString(2, zyqsrq);
			this.readonlysql.setString(3, zyzzrq);
			this.readonlysql.setString(4, dyxsqsny);
			this.readonlysql.setString(5, dyxszzny);
			this.readonlysql.setString(6, ltxqsrq);
			this.readonlysql.setString(7, ltxzzrq);
			this.readonlysql.setString(8, csqsrq);
			this.readonlysql.setString(9, cszzrq);
			this.readonlysql.setString(10, cjgzqsrq);
			this.readonlysql.setString(11, cjgzzzrq);
			this.readonlysql.setString(12, zfrylb);
			this.readonlysql.setString(13, zyqsrq);
			this.readonlysql.setString(14, zyzzrq);
			this.readonlysql.setString(15, dyxsqsny);
			this.readonlysql.setString(16, dyxszzny);
			this.readonlysql.setString(17, ltxqsrq);
			this.readonlysql.setString(18, ltxzzrq);
			this.readonlysql.setString(19, csqsrq);
			this.readonlysql.setString(20, cszzrq);

			DataStore ds = this.readonlysql.executeQuery();

			ds = ds.sort("shbzhm");
			for (int k = 0, n = ds.rowCount(); k < n; k++) {
				String ryid = ds.getString(k, "ryid");
				String sprbh = ds.getString(k, "spr");
				String fhrbh = ds.getString(k, "dyfhr");

				String yxzjhm = "", lxdh = "", zyjszwjb = "", jtzz = "", grsf = "", gjzyzgdj = "";
				dsTemp.clear();
				this.readonlysql.setSql("select yxzjhm,lxrdh,zyjszwjb,jtzz,grsf,gjzyzgdj from biuv.person where ryid = ?");
				this.readonlysql.setString(1, ryid);
				dsTemp = this.readonlysql.executeQuery();
				if (dsTemp.rowCount() > 0) {
					yxzjhm = dsTemp.getString(0, "yxzjhm");
					lxdh = dsTemp.getString(0, "lxrdh");
					zyjszwjb = dsTemp.getString(0, "zyjszwjb");
					jtzz = dsTemp.getString(0, "jtzz");
					grsf = dsTemp.getString(0, "grsf");
					gjzyzgdj = dsTemp.getString(0, "gjzyzgdj");
				}
				// 审批人
				ds.put(k, "spr", HsuTools.getCzyxmByUserId(sprbh));
				ds.put(k, "fhr", HsuTools.getCzyxmByUserId(fhrbh));
				ds.put(k, "txdah", AdTools.getPerCmpl(ryid, "TXDAH", ""));
				ds.put(k, "sfzhm", yxzjhm);
				ds.put(k, "lxdh", lxdh);
				ds.put(k, "zyjszwjb", zyjszwjb);
				ds.put(k, "jtzz", jtzz);
				ds.put(k, "grsf", grsf);
				ds.put(k, "gjzyzgdj", gjzyzgdj);
				// 东营增加原单位信息-李琪-20161019
				String ydw = "";
				dsTemp.clear();
				sqlBF.setLength(0);
				sqlBF.append("select a.zglb, b.cbdwmc ");
				sqlBF.append("  from si3u.per_reg a,si3u.orgn_reg b ");
				sqlBF.append(" where a.ryid = ? ");
				sqlBF.append("    and a.dwdjid = b.dwdjid ");
				sqlBF.append("   order by a.qsny desc ");
				sql.setSql(sqlBF.toString());
				sql.setString(1, ryid);
				dsTemp = sql.executeQuery();
				if (dsTemp.rowCount() > 1) {
					String zglb = dsTemp.getString(0, "zglb");
					String zglbl = dsTemp.getString(1, "zglb");
					if (zglb != null && !"".equals(zglb)) {
						if (zglb.equals(zglbl)) {
							ydw = dsTemp.getString(1, "cbdwmc");
						}
					}
				}
				ds.put(k, "ydw", ydw); // end-李琪-20161019
				
				// 临沂增加退休证编号 zxk-2019-10-25
				String txzbh = "";
				this.sql.setSql(" select bcxmz from ad3u.per_cmpl where ryid = ? and bcxmbh = 'TXZBH' ");
				this.sql.setString(1, ryid);
				DataStore txzds = this.sql.executeQuery();

				if (txzds.rowCount() > 0) {
					txzbh = txzds.getString(0, "bcxmz");
				}
				ds.put(k,"txzbh",txzbh);
				
				
				// 求出每个人的统筹外银行信息
				sqlBF.setLength(0);
				sqlBF.append(" select a.bcxmbh, a.bcxmz ");
				sqlBF.append("   from ad3u.per_cmpl a ");
				sqlBF.append("  where a.bcxmbh in ('YHHH','YHHM','YHZH') ");
				sqlBF.append("   and a.ryid  =  ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore dstcw = this.sql.executeQuery();

				String tcwyhmc = "";
				for (int j = 0; j < dstcw.rowCount(); j++) {
					String bcxmbh = dstcw.getString(j, "bcxmbh");
					if ("YHHM".equals(bcxmbh)) {
						ds.put(k, "tcwyhhm", dstcw.getString(j, "bcxmz"));
					}
					if ("YHZH".equals(bcxmbh)) {
						ds.put(k, "tcwyhzh", dstcw.getString(j, "bcxmz"));
					}
					if ("YHHH".equals(bcxmbh)) {

						String yhhh = dstcw.getString(j, "bcxmz");
						if (null != yhhh && !"".equals(yhhh)) {
							this.sql.setSql("select a.yhmc from be3u.bank_natl a where a.yhid = ? ");
							this.sql.setString(1, yhhh);
							DataStore yhds = this.sql.executeQuery();
							if (yhds.rowCount() > 0) {
								tcwyhmc = yhds.getString(0, "yhmc");
								ds.put(k, "tcwyhmc", tcwyhmc);
							}
						}

					}

				}

			}
			dsPerMx.combineDatastore(ds);
			prompt.moveForword(1);
		}
		HsuTools.genJdxxDataStore(dsPerMx, "jdid", "jdbh", "ssjd");
		HsuTools.genSqxxDataStore(dsPerMx, "sqid", "sqbh", "sssq");
		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}
		dsPerMx = AdTools.genDfjgxxDataStore(dsPerMx, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		DataObject vdo = new DataObject();
		vdo.put("dsperinfo", dsPerMx);
		
		QueryLogTool.updateQueryLog(querylogid, dsPerMx.rowCount());
		
		return vdo;
	}
	
	/**
	 * 查询离退休账号变更情况(胜利油田)
	 * 
	 * @Description:
	 * @author qiukai
	 * @date 2020-04-17
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public DataObject queryLtxzhbgqkInfo_3795(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("离退休账号变更情况查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		String dfjgid = para.getString("dfjgid");
		String dfjgbh = para.getString("dfjgbh");
		
		//临沂 判断代发机构id和编号
		if (dfjgid == null) {
			dfjgid = "";
		}
		if (dfjgbh == null) {
			dfjgbh = "";
		}
		String zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		String qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		String dqrq = DateUtil.FormatDate(DateUtil.getDBDate(), "yyyyMMdd");

		if (qsrq == null || qsrq.trim().isEmpty()) {
			this.bizException("起始日期不能为空。");
		}
		if (zzrq == null || zzrq.trim().isEmpty()) {
			this.bizException("终止日期不能为空。");
		}

		if (zzrq.compareTo(dqrq) > 0) {
			this.bizException("终止日期不能晚当前止日期。");
		}

		if (qsrq.compareTo(zzrq) > 0) {
			this.bizException("起始日期不能晚于终止日期。");
		}

		sqlBF.setLength(0);
		sqlBF.append(" select distinct(a.grbh), p.xm, p.shbzhm, r.dwbh,  p.dfjgid, ");
		sqlBF.append("        p.yhzh, a.txdz, a.yzbm, a.lxrdh  lxdh, p.ryid,");
		sqlBF.append("        p.dfjglb ");
		sqlBF.append("   from ad3u.per_info p, ");
		sqlBF.append("        ad3u.per_chng c, ");
		sqlBF.append("        ad3u.per_chng_detl d, ");
		sqlBF.append("        si3u.orgn_reg r, ");
		sqlBF.append("        biuv.person a ");
		sqlBF.append("  where p.ryid = c.ryid ");
		sqlBF.append("    and c.xxbgid = d.xxbgid ");
		sqlBF.append("    and p.dwdjid = r.dwdjid ");
		sqlBF.append("    and a.ryid = p.ryid ");
		sqlBF.append("    and d.bgxm = 'yhzh' ");//变更信息是银行信息
		sqlBF.append("    and to_char(c.bgrq,'yyyymmdd') between ? and ? ");
		//胜利油田允许代发机构为空 rzs 20191221
		if (!"".equals(dfjgid) && dfjgid != null) {
			sqlBF.append("    and p.dfjgid = '"+dfjgid+"' ");
		}
		
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		this.readonlysql.setString(1, qsrq);
		this.readonlysql.setString(2, zzrq);
		DataStore vds = this.readonlysql.executeQuery();

		for (int i = 0; i < vds.rowCount(); i++) {
			// 若存在账号变更或新增记录
			String ryid = vds.getString(i, "ryid");

			// 取出补充信息中的发放模式
			String vffms = AdTools.getPerCmpl(ryid, "FFMS","");
			String csdm = AdTools.getPerCmpl(ryid, "CSBM",""); //取出此人身上的城市代码

			vds.put(i, "ffms", vffms);
			vds.put(i, "csdm", csdm);
		}

		AdTools.genDfjgxxDataStore(vds, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");
		
		DataObject rdo = new DataObject();
		rdo.put("ds", vds);
		
		QueryLogTool.updateQueryLog(querylogid, vds.rowCount());
		
		return rdo;
	}
	
	/**
	 * 查询遗属新增情况(胜利油田客户化)
	 * 
	 * @Description:
	 * @author qiukai
	 * @date 2020-04-20
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public final DataObject querySuppAddInfo_3795(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore dsSuppInfo, ds, dsSZInfo, dsStd;
		StringBuffer sqlBF = new StringBuffer();
		String qsny, zzny, szryid, szsfzhm, szxm, dqffny, jbjgid, szsgrbh;
		String ryid, dwdjid, dwmc, dwbh, sqlSzxx, yslb;
		double bfje, dqje;
		String szzfrylb, dfjgid, dfjgmc, dfjgbh;
		HashMap<String, String[]> dfjgMap = new HashMap<String, String[]>();// 代发机构Map
		String[] dfjgInfo;
		String dacfd; 
		
		String querylogid = QueryLogTool.saveQueryLog("新增遗属信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		qsny = para.getDateToString("qsny", "yyyyMM");
		zzny = para.getDateToString("zzny", "yyyyMM");
		jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));
        //淮南新增遗属类别查询条件 ysf 2018-10-27
		yslb = para.getString("yslb","");	

		String jbr = para.getString("yhid", ""); // 济南增加经办人  add gds 2019.4.29
        
		// 修改传入起始、终止年月判断（包括为空判断和起始年月大于终止年月判断）mp
		SiTools.checkQsZZny(qsny, zzny);

		// 取经办机构下在传入年月办理增员的遗属信息
		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.xm, p.shbzhm, p.yhzh, c.yslb zfrylb,   ");
		sqlBF.append("        p.dyxsksny, b.jtzz, b.hkxz, b.lxrxm, b.lxrdh,  ");
		sqlBF.append("        p.dwdjid, p.yhzh, c.swryid, c.gygx, p.xb,  ");
		sqlBF.append("        to_char(a.blzysj, 'yyyyMMdd') blzyrq, p.csrq,  ");
		sqlBF.append("        to_char(a.blzysj, 'yyyyMM') ffny, p.dfjgid,  ");
		sqlBF.append("        to_char(p.dyspsj, 'yyyyMMdd') fhrq, c.dqzfje, p.dyffzt, p.dyspr,  ");
		sqlBF.append("        b.grbh, a.blzyyy, a.bljyyy");
		sqlBF.append("   from ad3u.per_info p, ");
		sqlBF.append("        ad3u.supp_info c, ");
		sqlBF.append("        ad3u.per_reg a,  ");
		sqlBF.append("        biuv.person b   ");
		sqlBF.append("  where p.ryid = c.ryid  ");
		sqlBF.append("    and p.dqdydjid = a.dydjid ");
		sqlBF.append("    and p.ryid = b.ryid  ");
		sqlBF.append(" 	  and to_char(a.blzysj, 'yyyyMM') between ? and ?  ");
		sqlBF.append(" 	  and p.sszfrq = 'B'  ");
		sqlBF.append("    and a.jbjgid in (" + jbjgid + ") ");
        if(yslb != null && !"".equals(yslb)){
        	sqlBF.append("    and c.yslb in ("+HsuTools.replaceC2QCQ(yslb)+") ");
        }
		if (jbr != null && !"".equals(jbr)) {
			sqlBF.append("    and p.dyspr = '" + jbr + "' ");
		}
		this.sql.setSql(sqlBF.toString());

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, qsny);
		this.sql.setString(2, zzny);
		dsSuppInfo = this.sql.executeQuery();

		// 查询死者信息
		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.shbzhm, p.xm, e.ltxlb zfrylb, d.grbh   ");
		sqlBF.append("   from ad3u.per_reg r, ");
		sqlBF.append("        ad3u.per_info p, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        biuv.person d ");
		sqlBF.append("  where p.dqdydjid = r.dydjid ");
		sqlBF.append("    and p.ryid = e.ryid ");
		sqlBF.append("    and r.ryid = d.ryid ");
		sqlBF.append("    and p.ryid = ? ");
		sqlBF.append("    and r.bljyyy = '401' ");
		sqlSzxx = sqlBF.toString();

		for (int i = 0; i < dsSuppInfo.rowCount(); i++) {
			// 初始化定期金额
			dqje = 0;

			ryid = dsSuppInfo.getString(i, "ryid");
			dwdjid = dsSuppInfo.getString(i, "dwdjid");
			szryid = dsSuppInfo.getString(i, "swryid");
			dfjgid = dsSuppInfo.getString(i, "dfjgid");
			String dyxsksny = dsSuppInfo.getString(i, "dyxsksny");
			
			// 查询待遇最小年月
			sqlBF.setLength(0);
			sqlBF.append(" select min(qsny) qsny ");
			sqlBF.append("   from (select a.qsny ");
			sqlBF.append("           from ad3u.per_giv_month_std a ");
			sqlBF.append("          where a.ryid = ? ");
			sqlBF.append("            and ? between qsny and nvl(zzny, '205012')) ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			this.sql.setString(2, dyxsksny);
			ds = this.sql.executeQuery();
			dqffny = ds.getString(0, "qsny");

			// 若不存在定期待遇和暂停，则定期待遇为0
			if (dqffny != null && !"".equals(dqffny)) {
				// 查询定期待遇
				sqlBF.setLength(0);
				sqlBF.append(" select nvl(sum(btje), 0) dqje ");
				sqlBF.append("   from ad3u.per_giv_month_std ");
				sqlBF.append("  where ryid = ? ");
				sqlBF.append("    and ? between qsny and nvl(zzny, '205012') ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				this.sql.setString(2, dyxsksny);

				dsStd = this.sql.executeQuery();
				dqje = dsStd.getDouble(0, "dqje");
			}

			// 将定期发放起始年月放入数据集合
			dsSuppInfo.put(i, "dqffny", dqffny);

			// 查询补发(定期待遇最小年月之前的补发，若已待遇终止，则取所有补发)
			if (dqffny == null || "".equals(dqffny)) {
				dqffny = "204912";
			}

			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(p.btje), 0) bfje ");
			sqlBF.append("   from ad3u.per_giv_detl p  ");
			sqlBF.append("  where p.fflb = 'A' ");
			sqlBF.append("    and p.fsyy = '2' ");
			sqlBF.append("    and p.ryid = ?  ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();

			bfje = ds.getDouble(0, "bfje");

			// 淮南 新增档案存放地列 -QK 20190710
			dsSuppInfo.put(i, "dacfd", AdTools.getPerCmpl(ryid, "DACFD", ""));
			// end -QK 20190710

			
			// 查询单位
			this.sql.setSql(" select dwbh, cbdwmc dwmc from si3u.orgn_reg where dwdjid = ? ");
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();
			dwbh = "";
			dwmc = "";
			if (ds.rowCount() > 0) {
				dwbh = ds.getString(0, "dwbh");
				dwmc = ds.getString(0, "dwmc");
			}

			// 查询死者信息
			this.sql.setSql(sqlSzxx);
			this.sql.setString(1, szryid);
			dsSZInfo = sql.executeQuery();

			szsfzhm = "";
			szxm = "";
			szzfrylb = "";
			szsgrbh = "";
			if (dsSZInfo.rowCount() == 1) {
				szsfzhm = dsSZInfo.getString(0, "shbzhm");
				szxm = dsSZInfo.getString(0, "xm");
				szzfrylb = dsSZInfo.getString(0, "zfrylb");
				szsgrbh = dsSZInfo.getString(0, "grbh");
				
				szsfzhm = (szsfzhm == null) ? "" : szsfzhm;
				szxm = (szxm == null) ? "" : szxm;
				szzfrylb = (szzfrylb == null) ? "" : szzfrylb;
				szsgrbh = (szsgrbh == null) ? "" : szsgrbh;
			}

			dfjgmc = "";
			dfjgbh = "";
			dfjgInfo = new String[2];
			if (!dfjgMap.containsKey(dfjgid)) {
				this.sql.setSql(" select a.dfjgmc, dfjgbh from be3u.provide_natl a where a.dfjgid = ? ");
				this.sql.setString(1, dfjgid);
				ds = this.sql.executeQuery();
				if (ds.rowCount() > 0) {
					dfjgmc = ds.getString(0, "dfjgmc");
					dfjgbh = ds.getString(0, "dfjgbh");
				}
				dfjgInfo[0] = dfjgbh;
				dfjgInfo[1] = dfjgmc;
				dfjgMap.put(dfjgid, dfjgInfo);
			} else {
				dfjgInfo = (String[]) dfjgMap.get(dfjgid);
			}
			dfjgbh = dfjgInfo[0];
			dfjgmc = dfjgInfo[1];

			dsSuppInfo.put(i, "szzfrylb", szzfrylb);
			dsSuppInfo.put(i, "dfjgmc", dfjgmc);
			dsSuppInfo.put(i, "dfjgbh", dfjgbh);

			dsSuppInfo.put(i, "dqje", dqje);
			dsSuppInfo.put(i, "bfje", bfje);
			dsSuppInfo.put(i, "dwbh", dwbh);
			dsSuppInfo.put(i, "dwmc", dwmc);
			dsSuppInfo.put(i, "szsfzhm", szsfzhm);
			dsSuppInfo.put(i, "szxm", szxm);
			dsSuppInfo.put(i, "szsgrbh", szsgrbh);
		}

		dsSuppInfo = HsuTools.genSysUserDataStore(dsSuppInfo, "dyspr", "dysprbh", "dysprxm");

		dsSuppInfo = dsSuppInfo.sort("blzyrq,shbzhm,dwbh");
		rdo.put("dsSuppInfo", dsSuppInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsSuppInfo.rowCount());

		dsSuppInfo = null;
		dsSZInfo = null;
		ds = null;
		sqlBF = null;
		return rdo;
	}
	
	
	/**
	 * 查询遗属减员情况
	 * 
	 * @Description:
	 * @author qiukai
	 * @date 2020-04-20
	 * @param para
	 * @return
	 * @throws Exception
	 */
	public final DataObject querySuppSubInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		DataStore  dsSZInfo, ds;
		StringBuffer sqlBF = new StringBuffer();
		String qsny, zzny, szryid, szsfzhm, szxm, jbjgid, szsgrbh, jyrq;
		String ryid, sqlSzxx, sqlMaxNy, sqlTxj;
		double dqje;
		String szzfrylb, maxNy, bljyyy;
		
		String querylogid = QueryLogTool.saveQueryLog("遗属减员信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		qsny = para.getDateToString("qsny", "yyyyMM");
		zzny = para.getDateToString("zzny", "yyyyMM");
		jbjgid = HsuTools.replaceC2QCQ(StringUtil.trim(para.getString("jbjgid")));
        
		// 修改传入起始、终止年月判断（包括为空判断和起始年月大于终止年月判断）mp
		SiTools.checkQsZZny(qsny, zzny);
		
		// 查询符合条件的办理减员的养老人员登记信息(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, s.yslb zfrylb,  b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  d.xm, d.xb, a.shbzhm, a.yhzh, a.dylqlb,");
		sqlBF.append("        a.sszfrq, b.jbjgid, a.jdid, s.swryid, a.dfjgid, ");
		sqlBF.append("		  a.dyxsksny, a.dwdjid, d.grbh, d.hkxz, s.gygx "); 
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info s, ");
		sqlBF.append("        biuv.person  d ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = s.ryid ");
		sqlBF.append("    and a.ryid = d.ryid ");
		sqlBF.append("    and a.sszfrq = 'B' ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  b.jbjgid in (" + jbjgid + ") ");
		}
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
	
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, qsny);
		this.readonlysql.setString(2, zzny);

		DataStore dsSuppInfo = this.readonlysql.executeQuery();

		// 查询死者信息
		sqlBF.setLength(0);
		sqlBF.append(" select p.ryid, p.shbzhm, p.xm, e.ltxlb zfrylb, d.grbh   ");
		sqlBF.append("   from ad3u.per_reg r, ");
		sqlBF.append("        ad3u.per_info p, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        biuv.person d ");
		sqlBF.append("  where p.dqdydjid = r.dydjid ");
		sqlBF.append("    and p.ryid = e.ryid ");
		sqlBF.append("    and r.ryid = d.ryid ");
		sqlBF.append("    and p.ryid = ? ");
		sqlBF.append("    and r.bljyyy = '401' ");
		sqlSzxx = sqlBF.toString();

		
		// 取最大拨付年月的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(max(zzny), '204912') maxny ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlMaxNy = sqlBF.toString();

		// 查询退休金的sql	
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(btje), 0) dqje ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and ? between qsny and nvl(zzny, '205012') ");
		sqlTxj = sqlBF.toString();
				
		for (int i = 0; i < dsSuppInfo.rowCount(); i++) {
			// 初始化定期金额

			ryid = dsSuppInfo.getString(i, "ryid");
			szryid = dsSuppInfo.getString(i, "swryid");
			jyrq = dsSuppInfo.getString(i, "jyrq");
			bljyyy = dsSuppInfo.getString(i, "bljyyy");
			
			// 查询死者信息
			this.sql.setSql(sqlSzxx);
			this.sql.setString(1, szryid);
			dsSZInfo = sql.executeQuery();

			szsfzhm = "";
			szxm = "";
			szzfrylb = "";
			szsgrbh = "";
			if (dsSZInfo.rowCount() == 1) {
				szsfzhm = dsSZInfo.getString(0, "shbzhm");
				szxm = dsSZInfo.getString(0, "xm");
				szzfrylb = dsSZInfo.getString(0, "zfrylb");
				szsgrbh = dsSZInfo.getString(0, "grbh");

				szsfzhm = (szsfzhm == null) ? "" : szsfzhm;
				szxm = (szxm == null) ? "" : szxm;
				szzfrylb = (szzfrylb == null) ? "" : szzfrylb;
				szsgrbh = (szsgrbh == null) ? "" : szsgrbh;
			}

			// 查询待遇金额	
			// 丧葬费、抚恤金、个人账户返还
			this.readonlysql.setSql(sqlMaxNy);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			maxNy = ds.getString(0, "maxny");
			if ("204912".equals(maxNy) && (jyrq != null && !"".equals(jyrq))) {
				maxNy = jyrq.substring(0, 6);
			}

			// 退休金
			this.readonlysql.setSql(sqlTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			
			ds = this.readonlysql.executeQuery();
			dqje = ds.getDouble(0, "dqje");
			
			
			dsSuppInfo.put(i, "szzfrylb", szzfrylb);
			dsSuppInfo.put(i, "szsfzhm", szsfzhm);
			dsSuppInfo.put(i, "szxm", szxm);
			dsSuppInfo.put(i, "szsgrbh", szsgrbh);
			dsSuppInfo.put(i, "dqje", dqje);
		}


		dsSuppInfo = dsSuppInfo.sort("blzyrq,shbzhm,dwbh");
		rdo.put("dsSuppInfo", dsSuppInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsSuppInfo.rowCount());

		dsSuppInfo = null;
		dsSZInfo = null;
		sqlBF = null;
		return rdo;
	}
	
	/**
	 * 方法简介. 查询劳动家属退休减员信息
	 * 
	 * @author qiukai 2020-04-26
	 */
	public DataObject queryLdjsTxjyInfo(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String jyqsrq ="",jyzzrq="", ryid = "", jyrq = "", maxNy = "";
		String dwdjid, sqlNatl, sqlMaxNy, sqlTxj ;
		double txj = 0.0;
		String querylogid = QueryLogTool.saveQueryLog("劳动家属退休减员情况", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);

		// 接参数
		dwdjid = para.getString("dwdjid", "");
	
		// 增加减员起始日期和终止日期 
		if (para.containsKey("qsrq")) {
			jyqsrq = para.getDateToString("qsrq", "yyyyMMdd");
		}
		if (para.containsKey("zzrq")) {
			jyzzrq = para.getDateToString("zzrq", "yyyyMMdd");
		}

		// 查询符合条件的办理减员的劳动家属人员
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, a.shbzhm, a.dyxsksny, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  e.stjfnx, e.sjjfnx, e.dacsrq, b.jbjgid, a.jdid  "); 
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		if (jyqsrq != null && !"".equals(jyqsrq) && jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and to_char(b.bljysj,'yyyymmdd') between "+jyqsrq+" and "+jyzzrq+" ");
		}
		if (dwdjid != null && !"".equals(dwdjid)) { // 有单位则具体到某个单位
			sqlBF.append("	  and a.dwdjid = '" + dwdjid + "' ");
		} else { // 如果单位登记id为空则查出 所有劳动家属单位的人员
			sqlBF.append("     and exists (select 1                          ");
			sqlBF.append("            from si3u.orgn_cmpl f                  ");
			sqlBF.append("           where o.dwid = f.dwid                   ");
			sqlBF.append("             and f.bcxmbh = 'LDJSDWBZ'             ");
			sqlBF.append("             and f.bcxmz = '1'        )            ");	
			
		}
		this.readonlysql.setSql(sqlBF.toString());
		DataStore dsTxjyInfo = this.readonlysql.executeQuery();
		
		
		// 取人员基本信息的sql（职工）
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, a.swrq, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz, e.cjgzrq, a.grbh ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlNatl = sqlBF.toString();
		
		// 取最大拨付年月的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(max(zzny), '204912') maxny ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlMaxNy = sqlBF.toString();

		// 查询退休金的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) txj ");
		sqlBF.append("   from ad3u.per_giv_month_std a,  ");
		sqlBF.append(" 	      ad3u.giv_item b ");
		sqlBF.append("  where a.btbh = b.btbh ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and ? between a.qsny and nvl(a.zzny,'204912') ");
		sqlTxj = sqlBF.toString();
		
		// 查询人员基本信息,待遇信息
		for (int i = 0; i < dsTxjyInfo.rowCount(); i++) {
			ryid = dsTxjyInfo.getString(i, "ryid");
			jyrq = dsTxjyInfo.getString(i, "jyrq");

            this.readonlysql.setSql(sqlNatl);
			this.readonlysql.setString(1, ryid);
			DataStore ds = this.readonlysql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}
			dsTxjyInfo.put(i, "xm", ds.getString(0, "xm"));
			dsTxjyInfo.put(i, "shbzhm", ds.getString(0, "shbzhm"));
			dsTxjyInfo.put(i, "xb", ds.getString(0, "xb"));
			dsTxjyInfo.put(i, "csrq", ds.getString(0, "csrq"));
			dsTxjyInfo.put(i, "swrq", ds.getString(0, "swrq"));
			dsTxjyInfo.put(i, "grbh", ds.getString(0, "grbh"));

			// 退休金 取最大发放年月的待遇金额，如果取不到则取死亡当月待遇金额
			this.readonlysql.setSql(sqlMaxNy);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			maxNy = ds.getString(0, "maxny");
			if ("204912".equals(maxNy) && (jyrq != null && !"".equals(jyrq))) {
				maxNy = jyrq.substring(0, 6);
			}

			// 退休金
			this.readonlysql.setSql(sqlTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			// 20110516
			ds = this.readonlysql.executeQuery();
			txj = ds.getDouble(0, "txj");
			dsTxjyInfo.put(i, "txj", txj);
			
		}
		
		rdo.put("txjyinfo", dsTxjyInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsTxjyInfo.rowCount());

		
		return rdo;
		
	}
	
	/**
	 * 
	 * 方法简介.查询询拨付人员明细_某页数据 查询精简遗属 
	 * 为不影响标准件的速度 增加客户化
	 * 
	 * @author qiukai 2020-05-06
	 */
	public DataObject queryBfryMx_PageRows_3795(DataObject para) throws Exception {
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieve",para,this.getUser()).getString("sqlStr");

		int g_startRowNumber = para.getInt("g_startRowNumber");
		int g_endRowNumber = para.getInt("g_endRowNumber");
		String g_order = para.getString("g_order");

		this.sql.setSql(sqlStr);
		DataStore dsMxinfo = this.sql.selectPageRows(g_startRowNumber, g_endRowNumber, g_order);
		//添加死亡人员信息查询并拼到ds中去  --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {

			// 增加查询 精简遗属标志
			String ryid = dsMxinfo.getString(i, "ryid");
			String jjysbz = AdTools.getPerCmpl(ryid, "JJYSBZ", "");
			if ("1".equals(jjysbz)) {
				dsMxinfo.put(i, "jjysbz", "1");
			} else {
				dsMxinfo.put(i, "jjysbz", "0");
			}

			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			StringBuffer sqlBF = new StringBuffer();
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");


			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq  =dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		para.put("dsMxinfo", dsMxinfo);
		DataObject vdo = this.queryBfryMxAllinfo(para);
		
		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");
		if (g_order == null || "".equals(g_order)) {
			dsMxinfo.sort("shbzhm").sort("dwbh");
		}
		vdo.put("dsmxinfo", dsMxinfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsMxinfo.rowCount());

		return vdo;
	}

	/**
	 * 方法简介. 退休减员明细查询(油田客户化)
	 * 
	 * @author qiukai  2020-05-12
	 */
	public DataObject queryTxjyInfoByDfjg_3795(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String qsrq, zzrq, dyzzyy, zfrylb, ryid, dfjglb, dfjgid, jyrq, maxNy;
		DataStore ds = new DataStore(), dsTxjyInfo = new DataStore();
		String sqlNatl, sqlMaxNy, sqlTxj, sqlKj, sqlNatl_ys, sszfrq, sqlZtsj;
		double txj, ddwff, kjje, zhfh, szf, fxj, jtbt, txj2, zynj, ylj, sjffje;
		String dfjgbh, dfjgmc, jjlx, ztny = "";
		String jbjgid, jyqsrq = "", jyzzrq="", jdid;
		double stjfnx, sjjfnx, zjfnx;
		double ycxjjf;// 一次性救济费。

		// 接参数
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjglb = para.getString("dfjglb");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		dyzzyy = para.getString("dyzzyy");
		qsrq = para.getDateToString("qsrq", "yyyyMMdd");
		zzrq = para.getDateToString("zzrq", "yyyyMMdd");
		dyzzyy = HsuTools.replaceC2QCQ(dyzzyy);
		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		jbjgid = para.getString("jbjgid", "");
		jbjgid = HsuTools.replaceC2QCQ(jbjgid);
		jjlx = para.getString("jjlx", "");
		ryid = para.getString("ryid", "");
		jdid = para.getString("jdid", "");
		//增加减员起始日期和终止日期 zlj 2017-1-12
		if(para.containsKey("jyqsrq")){
			jyqsrq = para.getDateToString("jyqsrq", "yyyyMMdd");
		}
		if(para.containsKey("jyzzrq")){
			jyzzrq = para.getDateToString("jyzzrq", "yyyyMMdd");
		}
		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("传入代发机构ID为空！");
		}
		if (dfjglb == null || "".equals(dfjglb)) {
			this.bizException("传入代发机构类别为空！");
		}

		if (qsrq == null || "".equals(qsrq)) {
			qsrq = "19500101";
		}
		if (zzrq == null || "".equals(zzrq)) {
			zzrq = "25001231";
		}
		

		// TODO hsu还未实现
		// rightSql = Si3Tools.getDataRightSql(this.userid, "b",
		// Cp3Tools.replaceC2QCQ(Si3Tools.getSjjbjgByZfjbjg(this.jbjgqxfw,"101,102")));

		// 查询符合条件的办理减员的养老人员登记信息(职工)--mod.yxt.20160108.per_reg与per_info的关联改为ryid
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, e.ltxlb zfrylb, e.ltxrq, b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, '' xm, '' shbzhm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszwjb, '' xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, ? dfjgbh, ? dfjgmc, a.shbzhm, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  e.stjfnx, e.sjjfnx, e.dacsrq, b.jbjgid, a.jdid, "); //增加 jbjgid zkj add 2017/11/27 
		sqlBF.append("		  q.bcxmz cjnjjh, (select bcxmz from ad3u.per_cmpl pc where pc.ryid = a.ryid and pc.bcxmbh = 'YHZH' and rownum = 1) tcwyhzh "); 
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c, ");
		sqlBF.append("        si3u.per_reg_cmpl q ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and b.rydjid = q.rydjid(+) ");
		sqlBF.append("    and q.bcxmbh(+) = 'CJNJJH' ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("    and not exists  (select 1 ");  //去掉劳动家属单位的人员 
		sqlBF.append("                       from si3u.orgn_cmpl f ");
		sqlBF.append("                      where o.dwdjid = f.dwdjid ");
		sqlBF.append("                        and bcxmbh ='LDJSDWBZ' ");
		sqlBF.append("                        and bcxmz = '1' ) ");
		

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  b.jbjgid in (" + jbjgid + ") ");
		} else {
			// sqlBF.append("    and  ").append(rightSql);
		}
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and b.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and e.ltxlb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and a.dfjglb = ? ");
		sqlBF.append("	  and a.dfjgid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
		if (jyqsrq != null && !"".equals(jyqsrq) && jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and b.jyrq between "+jyqsrq+" and "+jyzzrq+" ");
		}
		if (jjlx != null && !"".equals(jjlx)) {
			sqlBF.append("	  and c.jjlx in(" + HsuTools.replaceC2QCQ(jjlx)
					+ ") ");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("	  and e.ryid = '" + ryid + "' ");
		}
		if (jdid != null && !"".equals(jdid)) {
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-20160329
		this.readonlysql.setString(1, dfjgbh);
		this.readonlysql.setString(2, dfjgmc);
		this.readonlysql.setString(3, dfjglb);
		this.readonlysql.setString(4, dfjgid);
		this.readonlysql.setString(5, qsrq);
		this.readonlysql.setString(6, zzrq);

		DataStore dsTxjyInfo_zg = this.readonlysql.executeQuery();

		// 查询符合条件的办理减员的养老人员登记信息(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid, s.yslb zfrylb,  b.jyrq, ");
		sqlBF.append("		  to_char(add_months(to_date(b.jyrq,'yyyyMMdd'),1),'yyyyMM') dyzzny,");
		sqlBF.append("		  b.bljyyy, to_char(b.bljysj, 'yyyyMMdd') bljyrq, ");
		sqlBF.append("		  o.dwbh, o.cbdwmc, '' xm, '' shbzhm, '' xb, ");
		sqlBF.append("        '' csrq, '' grsf, '' jtzz, '' zyjszwjb, '' xzzw, ");
		sqlBF.append("        '' gjzyzgdj, 0 txj, 0 ddwff, 0 kjje, 0 zhfh, ");
		sqlBF.append("        0 szf, 0 fxj, ? dfjgbh, ? dfjgmc, a.shbzhm, ");
		sqlBF.append("        o.cbdwxz, a.yhzh, a.dylqlb, c.jjlx ,a.sszfrq,");
		sqlBF.append("		  '' stjfnx, '' sjjfnx, '' dacsrq, b.jbjgid, a.jdid, "); //增加jbjgid查询   --张凯杰  add 2017/11/27
		sqlBF.append("		  q.bcxmz cjnjjh "); 
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info s, ");
		sqlBF.append("        si3u.orgn_reg o , ");
		sqlBF.append("        biuv.orgn  c, ");
		sqlBF.append("        si3u.per_reg_cmpl q ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = s.ryid ");
		sqlBF.append("    and a.dwdjid = o.dwdjid ");
		sqlBF.append("    and o.dwid = c.dwid ");
		sqlBF.append("    and b.rydjid = q.rydjid(+) ");
		sqlBF.append("    and q.bcxmbh(+) = 'CJNJJH' ");
		sqlBF.append("    and a.sszfrq = 'B' ");
		sqlBF.append("    and not exists  (select 1 "); //去掉劳动家属单位的人员 
		sqlBF.append("                       from si3u.orgn_cmpl f ");
		sqlBF.append("                      where o.dwdjid = f.dwdjid ");
		sqlBF.append("                        and bcxmbh ='LDJSDWBZ' ");
		sqlBF.append("                        and bcxmz = '1' ) ");

		if (jbjgid != null && !"".equals(jbjgid)) {
			sqlBF.append("  and  b.jbjgid in (" + jbjgid + ") ");
		} else {
			// sqlBF.append("    and  ").append(rightSql);
		}
		if (dyzzyy != null && !"".equals(dyzzyy)) {
			sqlBF.append("	  and b.bljyyy in (").append(dyzzyy).append(") ");
		}
		if (zfrylb != null && !"".equals(zfrylb)) {
			sqlBF.append("	  and s.yslb in (").append(zfrylb).append(") ");
		}

		sqlBF.append("	  and a.dfjglb = ? ");
		sqlBF.append("	  and a.dfjgid = ? ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMMdd') ");
		sqlBF.append("			between ? and ? ");
		if (jyqsrq != null && !"".equals(jyqsrq) && jyzzrq != null && !"".equals(jyzzrq)) {
			sqlBF.append("	  and b.jyrq between "+jyqsrq+" and "+jyzzrq+" ");
		}
		if (jjlx != null && !"".equals(jjlx)) {
			sqlBF.append("	  and c.jjlx in(" + HsuTools.replaceC2QCQ(jjlx)
					+ ") ");
		}
		if (ryid != null && !"".equals(ryid)) {
			sqlBF.append("	  and s.ryid = '" + ryid + "' ");
		}
		if (jdid != null && !"".equals(jdid)) {
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, dfjgbh);
		this.readonlysql.setString(2, dfjgmc);
		this.readonlysql.setString(3, dfjglb);
		this.readonlysql.setString(4, dfjgid);
		this.readonlysql.setString(5, qsrq);
		this.readonlysql.setString(6, zzrq);

		DataStore dsTxjyInfo_ys = this.readonlysql.executeQuery();

		// 取人员基本信息的sql（职工）
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz, e.cjgzrq, a.grbh ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        ad3u.emp_info e ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlNatl = sqlBF.toString();

		// 取人员基本信息的sql(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select a.xm, a.shbzhm, a.xb, a.csrq, a.grsf, ");
		sqlBF.append("		  a.jtzz, a.zyjszwjb, b.xzzw, a.gjzyzgdj, ");
		sqlBF.append("        b.ygxs, a.lxrdh, a.txdz, a.grbh ");
		sqlBF.append("   from biuv.person a, ");
		sqlBF.append("        ad3u.per_info b ");
		sqlBF.append("	where a.ryid = ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlNatl_ys = sqlBF.toString();

		// 取最大拨付年月的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(max(zzny), '204912') maxny ");
		sqlBF.append("   from ad3u.per_giv_month_std ");
		sqlBF.append("  where ryid = ? ");
		sqlMaxNy = sqlBF.toString();

		// 查询退休金的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) txj, ");
		sqlBF.append(" 	      nvl(sum(decode(b.btlb, '901', a.btje, 0)), 0) ddwff, ");
		sqlBF.append("        nvl(sum(decode(a.xzbz, '106', a.btje, 0)), 0) jtbt, ");
		sqlBF.append("        nvl(sum(decode(b.btbh, 'B305', a.btje, 0)), 0) zynj, ");//增加查询职业年金 gzh mod 20180413
		sqlBF.append("        nvl(sum(decode(b.btbh, 'B305', 0, a.btje)), 0) ylj ");//增加查询养老金 gzh mod 20180413
		sqlBF.append("   from ad3u.per_giv_month_std a,  ");
		sqlBF.append(" 	      ad3u.giv_item b ");
		sqlBF.append("  where a.btbh = b.btbh ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and ? between a.qsny and nvl(a.zzny,'204912') ");
		sqlTxj = sqlBF.toString();

		// 扣减金额
		// 修正因录入发放月份有负数而产生了正数扣减而导致的计算错误 modify.zxz.20170726
		sqlBF.setLength(0);
		sqlBF.append("select nvl(sum(btje), 0) kjje ");
		sqlBF.append("  from (select nvl(a.btje, 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje < 0 ");
		sqlBF.append("           and a.fflb in ('A', 'D') ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("        union all ");
		sqlBF.append("        select nvl((a.btje * 2), 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje > 0 ");
		sqlBF.append("           and a.fflb = 'A' ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("           and exists ");
		sqlBF.append("         (select 1 ");
		sqlBF.append("                  from ad3u.per_giv_month_std c ");
		sqlBF.append("                 where c.ryid = a.ryid ");
		sqlBF.append("                   and a.btbh = c.btbh ");
		sqlBF.append("                   and a.xzbz = c.xzbz ");
		sqlBF.append("                   and c.btje < 0 ");
		sqlBF.append("                   and a.btje = - (c.btje) ");
		sqlBF.append("                   and c.zzny = b.dyzzny )) ");
		//modify.zxz.20170726.end
		sqlKj = sqlBF.toString();
		
		//add gp 20200317 
		sqlBF.setLength(0);
		sqlBF.append("select nvl(sum(btje), 0) kjje ");
		sqlBF.append("  from (select nvl(a.btje, 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje < 0 ");
		sqlBF.append("           and a.fflb in ('A', 'D') ");
		sqlBF.append("           and exists ( select 'x' ");
		sqlBF.append("                          from ad3u.giv_item t");
		sqlBF.append("                         where a.btbh = t.btbh ");
		sqlBF.append("                           and nvl(t.ftcjjbz,'0')  = ? ) ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("        union all ");
		sqlBF.append("        select nvl((a.btje * 2), 0) btje ");
		sqlBF.append("          from ad3u.per_giv_detl a, ad3u.per_info b ");
		sqlBF.append("         where a.ryid = b.ryid ");
		sqlBF.append("           and a.yfny > b.dyzzny ");
		sqlBF.append("           and a.btje > 0 ");
		sqlBF.append("           and a.fflb = 'A' ");
		sqlBF.append("           and exists ( select 'x' ");
		sqlBF.append("                          from ad3u.giv_item t");
		sqlBF.append("                         where a.btbh = t.btbh ");
		sqlBF.append("                           and nvl(t.ftcjjbz,'0')  = ? ) ");
		sqlBF.append("           and a.ryid = ? ");
		sqlBF.append("           and exists ");
		sqlBF.append("         (select 1 ");
		sqlBF.append("                  from ad3u.per_giv_month_std c ");
		sqlBF.append("                 where c.ryid = a.ryid ");
		sqlBF.append("                   and a.btbh = c.btbh ");
		sqlBF.append("                   and a.xzbz = c.xzbz ");
		sqlBF.append("                   and c.btje < 0 ");
		sqlBF.append("                   and a.btje = - (c.btje) ");
		sqlBF.append("                   and c.zzny = b.dyzzny )) ");
		
		String sqlKjtcnw = sqlBF.toString();
		//add gp 20200317 end
		
		
		// 取暂停待遇时间信息
		sqlBF.setLength(0);
		sqlBF.append(" select a.qsny ");
		sqlBF.append("   from ad3u.per_pause a");
		sqlBF.append("  where ryid = ? ");
		sqlBF.append("    and a.ztsj = (select max(b.ztsj) ");
		sqlBF.append("                    from ad3u.per_pause b");
		sqlBF.append("                   where a.ryid = b.ryid)");
		sqlZtsj = sqlBF.toString();
		
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(a.btje), 0) txj ");
     	sqlBF.append("   from ad3u.per_giv_month_std a,  ");
		sqlBF.append(" 	      ad3u.giv_item b ");
		sqlBF.append("  where a.btbh = b.btbh ");
		sqlBF.append("    and a.ryid = ? ");
		sqlBF.append("    and ? between a.qsny and nvl(a.zzny,'204912') ");
		sqlBF.append("    and nvl(ftcjjbz,'0') = ? ");
		String tcnwTxj = sqlBF.toString();

		dsTxjyInfo = dsTxjyInfo_zg.combineDatastore(dsTxjyInfo_ys);

		// 查询人员基本信息,待遇信息
		for (int i = 0; i < dsTxjyInfo.rowCount(); i++) {
			ryid = dsTxjyInfo.getString(i, "ryid");
			jyrq = dsTxjyInfo.getString(i, "jyrq");
			sszfrq = dsTxjyInfo.getString(i, "sszfrq");
			stjfnx = dsTxjyInfo.getDouble(i, "stjfnx");
			sjjfnx = dsTxjyInfo.getDouble(i, "sjjfnx");
			jbjgid = dsTxjyInfo.getString(i, "jbjgid");
			zjfnx = MathUtil.round(MathUtil.round((stjfnx + sjjfnx) * 12, 0) / 12, 2);

			dsTxjyInfo.put(i, "zjfnx", zjfnx);

			if ("A".equals(sszfrq)) {
				this.readonlysql.setSql(sqlNatl);
			}
			if ("B".equals(sszfrq)) {
				this.readonlysql.setSql(sqlNatl_ys);
			}

			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}
			dsTxjyInfo.put(i, "xm", ds.getString(0, "xm"));
			dsTxjyInfo.put(i, "shbzhm", ds.getString(0, "shbzhm"));
			dsTxjyInfo.put(i, "xb", ds.getString(0, "xb"));
			dsTxjyInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsTxjyInfo.put(i, "csrq", ds.getString(0, "csrq"));
			dsTxjyInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsTxjyInfo.put(i, "zyjszwjb", ds.getString(0, "zyjszwjb"));
			dsTxjyInfo.put(i, "xzzw", ds.getString(0, "xzzw"));
			dsTxjyInfo.put(i, "gjzyzgdj", ds.getString(0, "gjzyzgdj"));
			dsTxjyInfo.put(i, "ygxs", ds.getString(0, "ygxs"));
			dsTxjyInfo.put(i, "lxrdh", ds.getString(0, "lxrdh"));
			dsTxjyInfo.put(i, "txdz", ds.getString(0, "txdz"));
			dsTxjyInfo.put(i, "grbh", ds.getString(0, "grbh"));//add mxh 20200109
			if ("A".equals(sszfrq)) {
				dsTxjyInfo.put(i, "cjgzrq", ds.getString(0, "cjgzrq"));
			}

			// 退休金 取最大发放年月的待遇金额，如果取不到则取死亡当月待遇金额
			this.readonlysql.setSql(sqlMaxNy);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			maxNy = ds.getString(0, "maxny");
			if ("204912".equals(maxNy) && (jyrq != null && !"".equals(jyrq))) {
				maxNy = jyrq.substring(0, 6);
			}

			// 退休金
			this.readonlysql.setSql(sqlTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			// 20110516
			ds = this.readonlysql.executeQuery();
			txj = ds.getDouble(0, "txj");
			ddwff = ds.getDouble(0, "ddwff");
			jtbt = ds.getDouble(0, "jtbt");
			zynj = ds.getDouble(0, "zynj");
			ylj = ds.getDouble(0, "ylj");
			
			txj2 = txj - jtbt;

			this.readonlysql.setSql(tcnwTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			this.readonlysql.setString(3, "0");
			ds = this.readonlysql.executeQuery();
			double txjtcn= ds.getDouble(0, "txj");
			
			this.readonlysql.setSql(tcnwTxj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, maxNy);
			this.readonlysql.setString(3, "1");
			ds = this.readonlysql.executeQuery();
			double txjtcw= ds.getDouble(0, "txj");
			
			// 多发扣回
			this.readonlysql.setSql(sqlKj);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, ryid);
			ds = this.readonlysql.executeQuery();
			kjje = ds.getDouble(0, "kjje");
			
			this.readonlysql.setSql(sqlKjtcnw);
			this.readonlysql.setString(1, "0");
			this.readonlysql.setString(2, ryid);
			this.readonlysql.setString(3, "0");
			this.readonlysql.setString(4, ryid);
			ds = this.readonlysql.executeQuery();
			double kjjetcn  = ds.getDouble(0, "kjje");
			
			this.readonlysql.setSql(sqlKjtcnw);
			this.readonlysql.setString(1, "1");
			this.readonlysql.setString(2, ryid);
			this.readonlysql.setString(3, "1");
			this.readonlysql.setString(4, ryid);
			ds = this.readonlysql.executeQuery();
			double kjjetcw  = ds.getDouble(0, "kjje");

			// 丧葬费、抚恤金、个人账户返还
			DataObject pdo = new DataObject();
			pdo.put("ryid", ryid);
			DataObject result= this.doMethod(jbjgid, "getSzffxjInfo", pdo, this.getUser());  //将查询丧葬抚恤金提成一个方法方便客户化 zkj add 2017/11/27
			szf = result.getDouble("szf");
			fxj = result.getDouble("fxj");
			zhfh = result.getDouble("zhfh");
			ycxjjf = result.getDouble("ycxjjf");
			sjffje = MathUtil.round(zhfh + fxj + szf + kjje, 2);//增加实际发放金额 ysf 2018-10-31
			
			
			//最大暂停时间 ysf 2019-3-14
			this.readonlysql.setSql(sqlZtsj);
			this.readonlysql.setString(1, ryid);
			ds = this.readonlysql.executeQuery();
			if(ds.rowCount()>0){
				ztny = ds.getString(0, "qsny");
			}else{
				ztny = "";
			}

			dsTxjyInfo.put(i, "txj", txj);
			dsTxjyInfo.put(i, "txjtcn", txjtcn);
			dsTxjyInfo.put(i, "txjtcw", txjtcw);
			dsTxjyInfo.put(i, "ddwff", ddwff);
			dsTxjyInfo.put(i, "jtbt", jtbt);
			dsTxjyInfo.put(i, "txj2", txj2);
			dsTxjyInfo.put(i, "kjje", kjje);
			dsTxjyInfo.put(i, "kjjetcn", kjjetcn);
			dsTxjyInfo.put(i, "kjjetcw", kjjetcw);
			dsTxjyInfo.put(i, "szf", szf);
			dsTxjyInfo.put(i, "fxj", fxj);
			dsTxjyInfo.put(i, "zhfh", zhfh);
			dsTxjyInfo.put(i, "ycxjjf", ycxjjf);
			dsTxjyInfo.put(i, "zynj", zynj);
			dsTxjyInfo.put(i, "ylj", ylj);
			dsTxjyInfo.put(i, "lqrmc", AdTools.getPerCmpl(ryid, "LQRMC",""));
			dsTxjyInfo.put(i, "lqrlxdh", AdTools.getPerCmpl(ryid, "LQRLXDH",""));
			dsTxjyInfo.put(i, "lqrsfzhm", AdTools.getPerCmpl(ryid, "LQRSFZHM",""));
			dsTxjyInfo.put(i, "sjffje", sjffje);
			dsTxjyInfo.put(i, "ztny", ztny);
			dsTxjyInfo.put(i, "dacfd", AdTools.getPerCmpl(ryid, "DACFD",""));//淮南增加档案存放地 ysf 2019-3-14
		}

		dsTxjyInfo = HsuTools.genJdxxDataStore(dsTxjyInfo, "jdid", "jdbh", "jdmc");
		dsTxjyInfo = dsTxjyInfo.sortdesc("bljyrq");
		ds = new DataStore();
		ds.addRow(para);

		rdo.put("txjyinfo", dsTxjyInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}

	/**
	 * 
	 * 方法简介.劳动家属申报表单位
	 *
	 * @author gaopeng
	 * @date 创建时间 2020年5月13日
	 * @since V1.0
	 */
	public DataObject fwdPrinteLdjsdysbPage(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		
		sqlBF.setLength(0);
		sqlBF.append(" select r.dwdjid value, r.cbdwmc content ");
		sqlBF.append("   from si3u.orgn_reg r  ");
		sqlBF.append("  where exists( select 'x' ");
		sqlBF.append("                 from si3u.orgn_cmpl c ");
		sqlBF.append("                where r.dwdjid=c.dwdjid ");
		sqlBF.append("                  and c.bcxmbh='LDJSDWBZ' ");
		sqlBF.append("                  and c.bcxmz = '1' )  ");
		this.readonlysql.setSql(sqlBF.toString());
		DataStore ds = this.readonlysql.executeQuery();
		
		rdo.put("ds", ds);
		return rdo;
	}
	
	/**
	 * 方法简介.跳转到暂停拨付人员详细信息的JSP
	 * 
	 * @author qiukai  2020-05-29
	 */
	public DataObject queryZtbfryInfoByOrgn_3795(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String zfrylb, currentNy, ryid, dfjglb, dfjgid, dfjgbh, dfjgmc, qsny, zzny, ztyy; // 增加查询条件“暂停原因” lan 2017-11-21
		String btlb = "";//淄博查询区分基本养老金和40元补贴  ysf.2018-7-20
		DataStore ds = new DataStore(), dsZtbfryInfo = new DataStore(), dsnj = new DataStore();
		String gljglb, gljgid, dwdjid, xb,jbjgid ;
		DataObject pdo = new DataObject(),vdo = new DataObject();
		
		// 接参数
		dfjglb = para.getString("dfjglb");
		dfjgbh = para.getString("dfjgbh");
		dfjgmc = para.getString("dfjgmc");
		dfjgid = para.getString("dfjgid");
		zfrylb = para.getString("zfrylb");
		gljglb = para.getString("gljglb", "");
		gljgid = para.getString("gljgid", "");
		qsny = para.getString("qsny", "");
		zzny = para.getString("zzny", "");
		currentNy = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		xb = para.getString("xb", "");
		ztyy = para.getString("ztyy", "");
		btlb = para.getString("btlb", "");

		if (dfjgid == null || "".equals(dfjgid)) {
			this.bizException("传入代发机构ID为空！");
		}
		if (dfjglb == null || "".equals(dfjglb)) {
			this.bizException("传入代发机构类别为空！");
		}
		
		if (qsny == null){
			qsny = "";
		}
		if (zzny == null){
			zzny = "";
		}

		zfrylb = HsuTools.replaceC2QCQ(zfrylb);
		sqlBF.setLength(0);
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("        ei.ltxlb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.emp_info ei, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = ei.ryid ");
		sqlBF.append("    and pi.sszfrq = 'A' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and ei.ltxlb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		// 增加查询条件“暂停原因” lan 2017-11-21
		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("    and pp.ztyy in (" + HsuTools.replaceC2QCQ(ztyy)
					+ ")   ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh = 'A187' ");
			}
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, ei.ltxrq, ");
		sqlBF.append("          pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, ");
		sqlBF.append("          pi.dfjglb,pi.dfjgid,ei.ltxlb,pp.qsny");
		sqlBF.append(" union all ");
		sqlBF.append(" select pi.shbzhm, pi.xm, pi.xb, pi.csrq, '' ltxrq,");
		sqlBF.append("        si.yslb zfrylb, pi.yhzh,pp.ztyy, pp.ztsj, pi.ryid, ");
		sqlBF.append("        pp.qsny, nvl(sum(pg.btje),0) ytbje, ");
		sqlBF.append("        pi.dwdjid, ? dfjglb, ? dfjgbh, ? dfjgmc, ");
		sqlBF.append("        0 tbzje ");
		sqlBF.append("   from ad3u.per_info pi, ");
		sqlBF.append("        ad3u.supp_info si, ");
		sqlBF.append("        ad3u.per_pause pp, ");
		sqlBF.append("        ad3u.per_giv_month_std pg ");
		sqlBF.append("  where pi.ryid = pg.ryid ");
		sqlBF.append("    and pi.ryid = pp.ryid ");
		sqlBF.append("    and pi.ryid = si.ryid ");
		sqlBF.append("    and pi.sszfrq = 'B' ");
		if (gljglb != null && !"".equals(gljglb)) {
			sqlBF.append("    and pi.gljglb = '" + gljglb + "' ");
		}
		if (gljgid != null && !"".equals(gljgid)) {
			sqlBF.append("    and pi.gljgid = '" + gljgid + "' ");
		}
		if (xb != null && !"".equals(xb)) {
			sqlBF.append("    and pi.xb = '" + xb + "' ");
		}
		if (null != zfrylb && !"".equals(zfrylb)) {
			sqlBF.append("and si.yslb in (");
			sqlBF.append(zfrylb);
			sqlBF.append(") ");
		}
		// 增加查询条件“暂停原因” lan 2017-11-21
		if (null != ztyy && !"".equals(ztyy)) {
			sqlBF.append("    and pp.ztyy in (" + HsuTools.replaceC2QCQ(ztyy)
					+ ")   ");
		}
		if (btlb != null && !"".equals(btlb)) {
			if(btlb.equals("0")){
				sqlBF.append("    and pg.btbh <> 'A187' ");
			}
			if(btlb.equals("1")){
				sqlBF.append("    and pg.btbh = 'A187' ");
			}
		}
		sqlBF.append("    and pi.dfjglb = ? ");
		sqlBF.append("    and pi.dfjgid = ? ");
		if ((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)) {
			sqlBF.append("    and pp.qsny between nvl('" + qsny + "', '195001') and nvl('" + zzny + "', '205012') ");
			sqlBF.append("    and pp.zzny is null  ");
		} else {
			sqlBF.append("    and ? between pp.qsny and nvl(pp.zzny, '205012') ");
		}
		sqlBF.append("    and ? between pg.qsny and nvl(pg.zzny, '205012') ");
		sqlBF.append(" group by pi.shbzhm, pi.xm, pi.xb, pi.csrq, pi.yhzh, ");
		sqlBF.append("          pp.ztyy, pp.ztsj, pi.ryid, pi.dwdjid, pi.dfjglb,");
		sqlBF.append("          pi.dfjgid, si.yslb,pp.qsny ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, dfjglb);
		this.sql.setString(2, dfjgbh);
		this.sql.setString(3, dfjgmc);
		this.sql.setString(4, dfjglb);
		this.sql.setString(5, dfjgid);
		//不输入起始终止日期时，用setsql方式为起始赋值 ysf.2018-8-4
		if((!"".equals(qsny) && qsny != null) || (!"".equals(zzny) && zzny != null)){
			this.sql.setString(6, currentNy);
			this.sql.setString(7, dfjglb);
			this.sql.setString(8, dfjgbh);
			this.sql.setString(9, dfjgmc);
			this.sql.setString(10, dfjglb);
			this.sql.setString(11, dfjgid);
			this.sql.setString(12, currentNy);
		}else{
			this.sql.setString(6, currentNy);
			this.sql.setString(7, currentNy);
			this.sql.setString(8, dfjglb);
			this.sql.setString(9, dfjgbh);
			this.sql.setString(10, dfjgmc);
			this.sql.setString(11, dfjglb);
			this.sql.setString(12, dfjgid);
			this.sql.setString(13, currentNy);
			this.sql.setString(14, currentNy);
		}
		
		dsZtbfryInfo = this.sql.executeQuery();
		String currDate = DateUtil.dateToString(DateUtil.getDBDate(), "yyyyMM");
		for (int i = 0; i < dsZtbfryInfo.rowCount(); i++) {
			ryid = dsZtbfryInfo.getString(i, "ryid");
			dwdjid = dsZtbfryInfo.getString(i, "dwdjid");

			sqlBF.setLength(0);
			sqlBF.append(" select a.lxrdh, a.jtzz, a.grsf, a.yxzjhm,a.txdz, a.grbh ");
			sqlBF.append("   from biuv.person a ");
			sqlBF.append("	where a.ryid = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询人员信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "yxzjhm", ds.getString(0, "yxzjhm"));
			dsZtbfryInfo.put(i, "grsf", ds.getString(0, "grsf"));
			dsZtbfryInfo.put(i, "lxdh", ds.getString(0, "lxrdh"));
			dsZtbfryInfo.put(i, "jtzz", ds.getString(0, "jtzz"));
			dsZtbfryInfo.put(i, "txdz", ds.getString(0, "txdz"));
			dsZtbfryInfo.put(i, "grbh", ds.getString(0, "grbh"));

			sqlBF.setLength(0);
			sqlBF.append(" select a.jbjgid, a.dwbh, a.cbdwmc, o.jjlx   ");
			sqlBF.append("   from si3u.orgn_reg a, ");
			sqlBF.append("        biuv.orgn o ");
			sqlBF.append("	where a.dwdjid = ? ");
			sqlBF.append("	  and a.dwid = o.dwid ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, dwdjid);
			ds = this.sql.executeQuery();
			if (ds.rowCount() <= 0) {
				this.bizException("查询单位信息时出错,请检查！");
			}

			dsZtbfryInfo.put(i, "dwbh", ds.getString(0, "dwbh"));
			dsZtbfryInfo.put(i, "dwmc", ds.getString(0, "cbdwmc"));
			dsZtbfryInfo.put(i, "jjlx", ds.getString(0, "jjlx"));
			jbjgid = ds.getString(0, "jbjgid");
		    //判断是否开启新模式  zlj 2017-1-16
			String ad3u1021 = SiTools.getPara(jbjgid, "ad3u1021", "0");
			String tableName;
			if("1".equals(ad3u1021)){
				tableName = "ad3u.per_giv_detl_ungiv";
			}else{
				tableName = "ad3u.per_giv_detl";
			}
			// 取停拨总金额
			sqlBF.setLength(0);
			sqlBF.append(" select nvl(sum(a.btje),0) tbzje  ");
			sqlBF.append("   from "+tableName+" a ");
			sqlBF.append("	where a.zdlsh is null ");
			sqlBF.append("	  and a.fflb = 'A' ");
			sqlBF.append("	  and a.yfny <= ? ");
			sqlBF.append("	  and a.ryid = ? ");
			if (btlb != null && !"".equals(btlb)) {
				if(btlb.equals("0")){
					sqlBF.append("    and a.btbh <> 'A187' ");
				}
				if(btlb.equals("1")){
					sqlBF.append("    and a.btbh = 'A187' ");
				}
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, currDate);
			this.sql.setString(2, ryid);
			ds = this.sql.executeQuery();
			dsZtbfryInfo.put(i, "tbzje", ds.getDouble(0, "tbzje"));
			
			
			//添加指纹认证情况， 比对类别、比对时间、比对结果、复采年月、经办人
			pdo.clear();
			pdo.put("ryid", ryid);
			vdo = this.doMethod(jbjgid,"getRzxx",pdo,this.getUser());
			
			ds.clear();
			ds = vdo.getDataStore("hisvds",ds);
			
		    if(ds.rowCount() > 0 ){
		    	ds.sortdesc("bdsj");
		    	String jbr = ds.getRow(0).getString("jbr", "");// wbj 20161201 修改获取操作员姓名的方式
		    	
		    	dsZtbfryInfo.put(i, "bdlb", ds.getString(0, "bdlb"));
		    	dsZtbfryInfo.put(i, "bdsj", ds.getDate(0, "bdsj"));
		    	dsZtbfryInfo.put(i, "bdjg", ds.getString(0, "bdjg"));
		    	dsZtbfryInfo.put(i, "fcny", ds.getString(0, "fcny"));
		    	dsZtbfryInfo.put(i, "jbr",  jbr);
		    	dsZtbfryInfo.put(i, "jbrxm",  HsuTools.getCzyxmByUserId(jbr));// wbj 20161201 修改获取操作员姓名的方式
		    	
		    }
		    //查询此人的企业年金计划
		    sqlBF.setLength(0);
		    sqlBF.append(" select c.bcxmz ");
		    sqlBF.append("   from si3u.per_reg b, si3u.per_reg_cmpl c ");
		    sqlBF.append("  where b.rydjid = c.rydjid ");
		    sqlBF.append("    and b.ryid = ? ");
		    sqlBF.append("    and b.hdbz = '1' ");
		    sqlBF.append("    and c.bcxmbh = 'CJNJJH' ");

		    this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsnj = this.sql.executeQuery();
			if(dsnj.rowCount() > 0 ){
				dsZtbfryInfo.put(i, "cjnjjh", dsnj.getString(0, "bcxmz"));
			}
		    
		}

		dsZtbfryInfo = dsZtbfryInfo.sort("qsny");

		ds = new DataStore();
		ds.put(0, "dfjglb", para.getString("dfjglb"));
		ds.put(0, "dfjgbh", para.getString("dfjgbh"));
		ds.put(0, "dfjgmc", para.getString("dfjgmc"));
		ds.put(0, "zfrylb", para.getString("zfrylb"));

		rdo.put("ztbfryinfo", dsZtbfryInfo);
		rdo.put("dfjginfo", ds);

		return rdo;
	}
	/**
	 * 
	 * 方法简介.获取民政、公安人员死亡日期
	 * 企业客户化，民政死亡时间先取市民政，取不到再取省民政
	 * 
	 * @author 高祥鹏 2020年5月30日
	 */
	public DataObject getMzGaSwrq_375201(DataObject para) throws Exception{
		//接参
		String ryid = para.getString("ryid", "");
		String sfzhm = para.getString("sfzhm", "");
		String xm = para.getString("xm", "");
		
		BPO iPerSgxxxBPO = this.newBPO(PerSgxxxBPO.class);
		DataObject perPdo = new DataObject();
		DataStore perInfo = new DataStore();
		String mzswrq = "", gaswrq = "";
		//(ryid)或者(sfzhm、xm)需存在其一
		if ("".equals(sfzhm) || sfzhm == null || "".equals(xm) || xm == null) {
			if ("".equals(ryid) || ryid == null) {
				this.bizException("传值有误，请传入(ryid)或者(sfzhm、xm)！");
			} else {
				StringBuffer sqlBF = new StringBuffer();
				sqlBF.setLength(0);
				sqlBF.append("select a.shbzhm sfzhm, a.xm from biuv.person a where a.ryid = ?");
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				perInfo = this.sql.executeQuery();
				if (perInfo.rowCount() <= 0) {
					this.bizException("根据ryid【" + ryid + "】在数据库中查不到人员基本信息！");
				} else {
					sfzhm = perInfo.getString(0, "sfzhm");
					xm = perInfo.getString(0, "xm");
				}
			}
		}

		perPdo.put("sfzhm", sfzhm);
		perPdo.put("xm", xm);
		// 取市民政死亡日期
		StringBuffer sqlBF = new StringBuffer();
		sqlBF.setLength(0);
		sqlBF.append("select a.sssj, a.ssdd");
		sqlBF.append("  from rc3u.death_info a");
		sqlBF.append(" where a.szsfzhm = ?");
		sqlBF.append("   and a.szxm = ?");
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, sfzhm);
		this.sql.setString(2, xm);
		DataStore dsMz = this.sql.executeQuery();
		if (dsMz.rowCount() > 0) {
			mzswrq = dsMz.get(0).getString("sssj");
			if (mzswrq != null && !"".equals(mzswrq)) {
				mzswrq = DateUtil.dateToString(DateUtil.stringToDate(mzswrq), "yyyyMMdd");
			}
		}
		if (mzswrq == null || "".equals(mzswrq)) {
			// 市里面没数据时，调用省民政信息
			try {
				DataObject pdo = iPerSgxxxBPO.doMethod(this.getBizInstitution(), "queryPerProMinzhengInfo", perPdo, this.getUser());
				DataStore ds = pdo.getDataStore("ds", new DataStore());
				if (ds.rowCount() > 0) {
					mzswrq = ds.get(0).getString("death_date");
					if (mzswrq != null && !"".equals(mzswrq)) {
						mzswrq = DateUtil.dateToString(DateUtil.stringToDate(mzswrq), "yyyyMMdd");
					}
				}
			} catch (Exception e) {
//				 this.bizException(e.getMessage());
			}
		}

		DataObject rdo = new DataObject();
		rdo.put("mzswrq", mzswrq);
		rdo.put("gaswrq", gaswrq);
		return rdo;
	}

	/**
	 * 
	 * 方法简介.查询军转干补贴花名册
	 *
	 * @author gaopeng
	 * @date 创建时间 2020年6月6日
	 * @since V1.0
	 */
	public DataObject queryJzgbthmc(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String querylogid = QueryLogTool.saveQueryLog("军转干补贴发放花名册", "职工养老支付-军转干补贴发放花名册", this.getUser().getUserid(),para);
	
		String	ffny = para.getDateToString("ffny", "yyyyMM");

		// 查询
		sqlBF.setLength(0);
		sqlBF.append(" select c.zgbmhzjg, a.xm, a.shbzhm, a.xb, b.cbdwmc ejdwmc, ");
		sqlBF.append("		  e.ltxrq, e.jzgzj,  ");
		sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) yffbz ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        si3u.orgn_reg b, ");
		sqlBF.append("        biu.orgn c, ");
		sqlBF.append("        ad3u.emp_info e  ");
		sqlBF.append("  where a.dwdjid = b.dwdjid ");
		sqlBF.append("    and b.dwid = c.dwid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dyffzt = '1' ");
		sqlBF.append("    and exists ( select 'x' ");
		sqlBF.append("                   from ad3u.per_cmpl_month m ");
		sqlBF.append("                  where a.ryid = m.ryid ");
		sqlBF.append("                    and m.bcxmbh = 'A1JF' ");
		sqlBF.append("                    and ? between m.qsny and nvl(m.zzny,'204912')  ) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ffny);
		DataStore dsTxjyInfo = this.sql.executeQuery();
		
		rdo.put("txjyinfo", dsTxjyInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsTxjyInfo.rowCount());

		
		return rdo;
		
	}
	
	/**
	 * 方法简介.查询账户一次性支付查询
	 * 
	 * @author qiukai
	 * @date 创建时间 2020-06-05
	 * @since V1.0
	 */
	public DataObject queryZhycxzfhmc(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String querylogid = QueryLogTool.saveQueryLog("账户一次性支付查询",
				"职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(), para);

		// 接参数
		String ny = para.getDateToString("ny", "yyyyMM");

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		sqlBF.setLength(0);
		sqlBF.append(" select  b.ryid, r.dwbh, r.cbdwmc, e.grbh, e.shbzhm,  ");
		sqlBF.append("         e.xm, e.xb, f.csrq, f.jdid, sum(nvl(b.btje,0)) je ");
		sqlBF.append("   from  si3u.per_giv_once b,    ");
		sqlBF.append("         si3u.pay_bill c, ");
		sqlBF.append("         si3u.per_reg f, ");
		sqlBF.append("         biuv.person e, ");
		sqlBF.append("         si3u.orgn_reg r ");
		sqlBF.append("  where  b.zdlsh = c.zdlsh ");
		sqlBF.append("    and  b.ryid = f.ryid ");
		sqlBF.append("    and  f.ryid = e.ryid ");
		sqlBF.append("    and  r.dwdjid = f.dwdjid  ");
		sqlBF.append("    and  btbh ='A001' ");// 领取A001补贴的人员
		sqlBF.append("    and  to_char(txsj,'yyyyMM') >= ? ");
		sqlBF.append("    and  to_char(txsj,'yyyyMM') <= ? ");
		sqlBF.append("  group  by b.ryid,r.dwbh, r.cbdwmc,e.grbh, e.shbzhm, e.xm,e.xb,f.csrq, f.jdid ");
		sqlBF.append("  union  all ");
		sqlBF.append(" select  b.ryid, r.dwbh, r.cbdwmc, e.grbh, e.shbzhm, ");
		sqlBF.append("         e.xm, e.xb, f.csrq, f.jdid, sum(nvl(b.btje,0))  je ");
		sqlBF.append("   from  ad3u.per_giv_once_std b,  ");
		sqlBF.append("         ad3u.per_giv_detl c, ");
		sqlBF.append("         si3u.per_reg f, ");
		sqlBF.append("         biuv.person e, ");
		sqlBF.append("         si3u.orgn_reg r ");
		sqlBF.append("  where  b.ryid = c.ryid ");
		sqlBF.append("    and  c.ryid = f.ryid ");
		sqlBF.append("    and  f.ryid = e.ryid ");
		sqlBF.append("    and  f.dwdjid = r.dwdjid  ");
		sqlBF.append("    and  b.btbh ='H209' "); // 领取过H209补贴的人员
		sqlBF.append("    and  to_char(jbsj,'yyyyMM') >= ? ");
		sqlBF.append("    and  to_char(jbsj,'yyyyMM') <= ? ");
		sqlBF.append("  group  by b.ryid,r.dwbh, r.cbdwmc,e.grbh, e.shbzhm, e.xm,e.xb,f.csrq, f.jdid ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ny);
		this.sql.setString(2, ny);
		this.sql.setString(3, ny);
		this.sql.setString(4, ny);
		DataStore dsPerMx = this.sql.executeQuery();

		HsuTools.genJdxxDataStore(dsPerMx, "jdid", "jdbh", "jdmc");

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		DataObject vdo = new DataObject();
		vdo.put("dsperinfo", dsPerMx);

		QueryLogTool.updateQueryLog(querylogid, dsPerMx.rowCount());

		return vdo;
	}

    /**
     * 
     * 方法简介.查询军转干减员花名册
     *
     * @author gaopeng
     * @date 创建时间 2020年6月6日
     * @since V1.0
     */
	public DataObject queryJzgjyhmc(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String querylogid = QueryLogTool.saveQueryLog("军转干减员花名册", "职工养老支付-军转干减员花名册", this.getUser().getUserid(),para);
	
		String	ffny = para.getDateToString("ffny", "yyyyMM");

		// 查询
		sqlBF.setLength(0);
		sqlBF.append(" select b.cbdwmc dwmc, a.xm, a.shbzhm, a.xb, e.ltxrq,  ");
		sqlBF.append("		  e.jzgzj, c.jyrq swrq, to_char(c.bljysj,'yyyymmdd') jyrq, ");
		sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) yffbz ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        si3u.orgn_reg b, ");
		sqlBF.append("        ad3u.per_reg c, ");
		sqlBF.append("        ad3u.emp_info e  ");
		sqlBF.append("  where a.dwdjid = b.dwdjid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and to_char(c.bljysj,'yyyymm') = ? ");
		sqlBF.append("    and exists ( select 'x' ");
		sqlBF.append("                   from ad3u.per_cmpl_month m ");
		sqlBF.append("                  where a.ryid = m.ryid ");
		sqlBF.append("                    and m.bcxmbh = 'A1JF' ) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ffny);
		DataStore dsTxjyInfo = this.sql.executeQuery();
		
		for (int i = 0; i < dsTxjyInfo.rowCount(); i++) {
			String swrq = dsTxjyInfo.getString(i, "swrq");
			String jyrq = dsTxjyInfo.getString(i, "jyrq");
			double yffbz = dsTxjyInfo.getDouble(i, "yffbz");
			int ys = DateUtil.getMonthDifferenceBetweenTwoStringDate(swrq.substring(0, 6), jyrq.substring(0, 6));
			double zh = 0;
			if (ys > 0) {
				zh = yffbz * ys;
			}
			if (zh != 0) {
				dsTxjyInfo.put(i, "bz", "应追回待遇" + zh + "元");
			}
		}
		
		rdo.put("txjyinfo", dsTxjyInfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsTxjyInfo.rowCount());

		
		return rdo;
		
	}
	
	/**
	 * 
	 * 方法简介.查询军转干增员花名册
	 *
	 * @author gaopeng
	 * @date 创建时间 2020年6月6日
	 * @since V1.0
	 */
	public DataObject queryJzgzyhmc(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		String querylogid = QueryLogTool.saveQueryLog("军转干增员花名册", "职工养老支付-军转干增员花名册", this.getUser().getUserid(),para);
	
		String	ffny = para.getDateToString("ffny", "yyyyMM");

		// 查询
		sqlBF.setLength(0);
		sqlBF.append(" select b.cbdwmc dwmc, a.xm, a.shbzhm, a.xb, e.ltxrq,  ");
		sqlBF.append("		  e.jzgzj, a.yhzh, ");
		sqlBF.append("		  (select yhmc from be3u.bank_natl m where a.dfjgid=m.yhid  ) yhmc, ");
		sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) yffbz, ");
		sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='FFZE' ) ffze ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        si3u.orgn_reg b, ");
		sqlBF.append("        ad3u.per_reg c, ");
		sqlBF.append("        ad3u.emp_info e  ");
		sqlBF.append("  where a.dwdjid = b.dwdjid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.dyffzt = '1' ");
		sqlBF.append("    and to_char(c.blzysj,'yyyymm') = ? ");
		sqlBF.append("    and exists ( select 'x' ");
		sqlBF.append("                   from ad3u.per_cmpl_month m ");
		sqlBF.append("                  where a.ryid = m.ryid ");
		sqlBF.append("                    and m.bcxmbh = 'A1JF' ) ");

		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, ffny);
		DataStore ds = this.sql.executeQuery();
		
		for(int i=0;i<ds.rowCount();i++){
			String ltxrq = ds.getString(i, "ltxrq").substring(0,6);
			String nrtcrq = DateUtil.addMonthToString(ltxrq, "yyyyMM", 1);
			double ffbz = ds.getDouble(i, "yffbz");
			double ffze = ds.getDouble(i, "ffze");
			double bfdy = ffze - ffbz;
			ds.put(i, "ltxrq", ltxrq);
			ds.put(i, "nrtcrq", nrtcrq);
			ds.put(i, "bfdy", DataFormat.formatDouble(bfdy,"#######0"));
		}
		
		rdo.put("txjyinfo", ds);
		
		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());
	
		return rdo;
		
	}
	
	/**
	 * 
	 * 方法简介.查询生活补贴发放表
	 *
	 * @author gaopeng
	 * @date 创建时间 2020年6月6日
	 * @since V1.0
	 */
	public DataObject queryJzgshbtffb(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		DataStore ds = new DataStore();
		String querylogid = QueryLogTool.saveQueryLog("军转干增员花名册", "职工养老支付-军转干增员花名册", this.getUser()
			.getUserid(), para);

		String ffny = para.getDateToString("ffny", "yyyyMM");
		String jgbh = para.getString("jgbh", "");
		String bgys = para.getString("bgys", "0");

		// 查询
		if (!"1".equals(bgys)) {
			sqlBF.setLength(0);
			sqlBF.append(" select b.cbdwmc qymc, a.xm, a.shbzhm, a.xb, '' dwmc,   ");
			sqlBF.append("		  '' dwxz, '' rylb, e.ltxrq, e.jzgzj, a.yhzh, ");
			sqlBF.append("		  decode(a.dfjgid,'0006','0000000006','0004','0000000004',a.dfjgid) dfjgbh, ");
			sqlBF.append("		  '1' ffms, 0 bfdy,  ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) yffbz, ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) ffze ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        si3u.orgn_reg b, ");
			sqlBF.append("        ad3u.per_reg c, ");
			sqlBF.append("        ad3u.emp_info e  ");
			sqlBF.append("  where a.dwdjid = b.dwdjid ");
			sqlBF.append("    and a.ryid = c.ryid ");
			sqlBF.append("    and a.ryid = e.ryid ");
			sqlBF.append("    and a.dyffzt = '1' ");
			sqlBF.append("    and to_char(c.blzysj,'yyyymm') < ? ");
			sqlBF.append("    and exists ( select 'x' ");
			sqlBF.append("                   from ad3u.per_cmpl_month m ");
			sqlBF.append("                  where a.ryid = m.ryid ");
			sqlBF.append("                    and m.bcxmbh = 'A1JF' ) ");
			sqlBF.append("    and exists ( select 'x' ");
			sqlBF.append("                   from si3u.orgn_cmpl m ");
			sqlBF.append("                  where a.dwdjid = m.dwdjid ");
			sqlBF.append("                    and m.bcxmbh = 'LDJSDWBZ' ) ");
			if (!"".equals(jgbh) && jgbh != null) {
				sqlBF.append("    and a.dfjgid = '" + jgbh + "' ");
			}
			if ("2".equals(bgys)) {
				sqlBF.append("    and to_char(c.bljysj,'yyyymm') = '" + ffny
						+ "' ");
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffny);
			DataStore ds1 = this.sql.executeQuery();
			ds.combineDatastore(ds1);
		}
		

		if (!"2".equals(bgys)) {
			sqlBF.setLength(0);
			sqlBF.append(" select b.cbdwmc qymc, a.xm, a.shbzhm, a.xb, '' dwmc,   ");
			sqlBF.append("		  '' dwxz, '' rylb, e.ltxrq, e.jzgzj, a.yhzh, ");
			sqlBF.append("		  decode(a.dfjgid,'0006','0000000006','0004','0000000004',a.dfjgid) dfjgbh, ");
			sqlBF.append("		  '1' ffms,   ");
			sqlBF.append("		  ( (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='FFZE' ) -   ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) ) bfdy,   ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) yffbz, ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='FFZE' ) ffze ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        si3u.orgn_reg b, ");
			sqlBF.append("        ad3u.per_reg c, ");
			sqlBF.append("        ad3u.emp_info e  ");
			sqlBF.append("  where a.dwdjid = b.dwdjid ");
			sqlBF.append("    and a.ryid = c.ryid ");
			sqlBF.append("    and a.ryid = e.ryid ");
			sqlBF.append("    and a.dyffzt = '1' ");
			sqlBF.append("    and to_char(c.blzysj,'yyyymm') = ? ");
			sqlBF.append("    and exists ( select 'x' ");
			sqlBF.append("                   from ad3u.per_cmpl_month m ");
			sqlBF.append("                  where a.ryid = m.ryid ");
			sqlBF.append("                    and m.bcxmbh = 'A1JF' ) ");
			sqlBF.append("    and exists ( select 'x' ");
			sqlBF.append("                   from si3u.orgn_cmpl m ");
			sqlBF.append("                  where a.dwdjid = m.dwdjid ");
			sqlBF.append("                    and m.bcxmbh = 'LDJSDWBZ' ) ");
			if (!"".equals(jgbh) && jgbh != null) {
				sqlBF.append("    and a.dfjgid = '" + jgbh + "' ");
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffny);
			DataStore ds2 = this.sql.executeQuery();
			ds.combineDatastore(ds2);
		}
		
		
		if (!"1".equals(bgys)) {
			sqlBF.setLength(0);
			sqlBF.append(" select '胜利石油管理局' qymc, a.xm, a.shbzhm, a.xb, b.cbdwmc dwmc,   ");
			sqlBF.append("		  b.cbdwxz, '' rylb, e.ltxrq, e.jzgzj, a.yhzh, ");
			sqlBF.append("		  decode(a.dfjgid,'0006','0000000006','0004','0000000004',a.dfjgid) dfjgbh, ");
			sqlBF.append("		  '1' ffms, 0 bfdy,  ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) yffbz, ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) ffze ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        si3u.orgn_reg b, ");
			sqlBF.append("        ad3u.per_reg c, ");
			sqlBF.append("        ad3u.emp_info e  ");
			sqlBF.append("  where a.dwdjid = b.dwdjid ");
			sqlBF.append("    and a.ryid = c.ryid ");
			sqlBF.append("    and a.ryid = e.ryid ");
			sqlBF.append("    and a.dyffzt = '1' ");
			sqlBF.append("    and to_char(c.blzysj,'yyyymm') < ? ");
			sqlBF.append("    and exists ( select 'x' ");
			sqlBF.append("                   from ad3u.per_cmpl_month m ");
			sqlBF.append("                  where a.ryid = m.ryid ");
			sqlBF.append("                    and m.bcxmbh = 'A1JF' ) ");
			sqlBF.append("    and not exists ( select 'x' ");
			sqlBF.append("                   from si3u.orgn_cmpl m ");
			sqlBF.append("                  where a.dwdjid = m.dwdjid ");
			sqlBF.append("                    and m.bcxmbh = 'LDJSDWBZ' ) ");
			if (!"".equals(jgbh) && jgbh != null) {
				sqlBF.append("    and a.dfjgid = '" + jgbh + "' ");
			}
			if ("2".equals(bgys)) {
				sqlBF.append("    and to_char(c.bljysj,'yyyymm') = '" + ffny
						+ "' ");
			}
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffny);
			DataStore ds3 = this.sql.executeQuery();
			ds.combineDatastore(ds3);
		}

		if (!"2".equals(bgys)) {
			sqlBF.setLength(0);
			sqlBF.append(" select '胜利石油管理局' qymc, a.xm, a.shbzhm, a.xb, b.cbdwmc dwmc,   ");
			sqlBF.append("		  b.cbdwxz, '' rylb, e.ltxrq, e.jzgzj, a.yhzh, ");
			sqlBF.append("		  decode(a.dfjgid,'0006','0000000006','0004','0000000004',a.dfjgid) dfjgbh, ");
			sqlBF.append("		  '1' ffms,   ");
			sqlBF.append("		  ( (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='FFZE' ) -   ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) ) bfdy,   ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='A1JF' ) yffbz, ");
			sqlBF.append("		  (select bcxmz from ad3u.per_cmpl_month m where a.ryid=m.ryid and bcxmbh='FFZE' ) ffze ");
			sqlBF.append("   from ad3u.per_info a, ");
			sqlBF.append("        si3u.orgn_reg b, ");
			sqlBF.append("        ad3u.per_reg c, ");
			sqlBF.append("        ad3u.emp_info e  ");
			sqlBF.append("  where a.dwdjid = b.dwdjid ");
			sqlBF.append("    and a.ryid = c.ryid ");
			sqlBF.append("    and a.ryid = e.ryid ");
			sqlBF.append("    and a.dyffzt = '1' ");
			sqlBF.append("    and to_char(c.blzysj,'yyyymm') = ? ");
			sqlBF.append("    and exists ( select 'x' ");
			sqlBF.append("                   from ad3u.per_cmpl_month m ");
			sqlBF.append("                  where a.ryid = m.ryid ");
			sqlBF.append("                    and m.bcxmbh = 'A1JF' ) ");
			sqlBF.append("    and not exists ( select 'x' ");
			sqlBF.append("                   from si3u.orgn_cmpl m ");
			sqlBF.append("                  where a.dwdjid = m.dwdjid ");
			sqlBF.append("                    and m.bcxmbh = 'LDJSDWBZ' ) ");
			if (!"".equals(jgbh) && jgbh != null) {
				sqlBF.append("    and a.dfjgid = " + jgbh + " ");
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ffny);
			DataStore ds4 = this.sql.executeQuery();
			ds.combineDatastore(ds4);
		}
		rdo.put("txjyinfo", ds);

		QueryLogTool.updateQueryLog(querylogid, ds.rowCount());

		return rdo;

	}
	
	/**
	 * 
	 * 方法简介.查询打印数据 补发基本养老金 企业补贴审批表
	 * 
	 * @author lzc 2020-6-6
	 */
	public DataObject queryBfjbyljqybtspb(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsJd = new DataStore();

		Date ywq = para.getDate("ywq", DateUtil.getDBDate());
		String ny = DateUtil.FormatDate(ywq, "yyyyMM");
		String jdid = para.getString("jdid");
		
		//判断前台是否选择了社保所，没有选择取所有社保所
		if ("".equals(jdid) || jdid == null) {
			sqlBF.setLength(0);
			sqlBF.append(" select jdid from be3u.street_natl");
			this.sql.setSql(sqlBF.toString());
			dsJd = this.sql.executeQuery();
		} else {
			dsJd.put(0, "jdid", jdid);
		}
		DataStore dsTemp = new DataStore();
		DataStore dsOrgn = new DataStore();
		int find = -1;
		// 查询 一次性补发离退休养老金
		for (DataObject vdo : dsJd) {
			String jdidT = vdo.getString("jdid", "");
			if (jdidT != null && !"".equals(jdidT)) {
				sqlBF.setLength(0);
				sqlBF.append(" select b.dwdjid, ");
				sqlBF.append("        (select cbdwmc from si3u.orgn_reg d where d.dwdjid = b.dwdjid) cbdwmc, ");
				sqlBF.append("        count(distinct a.ryid) rs, sum(nvl(a.btje, 0)) zje");
				sqlBF.append("   from ad3u.per_giv_detl_ungiv a, ad3u.per_info b ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and b.jdid = ? ");
				sqlBF.append("    and a.ffny = ? ");
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("           from ad3u.giv_item c ");
				sqlBF.append("          where c.btbh = a.btbh ");
				sqlBF.append("            and c.btlb in ('011', '012', '013')) ");
				sqlBF.append("  group by b.dwdjid ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, jdidT);
				this.sql.setString(2, ny);
				dsTemp = this.sql.executeQuery();
				for (int i = 0; i < dsTemp.rowCount(); i++) {
					String dwdjid = dsTemp.getString(i, "dwdjid");
					find = dsOrgn.find("dwdjid ==  " + dwdjid);
					if (find >= 0) {
						dsOrgn.put(find, "rs", String.valueOf(dsOrgn.getInt(find, "rs") + dsTemp.getInt(i, "rs")));
						dsOrgn.put(find, "ycxbfltxylj", MathUtil.round(dsTemp.getDouble(i, "zje")
								+ dsOrgn.getDouble(find, "ycxbfltxylj"), 2));
					} else {
						dsOrgn.addRow();
						dsOrgn.put(dsOrgn.rowCount() - 1, "dwdjid", dwdjid);
						dsOrgn.put(dsOrgn.rowCount() - 1, "cbdwmc", dsTemp.getString(i, "cbdwmc"));
						dsOrgn.put(dsOrgn.rowCount() - 1, "rs", String.valueOf(dsTemp.getInt(i, "rs")));
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfltxylj", dsTemp.getDouble(i, "zje"));
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfsdbt", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfzfbt", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfqybt", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfqnf", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfzzswdy", 0.0);
					}
				}
			}
		}
		//查询 一次性补发水电 一次性补发房帖 一次性52好文补帖 一次性补发取暖费
		for (DataObject vdo : dsJd) {
			String jdidT = vdo.getString("jdid", "");
			if (jdidT != null && !"".equals(jdidT)) {
				sqlBF.setLength(0);
				sqlBF.append(" select b.dwdjid, count(distinct a.ryid) rs,");
				sqlBF.append("        (select cbdwmc from si3u.orgn_reg d where d.dwdjid = b.dwdjid) cbdwmc, ");
				sqlBF.append("        sum(nvl(decode(a.btbh, 'H757', a.btje, 0), 0)) ycxbfsdbt,");
				sqlBF.append("        sum(nvl(decode(a.btbh, 'A13X', a.btje, 0), 0)) ycxbfzfbt,");
				sqlBF.append("        sum(nvl(decode(a.btbh, 'H776', a.btje, 0), 0)) ycxbfqybt,");
				sqlBF.append("        sum(nvl(decode(a.btbh, 'H756', a.btje, 0), 0)) ycxbfqnf");
				sqlBF.append("   from ad3u.per_giv_detl_ungiv a, ad3u.per_info b ");
				sqlBF.append("  where a.ryid = b.ryid ");
				sqlBF.append("    and b.jdid = ? ");
				sqlBF.append("    and a.ffny = ? ");
				sqlBF.append("    and a.fsyy  =  '2' ");
				sqlBF.append("    and a.btbh in ('H757', 'A13X', 'H776', 'H756') ");
				sqlBF.append("  group by b.dwdjid ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, jdidT);
				this.sql.setString(2, ny);
				dsTemp = this.sql.executeQuery();
				for (int i = 0; i < dsTemp.rowCount(); i++) {
					String dwdjid = dsTemp.getString(i, "dwdjid");
					find = dsOrgn.find("dwdjid == " + dwdjid);
					if (find >= 0) {
						dsOrgn.put(find, "rs", String.valueOf(dsOrgn.getInt(find, "rs") + dsTemp.getInt(i, "rs")));
						dsOrgn.put(find, "ycxbfsdbt", MathUtil.round(dsTemp.getDouble(i, "ycxbfsdbt")
								+ dsOrgn.getDouble(find, "ycxbfsdbt"), 2));
						dsOrgn.put(find, "ycxbfzfbt", MathUtil.round(dsTemp.getDouble(i, "ycxbfzfbt")
								+ dsOrgn.getDouble(find, "ycxbfzfbt"), 2));
						dsOrgn.put(find, "ycxbfqybt", MathUtil.round(dsTemp.getDouble(i, "ycxbfqybt")
								+ dsOrgn.getDouble(find, "ycxbfqybt"), 2));
						dsOrgn.put(find, "ycxbfqnf", MathUtil.round(dsTemp.getDouble(i, "ycxbfqnf")
								+ dsOrgn.getDouble(find, "ycxbfqnf"), 2));
					} else {
						dsOrgn.addRow();
						dsOrgn.put(dsOrgn.rowCount() - 1, "dwdjid", dwdjid);
						dsOrgn.put(dsOrgn.rowCount() - 1, "cbdwmc", dsTemp.getString(i, "cbdwmc"));
						dsOrgn.put(dsOrgn.rowCount() - 1, "rs", String.valueOf(dsTemp.getInt(i, "rs")));
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfltxylj", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfsdbt", dsTemp.getDouble(i, "ycxbfsdbt"));
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfzfbt", dsTemp.getDouble(i, "ycxbfzfbt"));
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfqybt", dsTemp.getDouble(i, "ycxbfqybt"));
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfqnf", dsTemp.getDouble(i, "ycxbfqnf"));
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfzzswdy", 0.0);
					}
				}
			}
		}
		//查询一次性补发在职死亡待遇
		for (DataObject vdo : dsJd) {
			String jdidT = vdo.getString("jdid", "");
			if (jdidT != null && !"".equals(jdidT)) {
				sqlBF.setLength(0);
				sqlBF.append(" select c.dwdjid, count(distinct a.ryid) rs, ");
				sqlBF.append("        (select cbdwmc from si3u.orgn_reg d where d.dwdjid = c.dwdjid) cbdwmc, ");
				sqlBF.append("        sum(nvl(a.btje, 0)) ycxbfzzswdy ");
				sqlBF.append("   from si3u.per_giv_once a, si3u.pay_bill b, si3u.per_reg c ");
				sqlBF.append("  where a.zdlsh = b.zdlsh ");
				sqlBF.append("    and c.rydjid = a.rydjid ");
				sqlBF.append("    and c.hdbz = '1' ");
				sqlBF.append("    and c.jdid = ? ");
				sqlBF.append("    and to_char(b.txsj, 'yyyyMM') = ? ");
				sqlBF.append("    and exists(select 1 from si3u.per_giv_exam e where e.spid = a.spid and e.splb = 'A01') ");
				sqlBF.append("  group by c.dwdjid ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, jdidT);
				this.sql.setString(2, ny);
				dsTemp = this.sql.executeQuery();
				for (int i = 0; i < dsTemp.rowCount(); i++) {
					String dwdjid = dsTemp.getString(i, "dwdjid");
					find = dsOrgn.find("dwdjid == " + dwdjid);
					if (find >= 0) {
						dsOrgn.put(find, "rs", String.valueOf(dsOrgn.getInt(find, "rs") + dsTemp.getInt(i, "rs")));
						dsOrgn.put(find, "ycxbfzzswdy", MathUtil.round(dsTemp.getDouble(i, "ycxbfzzswdy")
								+ dsOrgn.getDouble(find, "ycxbfzzswdy"), 2));
					} else {
						dsOrgn.addRow();
						dsOrgn.put(dsOrgn.rowCount() - 1, "dwdjid", dwdjid);
						dsOrgn.put(dsOrgn.rowCount() - 1, "cbdwmc", dsTemp.getString(i, "cbdwmc"));
						dsOrgn.put(dsOrgn.rowCount() - 1, "rs", String.valueOf(dsTemp.getInt(i, "rs")));
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfltxylj", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfsdbt", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfzfbt", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfqybt", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfqnf", 0.0);
						dsOrgn.put(dsOrgn.rowCount() - 1, "ycxbfzzswdy", dsTemp.getDouble(i, "ycxbfzzswdy"));
					}
				}
			}
		}
		double zje = 0.0;
		double hj = 0.0;
		for (int i = 0; i < dsOrgn.rowCount(); i++) {
			dsOrgn.put(i, "xh", String.valueOf(i + 1));
			hj = MathUtil.round(dsOrgn.getDouble(i, "ycxbfltxylj") + dsOrgn.getDouble(i, "ycxbfsdbt")
					+ dsOrgn.getDouble(i, "ycxbfzfbt") + dsOrgn.getDouble(i, "ycxbfqybt")
					+ dsOrgn.getDouble(i, "ycxbfqnf") + dsOrgn.getDouble(i, "ycxbfzzswdy"), 2);
			dsOrgn.put(i, "zje", hj);
			zje = MathUtil.round(zje + hj, 2);
		}
		SPrinter sprinter = new SPrinter();
		if (dsJd.rowCount() > 1) {
			sprinter.putPara("jd", "社保中心");
		} else {
			sprinter.putPara("jd", HsuTools.getJdmcByJdid(jdid));
		}
		sprinter.putPara("ywq", DateUtil.FormatDate(ywq, "yyyy年MM月"));
		sprinter.putDataStore(dsOrgn);
		sprinter.putPara("zje", zje);
		String dygs = "Adbfjbyljspb";
		String printhtml = sprinter.print(this.getBizInstitution(), dygs);
		rdo.put("printhtml", printhtml);

		return rdo;
	}
	

	/**
	 * 方法简介.查询供养遗属月结算表
	 * 
	 * @author qiukai
	 * @date 创建时间 2020-06-08
	 * @since V1.0
	 */
	public DataObject queryGyysyjsb(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String querylogid = QueryLogTool.saveQueryLog("供养遗属月结算表",
				"职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(), para);
		String ryid, sqlFxjbf, sqlFxjsf;
		DataStore dsbf, dssf;
		double fxjsf = 0, fxjbf = 0;
		
		// 接参数
		String jdid = para.getString("jdid", ""); 
		String qsrq = para.getDateToString("qsrq", "yyyyMM"); // 获取起始日期
		String zzrq = para.getDateToString("zzrq", "yyyyMM"); // 获取起始日期
		String ffztid = para.getString("ffztid",""); 
		
		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");
		
		sqlBF.setLength(0);
		sqlBF.append(" select  a.xm, a.ryid, e.dwbh, e.cbdwmc  dwmc, a.yhzh,");
		sqlBF.append("         a.yhhm, a.dfjgid, e.grbh, a.shbzhm, a.jdid, ");
		sqlBF.append("         a.dfjglb, nvl(sum(p.btje),  0)  fxj ");
		sqlBF.append("   from  ad3u.per_info  a, ");
		sqlBF.append("         ad3u.per_reg    c, ");
		sqlBF.append("         ad3u.supp_info  d, ");
		sqlBF.append("         si3u.orgn_reg  e, ");
		sqlBF.append("         ad3u.per_giv_month_std  p, ");
		sqlBF.append("         biuv.person  e ");
		sqlBF.append("  where  a.dqdydjid  =  c.dydjid ");
		sqlBF.append("    and  c.dwdjid  =  e.dwdjid ");
		sqlBF.append("    and  a.ryid  =  d.ryid ");
		sqlBF.append("    and  a.ryid  =  e.ryid ");
		sqlBF.append("    and  a.sszfrq = 'B' ");  //只查询遗属的
		sqlBF.append("    and  a.ryid  =  p.ryid ");
		sqlBF.append("    and  p.qsny <= ? and nvl(p.zzny,'205012') >= ? ");	
		if(!"".equals(jdid) && jdid != null){
			sqlBF.append("       and  a.jdid ='" + jdid + "' ");
		}
		if(!"".equals(ffztid) && ffztid != null){
			sqlBF.append("       and  a.dfjgid ='" + ffztid + "' ");
		}
		sqlBF.append("   group  by  a.xm, a.ryid, e.dwbh, e.cbdwmc, a.yhzh, ");
		sqlBF.append("              a.yhhm, a.dfjgid, e.grbh, a.shbzhm, a.jdid, a.dfjglb ");


		this.sql.setSql(sqlBF.toString());
		this.sql.setString(1, zzrq);
		this.sql.setString(2, qsrq);
		DataStore dsPerMx = this.sql.executeQuery();
		
		
		// 查询抚恤金补发的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) fxjbf ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.fflb = 'A' ");
		sqlBF.append("    and p.fsyy = '2' ");
		sqlBF.append("    and p.ryid = ?  ");
		sqlBF.append("    and p.ffny between ? and ?  ");
		sqlFxjbf = sqlBF.toString();

		// 查询抚恤金实发的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) fxjsf ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.fflb = 'A' ");
		sqlBF.append("    and p.fsyy = '1' ");
		sqlBF.append("    and p.ryid = ?  ");
		sqlBF.append("    and p.ffny between ? and ?  ");
		sqlFxjsf = sqlBF.toString();


		for (int i = 0; i < dsPerMx.rowCount(); i++) {
			
			ryid = dsPerMx.getString(i, "ryid");
			
			// 查询抚恤金补发	
			this.readonlysql.setSql(sqlFxjbf);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, qsrq);
			this.readonlysql.setString(3, zzrq);

			dsbf = this.readonlysql.executeQuery();
			fxjbf = dsbf.getDouble(0, "fxjbf");
			
			//查询实发金额	
			this.readonlysql.setSql(sqlFxjsf);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, qsrq);
			this.readonlysql.setString(3, zzrq);
			dssf = this.readonlysql.executeQuery();
			fxjsf = dssf.getDouble(0, "fxjsf");	
			
		
			dsPerMx.put(i, "fxjsf", fxjsf);
			dsPerMx.put(i, "fxjbf", fxjbf);
			
		}
	
		HsuTools.genJdxxDataStore(dsPerMx, "jdid", "jdbh", "jdmc");
		dsPerMx = AdTools.genDfjgxxDataStore(dsPerMx, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		DataObject vdo = new DataObject();
		vdo.put("dsperinfo", dsPerMx);

		QueryLogTool.updateQueryLog(querylogid, dsPerMx.rowCount());

		return vdo;
	}
	
	/**
	 * 获取跳转供养遗属月结算表的信息
	 * 
	 * <p>方法详述</p>
	 * @author qiukai
	 * @date 创建时间 2020-6-8
	 * @since V1.0
	 */
	public final DataObject getSbs(final DataObject para) throws Exception {
		DataStore ds;
		DataObject rdo = new DataObject();

		// 取经办机构信息
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");

		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}
		// mod by wbj 将这里改为参数控制获取机构的数据的方式。end
			
		//获取社保所
		String userid = this.getUser().getUserid();
		DataStore dsjd = HsuTools.getJdByUserid(userid);
		
		
		rdo.put("dsjbjg", ds);
		rdo.put("dsjd", dsjd);

		ds = null;
		return rdo;
	}
	
	/**
	 * 方法简介.查询丧葬费救济金结算表
	 * 
	 * @author qiukai
	 * @date 创建时间 2020-06-08
	 * @since V1.0
	 */
	public DataObject querySzfjjjjsb(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		String querylogid = QueryLogTool.saveQueryLog("供养遗属月结算表",
				"职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(), para);
		String ryid, sqlFxjbf, sqlFxjsf, sqlGyys;
		DataStore dsbf, dssf, dsys;
		double fxjsf = 0, fxjbf = 0;
		double szf = 0, fxj = 0;
		
		// 接参数
		String jdid = para.getString("jdid", ""); 
		String qsrq = para.getDateToString("qsrq", "yyyyMM"); // 获取起始日期
		String zzrq = para.getDateToString("zzrq", "yyyyMM"); // 获取起始日期
		String ffztid = para.getString("ffztid",""); 
		
		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");
	
		
		// 查询符合条件的办理减员的养老人员登记信息(职工)--mod.yxt.20160108.per_reg与per_info的关联改为ryid
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid swryid, a.dfjgid, c.grbh swgrbh, a.xm  swxm,");
		sqlBF.append("        a.yhmc, a.yhhm, a.yhzh, a.jdid, a.dfjglb");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.emp_info e, ");
		sqlBF.append("        biuv.person  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = e.ryid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.sszfrq = 'A' ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMM') ");
		sqlBF.append("			between ? and ? ");
		if (ffztid != null && !"".equals(ffztid)) {
			sqlBF.append("	  and a.dfjgid = '" + ffztid + "' ");
		}
		if (jdid != null && !"".equals(jdid)) {
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		this.readonlysql.setSql(sqlBF.toString());//改成读写分离的方式LG-2016032
		this.readonlysql.setString(1, qsrq);
		this.readonlysql.setString(2, zzrq);

		DataStore dsTxjyInfo_zg = this.readonlysql.executeQuery();

		
		// 查询符合条件的办理减员的养老人员登记信息(遗属)
		sqlBF.setLength(0);
		sqlBF.append(" select b.dydjid, a.ryid swryid, a.dfjgid, c.grbh  swgrbh, a.xm  swxm,");
		sqlBF.append("        a.yhmc, a.yhhm, a.yhzh, a.jdid, a.dfjglb");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        ad3u.per_reg b, ");
		sqlBF.append("        ad3u.supp_info s, ");
		sqlBF.append("        biuv.person  c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and a.ryid = s.ryid ");
		sqlBF.append("    and a.ryid = c.ryid ");
		sqlBF.append("    and a.sszfrq = 'B' ");
		sqlBF.append("	  and to_char(b.bljysj, 'yyyyMM') ");
		sqlBF.append("			between ? and ? ");
		if (ffztid != null && !"".equals(ffztid)) {
			sqlBF.append("	  and a.dfjgid = '" + ffztid + "' ");
		}
		if (jdid != null && !"".equals(jdid)) {
			sqlBF.append("	  and a.jdid = '" + jdid + "' ");
		}
		
		this.readonlysql.setSql(sqlBF.toString());
		this.readonlysql.setString(1, qsrq);
		this.readonlysql.setString(2, zzrq);

		DataStore dsTxjyInfo_ys = this.readonlysql.executeQuery();

		// 查询抚恤金补发的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) fxjbf ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.fflb = 'A' ");
		sqlBF.append("    and p.fsyy = '2' ");
		sqlBF.append("    and p.ryid = ?  ");
		sqlBF.append("    and p.ffny between ? and ?  ");
		sqlFxjbf = sqlBF.toString();

		// 查询抚恤金实发的sql
		sqlBF.setLength(0);
		sqlBF.append(" select nvl(sum(p.btje), 0) fxjsf ");
		sqlBF.append("   from ad3u.per_giv_detl p  ");
		sqlBF.append("  where p.fflb = 'A' ");
		sqlBF.append("    and p.fsyy = '1' ");
		sqlBF.append("    and p.ryid = ?  ");
		sqlBF.append("    and p.ffny between ? and ?  ");
		sqlFxjsf = sqlBF.toString();
		
		// 查询供养遗属的消息
		sqlBF.setLength(0);
		sqlBF.append(" select c.grbh, c.xm, b.rygx ");
		sqlBF.append("    from  ad3u.supp_info b, ");
		sqlBF.append("          biuv.person c ");
		sqlBF.append("    where b.ryid = c.ryid ");
		sqlBF.append("     and  b.swryid = ? ");
		sqlGyys = sqlBF.toString();
					
		DataStore dsPerMx = dsTxjyInfo_zg.combineDatastore(dsTxjyInfo_ys);

		// 查询人员基本信息,待遇信息
		for (int i = 0; i < dsPerMx.rowCount(); i++) {
			ryid = dsPerMx.getString(i, "swryid"); // 取出死亡人员的 ryid
			// 丧葬费、抚恤金、个人账户返还
			DataObject pdo = new DataObject();
			pdo.put("ryid", ryid);
			DataObject result= this.doMethod("37950101", "getSzffxjInfo", pdo, this.getUser());  //将查询丧葬抚恤金提成一个方法方便客户化 zkj add 2017/11/27
			szf = result.getDouble("szf"); //求出丧葬费和抚恤金
			fxj = result.getDouble("fxj");
			
			
			// 查询抚恤金补发	
			this.readonlysql.setSql(sqlFxjbf);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, qsrq);
			this.readonlysql.setString(3, zzrq);

			dsbf = this.readonlysql.executeQuery();
			fxjbf = dsbf.getDouble(0, "fxjbf");
			
			//查询实发金额	
			this.readonlysql.setSql(sqlFxjsf);
			this.readonlysql.setString(1, ryid);
			this.readonlysql.setString(2, qsrq);
			this.readonlysql.setString(3, zzrq);
			dssf = this.readonlysql.executeQuery();
			fxjsf = dssf.getDouble(0, "fxjsf");	
			
			
			//查询供养遗属的信息
			this.readonlysql.setSql(sqlGyys);
			this.readonlysql.setString(1, ryid);
			dsys = this.readonlysql.executeQuery();
			
			if(dsys.rowCount() > 0){
				dsPerMx.put(i, "ysgrbh", dsys.getString(0, "grbh"));
				dsPerMx.put(i, "ysxm", dsys.getString(0, "xm"));
				dsPerMx.put(i, "ysrygx", dsys.getString(0, "rygx"));
			}
			
			dsPerMx.put(i, "fxjsf", fxjsf);
			dsPerMx.put(i, "fxjbf", fxjbf);
			dsPerMx.put(i, "szf", szf);
			dsPerMx.put(i, "fxj", fxj);
			dsPerMx.put(i, "lqrmc", AdTools.getPerCmpl(ryid, "LQRMC",""));  //LQRLXDH  LQRSFZHM   LQRGX
			dsPerMx.put(i, "lqryhhm", AdTools.getPerCmpl(ryid, "LQRYHHM",""));
			dsPerMx.put(i, "lqryhzh", AdTools.getPerCmpl(ryid, "LQRYHZH",""));
			dsPerMx.put(i, "lqrsfzhm", AdTools.getPerCmpl(ryid, "LQRSFZHM",""));
			dsPerMx.put(i, "lqrgx", AdTools.getPerCmpl(ryid, "LQRGX",""));
			
		}

	
		HsuTools.genJdxxDataStore(dsPerMx, "jdid", "jdbh", "jdmc");
		dsPerMx = AdTools.genDfjgxxDataStore(dsPerMx, "dfjglb", "dfjgid", "dfjgbh", "dfjgmc");

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		DataObject vdo = new DataObject();
		vdo.put("dsperinfo", dsPerMx);

		QueryLogTool.updateQueryLog(querylogid, dsPerMx.rowCount());

		return vdo;
	}
	
	/**
	 * 
	 * 方法简介.机关退休人员待遇计算信息查询（省直）
	 * 
	 * @author 吴寿康 2020年9月3日
	 */
	public DataObject queryJgtxrydyjsxx_3799(final DataObject para) throws Exception {
		String ltxQsrq, ltxZzrq, dwdjid;
		DataStore dsTemp, dsTdbt, dsPer = new DataStore();
		DataObject rdo = new DataObject();
		StringBuffer sqlBF = new StringBuffer();

		String querylogid = QueryLogTool.saveQueryLog("机关退休人员待遇计算信息查询", "职工养老支付-离退休人员及遗属情况", this.getUser()
			.getUserid(), para);

		dwdjid = para.getString("dwdjid");
		ltxQsrq = para.getDateToString("ltxQsrq", "yyyyMMdd");
		ltxZzrq = para.getDateToString("ltxZzrq", "yyyyMMdd");

		if (ltxQsrq == null || "".equals(ltxQsrq)) {
			ltxQsrq = "20141001";
		}
		if (ltxZzrq == null || "".equals(ltxZzrq)) {
			ltxZzrq = "20491231";
		}
		if (ltxQsrq.compareTo(ltxZzrq) > 0) {
			this.bizException("传入的离退休起始日期大于离退休终止日期！");
		}
		if (ltxQsrq.compareTo("20141001") < 0) {
			this.bizException("传入的离退休起始日期小于2014年10月1日！");
		}

		SPrompt prompt = SPromptUtil.getSPrompt();
		boolean isComplete = true;
		prompt.prompt("正在查询...");

		// 查询人员基本信息
		sqlBF.setLength(0);
		sqlBF.append("select a.ryid, b.dwbh, b.cbdwmc dwmc, a.xm, a.shbzhm, ");
		sqlBF.append("       c.ltxrq, a.dyxsksny, d.jgsydwgzrylb, d.gwyzw, d.gjzyzgdj, ");
		sqlBF.append("       d.sydwzyjsrygw, d.sydwglrygw, d.sydwgrgw ");
		sqlBF.append("  from ad3u.per_info a, ");
		sqlBF.append("       si3u.orgn_reg b,  ");
		sqlBF.append("       ad3u.emp_info c,  ");
		sqlBF.append("       si3u.per_natl d  ");
		sqlBF.append(" where a.dwdjid = b.dwdjid");
		sqlBF.append("   and a.ryid = c.ryid");
		sqlBF.append("   and a.ryid = d.ryid");
		sqlBF.append("   and a.dylqlb in ('102')");
		sqlBF.append("   and a.dyffzt in ('1', '2')");
		sqlBF.append("   and a.dyspbz = '1'");
		sqlBF.append("   and c.ltxrq <= '" + ltxZzrq + "'");
		sqlBF.append("   and c.ltxrq >= '" + ltxQsrq + "'");

		if (dwdjid != null && !"".equals(dwdjid)) {
			sqlBF.append("   and b.dwdjid = '" + dwdjid + "'");
		}

		this.sql.setSql(sqlBF.toString());
		dsPer = this.sql.executeQuery();

		// 查询基本退休费 、增发退休费 、退休补贴 、基础性养老金、过渡性养老金 、个人账户职业年金 、个人账户养老金
		sqlBF.setLength(0);
		sqlBF.append("select max(decode(a.dyxmbh, 'GGQJBGZBZ', a.dyxmz, 0)) lbfjbtxf,");
		sqlBF.append("       max(decode(a.dyxmbh, 'GGQZFGZBZ', a.dyxmz, 0)) lbfzftxf,");
		sqlBF.append("       max(decode(a.dyxmbh, 'GGQTXBT', a.dyxmz, 0)) lbftxbt,");
		sqlBF.append("       max(decode(a.dyxmbh, 'JCXYLJ', a.dyxmz, 0)) jcxylj,");
		sqlBF.append("       max(decode(a.dyxmbh, 'GDXYLJ', a.dyxmz, 0)) gdxylj,");
		sqlBF.append("       max(decode(a.dyxmbh, 'ZYNJGRZHYLJ', a.dyxmz, 0)) zynjgrzhylj,");
		sqlBF.append("       max(decode(a.dyxmbh, 'GRZHYLJ', a.dyxmz, 0)) grzhylj");
		sqlBF.append("  from ad3u.per_cal_his a");
		sqlBF.append(" where a.xh =");
		sqlBF.append("       (select max(b.xh) from ad3u.per_cal_his b where a.ryid = b.ryid)");
		sqlBF.append("   and a.ryid = ? ");
		sqlBF.append(" group by a.ryid");

		String sqlDycxjg = sqlBF.toString();

		// 查询调待补贴
		sqlBF.setLength(0);
		sqlBF.append("select btbh, btje");
		sqlBF.append("  from ad3u.per_giv_month_std");
		sqlBF.append(" where btbh in ('BT18', 'BT20', 'BT22', 'BT23', 'BT24')");
		sqlBF.append("   and to_char(sysdate,'YYYYMM') between qsny and nvl(zzny,'205012') ");
		sqlBF.append("   and ryid = ? ");

		String sqlTdbt = sqlBF.toString();

		for (int i = 0; i < dsPer.rowCount(); i++) {
			String ryid = dsPer.getString(i, "ryid");
			this.sql.setSql(sqlDycxjg);
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() > 0) {
				dsPer.put(i, "lbfjbtxf", dsTemp.getDouble(0, "lbfjbtxf"));
				dsPer.put(i, "lbfzftxf", dsTemp.getDouble(0, "lbfzftxf"));
				dsPer.put(i, "lbftxbt", dsTemp.getDouble(0, "lbftxbt"));
				dsPer.put(i, "jcxylj", dsTemp.getDouble(0, "jcxylj"));
				dsPer.put(i, "gdxylj", dsTemp.getDouble(0, "gdxylj"));
				dsPer.put(i, "zynjgrzhylj", dsTemp.getDouble(0, "zynjgrzhylj"));
				dsPer.put(i, "grzhylj", dsTemp.getDouble(0, "grzhylj"));
			}

			String rylb = dsPer.getString(i, "jgsydwgzrylb");
			if ("1".equals(rylb)) {
				String gwyzw = dsPer.getString(i, "gwyzw"); // 取公务员职务
				dsPer.put(i, "gwzw", HsuTools.discode("gwyzw", gwyzw, ""));
			} else if ("2".equals(rylb)) {
				String gjzyzgdj = dsPer.getString(i, "gjzyzgdj"); // 取机关工勤人员技术等级
				dsPer.put(i, "gwzw", HsuTools.discode("gjzyzgdj", gjzyzgdj, ""));
			} else if ("3".equals(rylb)) {
				String sydwzyjsrygw = dsPer.getString(i, "sydwzyjsrygw"); // 取事业单位专业技术人员岗位
				dsPer.put(i, "gwzw", HsuTools.discode("sydwzyjsrygw", sydwzyjsrygw, ""));
			} else if ("4".equals(rylb)) {
				String sydwglrygw = dsPer.getString(i, "sydwglrygw"); // 取事业单位管理人员岗位
				dsPer.put(i, "gwzw", HsuTools.discode("sydwglrygw", sydwglrygw, ""));
			} else if ("5".equals(rylb)) {
				String sydwgrgw = dsPer.getString(i, "sydwgrgw"); // 取事业单位工人岗位
				dsPer.put(i, "gwzw", HsuTools.discode("sydwgrgw", sydwgrgw, ""));
			}

			this.sql.setSql(sqlTdbt);
			this.sql.setString(1, ryid);

			dsTdbt = this.sql.executeQuery();

			for (int j = 0; j < dsTdbt.rowCount(); j++) {
				String btbh = dsTdbt.getString(j, "btbh");
				if (btbh == "BT18") {
					dsPer.put(i, "2016", dsTdbt.getDouble(j, "btje"));
				}
				if (btbh == "BT20") {
					dsPer.put(i, "2017", dsTdbt.getDouble(j, "btje"));
				}
				if (btbh == "BT22") {
					dsPer.put(i, "2018", dsTdbt.getDouble(j, "btje"));
				}
				if (btbh == "BT23") {
					dsPer.put(i, "2019", dsTdbt.getDouble(j, "btje"));
				}
				if (btbh == "BT24") {
					dsPer.put(i, "2020", dsTdbt.getDouble(j, "btje"));
				}
			}

			prompt.moveForword(1);
		}

		if (isComplete) {
			prompt.complete(); // 进度条任务完成
			prompt.close(); // 指示关闭进度条UI【如果想手动关闭，可以不写】
		}

		QueryLogTool.updateQueryLog(querylogid, dsPer.rowCount());

		rdo.put("ds", dsPer);
		return rdo;
	}

	/**
	 * 查询询拨付人员明细_某页数据，临沂客户化：增加人员类别和职务层次
	 * 
	 * @author 张涛
	 * @date 创建时间 2020-11-11
	 * @since V1.0
	 */
	public DataObject queryBfryMx_PageRows_3713(DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		
		String querylogid = QueryLogTool.saveQueryLog("拨付人员明细查询", "职工养老支付-离退休人员及遗属情况", this.getUser().getUserid(),para);
		
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieve",para,this.getUser()).getString("sqlStr");

		int g_startRowNumber = para.getInt("g_startRowNumber");
		int g_endRowNumber = para.getInt("g_endRowNumber");
		String g_order = para.getString("g_order");

		this.sql.setSql(sqlStr);
		DataStore dsMxinfo = this.sql.selectPageRows(g_startRowNumber, g_endRowNumber, g_order);
		//添加死亡人员信息查询并拼到ds中去  --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			
			// add by zt 2020.11.11 增加人员类别，职务层次
			String ryid = dsMxinfo.getRow(i).getString("ryid", "");
			String jgsydwgzrylb = "", zwzc = "";
			if (ryid != null && !"".equals(ryid)) {
				// 获取人员信息
				sqlBF.setLength(0);
				sqlBF.append(" select e.jgsydwgzrylb, e.gwyzw, e.sydwzyjsrygw, e.sydwglrygw, e.sydwgrgw, ");
				sqlBF.append("        e.gjzyzgdj ");
				sqlBF.append("   from si3u.per_natl e ");
				sqlBF.append("  where e.ryid = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore vds = this.sql.executeQuery();

				if (vds.rowCount() > 0) {
					jgsydwgzrylb = vds.getString(0, "jgsydwgzrylb");

					if ("1".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "gwyzw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "GWYZW", zwzc, zwzc);
					} else if ("2".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "gjzyzgdj");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "GJZYZGDJ", zwzc, zwzc);
					} else if ("3".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwzyjsrygw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWZYJSRYGW", zwzc, zwzc);
					} else if ("4".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwglrygw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWGLRYGW", zwzc, zwzc);
					} else if ("5".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwgrgw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWGRGW", zwzc, zwzc);
					}
				}
			}

			dsMxinfo.put(i, "jgsydwgzrylb", HsuTools.discodeCustom(this.getBizInstitution(), "JGSYDWGZRYLB", jgsydwgzrylb, jgsydwgzrylb));
			dsMxinfo.put(i, "zwzc", zwzc);
			// zt add end.
			
			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");


			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq  =dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		para.put("dsMxinfo", dsMxinfo);
		DataObject vdo = this.queryBfryMxAllinfo(para);
		
		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");
		if (g_order == null || "".equals(g_order)) {
			dsMxinfo.sort("shbzhm").sort("dwbh");
		}
		vdo.put("dsmxinfo", dsMxinfo);
		
		QueryLogTool.updateQueryLog(querylogid, dsMxinfo.rowCount());

		return vdo;
	}
	
	/**
	 * 查询询拨付人员明细_全部信息，临沂客户化：增加人员类别和职务层次
	 * 
	 * @author 张涛
	 * @date 创建时间 2020-11-11
	 * @since V1.0
	 */
	public final DataObject queryBfryMx_AllRows_3713(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject vdo = new DataObject();
		// 方便客户化 add by ztg 2018年12月8日
		String sqlStr = this.doMethod(this.getBizInstitution(),"queryBfryMxInfoRetrieve",para,this.getUser()).getString("sqlStr");
		this.sql.setSql(sqlStr);

		DataStore dsMxinfo = this.sql.executeQuery();
		para.put("dsMxinfo", dsMxinfo);
		// 添加死亡人员信息查询并拼到ds中去 --zkj add 2017/12/14
		for (int i = 0; i < dsMxinfo.rowCount(); i++) {
			
			// add by zt 2020.11.11 增加人员类别，职务层次
			String ryid = dsMxinfo.getRow(i).getString("ryid", "");
			String jgsydwgzrylb = "", zwzc = "";
			if (ryid != null && !"".equals(ryid)) {
				// 获取人员信息
				sqlBF.setLength(0);
				sqlBF.append(" select e.jgsydwgzrylb, e.gwyzw, e.sydwzyjsrygw, e.sydwglrygw, e.sydwgrgw, ");
				sqlBF.append("        e.gjzyzgdj ");
				sqlBF.append("   from si3u.per_natl e ");
				sqlBF.append("  where e.ryid = ? ");
				
				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore vds = this.sql.executeQuery();
				
				if (vds.rowCount() > 0) {
					jgsydwgzrylb = vds.getString(0, "jgsydwgzrylb");

					if ("1".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "gwyzw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "GWYZW", zwzc, zwzc);
					} else if ("2".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "gjzyzgdj");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "GJZYZGDJ", zwzc, zwzc);
					} else if ("3".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwzyjsrygw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWZYJSRYGW", zwzc, zwzc);
					} else if ("4".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwglrygw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWGLRYGW", zwzc, zwzc);
					} else if ("5".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwgrgw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWGRGW", zwzc, zwzc);
					}
				}
			}
			
			dsMxinfo.put(i, "jgsydwgzrylb", HsuTools.discodeCustom(this.getBizInstitution(), "JGSYDWGZRYLB", jgsydwgzrylb, jgsydwgzrylb));
			dsMxinfo.put(i, "zwzc", zwzc);
			// zt add end.
			
			String swryid = dsMxinfo.getString(i, "swryid");
			String bz = dsMxinfo.getString(i, "bz");
			String shbzhm = "", xm = "", cjgzrq = "", ltxrq = "", ltxlb = "", swrq = "";
			if (swryid == null || "".equals(swryid)) {
				continue;
			}
			
			sqlBF.setLength(0);
			sqlBF.append("select c.shbzhm, c.xm, nvl(b.cjgzrq,a.cjgzrq) cjgzrq, b.ltxrq,");
			sqlBF.append("       b.ltxlb, c.swrq");
			sqlBF.append("  from si3u.per_reg a,");
			sqlBF.append("    ad3u.emp_info b,");
			sqlBF.append("    biuv.person c");
			sqlBF.append(" where a.ryid = b.ryid(+)");
			sqlBF.append("   and c.ryid = a.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.ryid = ?");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, swryid);
			DataStore dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() != 0) {
				shbzhm = dsTemp.getString(0, "shbzhm");
				xm = dsTemp.getString(0, "xm");
				cjgzrq = dsTemp.getString(0, "cjgzrq");
				ltxrq = dsTemp.getString(0, "ltxrq");
				ltxlb = dsTemp.getString(0, "ltxlb");
				swrq = dsTemp.getString(0, "swrq");
			}
			// 拼接到dsMxinfo中
			dsMxinfo.put(i, "swshbzhm", shbzhm);
			dsMxinfo.put(i, "swxm", xm);
			dsMxinfo.put(i, "swcjgzrq", cjgzrq);
			dsMxinfo.put(i, "swltxrq", ltxrq);
			dsMxinfo.put(i, "swltxlb", ltxlb);
			dsMxinfo.put(i, "swrq", swrq);
			dsMxinfo.put(i, "bz", bz);
		}
		// end
		vdo = this.queryBfryMxAllinfo(para);

		// 排序--ywj--20161216
		dsMxinfo = vdo.getDataStore("dsmxinfo");
		dsMxinfo.sort("shbzhm").sort("dwbh");
		vdo.put("dsmxinfo", dsMxinfo);

		return vdo;
	}

	/**
	 * 导出拨付人员明细查询信息，临沂客户化：增加人员类别和职务层次
	 * 
	 * @author 张涛
	 * @date 创建时间 2020-11-11
	 * @since V1.0
	 */
	public DataObject genBfrymxExportFile_3713(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataObject rdo = new DataObject();
		DataObject pdo = new DataObject();
		DataStore fileDs = new DataStore();
		DataStore tableInfo = new DataStore();
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		WritableWorkbook workbook;
		WritableSheet sheet;
		
		pdo = this.queryBfryMxInfo(para);// 修改调用的查询方法，支持先查询单位，再循环查询个人，支持进度条提示--ywj--20161215
		DataStore dsBtbh = pdo.getDataStore("dsbtbh");
		fileDs = pdo.getDataStore("mxinfo");// 修改为对应的DataStore--ywj--20161215
		// modify 将code更改为汉字 weichao 20160112
		for (int i = 0; i < fileDs.rowCount(); i++) {
			// add by zt 2020.11.11 增加人员类别，职务层次
			String ryid = fileDs.getRow(i).getString("ryid", "");
			String jgsydwgzrylb = "", zwzc = "";
			if (ryid != null && !"".equals(ryid)) {
				// 获取人员信息
				sqlBF.setLength(0);
				sqlBF.append(" select e.jgsydwgzrylb, e.gwyzw, e.sydwzyjsrygw, e.sydwglrygw, e.sydwgrgw, ");
				sqlBF.append("        e.gjzyzgdj ");
				sqlBF.append("   from si3u.per_natl e ");
				sqlBF.append("  where e.ryid = ? ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				DataStore vds = this.sql.executeQuery();

				if (vds.rowCount() > 0) {
					jgsydwgzrylb = vds.getString(0, "jgsydwgzrylb");

					if ("1".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "gwyzw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "GWYZW", zwzc, zwzc);
					} else if ("2".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "gjzyzgdj");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "GJZYZGDJ", zwzc, zwzc);
					} else if ("3".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwzyjsrygw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWZYJSRYGW", zwzc, zwzc);
					} else if ("4".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwglrygw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWGLRYGW", zwzc, zwzc);
					} else if ("5".equals(jgsydwgzrylb)) {
						zwzc = vds.getString(0, "sydwgrgw");
						zwzc = HsuTools.discodeCustom(this.getBizInstitution(), "SYDWGRGW", zwzc, zwzc);
					}
				}
			}

			fileDs.put(i, "jgsydwgzrylb", HsuTools.discodeCustom(this.getBizInstitution(), "JGSYDWGZRYLB", jgsydwgzrylb, jgsydwgzrylb));
			fileDs.put(i, "zwzc", zwzc);
			// zt add end.
			
			
			fileDs.put(i, "grsf", HsuTools.discode("GRSF", fileDs.getString(i, "grsf"), ""));
			fileDs.put(i, "ygxs", HsuTools.discode("YGXS", fileDs.getString(i, "ygxs"), ""));
			fileDs.put(i, "zfrylb", HsuTools.discode("ZFRYLB", fileDs.getString(i, "zfrylb"), ""));
			fileDs.put(i, "xb", HsuTools.discode("XB", fileDs.getString(i, "xb"), ""));
			fileDs.put(i, "xzzw", HsuTools.discode("XZZW", fileDs.getString(i, "xzzw"), ""));
			fileDs.put(i, "dyffzt", HsuTools.discode("DYFFZT", fileDs.getString(i, "dyffzt"), ""));
			fileDs.put(i, "zyjszwjb", HsuTools.discode("ZYJSZWJB", fileDs.getString(i, "zyjszwjb"), ""));
			fileDs.put(i, "gjzyzgdj", HsuTools.discode("GJZYZGDJ", fileDs.getString(i, "gjzyzgdj"), ""));
			fileDs.put(i, "dwxz", HsuTools.discode("DWXZ", fileDs.getString(i, "dwxz"), ""));// 增加单位性质--ywj--20161216
			String jzgbz = fileDs.getString(i, "jzgbz");
			if ("1".equals(jzgbz)) {
				fileDs.put(i, "jzgbz", "是");
			}else if ("0".equals(jzgbz)){
				fileDs.put(i, "jzgbz", "否");
			}
		}
		// end
		addTableInfo4Write(tableInfo, "dwbh", "单位编号", "String", "", 20);
		addTableInfo4Write(tableInfo, "dwmc", "单位名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "dwxz", "单位性质", "String", "", 3);
		addTableInfo4Write(tableInfo, "dfjgbh", "代发机构编号", "String", "",20);
		addTableInfo4Write(tableInfo, "dfjgmc", "代发机构名称", "String", "", 50);
		addTableInfo4Write(tableInfo, "shbzhm", "社会保障号码", "String", "", 20);
		addTableInfo4Write(tableInfo, "xm", "姓名", "String", "", 50);
		addTableInfo4Write(tableInfo, "yxzjhm", "身份证号码", "String", "", 18);
		addTableInfo4Write(tableInfo, "jgsydwgzrylb", "人员类别", "String", "", 200);
		addTableInfo4Write(tableInfo, "zwzc", "职务层次", "String", "", 200);
		addTableInfo4Write(tableInfo, "yhzh", "银行账号", "String", "", 40);
		addTableInfo4Write(tableInfo, "xb", "性别", "String", "", 2);
		addTableInfo4Write(tableInfo, "csrq", "出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dacsrq", "档案出生日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "cjgzrq", "参加工作日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "grsf", "个人身份", "String", "", 10);
		addTableInfo4Write(tableInfo, "ygxs", "用工形式", "String", "", 10);
		addTableInfo4Write(tableInfo, "zfrylb", "离退休类别", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyffzt", "待遇发放状态", "String", "", 10);
		addTableInfo4Write(tableInfo, "jfnx", "连续工龄", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "stjfnx", "视同缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "sjjfnx", "实际缴费年限", "number", "#######0.00", 9);
		addTableInfo4Write(tableInfo, "pjzs", "平均指数", "number", "#######0.000", 9);
		addTableInfo4Write(tableInfo, "ltxrq", "离退休日期", "String", "", 10);
		addTableInfo4Write(tableInfo, "dyxsksny", "待遇享受开始年月", "String", "", 6);
		addTableInfo4Write(tableInfo, "xzzw", "行政职务", "String", "", 10);
		addTableInfo4Write(tableInfo, "zyjszwjb", "专业技术职务级别", "String", "", 10);
		addTableInfo4Write(tableInfo, "gjzyzgdj", "国家职业资格等级", "String", "", 10);
		addTableInfo4Write(tableInfo, "lxrxm", "联系人", "String", "", 50);
		addTableInfo4Write(tableInfo, "lxdh", "联系电话", "String", "", 50);
		addTableInfo4Write(tableInfo, "sjhm", "手机号码", "String", "", 50);//gzh mod 20180413 增加导出手机号码
		addTableInfo4Write(tableInfo, "yzbm", "邮政编码", "String", "", 6);
		addTableInfo4Write(tableInfo, "txdz", "通讯地址", "String", "", 200);
		addTableInfo4Write(tableInfo, "jtzz", "家庭住址", "String", "", 200);
		addTableInfo4Write(tableInfo, "hj", "合计", "number", "#######0.00", 9);
		
		//增加居住地行政区划的导出  刘欣 modify 20170112
		if (fileDs != null && fileDs.rowCount() > 0) {
			if (fileDs.getRow(0).containsKey("JZDXZQH")) {
				addTableInfo4Write(tableInfo, "JZDXZQH", "居住地行政区划", "String", "", 200);
			}
		}	
		
		String btmc,btbh;
		for (int i = 0; i < dsBtbh.rowCount(); i++) {
			btbh = dsBtbh.getString(i, "btbh");
			btmc = dsBtbh.getString(i, "btmc");
			addTableInfo4Write(tableInfo, btbh, btmc, "number", "#######0.00", 9);
		}
		addTableInfo4Write(tableInfo, "jzgbz", "军转干标志", "string", "", 10);

		workbook = ExcelTool.createWorkbook(out);
		// 数据大于60000条时，分为多个sheet页展示数据--add.yxt.20160317
		int count = fileDs.rowCount();// 获取数据行数
		int num = count / 60000;
		int remainder = count % 60000;
		if (remainder > 0) {
			num++;
		}
		for (int i = 0; i < num; i++) {
			int hhmax = (i + 1) * 60000;
			int hhmin = i * 60000;
			if (hhmax > count) {
				hhmax = count;
			}
			DataStore dsTemp = fileDs.subDataStore(hhmin, hhmax);

			sheet = ExcelTool.createSheet(workbook, "报盘文件" + (i + 1), i);
			ExcelTool.writeTitleToSheet(sheet, 0, tableInfo);
			ExcelTool.writeDataStoreToSheet(sheet, 1, tableInfo, dsTemp);
		}
		//--add.yxt.20160317。end

		// 生成excel文件
		ExcelTool.writeWbootAndClose(workbook);
		ExcelTool.closeOutputStream(out);

		rdo.put("textinfo", out.toByteArray());
		rdo.put("extendName", ".xls");

		return rdo;
	}
	
	/**
	 * 
	 * 方法简介.跳转到企业工龄认定查询的JSP之前查询本地区所有经办机构
	 * 
	 * @author 吴寿康 2020年12月8日
	 */
	public DataObject fwdQyglrdQuery(final DataObject para) throws Exception {
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsjbjg = new DataStore();
		DataObject rdo = new DataObject();
		String biz = this.getBizInstitution().substring(0, 4);
		
		// 查询本地区所有经办机构
		sqlBF.setLength(0);
		sqlBF.append("  select a.jbjgid value, a.jbjgmc content ");
		sqlBF.append("    from be3u.agency_natl a");
		sqlBF.append("   where a.jbjgid like '" + biz + "%01'");
		sqlBF.append("      or a.jbjgid like '" + biz + "%03'");
		sqlBF.append("   order by a.jbjgid ");
		this.sql.setSql(sqlBF.toString());
		dsjbjg = this.sql.executeQuery();
		
		rdo.put("dsjbjg", dsjbjg);
		return rdo;
	}
	
	/**
	 * 民政殡葬数据对比实时查询：判断是否丧葬人员
	 * 
	 * @author lq
	 * @date 创建时间 2020-12-17
	 * @since V1.0
	 */
	public DataObject chkMzbzsjdbssQueryPer(DataObject para) throws Exception {
		DataObject rdo = new DataObject();

		String shbzhm = para.getString("shbzhm");
		String sqlMzbzInfo = para.getString("sqlMzbzInfo");

		this.sql.setSql(sqlMzbzInfo);
		this.sql.setString(1, shbzhm);
		DataStore dsTemp = this.sql.executeQuery();

		rdo.put("dstemp", dsTemp);
		return rdo;
	}

	/**
	 * 民政殡葬数据对比实时查询：判断是否丧葬人员
	 * 
	 * @author lq
	 * @date 创建时间  2020-12-17
	 * @since V1.0
	 */
	public DataObject chkMzbzsjdbssQueryPer_3704(DataObject para)
			throws Exception {
		DataObject rdo = new DataObject();
		DataObject tempdo = new DataObject();
		DataStore dsTemp = new DataStore();
		StringBuffer sqlBF = new StringBuffer();

		String shbzhm = para.getString("shbzhm");
		String xm = para.getString("xm");
		String jbjgid = para.getString("jbjgid");

		String esbid = "";
		String rsxtid = HsuTools.getRsxtidByJgid(this.getBizInstitution());
		if (rsxtid != null && rsxtid.length() >= 4) {
			esbid = rsxtid.substring(0, 4);
		}

		try {
			tempdo.clear();
			tempdo.put("id_card", shbzhm);
			tempdo.put("name", xm);
			tempdo.put("jbjgid", "3799");
			tempdo.put("userid", "dwhsu");
			tempdo.put("appid", "37000053");
			tempdo.put("operationName", "queryMzBzxxBySzf");
			tempdo = LocalServiceClient.invokeServiceOnRemoteESB(esbid,
					"InteplateService", "queryMzBzxxBySzf", tempdo);
		} catch (Exception e) {
			rdo.put("dstemp", dsTemp);
			rdo.put("msgstr", "调用服务失败:" + e.getMessage());
			return rdo;
		}

		dsTemp = tempdo.getDataStore("vds");
		if (dsTemp.rowCount() > 0) {

			String cremationTime = dsTemp.getDateToString(0, "crematio_time","yyyyMMdd");
			String createOrganName = dsTemp.getString(0, "create_organ_name");
			String deathdate = dsTemp.getString(0, "death_date");

			sqlBF.setLength(0);
			sqlBF.append(" select o.dwbh, o.cbdwmc dwmc, a.ryid, a.shbzhm, a.xm, ");
			sqlBF.append("        a.zfrylb, a.dyffzt, a.sszfrq ");
			sqlBF.append("   from ad3u.per_info a, si3u.orgn_reg o ");
			sqlBF.append("  where a.dwdjid = o.dwdjid ");
			sqlBF.append("    and a.shbzhm = ? ");
			sqlBF.append("    and a.dyspbz = '1' ");
			if (!"".equals(jbjgid) && jbjgid != null) {
				sqlBF.append("    and exists (select 1 ");
				sqlBF.append("           from ad3u.per_reg b ");
				sqlBF.append("          where a.dqdydjid = b.dydjid ");
				sqlBF.append("            and b.jbjgid in ("
						+ HsuTools.replaceC2QCQ(jbjgid) + ")) ");
			}

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, shbzhm);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() > 0) {
				dsTemp.put(0, "mzbzsfzh", shbzhm);
				dsTemp.put(0, "mzbzname", xm);
				dsTemp.put(0, "hhsj", cremationTime);
				dsTemp.put(0, "bygmc", createOrganName);
				dsTemp.put(0, "swrq", deathdate);
				dsTemp.put(0, "gxsj", "");
			}
		}

		rdo.put("dstemp", dsTemp);
		return rdo;
	}
	
	/**
	 * 批量全省待遇领取比对查询报盘检测
	 * 
	 * @author 张涛
	 * @date 创建时间 2021-1-14
	 * @since V1.0
	 */
	public DataObject chkPlQsdylqbdcxbpUpload(DataObject para) throws Exception {
		String sfzhm, xm, err, sfzhm_j;
		StringBuffer sqlBF = new StringBuffer();
		DataStore tableInfo = new DataStore(), dsPer, dsTemp, dsError = new DataStore(), dsRight = new DataStore();
		DataObject rdo = new DataObject();
		CommonsMultipartFile file;
		InputStream is;
		Workbook wb;
		Sheet sheet;
		int row;

		// 接参
		file = (CommonsMultipartFile) para.getObject("file");

		// 构造excel结构
		setTableInfo(tableInfo, 0, "sfzhm", "身份证号码", "String");
		setTableInfo(tableInfo, 1, "xm", "姓名", "String");

		// 解析上传文件中的数据
		is = ExcelTool.getStreamByFile(file);
		wb = ExcelTool.getExcelFileByStream(is);
		sheet = ExcelTool.getSheet(wb, 0);
		dsPer = ExcelTool.getDataStoreBySheet(sheet, 0, 1, 100000, tableInfo);
		dsPer = ExcelTool.removeBlankRowWithTrim(dsPer); // 去除空行

		ExcelTool.closeWorkbook(wb);
		ExcelTool.closeInputStream(is);

		if (dsPer == null) {
			this.bizException("上传文件为空！");
		}
		if (dsPer.rowCount() == 0) {
			this.bizException("文件中没有数据，请检查！");
		}

		// 循环校验
		for (int i = 0, n = dsPer.rowCount(); i < n; i++) {
			sfzhm = StringUtil.trim(dsPer.getString(i, "sfzhm"));
			xm = StringUtil.trim(dsPer.getString(i, "xm"));
			err = "";

			if (sfzhm == null || "".equals(sfzhm)) {
				err += "身份证号码为空！";
			} else if (sfzhm.length() > 0 && sfzhm.length() != 18
					&& sfzhm.length() != 15) {
				sfzhm += "身份证号码的长度不正确 ！";
			}

			if (xm == null || "".equals(xm) || xm.length() == 0) {
				err += "姓名为空！";
			}

			// 去重复,从前往后遍历，若重复，移除本条，直到保留最后一条
			for (int j = i + 1; j < dsPer.rowCount(); j++) {
				sfzhm_j = StringUtil.trim(dsPer.getString(j, "sfzhm"));
				if (sfzhm_j.equals(sfzhm)) {
					err += "身份证号码重复！";
					break;
				}
			}

			// 在此校验身份证号码与姓名字段是否匹配
			sqlBF.setLength(0);
			sqlBF.append("select xm ");
			sqlBF.append("  from ad3u.per_info ");
			sqlBF.append(" where shbzhm = ? ");

			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, sfzhm);
			dsTemp = this.sql.executeQuery();

			if (dsTemp.rowCount() < 1) {
				err += "系统中无此人员退休信息 ！";
			} else if(dsTemp.rowCount() > 1){
				err += "系统中存在此人员多条退休信息 ！";
			}else {
				if (!xm.equals(dsTemp.getString(0, "xm"))) {
					err += "姓名与身份证号码不匹配 ！";
				}
			}

			if (!"".equals(err)) {
				// 放入不合法数据
				dsError.addRow();
				row = dsError.rowCount() - 1;
				dsError.put(row, "sfzhm", sfzhm);
				dsError.put(row, "xm", xm);
				dsError.put(row, "cwxx", err);
				continue;
			} else {
				dsRight.addRow();
				row = dsRight.rowCount() - 1;
				dsRight.put(row, "sfzhm", sfzhm);
				dsRight.put(row, "xm", xm);
			}
		}

		// 返回
		rdo.clear();
		rdo.put("dsper", dsRight);
		rdo.put("dserr", dsError);

		return rdo;
	}
	
	/**
	 * 批量全省待遇领取比对查询
	 * 
	 * @author 张涛
	 * @date 创建时间 2021-1-14
	 * @since V1.0
	 */
	public DataObject queryPlQsdylqbdcx(DataObject para) throws Exception {
		String querylogid, sjzRsxt, dbusersuffix, rsxtid, orgnostr, dwmc, dsmc, dyffzt, dylqlb, sszfrq;
		String sfzhm, xm, bz;
		String[] rsxtidArr;
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsPer, dsErr;
		DataStore dsTemp;
		DataObject rdo = new DataObject();
		int rowcount;

		// 记录日志
		querylogid = QueryLogTool.saveQueryLog("批量全省待遇领取比对查询", "职工养老支付-离退休人员及遗属情况", this.getUser()
			.getUserid(), para);

		// 接参
		dsPer = para.getDataStore("dsper");
		dsErr = para.getDataStore("dserr");

		// 获取行数
		rowcount = dsPer.rowCount();

		sjzRsxt = HsuTools.getSystemPara("SJZ_ZGAGEDRSXTID", "HSU", "");// 省级中rsxtid列表
		dbusersuffix = EnvironmentParaUtil.getDBUserSuffix(); // 原rsxtid

		// 获取城市名称
		sqlBF.setLength(0);
		sqlBF.append(" select orgno, orgname ");
		sqlBF.append("   from odsv.orginfor_view a ");
		sqlBF.append("  where a.belongorgno = ? ");
		sqlBF.append("    and a.orgno = ? ");

		orgnostr = sqlBF.toString();

		// 设置进度条
		LanePromptUtil.setTotalSteps(rowcount);
		LanePromptUtil.promptToTrace("查询开始");

		for (int i = 0, n = rowcount; i < n; i++) {
			sfzhm = dsPer.getString(i, "sfzhm");
			xm = dsPer.getString(i, "xm");
			bz = "";

			LanePromptUtil.promptToTrace("正在查询第" + (i + 1) + "条人员[" + xm
					+ "]的状态信息，一共" + rowcount + "条");
			LanePromptUtil.moveForward(1);

			if (sjzRsxt.indexOf(dbusersuffix) >= 0) {
				// 循环省集中地市
				rsxtidArr = sjzRsxt.split(",");

				// 循环省级中地市
				for (int j = 0; j < rsxtidArr.length; j++) {
					rsxtid = rsxtidArr[j];

					if (rsxtid.equals(dbusersuffix)) {
						continue;
					}
					
					EnvironmentParaUtil.setDBUserSuffix(rsxtid);

					// 获取在其他地市待遇领取情况
					sqlBF.setLength(0);
					sqlBF.append("select b.cbdwmc, a.dyffzt, a.dylqlb, a.sszfrq ");
					sqlBF.append("  from ad3u.per_info a, si3u.orgn_reg b ");
					sqlBF.append(" where a.dwdjid = b.dwdjid ");
					sqlBF.append("   and a.shbzhm = ? ");
					sqlBF.append("   and a.xm = ? ");
					sqlBF.append("   and a.dyffzt in ('1','2') ");

					this.sql.setSql(sqlBF.toString());
					this.sql.setString(1, sfzhm);
					this.sql.setString(2, xm);
					dsTemp = this.sql.executeQuery();

					if (dsTemp.rowCount() > 0) {
						dwmc = dsTemp.getString(0, "cbdwmc");
						sszfrq = dsTemp.getString(0, "sszfrq");
						dylqlb = dsTemp.getString(0, "dylqlb");
						dyffzt = dsTemp.getString(0, "dyffzt");

						// 转换成中文
						sszfrq = HsuTools.discodeCustom(this.getBizInstitution(), "SSZFRQ", sszfrq, sszfrq);
						dylqlb = HsuTools.discodeCustom(this.getBizInstitution(), "XZBZ", dylqlb, dylqlb);
						dyffzt = HsuTools.discodeCustom(this.getBizInstitution(), "DYFFZT", dyffzt, dyffzt);

						// 获取地市名称
						this.sql.setSql(orgnostr);
						this.sql.setString(1, GlobalNames.DEFAULT_BIZ);
						this.sql.setString(2, rsxtid);
						dsTemp = this.sql.executeQuery();

						dsmc = "";
						if (dsTemp.rowCount() > 0) {
							dsmc = dsTemp.getString(0, "orgname");
							dsmc = dsmc.replaceAll("人社系统", "");
						}

						bz += "在【" + dsmc + "】【" + dwmc
								+ "】单位正常领取养老待遇，所属支付人群为【" + sszfrq
								+ "】，待遇领取类别为【" + dylqlb + "】，待遇发放状态为【" + dyffzt
								+ "】！";
					}
				}

				// 循环结束后将人社系统id置为原来的
				EnvironmentParaUtil.setDBUserSuffix(dbusersuffix);
			}

			dsPer.put(i, "bz", bz);
		}		

		// 设置列类型
		dsPer.setTypeList("bz:s");

		// 进度条工作完成
		LanePromptUtil.complete();
		LanePromptUtil.end();

		QueryLogTool.updateQueryLog(querylogid, rowcount);

		// 返回
		rdo.clear();
		rdo.put("dsper", dsPer);
		rdo.put("dserr", dsErr);

		return rdo;
	}

	/**
	 * 人员服刑信息维护
	 *
	 * @author lixinyu 2021年2月26日
	 */
	public DataObject fwdAdtxryfxxxQuery(final DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		
		DataStore ds;
		String ad3u1059 = SiTools.getPara(this.getBizInstitution(), "ad3u1059", "0");
		if ("1".equals(ad3u1059)) {
			ds = AdTools.getQueryJbjgidByUser(this.getUser());
		} else {
			ds = SiTools.getSjJbjgidByUserId(this.getUser());
		}

		rdo.put("dsjbjg", ds);
		return rdo;
	}
	
	/**
	 * 人员服刑信息维护
	 *
	 * @author lixinyu 2021年2月26日
	 */
	public DataObject queryAdtxryfxxx(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		
		String ryid = para.getString("ryid");
		String jbjgid = para.getString("jbjgid");
		String dwdjid = para.getString("dwdjid");
		Date xqqs = para.getDate("xqqs");
		Date xqzz = para.getDate("xqzz");
		String sfczwglqylj = para.getString("sfczwglqylj");
		
		if (HsuTools.isNullOrEmpty(jbjgid)) {
			this.bizException("参数经办机构为空！");
		}
		
		sqlBF.setLength(0);
		sqlBF.append(" select b.ryid, a.xz, a.xq, a.xqqs, a.xqzz,  ");
		sqlBF.append("        a.pjswh, a.sfczwglqylj, a.wglqje, a.sfclwb, a.bz, ");
		sqlBF.append("        b.shbzhm, b.xm, c.dwdjid, c.dwbh, c.cbdwmc ");
		sqlBF.append("   from ad3u.per_sentence_info a, ");
		sqlBF.append("        ad3u.per_info b, ");
		sqlBF.append("        si3u.orgn_reg c ");
		sqlBF.append("  where a.ryid = b.ryid ");
		sqlBF.append("    and b.dwdjid = c.dwdjid ");
		sqlBF.append("    and c.jbjgid = ? ");
		if (!HsuTools.isNullOrEmpty(ryid)) {
			sqlBF.append("    and a.ryid = ? ");
		}
		if (!HsuTools.isNullOrEmpty(dwdjid)) {
			sqlBF.append("   and b.dwdjid = ? ");
		}
		if (xqqs != null) {
			sqlBF.append(" and a.xqqs >= ? ");
		}
		if (xqzz != null) {
			sqlBF.append(" and a.xqzz <= ? ");
		}
		if (!HsuTools.isNullOrEmpty(sfczwglqylj)) {
			sqlBF.append(" and a.sfczwglqylj = ? ");
		}
		
		this.sql.setSql(sqlBF.toString());
		int index = 1;
		this.sql.setString(index++, jbjgid);
		if (!HsuTools.isNullOrEmpty(ryid)) {
			this.sql.setString(index++, ryid);
		}
		if (!HsuTools.isNullOrEmpty(dwdjid)) {
			this.sql.setString(index++, dwdjid);
		}
		if (xqqs != null) {
			this.sql.setDateTime(index++, xqqs);
		}
		if (xqzz != null) {
			this.sql.setDateTime(index++, xqzz);
		}
		if (!HsuTools.isNullOrEmpty(sfczwglqylj)) {
			this.sql.setString(index++, sfczwglqylj);
		}
		DataStore perinfo = this.sql.executeQuery();
		
		perinfo.sort("dwbh,shbzhm");
		DataObject rdo = new DataObject();
		rdo.put("dsper", perinfo);
		return rdo;
	}
	
	/**
	 * 查询统计 查询资格认证结果
	 * 
	 * @author 秦淑祥
	 * @date 创建时间 2021-6-30
	 * @since V1.0
	 */
	public final DataObject queryAdzgrzjg(final DataObject para) throws Exception {
		int index = 1;
		String shbzhm = para.getString("shbzhm") + "%";
		String xm = para.getString("xm") + "%";
		String rzqssj = DateUtil.dateToString(para.getDate("rzqssj"));
		String rzzzsj = DateUtil.dateToString(para.getDate("rzzzsj"));
		 //1.查询资格认证
		StringBuffer sqlBF = new StringBuffer();

		sqlBF.setLength(0);
		sqlBF.append(" select distinct a.shbzhm sfzhm, a.xm, b.sjly, b.rzfs, b.rzsj ");
		sqlBF.append("   from ad3u.per_info a, ");
		sqlBF.append("        iau.per_zgrz_info b ");
		sqlBF.append("  where a.shbzhm like ? ");
		sqlBF.append("    and a.ryid = b.ryid ");
		sqlBF.append("    and a.xm like ? ");
		//如果认证起始时间和终止时间不为空
		if(!"".equals(rzqssj) && rzqssj!=null){
			sqlBF.append("    and b.rzsj >= ? ");
		}
		if(!"".equals(rzzzsj) && rzzzsj!=null){
			sqlBF.append("    and b.rzsj <= ? ");
		}
		this.sql.setSql(sqlBF.toString());
		this.sql.setString(index++, shbzhm);
		this.sql.setString(index++, xm);
		if(!"".equals(rzqssj) && rzqssj!=null){
			this.sql.setString(index++, rzqssj);
		}
		if(!"".equals(rzzzsj) && rzzzsj!=null){
			this.sql.setString(index++, rzzzsj);
		}
		DataStore dsZgrz = this.sql.executeQuery();
		//数据为空时
		if(dsZgrz.rowCount()==0){
			this.bizException("未查询到数据！");
		}
		DataObject rdo = new DataObject();
		rdo.put("dszgrz", dsZgrz);

		return rdo;
	}
	/**
	 * 
	 * 方法简介.开启流程前校验
	 * 
	 * @author 甘竟成 Aug 31, 2021
	 */
	public DataObject chkBeforeWscsqbrycx(DataObject para) throws Exception {
		DataObject rdo = new DataObject();
		String shbzhm = para.getString("shbzhm");
		String xm = para.getString("xm");
		rdo.clear();
		rdo = SiTools.chkBeforeStart(shbzhm,xm,"H");
		return rdo;
	}

	/**
	 * 
	 * 方法简介.为上传申请表人员查询(中台专用)
	 *
	 * @author ylx
	 * @date 20220223
	 * @since V1.0
	 */
	public DataObject queryAdWscsqbryCenterInfo(DataObject para) throws Exception{
		StringBuffer sqlBF = new StringBuffer();
		DataStore dsTemp = new DataStore();
		
		String dwdjid = para.getString("dwdjid");
		String jbjgid = para.getString("jbjgid");
		String spr = para.getString("spr");
		String vbiz = para.getString("biz");
		String ryid = para.getString("cxryid");
		String scbz = para.getString("scbz");
		String shzt = "", piid = "", dyhsr = "", dyfhr = "";
		
		if(vbiz == null || "".equals(vbiz)){
			this.bizException("获取的经办机构为空");
		}
		
		// fsy.mod.20191007.支持街道id转换成rsjid，以便功能挂在所平台时能查询数据
		String biz = HsuTools.getRsjidByJgid(vbiz);
		if (biz == null || "".equals(biz)) {
			biz = vbiz;
		}
		
		String jbjg = "'"+biz+"01','"+biz+"03'";
		int index = 1;	
		DataStore ryxx = new DataStore();
		DataStore ywRyxx = new DataStore();
		if (scbz == null || "".equals(scbz) || "0".equals(scbz)
				|| "1".equals(scbz)) {// 0:未上传,1:已上传
			sqlBF.setLength(0);
			sqlBF.append("select distinct b.ryid, b.shbzhm, b.xm, b.grbh, a.zfrylb ltxlb,  ");
			sqlBF.append("       d.jbjgid, d.dwbh, d.cbdwmc dwmc, e.orgname jbjgmc,  ");
			sqlBF.append("       h.rydjid, a.spr, f.jlgrzhnya zhjlny, a.cjgzrq, a.ltxrq, ");
			sqlBF.append("       '' usertask, '' splbdm, '1' sqbscyw");//申请表上传业务
			sqlBF.append("  from si3u.retd_identity a, biuv.person b, si3u.orgn_reg d, odssu.orginfor e, si3u.per_natl f, si3u.per_reg h ");
			sqlBF.append(" where a.ryid = b.ryid ");
			sqlBF.append("   and a.dwdjid = d.dwdjid ");
			sqlBF.append("   and d.jbjgid = e.orgno ");
			sqlBF.append("   and b.ryid = f.ryid ");
			sqlBF.append("   and h.ryid = b.ryid ");
			sqlBF.append("   and h.hdbz = '1' ");
			sqlBF.append("   and instr(h.tblb,'101') > 0 ");
			sqlBF.append("   and a.dwdjid = h.dwdjid ");

			if (dwdjid != null && !"".equals(dwdjid)) {
				sqlBF.append("   and a.dwdjid = ? ");
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				sqlBF.append("   and d.jbjgid in (")
					.append(HsuTools.replaceC2QCQ(jbjgid))
					.append(") ");
			} else {
				sqlBF.append("   and d.jbjgid in (").append(jbjg).append(") ");
			}
			if (spr != null && !"".equals(spr)) {
				sqlBF.append("   and a.spr like (?) ");
			}
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and b.ryid = ? ");
			}
			// 根据上传标志判断是否执行.mod.谈杰.20191024
			if (scbz != null && !"".equals(scbz)) {
				if ("1".equals(scbz)) {
					sqlBF.append("   and exists ");
				} else if("0".equals(scbz)){
					sqlBF.append("   and not exists ");
				}
				sqlBF.append(" (select 1 from ad3u.per_info c ");
				sqlBF.append("   where a.ryid = c.ryid  ");
				sqlBF.append("     and exists (select 1 ");// 查询做过退休转在职的人 wsk add 2020/11/17
				sqlBF.append("    from ad3u.per_pay_his g  ");
				sqlBF.append("   where c.ryid = g.ryid))  ");
			}
			this.sql.setSql(sqlBF.toString());

			if (dwdjid != null && !"".equals(dwdjid)) {
				this.sql.setString(index++, dwdjid);
			}
			if (spr != null && !"".equals(spr)) {
				this.sql.setString(index++, spr);
			}
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}

			ryxx = this.sql.executeQuery();
		}

		// 新增查询征缴处等待审核、征缴处审核不通过状态 业务人员信息.add.zcc.20191209
		 index = 1;
		if (scbz == null || "".equals(scbz) || "0".equals(scbz)) {// 0:未上传，查询以上两种状态
			sqlBF.setLength(0);
			sqlBF.append("select distinct b.piid, a.ryid,c.task_def_key_ usertask,a.shbzhm,a.xm,");
			sqlBF.append("          e.grbh,b.ltxlb,g.jbjgid,f.dwbh,f.cbdwmc dwmc,");
			sqlBF.append("          g.jbjgmc,a.rydjid,b.slr spr,h.jlgrzhnya zhjlny,a.cjgzrq,");
			sqlBF.append("          b.ltxrq,d.splbdm, '0' sqbscyw");
			sqlBF.append("  from si3u.per_reg         a,");
			sqlBF.append("       sicp3uws.adgrtxysh       b,");
			sqlBF.append("       activiti.act_ru_task     c,");
			sqlBF.append("    sicp3uws.approve_history   d,");
			sqlBF.append("       biuv.person              e,");
			sqlBF.append("       si3u.orgn_reg        f,");
			sqlBF.append("       be3u.agency_natl         g,");
			sqlBF.append("       si3u.per_natl        h");
			sqlBF.append(" where a.ryid = b.ryid");
			sqlBF.append("   and b.piid = c.proc_inst_id_");
			sqlBF.append("   and a.ryid = e.ryid");
			sqlBF.append("   and a.dwdjid = f.dwdjid");
			sqlBF.append("   and f.jbjgid = g.jbjgid");
			sqlBF.append("   and a.ryid = h.ryid");
			sqlBF.append("   and a.hdbz = '1'");
			sqlBF.append("   and a.tblb like '%101%'");
			sqlBF.append("   and c.proc_def_id_ like 'B_adQyyldysq%'");
			sqlBF.append("   and not exists (select '1' from si3u.retd_identity i where a.ryid = i.ryid)");
			sqlBF.append("   and b.piid = d.piid(+)");
//			if ("2".equals(scbz)) {//只查询待征缴确认的
//				sqlBF.append("   and b.piid = d.piid(+)");
//				sqlBF.append("   and c.task_def_key_  in ( 'ut.adQyyldysqOutNet.1.UserTask_05i5hgc.zjcqr','ut.adQyyldysq.2.UserTask_05i5hgc.zjcqr') ");
//			}else if("3".equals(scbz)){//只查询征缴审核不通过的
//				sqlBF.append("   and b.piid = d.piid");
//				sqlBF.append("   and c.task_def_key_  not in ( 'ut.adQyyldysqOutNet.1.UserTask_05i5hgc.zjcqr','ut.adQyyldysq.2.UserTask_05i5hgc.zjcqr') ");
//			}else{
//				sqlBF.append("   and b.piid = d.piid(+)");
//			}
			
			if (dwdjid != null && !"".equals(dwdjid)) {
				sqlBF.append("   and a.dwdjid = ? ");
			}
			if (jbjgid != null && !"".equals(jbjgid)) {
				sqlBF.append("   and f.jbjgid in (")
					.append(HsuTools.replaceC2QCQ(jbjgid))
					.append(") ");
			} else {
				sqlBF.append("   and f.jbjgid in (").append(jbjg).append(") ");
			}
			if (spr != null && !"".equals(spr)) {
				sqlBF.append("   and b.slr = ? ");
			}
			if (ryid != null && !"".equals(ryid)) {
				sqlBF.append("   and a.ryid = ? ");
			}
			this.sql.setSql(sqlBF.toString());

			if (dwdjid != null && !"".equals(dwdjid)) {
				this.sql.setString(index++, dwdjid);
			}
			if (spr != null && !"".equals(spr)) {
				this.sql.setString(index++, spr);
			}
			if (ryid != null && !"".equals(ryid)) {
				this.sql.setString(index++, ryid);
			}

			ywRyxx = this.sql.executeQuery();
		}
		ryxx.combineDatastore(ywRyxx);
		
		DataStore dsSc = new DataStore();
		String sqbscyw="",sprname="",usertask="", splbdm="";
		for (int i = 0; i < ryxx.rowCount(); i++) {
			ryid = ryxx.getString(i, "ryid");
			spr = ryxx.getString(i, "spr");
			sqbscyw = ryxx.getString(i, "sqbscyw");
			usertask = ryxx.getString(i, "usertask");
			splbdm = ryxx.getString(i, "splbdm");
			if ("0".equals(sqbscyw)
					&& "ut.adQyyldysqOutNet.1.UserTask_05i5hgc.zjcqr,ut.adQyyldysq.2.UserTask_05i5hgc.zjcqr".indexOf(usertask) < 0
					&& (splbdm == null || "".equals(splbdm))){//删除非征缴审核、征缴审核不通过的
				ryxx.delRow(i);
				i--;
				continue;
			}
			sprname = HsuTools.getCzyxmByUserId(spr);
			if("".equals(sprname)){
				sprname = spr;
			}
			ryxx.put(i, "sprname", sprname);
			
			// 先根据录入的上传标志直接进行判断.mod.谈杰.20191024
//			if (scbz != null && !"".equals(scbz)) {
//				if ("0".equals(scbz)) {
//					ryxx.put(i, "cz", "申请表上传");
//				} else {
//					ryxx.put(i, "cz", "查看");
//				}
//			} else {// 如果没有录入上传标志，再次查询该人员是否已经上传.mod.谈杰.20191024
				sqlBF.setLength(0);
				sqlBF.append(" select 1 ");
				sqlBF.append("   from ad3u.per_info a  ");
				sqlBF.append("  where a.ryid = ? ");
				sqlBF.append("    and exists (select 1 "); // 查询做过退休转在职的人 wsk add 2020/11/18
				sqlBF.append("   from ad3u.per_pay_his b");
				sqlBF.append("  where a.ryid = b.ryid) ");

				this.sql.setSql(sqlBF.toString());
				this.sql.setString(1, ryid);
				dsSc = this.sql.executeQuery();

				if (dsSc.rowCount() > 0 || "0".equals(sqbscyw)) {
					ryxx.put(i, "cz", "查看");
				} else {
					ryxx.put(i, "cz", "申请表上传");
				}

//			}
			if(ryid != null && !"".equals(ryid)){
				this.sql.setSql(" select min(qsrq) sccbny from si3u.per_reg_join where xzbz = '101' and ryid = ? ");
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				if(dsTemp.rowCount() > 0){
					ryxx.put(i, "sccbny", dsTemp.getString(0, "sccbny"));
				}
			}
			String tcwzrbz = "0";
			sqlBF.setLength(0);
			sqlBF.append(" select substr(b.qsny, 1, 4), substr(b.zzny, 1, 4)                   ");
			sqlBF.append("   from si3u.per_move a, si3u.aged_pay_his b                         ");
			sqlBF.append("  where a.ryid = b.ryid                                              ");
			sqlBF.append("    and a.zyfx = '0'                                                 ");
			sqlBF.append("    and a.blwjbz = '1'                                               ");
			sqlBF.append("    and '1990' between substr(b.qsny, 1, 4) and substr(b.zzny, 1, 4) ");
			sqlBF.append("    and a.ryid = ?			                                       ");
			
			this.sql.setSql(sqlBF.toString());
			this.sql.setString(1, ryid);
			dsTemp = this.sql.executeQuery();
			if (dsTemp.rowCount() > 0) {
				tcwzrbz = "1";
			}
			ryxx.put(i, "tcwzrbz", tcwzrbz);
			// 取机关事业工作经历
			String jgsygzbs = SiTools.getPerNatlCmpl(ryid, "JGSYGZBS", "0");
			ryxx.put(i, "jgsygzbs", jgsygzbs);
			// 固定名单中单位先默认为否
			ryxx.put(i, "sfgdmdzdw", "0");
			//取视同缴费月数
			double stjfnx = Double.valueOf(SiTools.getPerNatlCmpl(ryid, "STJFNX", "0"));
			int stjfys = (int) MathUtil.round(stjfnx * 12, 0);
			ryxx.put(i, "stjfys", stjfys);
			if("1".equals(scbz)){
				ryxx.put(i, "sfsctxspb", "1");
			}else{
				ryxx.put(i, "sfsctxspb", "0");
			}
			
			shzt = "";
			if("0".equals(scbz) && "1".equals(sqbscyw)){
				shzt = "0";
			}else{
				shzt = "0";
				this.sql.setSql(" select bcxmz from si3u.per_natl_cmpl where bcxmbh = 'SQBSCLCBH' and  ryid = ?  ");
				this.sql.setString(1, ryid);
				dsTemp = this.sql.executeQuery();
				//补充信息为空，查询一下是否存在网上申报信息
				if(dsTemp.rowCount() <= 0 ){
					this.sql.setSql(" select a.piid bcxmz from sicp3uws.adtxdyhd a,bpzone.pi_hi_view b where a.ryid = ? and a.piid = b.piid and b.pdid like 'B_adQytxsqbsc_wssb%' and b.zfbz = '0'  order by a.slsj desc");//增加限定办理业务.mod.zcc.2020.01.02
					this.sql.setString(1, ryid);
					dsTemp = this.sql.executeQuery();
				}
				if(dsTemp.rowCount() > 0 && "1".equals(sqbscyw)){
					piid = dsTemp.getString(0, "bcxmz");
					ryxx.put(i, "piid", piid);
					if (piid != null && !"".equals(piid)) {
						this.sql.setSql(" select dyhsr, dyfhr from sicp3uws.adtxdyhd where piid = ? ");
						this.sql.setString(1, piid);
						dsTemp = this.sql.executeQuery();
						if(dsTemp.rowCount() >0){
							dyhsr = dsTemp.getString(0, "dyhsr");
							dyfhr = dsTemp.getString(0, "dyfhr");
							if(dyhsr == null || "".equals(dyhsr)){
								shzt = "1";
							}
							if(dyhsr != null && !"".equals(dyhsr) && (dyfhr == null || "".equals(dyfhr))){
								shzt = "2";
								//查询是否存在在办流程，判断审核状态（初审点击计算待遇时，存在dyhsr）.mod.zcc.20200116
								this.sql.setSql(" select 1 from activiti.act_ru_task where proc_inst_id_ = ? and task_def_key_ like '%AdTxdyhdQyTxdyhs%' ");
								this.sql.setString(1, piid);
								DataStore dsTrue =this.sql.executeQuery();
								if(dsTrue.rowCount() > 0){
									shzt = "1";
								}
							}
							if(dyfhr != null && !"".equals(dyfhr)){
								shzt = "3";
							}
						}
					}
					//不存在per_info,即未上传（更正流程开启但未上传）.mod.zcc.20191210
					this.sql.setSql(" select '1' from ad3u.per_info where ryid = ?");
					this.sql.setString(1, ryid);
					dsTemp = this.sql.executeQuery();
					if (dsTemp.rowCount() <= 0) {
						shzt = "0";
					}
				} else if (dsTemp.rowCount() <= 0 && "1".equals(sqbscyw)) {
					this.sql.setSql(" select '1' from ad3u.per_info where ryid = ?");// 存在perInfo则认为已经复审（老数据）
					this.sql.setString(1, ryid);
					dsTemp = this.sql.executeQuery();
					if (dsTemp.rowCount() > 0) {
						shzt = "3";
					}
				} else if ("0".equals(sqbscyw)
						&& usertask != null
						&& "ut.adQyyldysqOutNet.1.UserTask_05i5hgc.zjcqr,ut.adQyyldysq.2.UserTask_05i5hgc.zjcqr".indexOf(usertask) >= 0) {
					shzt = "4";
				} else {
					shzt = "5";
				}
			}
			
			
			ryxx.put(i, "shzt", shzt);
			
		}
		DataObject rdo = new DataObject();
		rdo.put("ryinfo", ryxx);
		return rdo;
	}
}
